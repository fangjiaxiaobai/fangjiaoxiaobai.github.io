{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2022/07/17/k8s/how-to-build/",
            "url": "https://fangjiaxiaobai.github.io/2022/07/17/k8s/how-to-build/",
            "title": "k8s-搭建K8s集群",
            "date_published": "2022-07-17T10:18:00.000Z",
            "content_html": "<p>使用  <code>kubeadm 1.24.3</code>  搭建  <code>k8s</code>  集群</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p><code>Centos8</code>  三台.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-master-01 192.168.0.10</span><br><span class=\"line\">k8s-node-01   192.168.0.20</span><br><span class=\"line\">k8s-node-02   192.168.0.21</span><br></pre></td></tr></table></figure>\n<p>注意，这三台机器不要做任何配置，尤其不要安装  <code>docker</code> , 因为从 <code>k8s</code>   <code>1.20.x</code>  开始，  <code>kubernetes</code>  弃用了  <code>dockershim</code> , 在  <code>1.20.4</code>  正式移除了  <code>dockershim</code> .</p>\n<blockquote>\n<p>Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called “dockershim” which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community.</p>\n</blockquote>\n<p>原文地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9ibG9iL21hc3Rlci9DSEFOR0VMT0cvQ0hBTkdFTE9HLTEuMjAubWQjZGVwcmVjYXRpb24=\">kubernetes 1.20 变更日志</span></p>\n<p>但是  <code>kubernetes</code>  是支持符合为  <code>Kubernetes</code>  创建的容器运行接口  <code>Container Runtime Interface (CRI)</code>  的运行时。  <code>Docker</code>  构建的镜像，将在你的集群的所有运行时中继续工作，一如既往。</p>\n<h3 id=\"设置系统主机名以及host文件的相互解析\"><a class=\"markdownIt-Anchor\" href=\"#设置系统主机名以及host文件的相互解析\">#</a> 设置系统主机名以及 host 文件的相互解析</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname k8s-master-01</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\">#</a> 安装依赖包</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y chony <span class=\"comment\"># 配置时间同步</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭防火墙\"><a class=\"markdownIt-Anchor\" href=\"#关闭防火墙\">#</a> 关闭防火墙</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭selinux\"><a class=\"markdownIt-Anchor\" href=\"#关闭selinux\">#</a> 关闭 <code>SELinux</code></h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a &amp;&amp; sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br><span class=\"line\">setenforce 0 &amp;&amp; sed -i <span class=\"string\">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整内核参数\"><a class=\"markdownIt-Anchor\" href=\"#调整内核参数\">#</a> 调整内核参数</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kubernetes.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_recycle=0</span></span><br><span class=\"line\"><span class=\"string\">vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class=\"line\"><span class=\"string\">vm.overcommit</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">memory=1 # 不检查物理内存是否够用</span></span><br><span class=\"line\"><span class=\"string\">vm.panic_on_oom=0 # 开启 OOM</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_instances=8192</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_watches=1048576</span></span><br><span class=\"line\"><span class=\"string\">fs.file-max=52706963</span></span><br><span class=\"line\"><span class=\"string\">fs.nr</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">open=52706963</span></span><br><span class=\"line\"><span class=\"string\">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">conntrack</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">max=2310720</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">cp kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整系统时区\"><a class=\"markdownIt-Anchor\" href=\"#调整系统时区\">#</a> 调整系统时区</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置系统时区为 中国/上海</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"comment\"># 将当前的 UTC 时间写入硬件时钟</span></span><br><span class=\"line\">timedatectl set-local-rtc 0</span><br><span class=\"line\"><span class=\"comment\"># 重启依赖于系统时间的服务</span></span><br><span class=\"line\">systemctl restart rsyslog</span><br><span class=\"line\">systemctl restart crond</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭系统不需要服务\"><a class=\"markdownIt-Anchor\" href=\"#关闭系统不需要服务\">#</a> 关闭系统不需要服务</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop postfix &amp;&amp; systemctl <span class=\"built_in\">disable</span> postfix</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置-rsyslogd-和-systemd-journald\"><a class=\"markdownIt-Anchor\" href=\"#设置-rsyslogd-和-systemd-journald\">#</a> 设置 rsyslogd 和 systemd journald</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/<span class=\"built_in\">log</span>/journal <span class=\"comment\"># 持久化保存日志的目录</span></span><br><span class=\"line\">mkdir /etc/systemd/journald.conf.d</span><br><span class=\"line\">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Journal]</span></span><br><span class=\"line\"><span class=\"string\"># 持久化保存到磁盘</span></span><br><span class=\"line\"><span class=\"string\">Storage=persistent</span></span><br><span class=\"line\"><span class=\"string\"># 压缩历史日志</span></span><br><span class=\"line\"><span class=\"string\">Compress=yes</span></span><br><span class=\"line\"><span class=\"string\">SyncIntervalSec=5m</span></span><br><span class=\"line\"><span class=\"string\">RateLimitInterval=30s</span></span><br><span class=\"line\"><span class=\"string\">RateLimitBurst=1000</span></span><br><span class=\"line\"><span class=\"string\"># 最大占用空间 10G</span></span><br><span class=\"line\"><span class=\"string\">SystemMaxUse=10G</span></span><br><span class=\"line\"><span class=\"string\"># 单日志文件最大 200M</span></span><br><span class=\"line\"><span class=\"string\">SystemMaxFileSize=200M</span></span><br><span class=\"line\"><span class=\"string\"># 日志保存时间 2 周</span></span><br><span class=\"line\"><span class=\"string\">MaxRetentionSec=2week</span></span><br><span class=\"line\"><span class=\"string\"># 不将日志转发到 syslog</span></span><br><span class=\"line\"><span class=\"string\">ForwardToSyslog=no</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-containerd\"><a class=\"markdownIt-Anchor\" href=\"#安装-containerd\">#</a> 安装  <code>containerd</code></h3>\n<h4 id=\"创建etcmodules-loaddcontainerdconf配置文件\"><a class=\"markdownIt-Anchor\" href=\"#创建etcmodules-loaddcontainerdconf配置文件\">#</a> 创建 <code>/etc/modules-load.d/containerd.conf</code>  配置文件:</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/modules-load.d/containerd.conf</span></span><br><span class=\"line\"><span class=\"string\">overlay</span></span><br><span class=\"line\"><span class=\"string\">br_netfilter</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>执行下面的命令，使其生效</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modprobe overlay</span><br><span class=\"line\">modprobe br_netfilter</span><br></pre></td></tr></table></figure>\n<p>创建 <code>/etc/sysctl.d/99-kubernetes-cri.conf</code>  配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward = 1</span></span><br><span class=\"line\"><span class=\"string\">user.max_user_namespaces=28633</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>执行以下命令使配置生效:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭-swap\"><a class=\"markdownIt-Anchor\" href=\"#关闭-swap\">#</a> 关闭  <code>swap</code></h3>\n<p>Kubernetes 1.8 开始要求关闭系统的 Swap，如果不关闭，默认配置下 kubelet 将无法启动。 关闭系统的 Swap 方法如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br></pre></td></tr></table></figure>\n<p>修改  <code>/etc/fstab</code>  文件，注释掉  <code>SWAP</code>  的自动挂载，使用 <code>free -m</code>  确认 <code>swap</code>  已经关闭。</p>\n<p><code>swappiness</code>  参数调整，修改 <code>/etc/sysctl.d/99-kubernetes-cri.conf</code>  添加下面一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.swappiness=0</span><br></pre></td></tr></table></figure>\n<p>执行 <code>sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</code>  使修改生效。</p>\n<h4 id=\"安装-containerd-2\"><a class=\"markdownIt-Anchor\" href=\"#安装-containerd-2\">#</a> 安装  <code>containerd</code></h4>\n<p>在各个服务器节点上安装容器运行时  <code>Containerd</code>  。</p>\n<p>下载  <code>Containerd</code>  的二进制包:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/containerd/containerd/releases/download/v1.6.4/cri-containerd-cni-1.6.4-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf cri-containerd-cni-1.6.4-linux-amd64.tar.gz -C /</span><br></pre></td></tr></table></figure>\n<p>生成  <code>containerd</code>  的配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>修改前面生成的配置文件  <code>/etc/containerd/config.toml</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  [plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class=\"line\">    SystemdCgroup = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>再修改 /etc/containerd/config.toml 中的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\"># sandbox_image = &quot;k8s.gcr.io/pause:3.6&quot;</span></span><br><span class=\"line\">  sandbox_image = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.7&quot;</span></span><br></pre></td></tr></table></figure>\n<p>配置  <code>containerd</code>  开机启动，并启动  <code>containerd</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> containerd --now</span><br></pre></td></tr></table></figure>\n<p>使用 <code>crictl</code>  测试一下，确保可以打印出版本信息并且没有错误信息输出:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl version</span><br></pre></td></tr></table></figure>\n<p>如下输出:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version:  0.1.0</span><br><span class=\"line\">RuntimeName:  containerd</span><br><span class=\"line\">RuntimeVersion:  v1.6.4</span><br><span class=\"line\">RuntimeApiVersion:  v1alpha2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置服务器支持开启ipvs\"><a class=\"markdownIt-Anchor\" href=\"#配置服务器支持开启ipvs\">#</a> 配置服务器支持开启 ipvs</h3>\n<p>执行下面的脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_rr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_wrr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_sh</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- nf_conntrack</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure>\n<p>上面脚本创建了的 <code>/etc/sysconfig/modules/ipvs.modules</code>  文件，保证在节点重启后能自动加载所需模块。 使用 <code>lsmod | grep -e ip_vs -e nf_conntrack</code>  命令查看是否已经正确加载所需的内核模块。</p>\n<p>接下来，就可以使用  <code>kubeadm</code>  部署  <code>k8s</code>  集群了。</p>\n<h2 id=\"安装k8s集群\"><a class=\"markdownIt-Anchor\" href=\"#安装k8s集群\">#</a> 安装 k8s 集群</h2>\n<p>安装  <code>k8s</code>  集群有很多种方式，这里使用  <code>kubeadm</code>  安装</p>\n<h3 id=\"安装kubeadm\"><a class=\"markdownIt-Anchor\" href=\"#安装kubeadm\">#</a> 安装 kubeadm</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-kubeadm-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置-kubeadm-配置文件\">#</a> 配置  <code>kubeadm</code>  配置文件</h3>\n<p>配置  <code>kubeadm</code>  的配置文件.  <code>touch kubeadm-config.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.96</span><span class=\"number\">.151</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">unix:///run/containerd/containerd.sock</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">effect:</span> <span class=\"string\">PreferNoSchedule</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"string\">v1.24.0</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">registry.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"number\">10.244</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">cgroupDriver:</span> <span class=\"string\">systemd</span></span><br><span class=\"line\"><span class=\"attr\">failSwapOn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">ipvs</span></span><br></pre></td></tr></table></figure>\n<p>这里定制了 <code>imageRepository</code>  为阿里云的 <code>registry</code> ，避免因 gcr 被墙，无法直接拉取镜像。 <code>criSocket</code>  设置了容器运行时为 <code>containerd</code> 。 同时设置 <code>kubelet</code>  的 <code>cgroupDriver</code>  为 <code>systemd</code> ，设置 <code>kube-proxy</code>  代理模式为 <code>ipvs</code> 。</p>\n<p>可以通过  <code>kubeadm config print init-defaults --component-configs KubeletConfiguration</code>  可以打印集群初始化默认的使用的配置.</p>\n<p>在开始初始化集群之前可以使用 <code>kubeadm config images pull --config kubeadm-config.yaml</code>  预先在各个服务器节点上拉取所 <code>k8s</code>  需要的容器镜像。</p>\n<h3 id=\"初始化-k8s-master节点\"><a class=\"markdownIt-Anchor\" href=\"#初始化-k8s-master节点\">#</a> 初始化  <code>k8s</code>   <code>master</code>  节点</h3>\n<p>在  <code>master</code>  节点上执行  <code>kubeadm init --config kubeadm-config.yaml</code> ,</p>\n<p>看到最后有打印：  <code>Your Kubernetes control-plane has initialized successfully!</code></p>\n<p>就说明执行成功了。</p>\n<p>然后还有提示:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 192.168.0.10:6443 --token e0nvot.l8sgzcgl07d5baq6 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:d07d9a5b919c23177881134e3ccf90e26fcb173133b8f6172cbf3d74f3c6a75d</span><br></pre></td></tr></table></figure>\n<p>所以，我们按照提示执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<p>然后再 两台 <code>node</code>  节点上执行 如下命令来加入到集群中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.0.10:6443 --token e0nvot.l8sgzcgl07d5baq6 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:d07d9a5b919c23177881134e3ccf90e26fcb173133b8f6172cbf3d74f3c6a75d</span><br></pre></td></tr></table></figure>\n<p>查看一下集群状态，确认个组件都处于 <code>healthy</code>  状态，是否有错误:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated <span class=\"keyword\">in</span> v1.19+</span><br><span class=\"line\">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class=\"line\">scheduler            Healthy   ok</span><br><span class=\"line\">controller-manager   Healthy   ok</span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>,<span class=\"string\">&quot;reason&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>集群初始化如果遇到问题，可以使用 kubeadm reset 命令进行清理.</p>\n<p>这样 <code>k8s</code>  集群就部署完成了。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/ml/qrcode.jpg\" alt=\"qrcode\"></p>\n",
            "tags": [
                "k8s",
                "kubernates"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/07/09/rocketMQ/3-08-save-msg-detail/",
            "url": "https://fangjiaxiaobai.github.io/2022/07/09/rocketMQ/3-08-save-msg-detail/",
            "title": "RocketMQ 消息刷盘过程详解",
            "date_published": "2022-07-09T10:18:00.000Z",
            "content_html": "<p>在 <a href=\"/2022/07/09/rocketMQ/3-08-save-msg-detail/s\">RocketMQ 架构设计之消息</a> 这篇文章中，我们学习了 消息发送到消费 的整体流程。这篇文章，我们一起来看看  <code>MappedFile</code>  的实现细节.</p>\n<h2 id=\"引言\"><a class=\"markdownIt-Anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>我们都知道的是  <code>RocketMQ消</code> 息都是持久化到磁盘上的，消息的读取和写入也都是会从磁盘上进行 <code>IO</code>  的。可是磁盘的性能不禁另 CPU 啧啧撇嘴。 <code>RocketMQ</code>  是如何实现消息的高性能 <code>IO</code>  的呢？</p>\n<p>答案就是  <code>MappedFile</code>  这个  <code>643</code>  行的 <code>java</code>  文件中。</p>\n<h2 id=\"rokcetmq-的-mappedfile\"><a class=\"markdownIt-Anchor\" href=\"#rokcetmq-的-mappedfile\">#</a>  <code>RokcetMQ</code>  的  <code>MappedFile</code></h2>\n<p>我们知道的是  <code>MappedFile</code>  是  <code>RocketMQ</code>  真实消息文件在内存中的映射。主要是通过  <code>java NIO</code>  技术来实现。</p>\n<p>我们还是从源码入手，按照  <code>MappedFile</code>  的初始化，提交消息 (消息写入物理内存)，刷盘 的顺序去学习。</p>\n<h2 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>在  <code>Broker</code>  的初始化过程中， <code>Broker</code>  通过  <code>AllocateMappedFileService</code>  完成了  <code>MappedFile</code>  的 初始化过程。其主要的实现就是在  <code>mmapOperation</code>  方法中。主要的职责有: 1、创建  <code>MappedFile</code>  实例  2、对 <code>MappedFile</code>  进行预热。</p>\n<h3 id=\"创建-mappedfile实例\"><a class=\"markdownIt-Anchor\" href=\"#创建-mappedfile实例\">#</a> 创建  <code>MappedFile</code>  实例</h3>\n<p>根据 消息的刷盘方式 初始化  <code>MappedFile</code>  实例的不同的字段。 如下图。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-01.png\" alt=\"\"></p>\n<h3 id=\"预热-mappedfile\"><a class=\"markdownIt-Anchor\" href=\"#预热-mappedfile\">#</a> 预热  <code>MappedFile</code></h3>\n<p><code>MappedFile</code>  预热的条件：实际的消息文件大小超过配置的大小 (默认 <code>1G</code> ) 并且 配置允许 <code>MappedFile</code>  预热。<br>\n <code>MappedFile</code>  预热的作用是：将 存在在磁盘上的消息预先加载到页缓存中 ( <code>Page Cache</code> ), 这也就是所谓的预热，省去了现用现加载的时间。</p>\n<p>预热的主要代码，我贴在下面</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-03.png\" alt=\"\"></p>\n<p>注意看下注释的内容。乍一看好像没有什么奇怪。</p>\n<p>我先补充一下关于操作系统中存储的小知识点:</p>\n<h4 id=\"页\"><a class=\"markdownIt-Anchor\" href=\"#页\">#</a> 页</h4>\n<p>页是操作系统虚拟内存中空间划分的单位。是逻辑地址空间顺序等分而成的一段逻辑空间，并依次连续编号。页的大小一般为 <code>512B~8KB</code> 。</p>\n<h4 id=\"页缓存page-cache\"><a class=\"markdownIt-Anchor\" href=\"#页缓存page-cache\">#</a> 页缓存 (Page Cache)</h4>\n<p>为了提升对文件的读写效率， <code>Linux</code>  内核会以页大小（ <code>4KB</code> ）为单位，将文件划分为多数据块。当用户对文件中的某个数据块进行读写操作时，内核首先会申请一个内存页（称为 页缓存）与文件中的数据块进行绑定。在 <code>Linux</code>  系统中写入数据的时候并不会直接写到硬盘上，而是会先写到 <code>Page Cache</code>  中，并打上 <code>dirty</code>  标识，由内核线程 <code>flusher</code>  定期将被打上 <code>dirty</code>  的页发送给 <code>IO</code>  调度层，最后由 <code>IO</code>  调度决定何时落地到磁盘中，而 <code>Linux</code>  一般会把还没有使用的内存全拿来给 <code>Page Cache</code>  使用。而读的过程也是类似，会先到 <code>Page Cache</code>  中寻找是否有数据，有的话直接返回，如果没有才会到磁盘中去读取并写入 <code>Page Cache</code>  然后再次读取 <code>Page Cache</code>  并返回。而且读的这个过程中操作系统也会有一个预读的操作，你的每一次读取操作系统都会帮你预读出后面一部分数据，而且当你一直在使用预读数据的时候，系统会帮你预读出更多的数据 (最大到 <code>128K</code> )。</p>\n<p><code>page cache</code>  的作用主要是将磁盘中文件缓存到内存，并集中管理，便于回收利用。</p>\n<p>了解了 页和页缓存 之后，就应该可以知道了  <code>RocketMQ</code>  为什么会在  <code>MappedByteBuffer</code>  的每个  <code>pageSize</code>  大小的位置 (也就是一个页) 写入一个 <code>0</code>  了。其实就是 把磁盘上的数据写到  <code>PageCache</code>  中，也就达到预热的效果。</p>\n<p>还有一个   <code>mlock</code>  方法，这个方法的作用是什么呢？</p>\n<p>该方法主要是实现文件预热后，防止把预热过的文件被操作系统调到 <code>swap</code>  空间中。当程序再次读取交换出去的数据的时候会产生缺页异常。 这里也有一个关于操作系统的知识点.</p>\n<h4 id=\"page-fault\"><a class=\"markdownIt-Anchor\" href=\"#page-fault\">#</a> Page Fault</h4>\n<p><code>CPU</code>  通过地址总线可以访问连接在地址总线上的所有外设，包括物理内存、 <code>IO</code>  设备等等，但从 <code>CPU</code>  发出的访问地址并非是这些外设在地址总线上的物理地址，而是一个虚拟地址，由内存管理单元 ( <code>MMU</code> ) 将虚拟地址转换成物理地址再从地址总线上发出，内存管理单元上的这种虚拟地址和物理地址的转换关系是需要创建的，并且内存管理单元还可以设置这个物理页是否可以进行写操作，当没有创建一个虚拟地址到物理地址的映射，或者创建了这样的映射但那个物理页不可写的时候，内存管理单元将会通知 <code>CPU</code>  产生了一个缺页异常。产生了  <code>Page Fault</code>  之后会交给 <code>PageFaultHandler</code>  处理，这里不详细介绍了。导致用户进程产生异常，无法正常工作。</p>\n<p>而 <b> <code>mlock</code>  就是为了阻止出现  <code>pageFault</code>  异常</b></p>\n<h4 id=\"内存管理机制页框回收机制\"><a class=\"markdownIt-Anchor\" href=\"#内存管理机制页框回收机制\">#</a> 内存管理机制：页框回收机制</h4>\n<p>系统中初识化了很多页缓存，但是这些页长时间没有使用， <code>linux</code>  会有一个 页框的回收机制，将  <code>page cache</code>  中数据标识 “可回收”。 在回收之前，操作系统就会把  <code>Page cache</code>  中的内容复制到  <code>swap cache</code>  中 (这个操作也叫做  <code>swap out</code> ), 如果进程要访问 当前页的时候，就会出现  <code>page Fault</code> . 然后 根据  <code>swap cache</code>  内存地址把内存拷贝到新的  <code>PageCache</code>  中 (这个操作叫做  <code>swap in</code> ).</p>\n<h3 id=\"总结预热mappedfile\"><a class=\"markdownIt-Anchor\" href=\"#总结预热mappedfile\">#</a> 总结：预热 <code>MappedFile</code></h3>\n<p>预热时已经已经建立了  <code>MappedByteBuffer</code>  和物理内存的地址映射，但是还没有把消息加载进内存，所谓的预热是为了把消息读取到操作系统的物理内存中。并且使用  <code>mlock</code>  把锁定内存，防止消息被操作系统回收。</p>\n<h2 id=\"消息写入物理内存\"><a class=\"markdownIt-Anchor\" href=\"#消息写入物理内存\">#</a> 消息写入物理内存</h2>\n<p>这篇文章<a href=\"./2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF.md\">《RocketMQ 架构设计之消息》</a>我们介绍了消息写入的大致过程:  <code>Broker</code>  的  <code>Netty Server</code>  接收到  <code>Producer</code>  发送来的消息，通过  <code>SendMessageProcessor</code>  进行处理，然后  <code>DefaultMessageStore</code>  把消息交给  <code>CommitLog</code>  进行写消息和刷盘.</p>\n<p>我们都知道的是  <code>CommitLog</code>  表示的是  <code>RocketMQ</code>  的消息文件。它提供了写入消息和读取消息的功能。我们就从  <code>CommitLog</code> . <code>asyncPutMessage</code>  来看消息的写入过程。</p>\n<p><code>asyncPutMessage</code>  这个方法 实现了两个功能:</p>\n<ul>\n<li>通过  <code>ByteBuffer</code>  写入消息。</li>\n<li>提交刷盘请求。</li>\n</ul>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-04.png\" alt=\"\"></p>\n<p>上图源码中可以看到  <code>CommitLog</code>  调用了  <code>MappedFile</code>  把消息写入文件，真实去写入者是  <code>ByteBuffer.put()</code>  方法把消息写到了物理内存中.</p>\n<p>注意，这个 <code>ByteBuffer</code>  非常的有意思.</p>\n<p>当 刷盘方式是 同步刷盘的时候，使用的是： <code>this.mappedByteBuffer.slice()</code>  , 这个  <code>mappedByteBuffer</code>  对象是有 <code>FileChannel.map()</code>  方法生成。<br>\n当刷盘方式是 异步刷盘的时候，则是使用  <code>DirectByteBuffer </code> 进行写入的。</p>\n<p>这两者有什么区别呢？本质上其实没有什么区别！！</p>\n<p><code>FileChannel.map()</code>  出来的  <code>MappedByteBuffer</code>  类型是一个抽象类，本质上还是通过  <code>DirectByteBuffer</code>  进行构建出来的。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-05.png\" alt=\"\"></p>\n<p>这样， <code>RocketMQ</code>  就把消息写入到了物理内存中.</p>\n<p>什么时候把消息写到磁盘上的呢？</p>\n<p>我们读写的数据都是从  <code>pageCache</code>  中读写的，并不会直接读写磁盘。</p>\n<p>操作系统中提供了两种方式来实现  <code>pageCache</code>  和 磁盘的数据一致性。</p>\n<ul>\n<li><code>Write Through</code> （写穿）：向用户层提供特定接口，应用程序可主动调用接口来保证文件一致性；</li>\n<li><code>Write back</code> （写回）：系统中存在定期任务（表现形式为内核线程），周期性地同步文件系统中文件脏数据块，这是默认的  <code>Linux</code>  一致性方案.</li>\n<li></li>\n</ul>\n<p>所以，我们接下来看  <code>RocketMQ</code>  是如何确保消息落盘的。</p>\n<h2 id=\"消息刷盘\"><a class=\"markdownIt-Anchor\" href=\"#消息刷盘\">#</a> 消息刷盘</h2>\n<p><code>RocketMQ</code>  有三种刷盘方式。两种刷盘的实现。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-06.png\" alt=\"\"></p>\n<p>分别是  <code>GroupCommitService</code>  (同步刷盘),  <code>FlushRealTimeService</code>  (异步刷盘),  <code>CommitRealTimeService</code>  (异步刷盘 + 缓冲区). 这三个类有一个共同的父类:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-07.png\" alt=\"\"></p>\n<p>我们详细的去看一下同步刷盘的过程。因为异步刷盘和同步刷盘的 <code>flush</code>  过程是一样的.</p>\n<h3 id=\"同步刷盘\"><a class=\"markdownIt-Anchor\" href=\"#同步刷盘\">#</a> 同步刷盘</h3>\n<p>在消息启动的时候，如果配置了 使用同步刷盘方式的话， <code>Broker</code>  会启动  <code>GroupCommitService</code>  和  <code>CommitRealTimeService</code>  (这个是异步刷盘并且配置内存池的时候使用的刷盘方式，不管配置什么方式的时候都会创建，在启用 <code>isTransientStorePoolEnable</code>  的时候才会  <code>start()</code>  ).</p>\n<p><code>GroupCommitService</code>  在启动之后，会每  <code>10ms</code>  执行一次刷盘操作。</p>\n<p>我们从  <code>CommitLog</code>  添加完消息提交刷盘请求开始，详细分析整个过程.</p>\n<p>如下图。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-08.png\" alt=\"\"></p>\n<p><code>CommitLog</code>  提交一个 刷盘请求，这时根据配置 是否等待消息写入完成 来执行刷盘操作.</p>\n<ul>\n<li>如果不等待消息写入完成，则唤醒  <code>GroupCommitService</code> , 直接返回写入成功，这时 线程是否执行是由 <code>JVM</code>  决定的，所以并不确定线程立刻就执行了。</li>\n<li>如果等待消息写入完成，即第二步，则会放入一个  <code>GroupCommitRequest</code>  同步刷盘请求。实际上是把 这个  <code>Request</code>  放到  <code>GroupCommitService</code>  的  <code>LinkedList</code>  中，为了线程安全和提高效率，使用了两个  <code>LinkedList</code> , 分别是  <code>write</code>  和  <code>read</code> . 当执行刷盘操作的时候，会将  <code>write</code>  和  <code>read</code>  互换。每次都会读取  <code>read</code>  队列中的  <code>Request</code>  进行刷盘。这一步是在  <code>waitForRunning</code>  方法中执行的，见如图第 <code>5-7</code>  步。<br>\n接下来就是刷盘操作了，调用  <code>mappedFileQueue.flush(0)</code>  操作完成刷盘动作。然后，返回  <code>CompleteFuture</code>  如图中第 9 步。 当需要等待消息写入完成的时候， <code>CommitLog</code>  添加消息是在一直等待的。如下图.</li>\n</ul>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-09.png\" alt=\"\"></p>\n<p>那接下来，我就详细的来看下  <code>mappedFileQueue</code>  其实是  <code>MappedFile</code>  的刷盘过程.</p>\n<h4 id=\"mappedfilequeueflush\"><a class=\"markdownIt-Anchor\" href=\"#mappedfilequeueflush\">#</a> MappedFileQueue.flush</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 刷盘</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> flushLeastPages 最后一页</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">flush</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flushLeastPages)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// flushWhere. 应该刷新数据end的位置。</span></span><br><span class=\"line\">    MappedFile mappedFile = <span class=\"keyword\">this</span>.findMappedFileByOffset(<span class=\"keyword\">this</span>.flushedWhere, <span class=\"keyword\">this</span>.flushedWhere == <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mappedFile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> tmpTimeStamp = mappedFile.getStoreTimestamp();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 MappedFile 进行刷盘。返回 MappedFile 中 已被刷新到磁盘的数据的偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> offset = mappedFile.flush(flushLeastPages);</span><br><span class=\"line\">        <span class=\"comment\">// 在整个MappedFileQueue中的偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> where = mappedFile.getFileFromOffset() + offset;</span><br><span class=\"line\">        result = where == <span class=\"keyword\">this</span>.flushedWhere;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flushedWhere = where;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == flushLeastPages) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 刷新之前，最新一条消息的存储时间戳</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.storeTimestamp = tmpTimeStamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取到当前需要写入的 <code>MappedFile</code> . 然后通过 <code>MappedFile</code>  写入 &quot;磁盘&quot;。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷盘。 把写入MappedFile 的数据，写入磁盘。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The current flushed position</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">flush</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flushLeastPages)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isAbleToFlush(flushLeastPages)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hold()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> value = getReadPosition();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 只有在异步刷盘+缓存区方式的时候，才初始化 writeBuffter</span></span><br><span class=\"line\">                    <span class=\"comment\">//We only append data to fileChannel or mappedByteBuffer, never both.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (writeBuffer != <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.fileChannel.position() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.fileChannel.force(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 不管什么刷盘方式，都会初始化mappedByteBuffer.</span></span><br><span class=\"line\">                        <span class=\"comment\">// 同步刷盘和异步刷盘方式都是使用 mappedByteBuffer 进行刷盘</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.mappedByteBuffer.force();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;Error occurred when force data to disk.&quot;</span>, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.flushedPosition.set(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.release();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;in flush, hold failed, flush offset = &quot;</span> + <span class=\"keyword\">this</span>.flushedPosition.get());</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.flushedPosition.set(getReadPosition());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getFlushedPosition();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步刷盘\"><a class=\"markdownIt-Anchor\" href=\"#异步刷盘\">#</a> 异步刷盘</h3>\n<p>看完同步刷盘的流程之后，异步刷盘就简单很多了。<br>\n异步刷盘仍然是使用  <code>mappedFileQueue.flush()</code>  进行刷盘的</p>\n<p>实现逻辑如下图 (代码有精简):</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-10.png\" alt=\"\"></p>\n<p>可以看到，异步刷盘的线程在执行的时候，会通过  <code>Thread.sleep()</code>  进行线程等待 或者 通过  <code>CountDownLatch2</code>  进行等待的。需要注意的是:  <code>CountDownLatch2</code>  是  <code>RocketMQ</code>  实现的一个类，作用同 <code>CountDownLatch</code>  一样。</p>\n<p>而且在 消息进行刷盘的时候， 只需要将  <code>FlushRealTimeService</code>  线程  <code>wakeup()</code>  就好了。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-11.png\" alt=\"\"></p>\n<p>此时的  <code>flushCommitLogService</code>  是  <code>FlushRealTimeService</code>  的实例。</p>\n<p>异步刷盘的时机:</p>\n<ul>\n<li>判断是否超过 <code>10s</code>  没有刷盘了，如果超过则强制刷盘。</li>\n<li>等待 <code>flush</code>  间隔，默认 <code>500ms</code></li>\n<li>通过 <code>MappedFile</code>  刷盘</li>\n<li>超过 <code>500ms</code>  的刷盘日志</li>\n<li><code>Broker</code>  正常挺值钱，把内存 <code>page</code>  中的数据刷盘。</li>\n</ul>\n<p>和同步刷盘相比，异步刷盘提高了 <code>IO</code>  性能。</p>\n<h3 id=\"异步刷盘缓冲区\"><a class=\"markdownIt-Anchor\" href=\"#异步刷盘缓冲区\">#</a> 异步刷盘 + 缓冲区</h3>\n<p>我们先看一下执行的流程。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-12.png\" alt=\"\"></p>\n<p>然后如果是 <code>CountDownLatch2</code>  结束，执行线程的话，就会执行下面的逻辑:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-13.png\" alt=\"\"></p>\n<p>判断是否有新的数据提交， 如果有，则唤醒异步刷盘方式。没有则等待。</p>\n<p><code>waitForRunning</code>  方法的逻辑是：</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/3-08-14.png\" alt=\"\"></p>\n<p>可以看到 是通过线程等待的方式，等待时间间隔完成。</p>\n<p>开启缓冲区后的刷盘策略:</p>\n<ul>\n<li>判断是否超过 <code>200</code>  毫秒没提交，需要强制提交</li>\n<li>提交到 <code>MappedFile</code> ，此时还未刷盘</li>\n<li>然后唤醒刷盘线程</li>\n<li>在 <code>Broker</code>  正常停止前，提交内存 <code>page</code>  中的数据</li>\n</ul>\n<p><code>RocketMQ</code>  申请一块和 <code>CommitLog</code>  文件大小相同的堆外内存在做缓冲区，数据会先写入缓冲池，提交线程  <code>commitRealTimeService</code>  每隔  <code>500ms</code>  尝试提交到  <code>FileChannel</code>  中进行刷盘，最后使用  <code>FlushRealTimeService</code>  来完成。<br>\n使用了缓冲区的目的是 多条数据合并写入，提高 <code>IO</code>  性能.</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><code>RocketMQ</code>  使用  <code>FileChannel</code>  和  <code>MappedByteBuffer</code>  完成了消息的落盘。提供了三种持久化策略：</p>\n<ul>\n<li>同步刷盘：使用  <code>GroupCommitService</code>  线程，通过  <code>MappedByteBuffer</code>  的  <code>force</code>  方法将消息写入文件中，写入完成后才会返回  <code>ACK</code> .</li>\n<li>异步刷盘：消息写入  <code>pageCache</code>  之后，就立即返回  <code>ACK</code> . 使用  <code>FlushRealTimeService</code>  线程 通过  <code>FileChannel</code>  的  <code>force</code>  方法确保将消息写入文件.</li>\n<li>异步刷盘 + 开启缓冲区:  <code>RocketMQ</code>  申请一块直接内存用作数据缓冲区，消息先写入缓冲区，然后由  <code>CommitRealTimeService</code>  线程定时将缓冲区数据写入  <code>FileChannel</code>  ，再唤醒  <code>FlushRealTimeService</code>  将  <code>FileChannel</code>  缓冲区数据强制刷新到磁盘。</li>\n</ul>\n<p>回答一下文章开头的问题:<br>\n <code>RocketMQ</code>  是如何提高 数据读写的性能的呢？<br>\n <code>RocketMQ</code>  的大致做法是，将数据文件映射到 <code>OS</code>  的虚拟内存中（通过 <code>JDK</code>   <code>NIO</code>  的 <code>MappedByteBuffer</code> ），写消息的时候首先写入  <code>PageCache</code>  ，并通过异步刷盘的方式将消息批量的做持久化（同时也支持同步刷盘）；订阅消费消息时（对 <code>CommitLog</code>  操作是随机读取），由于 <code>PageCache</code>  的局部性热点原理且整体情况下还是从旧到新的有序读，因此大部分情况下消息还是可以直接从 <code>Page Cache</code> （ <code>cache hit</code> ）中读取，不会产生太多的缺页（ <code>Page Fault</code> ）中断而从磁盘读取。当然， <code>PageCache</code>  机制也不是完全无缺点的，当遇到 <code>OS</code>  进行脏页回写，内存回收，内存 <code>swap</code>  等情况时，就会引起较大的消息读写延迟。对于这些情况，  <code>RocketMQ</code>  采用了多种优化技术，比如内存预分配，文件预热，  <code>mlock</code>  系统调用等，来保证在最大可能地发挥  <code>PageCache</code>  机制优点的同时，尽可能地减少其缺点带来的消息读写延迟.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.iohttps://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/06/05/others/cat-movie/",
            "url": "https://fangjiaxiaobai.github.io/2022/06/05/others/cat-movie/",
            "title": "猫影视接口配置【不定时更新】",
            "date_published": "2022-06-05T10:18:00.000Z",
            "content_html": "<p>所有接口均为网上搜集，禁止🈲售卖，别拿别人的成果免费去赚取自己的利益。</p>\n<h2 id=\"2022-06-06\"><a class=\"markdownIt-Anchor\" href=\"#2022-06-06\">#</a> 2022-06-06</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuaXFpcS5pby9pbHZqeXcvT3BlbkdHL21hc3Rlci9kb2cuanNvbg==\">https://raw.iqiq.io/ilvjyw/OpenGG/master/dog.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZ2xibGIuY29kaW5nLm5ldC9wL2EvZC9jL2dpdC9yYXcvbWFzdGVyLzUx\">https://pglblb.coding.net/p/a/d/c/git/raw/master/51</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oazEubW9uaWthLmxvdmUvdHZiYS90L21haW4vbQ==\">https://hk1.monika.love/tvba/t/main/m</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZmFzdGdpdC5vcmcveGxjNTIwL01hb1RWL21haW4vbWFvLzIyMDUwOC5qc29u\">https://raw.fastgit.org/xlc520/MaoTV/main/mao/220508.json</span> (来源 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hsYzUyMC9NYW9UVg==\">https://github.com/xlc520/MaoTV</span>)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1oyM3NuaDhZ\">https://pastebin.com/raw/Z23snh8Y</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL3B1YnRhcmd1cw==\">http://gg.gg/pubtargus</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL211amlu\">http://gg.gg/mujin</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\"><label for=\"cbx_7\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL3hpYW9t\">http://gg.gg/xiaom</span></label></li>\n</ul>\n<h3 id=\"steve-小明复刻地址\"><a class=\"markdownIt-Anchor\" href=\"#steve-小明复刻地址\">#</a> Steve - 小明复刻地址</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\"><label for=\"cbx_8\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eGZjY21tNC5jb2RpbmcubmV0L3AvbWFvdHYvZC9tYW90di9naXQvcmF3L21hc3Rlci90ZXN0Lmpzb24=\">https://zxfccmm4.coding.net/p/maotv/d/maotv/git/raw/master/test.json</span></label></li>\n</ul>\n<h3 id=\"yangyang1957\"><a class=\"markdownIt-Anchor\" href=\"#yangyang1957\">#</a> yangyang1957</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\"><label for=\"cbx_9\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eGZjY21tNC5jb2RpbmcubmV0L3AvbWFvdHYvZC9tYW90di9naXQvcmF3L21hc3Rlci9zdGV2ZS5qc29u\">https://zxfccmm4.coding.net/p/maotv/d/maotv/git/raw/master/steve.json</span></label></li>\n</ul>\n<h3 id=\"green-配置\"><a class=\"markdownIt-Anchor\" href=\"#green-配置\">#</a> Green 配置</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\"><label for=\"cbx_10\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eGZjY21tNC5jb2RpbmcubmV0L3AvbWFvdHYvZC9tYW90di9naXQvcmF3L21hc3Rlci9ncmVlbi5qc29u\">https://zxfccmm4.coding.net/p/maotv/d/maotv/git/raw/master/green.json</span></label></li>\n</ul>\n<h3 id=\"yellow-配置\"><a class=\"markdownIt-Anchor\" href=\"#yellow-配置\">#</a> Yellow 配置</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" checked=\"true\" disabled=\"true\"><label for=\"cbx_11\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eGZjY21tNC5jb2RpbmcubmV0L3AvbWFvdHYvZC9tYW90di9naXQvcmF3L21hc3Rlci95ZWxsb3cuanNvbiVFNyU5RiVBRCVFOSU5MyVCRQ==\">https://zxfccmm4.coding.net/p/maotv/d/maotv/git/raw/master/yellow.json 短链</span></label></li>\n</ul>\n<h3 id=\"猫群接口\"><a class=\"markdownIt-Anchor\" href=\"#猫群接口\">#</a> 猫群接口</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\"><label for=\"cbx_12\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24veWVsbG93\">https://c1n.cn/yellow</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" checked=\"true\" disabled=\"true\"><label for=\"cbx_13\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL3llbGxvdzc3\">http://gg.gg/yellow77</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\"><label for=\"cbx_14\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZ2xibGIuY29kaW5nLm5ldC9wL2EvZC9jL2dpdC9yYXcvbWFzdGVyLzUx\">https://pglblb.coding.net/p/a/d/c/git/raw/master/51</span></label></li>\n</ul>\n<h3 id=\"小明接口只剩喵狸盘搜-戏曲-推送\"><a class=\"markdownIt-Anchor\" href=\"#小明接口只剩喵狸盘搜-戏曲-推送\">#</a> 小明接口 (只剩喵狸盘搜 戏曲 推送）</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" checked=\"true\" disabled=\"true\"><label for=\"cbx_15\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2xhbWludC5jb2RpbmcubmV0L3AvY29sYWNhdC9kL0NvbGFDYXQvZ2l0L3Jhdy9tYXN0ZXIvYQ==\">https://colamint.coding.net/p/colacat/d/ColaCat/git/raw/master/a</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" checked=\"true\" disabled=\"true\"><label for=\"cbx_16\"> <span class=\"exturl\" data-url=\"aHR0cDovL3htLmMxbi5jbg==\">http://xm.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" checked=\"true\" disabled=\"true\"><label for=\"cbx_17\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2NvbGFtaW50\">http://gg.gg/colamint</span></label></li>\n</ul>\n<h3 id=\"长老接口\"><a class=\"markdownIt-Anchor\" href=\"#长老接口\">#</a> 长老接口</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" checked=\"true\" disabled=\"true\"><label for=\"cbx_18\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcubml0ZTA3LmNvbS9uaXRlMDc=\">https://raw.nite07.com/nite07</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" checked=\"true\" disabled=\"true\"><label for=\"cbx_19\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW95cy5jMW4uY24=\">https://maoys.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" checked=\"true\" disabled=\"true\"><label for=\"cbx_20\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3lveW84MjUyMC9odWFpcHR2L21haW4vbWFvLmpzb24=\">https://raw.githubusercontent.com/yoyo82520/huaiptv/main/mao.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\"><label for=\"cbx_21\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vbW9hb28=\">https://c1n.cn/moaoo</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" checked=\"true\" disabled=\"true\"><label for=\"cbx_22\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2hhb21vbw==\">http://gg.gg/haomoo</span></label></li>\n</ul>\n<h3 id=\"其他接口\"><a class=\"markdownIt-Anchor\" href=\"#其他接口\">#</a> 其他接口</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" checked=\"true\" disabled=\"true\"><label for=\"cbx_23\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMS5jMW4uY24=\">https://c1.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" checked=\"true\" disabled=\"true\"><label for=\"cbx_24\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMi5jMW4uY24=\">https://c2.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" checked=\"true\" disabled=\"true\"><label for=\"cbx_25\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMy5jMW4uY24=\">https://c3.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" checked=\"true\" disabled=\"true\"><label for=\"cbx_26\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jNC5jMW4uY24=\">https://c4.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" checked=\"true\" disabled=\"true\"><label for=\"cbx_27\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jNS5jMW4uY24=\">https://c5.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_28\" checked=\"true\" disabled=\"true\"><label for=\"cbx_28\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly94bS5jMW4uY24=\">https://xm.c1n.cn</span></label></li>\n</ul>\n<h3 id=\"猫接口\"><a class=\"markdownIt-Anchor\" href=\"#猫接口\">#</a> 猫接口:</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_29\" checked=\"true\" disabled=\"true\"><label for=\"cbx_29\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaHV5dWFuLm1pYW9nb25nemkubmV0L3NodXl1YW4vMTY1MzM5NDg2OS5qc29u\">https://shuyuan.miaogongzi.net/shuyuan/1653394869.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_30\" checked=\"true\" disabled=\"true\"><label for=\"cbx_30\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaHV5dWFuLm1pYW9nb25nemkubmV0L3NodXl1YW4vMTY1MzAzMzg3NS50eHQ=\">https://shuyuan.miaogongzi.net/shuyuan/1653033875.txt</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_31\" checked=\"true\" disabled=\"true\"><label for=\"cbx_31\"> <span class=\"exturl\" data-url=\"aHR0cDovL2pzb24ubXlhaXhpeGkuY29tL210di9qay5qc29u\">http://json.myaixixi.com/mtv/jk.json</span></label></li>\n</ul>\n<p>###【猫影视 TV 最新接口】</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_32\" checked=\"true\" disabled=\"true\"><label for=\"cbx_32\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIyNDI2Ni5qc29u\">https://wds.ecsxs.com/224266.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_33\" checked=\"true\" disabled=\"true\"><label for=\"cbx_33\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMjc1Ny5qc29u\">https://wds.ecsxs.com/212757.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_34\" checked=\"true\" disabled=\"true\"><label for=\"cbx_34\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMjAxMC5qc29u\">https://wds.ecsxs.com/212010.json</span></label></li>\n</ul>\n<p>建议用上面长链接，短链接容易出问题！</p>\n<h4 id=\"短连接\"><a class=\"markdownIt-Anchor\" href=\"#短连接\">#</a> 短连接</h4>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_35\" checked=\"true\" disabled=\"true\"><label for=\"cbx_35\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ta2suYzFuLmNu\">https://mkk.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_36\" checked=\"true\" disabled=\"true\"><label for=\"cbx_36\"> <span class=\"exturl\" data-url=\"aHR0cDovL21hb3lzLmMxbi5jbg==\">http://maoys.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_37\" checked=\"true\" disabled=\"true\"><label for=\"cbx_37\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24uY2F0\">https://c1n.cn.cat</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_38\" checked=\"true\" disabled=\"true\"><label for=\"cbx_38\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZy5nZy9jYXQ2NjY=\">https://gg.gg/cat666</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_39\" checked=\"true\" disabled=\"true\"><label for=\"cbx_39\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYXRiNS5jMW4uY24=\">https://catb5.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_40\" checked=\"true\" disabled=\"true\"><label for=\"cbx_40\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2NjY3Z2dg==\">http://gg.gg/cccvvv</span></label></li>\n</ul>\n<h3 id=\"特殊\"><a class=\"markdownIt-Anchor\" href=\"#特殊\">#</a> 特殊</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_41\" checked=\"true\" disabled=\"true\"><label for=\"cbx_41\"> <span class=\"exturl\" data-url=\"aHR0cDovL2ZqMzY1Lm1sL20uanNvbg==\">http://fj365.ml/m.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_42\" checked=\"true\" disabled=\"true\"><label for=\"cbx_42\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzg4NC5qc29u\">https://wds.ecsxs.com/213884.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_43\" checked=\"true\" disabled=\"true\"><label for=\"cbx_43\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlnZXdlaXd1MTEuY29kaW5nLm5ldC9wL2MvZC9tYW8yL2dpdC9yYXcvbWFpbi9jb25mLmpzb24=\">https://zhigeweiwu11.coding.net/p/c/d/mao2/git/raw/main/conf.json</span></label></li>\n</ul>\n<h3 id=\"群资源\"><a class=\"markdownIt-Anchor\" href=\"#群资源\">#</a> 群资源</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_44\" checked=\"true\" disabled=\"true\"><label for=\"cbx_44\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzgyMS5qc29u\">https://wds.ecsxs.com/213821.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_45\" checked=\"true\" disabled=\"true\"><label for=\"cbx_45\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzY3OS5qc29u\">https://wds.ecsxs.com/213679.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_46\" checked=\"true\" disabled=\"true\"><label for=\"cbx_46\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzAxMy5qc29u\">https://wds.ecsxs.com/213013.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_47\" checked=\"true\" disabled=\"true\"><label for=\"cbx_47\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxNjUzNy5qc29u\">https://wds.ecsxs.com/216537.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_48\" checked=\"true\" disabled=\"true\"><label for=\"cbx_48\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzc2Ni50eHQ=\">https://wds.ecsxs.com/213766.txt</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_49\" checked=\"true\" disabled=\"true\"><label for=\"cbx_49\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzMxMy5qc29u\">https://wds.ecsxs.com/213313.json</span></label></li>\n</ul>\n<h3 id=\"其他接口源\"><a class=\"markdownIt-Anchor\" href=\"#其他接口源\">#</a> 其他接口源</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_50\" checked=\"true\" disabled=\"true\"><label for=\"cbx_50\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vMg==\">https://c1n.cn/2</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_51\" checked=\"true\" disabled=\"true\"><label for=\"cbx_51\"> <span class=\"exturl\" data-url=\"aHR0cDovL2Mxbi5jbi9tYW8=\">http://c1n.cn/mao</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_52\" checked=\"true\" disabled=\"true\"><label for=\"cbx_52\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2NjY3Z2dg==\">http://gg.gg/cccvvv</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_53\" checked=\"true\" disabled=\"true\"><label for=\"cbx_53\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL21hb3R2MTA=\">http://gg.gg/maotv10</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_54\" checked=\"true\" disabled=\"true\"><label for=\"cbx_54\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL21hb3R2Mjg=\">http://gg.gg/maotv28</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_55\" checked=\"true\" disabled=\"true\"><label for=\"cbx_55\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW95cy5jMW4uY24=\">https://maoys.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_56\" checked=\"true\" disabled=\"true\"><label for=\"cbx_56\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW90di5jMW4uY24=\">https://maotv.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_57\" checked=\"true\" disabled=\"true\"><label for=\"cbx_57\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMjc1Ny5qc29u\">https://wds.ecsxs.com/212757.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_58\" checked=\"true\" disabled=\"true\"><label for=\"cbx_58\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzgyMS5qc29u\">https://wds.ecsxs.com/213821.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_59\" checked=\"true\" disabled=\"true\"><label for=\"cbx_59\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzY3OS5qc29u\">https://wds.ecsxs.com/213679.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_60\" checked=\"true\" disabled=\"true\"><label for=\"cbx_60\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzc2Ni50eHQ=\">https://wds.ecsxs.com/213766.txt</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_61\" checked=\"true\" disabled=\"true\"><label for=\"cbx_61\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzAxMy5qc29u\">https://wds.ecsxs.com/213013.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_62\" checked=\"true\" disabled=\"true\"><label for=\"cbx_62\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L0dHNTF5MEpH\">https://pastebin.com/raw/GG51y0JG</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_63\" checked=\"true\" disabled=\"true\"><label for=\"cbx_63\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMjAxMC5qc29u\">https://wds.ecsxs.com/212010.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_64\" checked=\"true\" disabled=\"true\"><label for=\"cbx_64\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxMzMxMy5qc29u\">https://wds.ecsxs.com/213313.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_65\" checked=\"true\" disabled=\"true\"><label for=\"cbx_65\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxNjUzNy5qc29u\">https://wds.ecsxs.com/216537.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_66\" checked=\"true\" disabled=\"true\"><label for=\"cbx_66\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIxNjczMS5qc29u\">https://wds.ecsxs.com/216731.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_67\" checked=\"true\" disabled=\"true\"><label for=\"cbx_67\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L0Z1TXNmSld3\">https://pastebin.com/raw/FuMsfJWw</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_68\" checked=\"true\" disabled=\"true\"><label for=\"cbx_68\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L0tHUmR1QnFh\">https://pastebin.com/raw/KGRduBqa</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_69\" checked=\"true\" disabled=\"true\"><label for=\"cbx_69\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3lNTnEyNk5E\">https://pastebin.com/raw/yMNq26ND</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_70\" checked=\"true\" disabled=\"true\"><label for=\"cbx_70\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZHMuZWNzeHMuY29tLzIyMDkxMi5qc29u\">https://wds.ecsxs.com/220912.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_71\" checked=\"true\" disabled=\"true\"><label for=\"cbx_71\"> <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uaWhhb2dlZ2UuY29tL2NhdC95bC5qcw==\">http://www.nihaogege.com/cat/yl.js</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_72\" checked=\"true\" disabled=\"true\"><label for=\"cbx_72\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLndvdGlhbm5hLmNvbS9teXNqay5qc29u\">https://tool.wotianna.com/mysjk.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_73\" checked=\"true\" disabled=\"true\"><label for=\"cbx_73\"> <span class=\"exturl\" data-url=\"aHR0cDovL3BnbGJsYi50ZXN0LnVwY2RuLm5ldC9tYW8uanNvbg==\">http://pglblb.test.upcdn.net/mao.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_74\" checked=\"true\" disabled=\"true\"><label for=\"cbx_74\"> <span class=\"exturl\" data-url=\"aHR0cDovL3BnbGJsYi50ZXN0LnVwY2RuLm5ldC8yMDIyMDIxNi5qc29u\">http://pglblb.test.upcdn.net/20220216.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_75\" checked=\"true\" disabled=\"true\"><label for=\"cbx_75\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90dmFwcC5ndWlsYWlsZS5jbi93cC1jb250ZW50L3VwbG9hZHMvMjAyMS8wOC9kc2h6amsudHh0\">https://tvapp.guilaile.cn/wp-content/uploads/2021/08/dshzjk.txt</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_76\" checked=\"true\" disabled=\"true\"><label for=\"cbx_76\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlYmVyZy5vcmcvYXR0YWNobWVudHMvMzZlNzUwY2MtZTdiMC00YTE5LWE5ODUtMjJmZmNlMTY0YTJi\">https://codeberg.org/attachments/36e750cc-e7b0-4a19-a985-22ffce164a2b</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_77\" checked=\"true\" disabled=\"true\"><label for=\"cbx_77\"> <span class=\"exturl\" data-url=\"aHR0cDovLzExOC4xOTAuMjQ0LjE5NS9nZW5nZHVveml5dWFuc291d2VpeGluZ29uZ3pob25naGFvYmt0eDEyMy8wMjI2Lmpzb24=\">http://118.190.244.195/gengduoziyuansouweixingongzhonghaobktx123/0226.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_78\" checked=\"true\" disabled=\"true\"><label for=\"cbx_78\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tby14aWFvLmNvZGluZy5uZXQvcC9jL2QvYy9naXQvcmF3L21hc3Rlci9tYW95cy5qc29uP2Rvd25sb2FkPWZhbHNl\">https://mo-xiao.coding.net/p/c/d/c/git/raw/master/maoys.json?download=false</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_79\" checked=\"true\" disabled=\"true\"><label for=\"cbx_79\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd3l5MDA3Y24vdHYvcmF3L21hc3Rlci90djEuanNvbg==\">https://gitee.com/wyy007cn/tv/raw/master/tv1.json</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_80\" checked=\"true\" disabled=\"true\"><label for=\"cbx_80\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vY2F0\">https://c1n.cn/cat</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_81\" checked=\"true\" disabled=\"true\"><label for=\"cbx_81\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vbWFv\">https://c1n.cn/mao</span></label></li>\n</ul>\n<h2 id=\"2022-06-05\"><a class=\"markdownIt-Anchor\" href=\"#2022-06-05\">#</a> 2022-06-05</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_82\" checked=\"true\" disabled=\"true\"><label for=\"cbx_82\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3RXaGZrSG5r\">https://pastebin.com/raw/tWhfkHnk</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_83\" checked=\"true\" disabled=\"true\"><label for=\"cbx_83\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuaXFpcS5pby9haXJ3b29vL210L21haW4vTWEvbTIudHh0\">https://raw.iqiq.io/airwooo/mt/main/Ma/m2.txt</span></label></li>\n</ul>\n<h2 id=\"2022-04-15\"><a class=\"markdownIt-Anchor\" href=\"#2022-04-15\">#</a> 2022-04-15</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_84\" checked=\"true\" disabled=\"true\"><label for=\"cbx_84\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW90di5jMW4uY24=\">https://maotv.c1n.cn</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_85\" checked=\"true\" disabled=\"true\"><label for=\"cbx_85\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vMg==\">https://c1n.cn/2</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_86\" checked=\"true\" disabled=\"true\"><label for=\"cbx_86\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jMW4uY24vbWFv\">https://c1n.cn/mao</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_87\" checked=\"true\" disabled=\"true\"><label for=\"cbx_87\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL21hb3R2Mjg=\">http://gg.gg/maotv28</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_88\" checked=\"true\" disabled=\"true\"><label for=\"cbx_88\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2NjY3Z2dg==\">http://gg.gg/cccvvv</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_89\" checked=\"true\" disabled=\"true\"><label for=\"cbx_89\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL21hb3R2MTA=\">http://gg.gg/maotv10</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_90\" checked=\"true\" disabled=\"true\"><label for=\"cbx_90\"> <span class=\"exturl\" data-url=\"aHR0cDovL2dnLmdnL2Fqa3dhbg==\">http://gg.gg/ajkwan</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_91\" checked=\"true\" disabled=\"true\"><label for=\"cbx_91\"> <span class=\"exturl\" data-url=\"aHR0cDovL2Mxbi5jbi9jYXQ=\">http://c1n.cn/cat</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_92\" checked=\"true\" disabled=\"true\"><label for=\"cbx_92\"> <span class=\"exturl\" data-url=\"aHR0cDovL21hb3lzLmMxbi5jbg==\">http://maoys.c1n.cn</span></label></li>\n</ul>\n<h2 id=\"更早\"><a class=\"markdownIt-Anchor\" href=\"#更早\">#</a> 更早</h2>\n",
            "tags": [
                "猫影视"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/05/16/rocketMQ/3-02-reliabllity-msg/",
            "url": "https://fangjiaxiaobai.github.io/2022/05/16/rocketMQ/3-02-reliabllity-msg/",
            "title": "RocketMQ 消息可靠性实现原理",
            "date_published": "2022-05-16T10:18:00.000Z",
            "content_html": "<p>常用的绝大多数消息队列，如  <code>RocketMQ</code> 、 <code>RabbitMQ</code>  等在消息传输上都只能保证<b>至少传输成功一次 ( <code>At least once</code> )</b>, 但是<b>不能保证只传输成功一次 ( <code>Exactly once</code> )</b>, 重复发送.</p>\n<h2 id=\"生产者保证消息可靠性\"><a class=\"markdownIt-Anchor\" href=\"#生产者保证消息可靠性\">#</a> 生产者保证消息可靠性</h2>\n<h3 id=\"消息发送方式\"><a class=\"markdownIt-Anchor\" href=\"#消息发送方式\">#</a> 消息发送方式</h3>\n<p>在之前的文章<a href=\"./2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF.md\">架构设计之消息</a> 中，我们知道了 生产者生产消息有三种方式:</p>\n<ul>\n<li>同步发送。 发送线程同步等待，通过同步检查 <code>Brocker</code>  返回的状态来判断消息是否持久化成功。从而保证消息的可靠性.</li>\n<li>异步发送。 发送线程异步等待，可以通过传入的回调函数来判断消息持久化状态。根据状态来判断是否需要重试消息，从而保证消息的可靠性.</li>\n<li><code>one way</code>  方式。 这种方式不能保证消息的可靠性。发送端发送完成之后，调用该发送接口后立刻返回，并不返回发送的结果。</li>\n</ul>\n<p>除了同步发送和异步发送这两种方式来保证消息可靠性之外.</p>\n<h3 id=\"重试机制\"><a class=\"markdownIt-Anchor\" href=\"#重试机制\">#</a> 重试机制</h3>\n<p>在发送消息的过程中， <code>Producer</code>  还有 消息发送的重试机制来<b>提高消息的可靠性</b>.</p>\n<p>如果 broker 只有一个节点，则 broker 宕机了，即使 producer 有重试机制，也没用，因此利用多主模式，当某台 broker 宕机了，换一台 broker 进行投递。</p>\n<p>当发送端需要发送消息时，如果发送端中缓存了 <code>topic</code>  的路由信息，并包含了消息队列，则直接返回该路由信息，如果没有缓存或没有消息队列，则向 <code>NameServer</code>  查询该 <code>topic</code>  的路由信息，查询到路由消息之后，采用指定的队列选择策略选择相应的 <code>queue</code>  发送消息，默认是采用轮询策略，发送成功则返回，收到异常则根据相应的策略进行重试，可以根据发送端感知到的 <code>Broker</code>  的时延、上次发送失败的 <code>Broker</code>  信息和发送端配置的是否重试不同 <code>Broker</code>  的参数以及发送端设置的最大超时时间等等策略来灵活地实现不同等级的消息发送可靠性保证。重试策略可以有效的保证消息发送成功的概率，最终提高消息发送的可靠性。</p>\n<p>总结两点:</p>\n<ul>\n<li><code>Producer</code>  选择一个  <code>MessageQueue</code>  发送消息时。默认轮询方式选择 <code>MessageQueue</code> ， 如果启用  <code>Broker</code>  端的故障延迟机制，则会判断  <code>MessageQueue</code>  的 <code>Broker</code>  是否可用，才发送消息到该  <code>Message</code>  中。</li>\n<li><code>Producer</code>  在使用 Sync 方式发送消息时会重新 <code>N</code>  次，  <code>N</code>  可由  <code>Producer</code>  端的配置决定的。</li>\n</ul>\n<h3 id=\"发送消息的返回状态\"><a class=\"markdownIt-Anchor\" href=\"#发送消息的返回状态\">#</a> 发送消息的返回状态</h3>\n<p>这里再补充一点， 同步方式发送成功，发送的状态是由  <code>SendStatus</code>  这个枚举类决定的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SendStatus</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SEND_OK,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷盘超时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    FLUSH_DISK_TIMEOUT,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步从节点超时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    FLUSH_SLAVE_TIMEOUT,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从节点 不可用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SLAVE_NOT_AVAILABLE,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>SEND_OK</code> : 表示消息发送成功。但是这个并不代表它是可靠的。 要确保消息不丢失，还需要启动同步  <code>Master</code>  服务器 或者同步刷盘， 即  <code>SYNC_MASTER</code>  和  <code>SYNC_FLUSH</code></li>\n<li><code>FLUSH_DISK_TIMEOUT</code> : 消息发送成功，但是刷盘超时。 此时消息已经进去了内存 ( <code>MessageQueue</code> ) 中，这种情况下，只有服务器宕机，消息才会丢失。</li>\n<li><code>FLUSH_SLAVE_TIMEOUT</code> : 消息发送成功，但是同步到  <code>SLAVE</code>  时超时。同样的。此时消息已经进去了内存 ( <code>MessageQueue</code> ) 中，这种情况下，只有服务器宕机，消息才会丢失。</li>\n<li><code>SLAVE_NOT_AVAILABLE</code> : 消息发送成功，但是没有  <code>SLAVE</code>  机器可用。</li>\n</ul>\n<p><code>FLUSH_DISK_TIMEOUT</code> ,  <code>FLUSH_SLAVE_TIMEOUT</code> ,  <code>SLAVE_NOT_AVAILABLE</code>  都是 <code>Broker</code>  端异常导致的不正常的情况。</p>\n<h2 id=\"broker的消息可靠性\"><a class=\"markdownIt-Anchor\" href=\"#broker的消息可靠性\">#</a> Broker 的消息可靠性</h2>\n<p>我们知道了 当消息发送成功，写入了  <code>MessageQueue</code>  但是没有持久到磁盘上的时候，就会造成消息的丢失。<br>\n在 官方的文档中， 提及到了 五种因为 <code>Broker</code>  端异常导致的消息可能会丢失的情况:</p>\n<ul>\n<li><code>Broker</code>  非正常关闭</li>\n<li><code>Broker</code>  异常 <code>Crash</code></li>\n<li><code>OS Crash</code></li>\n<li>机器掉电，但是能立即恢复供电情况</li>\n<li>机器无法开机（可能是 <code>cpu</code> 、主板、内存等关键设备损坏）</li>\n<li>磁盘设备损坏</li>\n</ul>\n<p>其中  <code>1-4</code>  属于硬件资源可立即恢复情况， <code>RocketMQ</code>  在这四种情况下能保证消息不丢 (同步刷盘)，或者丢失少量数据（异步刷盘）。<br>\n <code>5-6</code>  属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。 <code>RocketMQ</code>  在这两种情况下，通过异步复制，可保证 <code>99%</code>  的消息不丢，但是仍然会有极少量的消息可能丢失。通过同步双写技术可以完全避免单点，同步双写势必会影响性能，适合对消息可靠性要求极高的场合，例如与 Money 相关的应用。注： <code>RocketMQ</code>  从 <code>3.0</code>  版本开始支持同步双写。</p>\n<p>可以看出 Broker 端的消息可靠性主要通过 <b>单机情况下的刷盘策略</b> 和 <b>主从之间数据复制</b> 来保证的。</p>\n<h3 id=\"刷盘策略\"><a class=\"markdownIt-Anchor\" href=\"#刷盘策略\">#</a> 刷盘策略</h3>\n<p>在一个节点中，一条消息会从 Producer 发送给  <code>Broker</code>  ，  <code>Broker</code>  端把消息存储到  <code>MessageQueue</code>  中，也就是 内存中， 在  <code>RocketMQ</code>  的源码里才能出消息内容的结构是  <code>MappedFile</code>  , 然后通过 刷盘机制 (同步刷盘，异步刷盘) 写入到物理磁盘上。完成消息的持久化。</p>\n<p><img data-src=\"./images/3-03-01.png\" alt=\"\"></p>\n<p>在源码中 刷盘的线程 由  <code>FlushCommitLogService</code>  类表示。 这个类有三个子类:</p>\n<ul>\n<li><code>FlushRealTimeService</code> : 当配置为异步刷盘策略 并且没有开启  <code>TransientStorePool</code>  的时候，  <code>Broker</code>  会运行一个服务  <code>FlushRealTimeService</code>  用来刷新缓冲区的消息内容到磁盘，这个服务使用一个独立的线程来做刷盘这件事情，默认情况下每隔  <code>500ms</code>  来检查一次是否需要刷盘。</li>\n<li><code>CommitRealTimeService</code> : 异步刷盘且开启  <code>TransientStorePool</code>  ，使用  <code>CommitRealService</code>  。</li>\n<li><code>GroupCommitService</code> : 同步刷盘使用  <code>GroupCommitService</code>  .</li>\n</ul>\n<blockquote>\n<p><code>TransientStorePool</code>  是短暂的消息存储池。这里直接开辟默认 <code>5</code>  个 <code>1G</code>  的直接内存 <code>ByteBuffer</code> ，用来临时存储消息。它还引入了内存锁的机制，避免直接内存的数据被替换到系统中的 <code>Swap</code>  分区中，提高系统存储性能，使 <code>RocketMQ</code>  消息低延迟、高吞吐量。</p>\n</blockquote>\n<h4 id=\"同步刷盘\"><a class=\"markdownIt-Anchor\" href=\"#同步刷盘\">#</a> 同步刷盘</h4>\n<p><code>RocketMQ</code>  使用  <code>GroupCommitService</code>  这个对象来实现 同步刷盘。</p>\n<p>消息写入内存的  <code>PageCache</code>  后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态。这种方式可以保证数据绝对安全，但是吞吐量不大。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Broker 不关闭时。</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 等待 10 毫秒</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.waitForRunning(<span class=\"number\">10</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 执行一次刷盘</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.doCommit();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          CommitLog.log.warn(<span class=\"keyword\">this</span>.getServiceName() + <span class=\"string\">&quot; service has exception. &quot;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 正常情况下shutdown，等待10ms 请求到来，然后flush到磁盘。</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      CommitLog.log.warn(<span class=\"string\">&quot;GroupCommitService Exception, &quot;</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.swapRequests();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.doCommit();</span><br><span class=\"line\"></span><br><span class=\"line\">  CommitLog.log.info(<span class=\"keyword\">this</span>.getServiceName() + <span class=\"string\">&quot; service end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中看出，当 <code>Broker</code>  正常关闭的时候，还是等待 <code>10ms</code>  的，等待这 <code>10ms</code>  内的请求。 处理完请求，将数据保存到磁盘上才会关闭线程。 细节满满。</p>\n<h4 id=\"异步刷盘\"><a class=\"markdownIt-Anchor\" href=\"#异步刷盘\">#</a> 异步刷盘</h4>\n<p>消息写入到内存的  <code>PageCache</code>  中，就立刻给客户端返回写操作成功，当  <code>PageCache</code>  中的消息积累到一定的量时，触发一次写操作，或者定时等策略将  <code>PageCache</code>  中的消息写入到磁盘中。这种方式吞吐量大，性能高，但是  <code>PageCache</code>  中的数据可能丢失，不能保证数据绝对的安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略部分代码...</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// flushCommitLogTimed 是否定时刷新</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flushCommitLogTimed) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// interval为配置的是啊金</span></span><br><span class=\"line\">                Thread.sleep(interval);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.waitForRunning(interval);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"comment\">// 刷盘、 flushPhysicQueueLeastPages  每次刷新的页数。</span></span><br><span class=\"line\">            CommitLog.<span class=\"keyword\">this</span>.mappedFileQueue.flush(flushPhysicQueueLeastPages);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> storeTimestamp = CommitLog.<span class=\"keyword\">this</span>.mappedFileQueue.getStoreTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (storeTimestamp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置检查点</span></span><br><span class=\"line\">                CommitLog.<span class=\"keyword\">this</span>.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(storeTimestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            CommitLog.log.warn(<span class=\"keyword\">this</span>.getServiceName() + <span class=\"string\">&quot; service has exception. &quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.printFlushProgress();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正常关闭时，保证在退出之前全部刷新到磁盘</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; RETRY_TIMES_OVER &amp;&amp; !result; i++) &#123;</span><br><span class=\"line\">        result = CommitLog.<span class=\"keyword\">this</span>.mappedFileQueue.flush(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主从同步\"><a class=\"markdownIt-Anchor\" href=\"#主从同步\">#</a> 主从同步</h3>\n<p>在集群环境中， 如果一个  <code>Broker</code>  有  <code>master</code>  和  <code>slave</code>  时，就需要将  <code>master</code>  上的消息复制到  <code>slave</code>  上，复制的方式有两种:</p>\n<ul>\n<li>同步复制:  <code>master</code>  和  <code>slave</code>  均写成功，才返回客户端成功。  <code>master</code>  挂了以后可以保证数据不丢失。但是数据同步复制会增加数据延迟风险，降低吞吐量。简单说一下，同步复制其实是 在 CommitLog 将消息 刷盘之后，同步的方式将消息同步给  <code>Slave</code>  节点.</li>\n<li>异步复制:  <code>master</code>  写成功，返回客户端成功。 拥有较低的延迟和较高的吞吐量，但是当  <code>master</code>  出现故障后，有可能造成数据丢失。 异步复制的方式，其实是  <code>Slave</code>  节点中会启动一个  <code>HAService</code>  线程，定时的去同步 Master 节点的数据，延时大概在毫秒级。</li>\n</ul>\n<p>后面我们会有一篇文章专门介绍  <code>RocketMQ</code>  主从复制的实现细节。这里就不多做介绍了。</p>\n<h2 id=\"消费者的消息可靠性\"><a class=\"markdownIt-Anchor\" href=\"#消费者的消息可靠性\">#</a> 消费者的消息可靠性</h2>\n<p><code>RocketMQ</code>  在消费端 实现了  <code>At least Once</code>  机制，来保证消息的可靠性消费.</p>\n<p>什么是  <code>at lease once</code>  呢？</p>\n<p><code>consumer</code>  会把消息先 <code>pull</code>  到本地，消费完成之后，才向  <code>Broker</code>  端发送  <code>ack</code>  .</p>\n<p><code>RocketMQ</code>  有三种措施来实现可靠性.</p>\n<h3 id=\"消费重试\"><a class=\"markdownIt-Anchor\" href=\"#消费重试\">#</a> 消费重试</h3>\n<p>消费者从  <code>RocketMQ</code>  拉取到消息之后，需要返回消费成功来表示业务方正常消费完成。因此只有返回 CONSUME_SUCCESS 才算消费完成，如果返回  <code>CONSUME_LATER</code>  则会按照不同的  <code>messageDelayLevel</code>  时间进行再次消费，时间分级从秒到小时，最长时间为 2 个小时后再次进行消费重试，如果消费满  <code>16</code>  次之后还是未能消费成功，则不再重试，会将消息发送到死信队列，从而保证消息存储的可靠性。<br>\n这一措施主要是通过 延时消息队列来实现。</p>\n<h3 id=\"死信队列\"><a class=\"markdownIt-Anchor\" href=\"#死信队列\">#</a> 死信队列</h3>\n<p>未能成功消费的消息，消息队列并不会立刻将消息丢弃，而是将消息发送到死信队列，其名称是在原队列名称前加 <code>%DLQ%</code> ，如果消息最终进入了死信队列，则可以通过 <code>RocketMQ</code>  提供的相关接口从死信队列获取到相应的消息，保证了消息消费的可靠性。</p>\n<h3 id=\"消息回溯\"><a class=\"markdownIt-Anchor\" href=\"#消息回溯\">#</a> 消息回溯</h3>\n<p>回溯消费是指  <code>Consumer</code>  已经消费成功的消息，或者之前消费业务逻辑有问题，现在需要重新消费。要支持此功能，则  <code>Broker</code>  存储端在向  <code>Consumer</code>  消费端投递成功消息后，消息仍然需要保留。重新消费一般是按照时间维度，例如由于  <code>Consumer</code>  系统故障，恢复后需要重新消费 <code>1</code>  小时前的数据。 <code>RocketMQ Broker</code>  提供了一种机制，可以按照时间维度来回退消费进度，这样就可以保证只要发送成功的消息，只要消息没有过期，消息始终是可以消费到的。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/03/12/design_pattern/go/dp01-singleton/",
            "url": "https://fangjiaxiaobai.github.io/2022/03/12/design_pattern/go/dp01-singleton/",
            "title": "Go设计模式-单例设计模式",
            "date_published": "2022-03-12T10:18:18.000Z",
            "content_html": "<h2 id=\"单例模式解决什么问题\"><a class=\"markdownIt-Anchor\" href=\"#单例模式解决什么问题\">#</a> 单例模式解决什么问题</h2>\n<ul>\n<li>处理资源访问冲突</li>\n<li>表示全局唯一。在整个程序中，某些数据应该存储一份，这样的类，就应该设计成单例类。比如，SpringBoot 应用的配置项。再比如 雪花算法的实现类。</li>\n</ul>\n<h2 id=\"实现单例\"><a class=\"markdownIt-Anchor\" href=\"#实现单例\">#</a> 实现单例</h2>\n<p>如何实现单例呢，或者说怎样能称得上单例呢？<br>\n 首先，单例要求全局唯一，那就是说 <b>不允许外部随随便便 new 一个新对象</b>.</p>\n<p>这句话里，至少有两个点:<br>\n1. 不允许外部 new 对象。   2. 需要类内部 new 对象，并提供给外部进行使用。<br>\n其实很简单的，<b>单例类的构造方法需要是 private 权限的，提供一个 public 方法，用于外部获取本对象。</b></p>\n<p>另外，我们写的程序都是运行在多线程环境的，所以我们还需要考虑线程安全的问题。<br>\n还有，说过线程安全，自然而然，就会想到锁，想到锁，就要想到性能问题。</p>\n<h2 id=\"核心概念\"><a class=\"markdownIt-Anchor\" href=\"#核心概念\">#</a> 核心概念</h2>\n<p>保证某个类在一个运行环境中只有一个实例， 并提供一个访问该实例的全局节点。</p>\n<h2 id=\"单例的实现\"><a class=\"markdownIt-Anchor\" href=\"#单例的实现\">#</a> 单例的实现</h2>\n<h3 id=\"懒汉式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tlazySingletonInstance *lazySingleton</span><br><span class=\"line\">\tonce                  = &amp;sync.Once&#123;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LazySingleton 懒汉式</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> lazySingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetLazySingletonInstance</span><span class=\"params\">()</span> *<span class=\"title\">lazySingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lazySingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tonce.Do(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tlazySingletonInstance = &amp;lazySingleton&#123;&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lazySingletonInstance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetLazySingletonInstance</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetLazySingletonInstance() != GetLazySingletonInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;懒汉式 单例模式： 出现同一对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetLazySingletonInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetLazySingletonInstance() != GetLazySingletonInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;懒汉式 单例模式： 出现同一对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"饿汉式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eagerSingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> eagerSingletonObj *eagerSingleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// init.  程序运行前的注册，实现 sync.Once功能 ,初始化不能采用初始化表达式初始化的变量。</span></span><br><span class=\"line\"><span class=\"comment\">// 变量初始化-&gt;init()-&gt;main()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;init in main.go &quot;</span>)</span><br><span class=\"line\">\teagerSingletonObj = &amp;eagerSingleton&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetInstance</span><span class=\"params\">()</span> *<span class=\"title\">eagerSingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> eagerSingletonObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEagerSingleton</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetInstance() != GetInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;单例模式-饿汉式：出现不同的对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetInstance() != GetInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;单例模式-饿汉式：出现不同的对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双重检查锁\"><a class=\"markdownIt-Anchor\" href=\"#双重检查锁\">#</a> 双重检查锁</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> doubleCheckSingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock = &amp;sync.Mutex&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doubleCheckSingletonInstance *doubleCheckSingleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetDoubleCheckSingletonInstance</span><span class=\"params\">()</span> *<span class=\"title\">doubleCheckSingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> doubleCheckSingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> lock.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> doubleCheckSingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;创建 单例对象&quot;</span>)</span><br><span class=\"line\">\t\t\tdoubleCheckSingletonInstance = &amp;doubleCheckSingleton&#123;&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;单例对象已经创建了&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;单例对象已经创建了&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doubleCheckSingletonInstance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetDoubleCheckSingletonInstance</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetDoubleCheckSingletonInstance() != GetDoubleCheckSingletonInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;双重检测法 获取不同的对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetDoubleCheckSingletonInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetDoubleCheckSingletonInstance() != GetDoubleCheckSingletonInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;双重检测法 获取不同的对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h3>\n<p>1、单例模式同事解决了两个问题，所以单例模式违反了单一职责原则:</p>\n<ul>\n<li>1、保证一个类只有一个实例.</li>\n<li>2、为该实例提供了一个全局访问节点.<br>\n2、单例模式可能会掩盖不良设计，比如程序各组件之间项目了解过多。<br>\n3、该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。<br>\n4、单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li>\n</ul>\n<h2 id=\"与其他模式的关系\"><a class=\"markdownIt-Anchor\" href=\"#与其他模式的关系\">#</a> 与其他模式的关系</h2>\n<ul>\n<li>外观模式类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li>\n<li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元模式就和单例类似了。 但这两个模式有两个根本性的不同。\n<ul>\n<li>只会有一个单例实体， 但是享元类可以有多个实体， 各实体的内在状态也可以不同。</li>\n<li>单例对象可以是可变的。 享元对象是不可变的。</li>\n</ul>\n</li>\n<li>抽象工厂模式、 生成器模式和原型模式都可以用单例来实现。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "go",
                "go-设计模式"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/03/12/go/goroutine_runtime/",
            "url": "https://fangjiaxiaobai.github.io/2022/03/12/go/goroutine_runtime/",
            "title": "Go 运行时",
            "date_published": "2022-03-12T10:18:18.000Z",
            "content_html": "<h2 id=\"goroutine-定义\"><a class=\"markdownIt-Anchor\" href=\"#goroutine-定义\">#</a>  <code>goroutine</code>  定义</h2>\n<p>“ <code>Goroutine</code>  是一个与其他  <code>goroutines</code>  并行运行在同一地址空间的  <code>Go</code>  函数或方法。一个运行的程序由一个或更多个  <code>goroutine</code>  组成。它与线程、协程、进程等不同。它是一个  <code>goroutine</code> ” ——  <code>Rob Pike</code> <br>\n <code>Goroutines</code>  在同一个用户地址空间里并行独立执行  <code>functions</code>  ，  <code>channels</code>  则用于  <code>goroutines</code>  间的通信和同步访问控制。</p>\n<h3 id=\"goroutine-vs-thread\"><a class=\"markdownIt-Anchor\" href=\"#goroutine-vs-thread\">#</a>  <code>goroutine VS thread</code></h3>\n<ul>\n<li><b>内存占用</b>. 创建一个  <code>goroutine</code>  的栈内存消耗为  <code>2 KB</code> ( <code>Linux AMD64</code>   <code>Go v1.4</code>  后)，运行过程中，如果栈空间不够用，会自动进行扩容。 创建一个  <code>thread</code>  为了尽量避免极端情况下操作系统线程栈的溢出，默认会为其分配一个较大的栈内存 (  <code>1 - 8 MB</code>  栈内存，线程标准 <code>POSIX Thread</code> )，而且还需要一个被称为  <code>“guard page”</code>  的区域用于和其他  <code>thread</code>  的栈空间进行隔离。而栈内存空间一旦创建和初始化完成之后其大小就不能再有变化，这决定了<b>在某些特殊场景下系统线程栈还是有溢出的风险</b>。</li>\n<li><b>创建 / 销毁</b>，线程创建和销毀都会有巨大的消耗，是内核级的交互 ( <code>trap</code> )。  <code>POSIX</code>  线程 (定义了创建和操纵线程的一套  <code>API</code> ) 通常是在已有的进程模型中增加的逻辑扩展，所以线程控制和进程控制很相似。而进入内核调度所消耗的性能代价比较高，开销较大。  <code>goroutine</code>  是用户态线程，是由  <code>go runtime</code>  管理，创建和销毁的消耗非常小。</li>\n<li><b>调度切换</b> 抛开陷入内核，线程切换会消耗  <code>1000-1500</code>  纳秒 (上下文保存成本高，较多寄存器，公平性，复杂时间计算统计)，一个纳秒平均可以执行  <code>12-18</code>  条指令。 所以由于线程切换，执行指令的条数会减少  <code>12000-18000</code> 。  <code>goroutine</code>  的切换约为  <code>200ns</code>  (用户态、3 个寄存器)，相当于  <code>2400-3600</code>  条指令。因此，  <code>goroutines</code>  切换成本比   <code>threads</code>  要小得多。</li>\n<li><b>复杂性</b> 线程的创建和退出复杂，多个  <code>thread</code>  间通讯复杂 ( <code>share memory</code> )。 不能大量创建线程 (参考早期的  <code>httpd</code> )，成本高，使用网络多路复用，存在大量 <code>callback</code>  (参考 <code>twemproxy</code> 、 <code>nginx</code>  的代码) 。对于应用服务线程门槛高，例如需要做第三方库隔离，需要考虑引入线程池等。</li>\n</ul>\n<h2 id=\"goroutine-运行原理\"><a class=\"markdownIt-Anchor\" href=\"#goroutine-运行原理\">#</a>  <code>Goroutine</code>  运行原理</h2>\n<p><code>Go</code>  程序的执行由两层组成： <code>Go Program</code> ， <code>Runtime</code> ，即用户程序和运行时。它们之间通过函数调用来实现内存管理、 <code>channel</code>  通信、 <code>goroutines</code>  创建等功能。用户程序进行的系统调用都会被  <code>Runtime</code>  拦截，以此来帮助它进行调度以及垃圾回收相关的工作。</p>\n<h3 id=\"mn-模型\"><a class=\"markdownIt-Anchor\" href=\"#mn-模型\">#</a>  <code>M:N</code>  模型</h3>\n<p><code>Go runtime</code>  会负责  <code>goroutine</code>  的生老病死，从创建到销毁，都一手包办。 <code>Runtime</code>  会在程序启动的时候。  <code>Go</code>  创建  <code>M</code>  个线程 ( <code>CPU</code>  执行调度的单元，内核的  <code>task_struct</code> )，之后创建的  <code>N</code>  个  <code>goroutine</code>  都会依附在这  <code>M</code>  个线程上执行，即  <code>M:N</code>  模型。它们能够同时运行，与线程类似，但相比之下非常轻量。因此，程序运行时， <code>Goroutines</code>  的个数应该是远大于线程的个数的（<a href=\"https://www.zhihu.com/question/35128513\"> <code>phread</code>  是内核线程？</a>）。</p>\n<p>同一个时刻，一个线程只能跑一个  <code>goroutine</code> 。当  <code>goroutine</code>  发生阻塞 ( <code>chan</code>  阻塞、 <code>mutex</code> 、 <code>syscall</code>  等等) 时，Go 会把当前的  <code>goroutine</code>  调度走，让其他  <code>goroutine</code>  来继续执行，而不是让线程阻塞休眠，尽可能多的分发任务出去，让  <code>CPU</code>  忙。</p>\n<h3 id=\"gm-调度模型\"><a class=\"markdownIt-Anchor\" href=\"#gm-调度模型\">#</a> GM 调度模型</h3>\n<p><code>go</code>  在 <code>1.2</code>  版本之前，调度模型使用的是  <code>GM</code>  调度模型。</p>\n<h4 id=\"g\"><a class=\"markdownIt-Anchor\" href=\"#g\">#</a> G</h4>\n<p><code>goroutine</code>  的缩写，每次  <code>go func()</code>  都代表一个  <code>G</code> ，无限制。 使用  <code>struct runtime.g</code> ，包含了当前  <code>goroutine</code>  的状态、堆栈、上下文。</p>\n<h4 id=\"m\"><a class=\"markdownIt-Anchor\" href=\"#m\">#</a> M</h4>\n<p>工作线程 ( <code>OS thread</code> ) 也被称为 Machine，使用  <code>struct runtime.m</code> ，所有  <code>M</code>  是有线程栈的。 如果不对该线程栈提供内存的话，系统会给该线程栈提供内存 (不同操作系统提供的线程栈大小不同)<br>\n。当指定了线程栈，则  <code>M.stack→G.stack</code> ， <code>M</code>  的  <code>PC</code>  寄存器指向  <code>G</code>  提供的函数，然后去执行。</p>\n<h4 id=\"gm-调度\"><a class=\"markdownIt-Anchor\" href=\"#gm-调度\">#</a> GM 调度</h4>\n<p><code>Go 1.2</code>  前的调度器实现，限制了  <code>Go</code>  并发程序的伸缩性，尤其是对那些有高吞吐或并行计算需求的服务程序。<br>\n每个  <code>goroutine</code>  对应于  <code>runtime</code>  中的一个抽象结构： <code>G</code> ，而  <code>thread</code>  作为 <code>“物理 CPU”</code>  的存在而被抽象为一个结构：M ( <code>machine</code> )。当  <code>goroutine</code>  调用了一个阻塞的系统调用，运行这个  <code>goroutine</code>  的线程就会被阻塞，这时至少应该再创建 / 唤醒一个线程来运行别的没有阻塞的  <code>goroutine</code>  。线程这里可以创建不止一个，可以按需不断地创建，而活跃的线程（处于非阻塞状态的线程）的最大个数存储在变量  <code>GOMAXPROCS</code>  中。</p>\n<p>调用过程如下所示:</p>\n<p><img data-src=\"/images/go/13-75.png\" alt=\"\"></p>\n<p><code>M</code>  想要执行、放回  <code>G</code>  都必须访问全局  <code>G</code>  队列，并且  <code>M</code>  有多个，即多线程访问同一资源需要加锁进行保证互斥 / 同步，所以全局  <code>G</code>  队列是有互斥锁进行保护的</p>\n<h4 id=\"gm-调度模型的问题\"><a class=\"markdownIt-Anchor\" href=\"#gm-调度模型的问题\">#</a> GM 调度模型的问题</h4>\n<ul>\n<li>单一全局互斥锁 ( <code>Sched.Lock</code> ) 和集中状态存储<br>\n导致所有  <code>goroutine</code>  相关操作，比如：创建、结束、重新调度等都要上锁。</li>\n<li><code>Goroutine</code>  传递问题<br>\n <code>M</code>  经常在  <code>M</code>  之间传递” 可运行” 的  <code>goroutine</code>  ，这导致调度延迟增大以及额外的性能损耗（刚创建的  <code>G</code>  放到了全局队列，而不是本地 M 执行，不必要的开销和延迟）。</li>\n<li><code>Per-M </code> 持有内存缓存 ( <code>M.mcache</code> )<br>\n 每个  <code>M</code>  持有  <code>mcache</code>  和  <code>stackalloc</code>  ，然而只有在  <code>M</code>  运行  <code>Go</code>  代码时才需要使用的内存 (每个  <code>mcache</code>  可以高达  <code>2mb</code>  )，当  <code>M</code>  在处于  <code>syscall</code>  时并不需要。运行  <code>Go</code>  代码和阻塞在  <code>syscall</code>  的  <code>M</code>  的比例高达 <code>1:100</code> ，造成了很大的浪费。同时内存亲缘性也较差， <code>G</code>  当前在  <code>M</code>  运行后对 M 的内存进行了预热，因为现在  <code>G</code>  调度到同一个  <code>M</code>  的概率不高，数据局部性不好。</li>\n<li>严重的线程阻塞 / 解锁<br>\n在系统调用的情况下，工作线程经常被阻塞和取消阻塞，这增加了很多开销。比如  <code>M</code>  找不到 <code>G</code> ，此时  <code>M</code>  就会进入频繁阻塞 / 唤醒来进行检查的逻辑，以便及时发现新的  <code>G</code>  来执行。<br>\nby Dmitry Vyukov “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVFRqNFQySk80MnVENUlEOWU4OW9hMHNMS2hKWUQwWV9rcXhEdjNJM1hNdy9lZGl0IyE=\">Scalable Go Scheduler Design Doc</span>”</li>\n</ul>\n<h3 id=\"gmp-调度模型\"><a class=\"markdownIt-Anchor\" href=\"#gmp-调度模型\">#</a> GMP 调度模型</h3>\n<p>在  <code>go 1.2</code>  版本及以后，go 引入  <code>GMP</code>  调度模型</p>\n<h4 id=\"g-2\"><a class=\"markdownIt-Anchor\" href=\"#g-2\">#</a> G</h4>\n<p><code>goroutine</code>  的缩写，每次  <code>go func()</code>  都代表一个  <code>G</code> ，无限制。 使用  <code>struct runtime.g</code> ，包含了当前  <code>goroutine</code>  的状态、堆栈、上下文。</p>\n<h4 id=\"m-2\"><a class=\"markdownIt-Anchor\" href=\"#m-2\">#</a> M</h4>\n<p>工作线程 ( <code>OS thread</code> ) 也被称为 Machine，使用  <code>struct runtime.m</code> ，所有  <code>M</code>  是有线程栈的。 如果不对该线程栈提供内存的话，系统会给该线程栈提供内存 (不同操作系统提供的线程栈大小不同)<br>\n。当指定了线程栈，则  <code>M.stack→G.stack</code> ， <code>M</code>  的  <code>PC</code>  寄存器指向  <code>G</code>  提供的函数，然后去执行。</p>\n<h4 id=\"p\"><a class=\"markdownIt-Anchor\" href=\"#p\">#</a> P</h4>\n<p><code>“Processor”</code>  是一个抽象的概念，并不是真正的物理  <code>CPU</code> 。</p>\n<p><code>Dmitry Vyukov</code>  的方案是引入一个结构  <code>P</code> ，它代表了  <code>M</code>  所需的上下文环境，也是处理用户级代码逻辑的处理器。它负责衔接  <code>M</code>  和  <code>G</code>  的调度上下文，将等待执行的  <code>G</code>  与  <code>M</code>  对接。当 P 有任务时需要创建或者唤醒一个  <code>M</code>  来执行它队列里的任务。所以  <code>P/M</code>  需要进行绑定，构成一个执行单元。  <code>P</code>  决定了并行任务的数量，可通过  <code>runtime.GOMAXPROCS</code>  来设定。在  <code>Go1.5</code>  之后  <code>GOMAXPROCS</code>  被默认设置可用的核数，而之前则默认为 <code>1</code> 。</p>\n<p><code>Runtime</code>  起始时会启动一些  <code>G</code> ：垃圾回收的  <code>G</code> ，执行调度的  <code>G</code> ，运行用户代码的  <code>G</code> ；并且会创建一个  <code>M</code>  用来开始  <code>G</code>  的运行。随着时间的推移，更多的  <code>G</code>  会被创建出来，更多的  <code>M</code>  也会被创建出来。</p>\n<p>Tips: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ViZXItZ28vYXV0b21heHByb2Nz\">https://github.com/uber-go/automaxprocs</span><br>\n <code>Automatically set GOMAXPROCS to match Linux container CPU quota.</code> <br>\n <code>mcache/stackalloc</code>  从  <code>M</code>  移到了  <code>P</code> ，而  <code>G</code>  队列也被分成两类，保留全局  <code>G</code>  队列，同时每个  <code>P</code>  中都会有一个本地的  <code>G</code>  队列。</p>\n<h4 id=\"gmp-调度\"><a class=\"markdownIt-Anchor\" href=\"#gmp-调度\">#</a>  <code>GMP</code>  调度</h4>\n<p><code>GMP</code>  调度模型，引入了  <code>local queue</code> ，因为  <code>P</code>  的存在， <code>runtime</code>  并不需要做一个集中式的  <code>goroutine</code>  调度，每一个  <code>M</code>  都会在  <code>P's local queue</code> 、 <code>global queue</code>  或者其他  <code>P</code>  队列中找  <code>G</code>  执行，减少全局锁对性能的影响。<br>\n这也是  <code>GMP Work-stealing</code>  调度算法的核心。注意  <code>P</code>  的本地  <code>G</code>  队列还是可能面临一个并发访问的场景，为了避免加锁，这里  <code>P</code>  的本地队列是一个  <code>LockFree</code>  的队列，窃取  <code>G</code>  时使用  <code>CAS</code>  原子操作来完成。关于 <code>LockFree</code>  和  <code>CAS</code>  的知识参见  <code>Lock-Free</code> 。</p>\n<p><img data-src=\"/images/go/13-49.png\" alt=\"\"></p>\n<h3 id=\"work-stealing\"><a class=\"markdownIt-Anchor\" href=\"#work-stealing\">#</a>  <code>Work Stealing</code></h3>\n<p>当一个  <code>P</code>  执行完本地所有的  <code>G</code>  之后，并且全局队列为空的时候，会尝试挑选一个受害者  <code>P</code>  ，从它的  <code>G</code>  队列中窃取一半的  <code>G</code> 。否则会从全局队列中获取 (当前个数 / <code>GOMAXPROCS</code> ) 个  <code>G</code>  。<br>\n为了保证公平性，从随机位置上的  <code>P</code>  开始，而且遍历的顺序也随机化了 (选择一个小于  <code>GOMAXPROCS</code>  ，且和它互为质数的步长)，保证遍历的顺序也随机化了。</p>\n<p><img data-src=\"/images/go/13-50.png\" alt=\"\"></p>\n<p>光窃取失败时获取是不够的，可能会导致全局队列饥饿。 <code>P</code>  的调度算法中还会每个  <code>N</code>  轮调度之后就去全局队列拿一个  <code>G</code> 。 如下图。</p>\n<p><img data-src=\"/images/go/13-52.png\" alt=\"\"></p>\n<h4 id=\"谁放入的全局队列呢\"><a class=\"markdownIt-Anchor\" href=\"#谁放入的全局队列呢\">#</a> 谁放入的全局队列呢</h4>\n<p>有两种情况会把 <code>G</code>  放到全局队列中。</p>\n<ul>\n<li>新建  <code>G</code>  时  <code>P</code>  的本地  <code>G</code>  队列放不下已满并达到 <code>256</code>  个的时候会放半数  <code>G</code>  到全局队列去。</li>\n<li>阻塞的系统调用返回时找不到空闲  <code>P</code>  也会放到全局队列。</li>\n</ul>\n<p><img data-src=\"/images/go/13-51.png\" alt=\"\"></p>\n<h3 id=\"syscall-系统调用\"><a class=\"markdownIt-Anchor\" href=\"#syscall-系统调用\">#</a> SysCall 系统调用</h3>\n<p>当  <code>G</code>  调用  <code>syscall</code>  后会解绑  <code>P</code> ，然后  <code>M</code>  和  <code>G</code>  进入阻塞，而  <code>P</code>  此时的状态就是  <code>syscall</code> ，表明这个  <code>P</code>  的  <code>G</code>  正在  <code>syscall</code>  中，这时的  <code>P</code>  是不能被调度给别的  <code>M</code>  的。如果在短时间内阻塞的  <code>M</code>  就唤醒了，那么  <code>M</code>  会优先来重新获取这个  <code>P</code> ，能获取到就继续绑回去，这样有利于数据的局部性。<br>\n系统监视器 ( <code>system monitor</code> )，称为  <code>sysmon</code> ，会定时扫描。在执行  <code>syscall</code>  时，如果某个  <code>P</code>  的  <code>G</code>  执行超过一个  <code>sysmon tick</code> ( <code>10ms</code> )，就会把他设为  <code>idle</code> ，重新调度给需要的  <code>M</code> ，强制解绑。</p>\n<p><img data-src=\"/images/go/13-53.png\" alt=\"\"></p>\n<p><code>P3</code>  和  <code>M</code>  脱离后目前在  <code>idle list</code>  中等待被绑定（处于  <code>syscall</code>  状态）。而  <code>syscall</code>  结束后  <code>M</code>  按照如下规则执行直到满足其中一个条件：</p>\n<ul>\n<li>尝试获取同一个  <code>P</code> ( <code>P3</code> )，恢复执行  <code>G</code></li>\n<li>尝试获取  <code>idle list</code>  中的其他空闲  <code>P</code> ，恢复执行  <code>G</code></li>\n<li>找不到空闲  <code>P</code> ，把  <code>G</code>  放回  <code>global queue</code> ， <code>M</code>  放回到  <code>idle list</code></li>\n</ul>\n<p>再举一个例子：<br>\n如下图.<br>\n<img data-src=\"/images/go/13-54.png\" alt=\"\"></p>\n<ul>\n<li>第一步：  <code>G35</code>  发生了系统调用，长时间没有返回。  <code>P1</code>  和  <code>M</code>  解绑。( <code>p1</code>  不会马上被推送到 <code>idle list</code> , 而是经过一段时间才会推送到 <code>idle list.</code> )</li>\n<li>第二步： <code>G35</code>  系统调用完成，将 <code>G35</code>  推向了全局队列.</li>\n<li>第三步： <code>G35</code>  被其他的 P 捞到了 (可能 <code>P0</code>  经过 <code>1/61</code>  轮次正好 <code>check</code>  全局队列)， 这样  <code>G35</code>  就可以继续执行了。</li>\n</ul>\n<p>需要注意的是： 当使用了  <code>Syscall</code> ， <code>Go</code>  无法限制  <code>Blocked OS threads</code>  的数量：<br>\n <code>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit. This package’s GOMAXPROCS function queries and changes the limit.</code></p>\n<p><code>Tips</code> : 使用  <code>syscall</code>  写程序要认真考虑  <code>pthread exhaust</code>  问题。</p>\n<h3 id=\"spining-thread\"><a class=\"markdownIt-Anchor\" href=\"#spining-thread\">#</a> Spining Thread.</h3>\n<p>线程自旋是相对于线程阻塞而言的，表象就是循环执行一个指定逻辑 (调度逻辑，目的是不停地寻找 G)。这样做的问题显而易见，如果  <code>G</code>  迟迟不来， <code>CPU</code>  会白白浪费在这无意义的计算上。但好处也很明显，降低了 M 的上下文切换成本，提高了性能。在两个地方引入自旋：</p>\n<ul>\n<li>类型 1:  <code>M</code>  不带  <code>P</code>  的找  <code>P</code>  挂载（一有  <code>P</code>  释放就结合）</li>\n<li>类型 2:  <code>M</code>  带  <code>P</code>  的找  <code>G</code>  运行（一有  <code>runable</code>  的  <code>G</code>  就执行）。 这种情况下会首先 按照  <code>1/61</code>  轮次的查询  <code>global Queue</code>  , 然后再查看  <code>local Queue</code>  是否有  <code>G</code> . 如果没有，则去查看  <code>Global Queue</code> , 如果没有在去检查   <code>net poller</code> , 看看是否有可用的  <code>goroutine</code> .<br>\n 为了避免过多浪费  <code>CPU</code>  资源，自旋的  <code>M</code>  最多只允许  <code>GOMAXPROCS</code>  ( <code>Busy P</code> )。同时当有类型 1 的自旋  <code>M</code>  存在时，类型 <code>2</code>  的自旋  <code>M</code>  就不阻塞，阻塞会释放  <code>P</code> ，一释放  <code>P</code>  就马上被类型 <code>1</code>  的自旋  <code>M</code>  抢走了，没必要。</li>\n</ul>\n<p>在新  <code>G</code>  被创建、 <code>M</code>  进入系统调用、 <code>M</code>  从空闲被激活这三种状态变化前，调度器会确保至少有一个自旋  <code>M</code>  存在（唤醒或者创建一个  <code>M</code> ），除非没有空闲的  <code>P</code> 。</p>\n<p>为什么呢？</p>\n<ul>\n<li>当新  <code>G</code>  创建，如果有可用  <code>P</code> ，就意味着新  <code>G</code>  可以被立即执行，即便不在同一个  <code>P</code>  也无妨，所以我们保留一个自旋的 M（这时应该不存在类型 1 的自旋只有类型 2 的自旋）就可以保证新 G 很快被运行。</li>\n<li>当  <code>M</code>  进入系统调用，意味着  <code>M</code>  不知道何时可以醒来，那么  <code>M</code>  对应的  <code>P</code>  中剩下的  <code>G</code>  就得有新的  <code>M</code>  来执行，所以我们保留一个自旋的  <code>M</code>  来执行剩下的  <code>G</code> （这时应该不存在类型 <code>2</code>  的自旋只有类型 <code>1</code>  的自旋）。</li>\n<li>如果  <code>M</code>  从空闲变成活跃，意味着可能一个处于自旋状态的  <code>M</code>  进入工作状态了，这时要检查并确保还有一个自旋  <code>M</code>  存在，以防还有  <code>G</code>  或者还有  <code>P</code>  空着的。</li>\n</ul>\n<h3 id=\"gmp-模型问题总结\"><a class=\"markdownIt-Anchor\" href=\"#gmp-模型问题总结\">#</a>  <code>GMP</code>  模型问题总结</h3>\n<ul>\n<li>单一全局互斥锁 ( <code>Sched.Lock</code> ) 和集中状态存储<br>\n <code>G</code>  被分成全局队列和  <code>P</code>  的本地队列，全局队列依旧是全局锁，但是使用场景明显很少， <code>P</code>  本地队列使用无锁队列，使用原子操作来面对可能的并发场景。</li>\n<li><code>Goroutine</code>  传递问题<br>\n <code>G</code>  创建时就在  <code>P</code>  的本地队列，可以避免在  <code>G</code>  之间传递（窃取除外）， <code>G</code>  对  <code>P</code>  的数据局部性好；当  <code>G</code>  开始执行了，系统调用返回后  <code>M</code>  会尝试获取可用  <code>P</code> ，获取到了的话可以避免在  <code>M</code>  之间传递。而且优先获取调用阻塞前的  <code>P</code> ，所以  <code>G</code>  对  <code>M</code>  数据局部性好， <code>G</code>  对  <code>P</code>  的数据局部性也好。</li>\n<li><code>Per-M</code>  持有内存缓存 ( <code>M.mcache</code> )<br>\n 内存  <code>mcache</code>  只存在  <code>P</code>  结构中， <code>P</code>  最多只有  <code>GOMAXPROCS</code>  个，远小于  <code>M</code>  的个数，所以内存没有过多的消耗。</li>\n<li>严重的线程阻塞 / 解锁<br>\n通过引入自旋，保证任何时候都有处于等待状态的自旋 M，避免在等待可用的  <code>P</code>  和  <code>G</code>  时频繁的阻塞和唤醒。</li>\n</ul>\n<h3 id=\"syscon\"><a class=\"markdownIt-Anchor\" href=\"#syscon\">#</a> syscon</h3>\n<p><code>sysmon</code>  也叫监控线程，它<b>无需  <code>P</code>  也可以运行</b>，他是一个死循环，每 <code>20us~10ms</code>  循环一次，循环完一次就  <code>sleep</code>  一会，为什么会是一个变动的周期呢，主要是避免空转，如果每次循环都没什么需要做的事，那么  <code>sleep</code>  的时间就会加大。</p>\n<ul>\n<li>释放闲置超过 <code>5</code>  分钟的  <code>span</code>  物理内存；</li>\n<li>如果超过 2 分钟没有垃圾回收，强制执行；</li>\n<li>将长时间未处理的  <code>netpoll</code>  添加到全局队列；</li>\n<li>向长时间运行的  <code>G</code>  任务发出抢占调度；</li>\n<li>收回因  <code>syscall</code>  长时间阻塞的  <code>P</code> ；</li>\n</ul>\n<p><img data-src=\"/images/go/13-55.png\" alt=\"\"></p>\n<p>当  <code>P</code>  在  <code>M</code>  上执行时间超过 <code>10ms</code> ， <code>sysmon</code>  调用  <code>preemptone</code>  将  <code>G</code>  标记为  <code>stackPreempt</code>  。因此需要在某个地方触发检测逻辑， <code>Go</code>  当前是在检查栈是否溢出的地方判定 ( <code>morestack()</code> )， <code>M</code>  会保存当前  <code>G</code>  的上下文，重新进入调度逻辑，这样就不会死循环了。<br>\n死循环：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9pc3N1ZXMvMTE0NjI=\">issues/11462</span><br>\n 信号抢占：<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9ydWkuY2MvYXJjaGl2ZXMvNjUzNQ==\">go1.14 基于信号的抢占式调度实现原理</span><br>\n异步抢占，注册  <code>sigurg</code>  信号，通过  <code>sysmon</code>  检测，对  <code>M</code>  对应的线程发送信号，触发注册的  <code>handler</code> ，它往当前  <code>G</code>  的  <code>PC</code>  中插入一条指令 (调用某个方法)，在处理完  <code>handler</code> ， <code>G</code>  恢复后，自己把自己推到了  <code>global queue</code>  中。<br>\n<img data-src=\"/images/go/13-56.png\" alt=\"\"></p>\n<h3 id=\"network-poller\"><a class=\"markdownIt-Anchor\" href=\"#network-poller\">#</a> Network poller</h3>\n<p><code>Go</code>  所有的  <code>I/O</code>  都是阻塞的。然后通过  <code>goroutine + channel</code>  来处理并发。因此所有的  <code>IO</code>  逻辑都是直来直去的，你不再需要回调，不再需要  <code>future</code> ，要的仅仅是  <code>step by step</code> 。这对于代码的可读性是很有帮助的。<br>\n <code>G</code>  发起网络  <code>I/O</code>  操作也不会导致  <code>M</code>  被阻塞 (仅阻塞 <code>G</code> )，从而不会导致大量  <code>M</code>  被创建出来。将异步  <code>I/O</code>  转换为阻塞  <code>I/O</code>  的部分称为  <code>netpoller</code> 。打开或接受连接都被设置为非阻塞模式。如果你试图对其进行  <code>I/O</code>  操作，并且文件描述符数据还没有准备好， <code>G</code>  会进入  <code>gopark</code>  函数，将当前正在执行的  <code>G</code>  状态保存起来，然后切换到新的堆栈上执行新的  <code>G</code> 。</p>\n<p><img data-src=\"/images/go/13-57.png\" alt=\"\"></p>\n<p>那什么时候  <code>G</code>  被调度回来呢？</p>\n<ul>\n<li><code>sysmon</code></li>\n<li><code>schedule()</code> ： <code>M</code>  找  <code>G</code>  的调度函数</li>\n<li><code>GC</code> ： <code>start the world</code> <br>\n 调用  <code>netpoll()</code>  在某一次调度  <code>G</code>  的过程中，处于就绪状态的  <code>fd</code>  对应的  <code>G</code>  就会被调度回来。<br>\n <code>G</code>  的  <code>gopark</code>  状态： <code>G</code>  置为  <code>waiting</code>  状态，等待显示  <code>goready</code>  唤醒，在  <code>poller</code>  中用得较多，还有锁、 <code>chan</code>  等。</li>\n</ul>\n<p><img data-src=\"/images/go/13-58.png\" alt=\"\"></p>\n<h3 id=\"scheduler-affinity-调度亲和性\"><a class=\"markdownIt-Anchor\" href=\"#scheduler-affinity-调度亲和性\">#</a> Scheduler Affinity 调度亲和性</h3>\n<p><img data-src=\"/images/go/13-59.png\" alt=\"\"></p>\n<p><code>GM</code>  调度器时代的， <code>chan</code>  操作导致的切换代价。</p>\n<ul>\n<li><code>Goroutine#7</code>  正在等待消息，阻塞在  <code>chan</code> 。一旦收到消息，这个  <code>goroutine</code>  就被推到全局队列。</li>\n<li>然后， <code>chan</code>  推送消息， <code>goroutine#X</code>  将在可用线程上运行，而  <code>goroutine#8</code>  将阻塞在  <code>chan</code> 。</li>\n<li><code>goroutine#7</code>  现在在可用线程上运行。<br>\n在  <code>chan</code>  来回通信的  <code>goroutine</code>  会导致频繁的  <code>blocks</code> ，即频繁地在本地队列中重新排队。然而，由于本地队列是  <code>FIFO</code>  实现，如果另一个  <code>goroutine</code>  占用线程， <code>unblock goroutine</code>  不能保证尽快运行。同时  <code>Go</code>  亲缘性调度的一些限制： <code>Work-stealing</code> 、系统调用。<br>\n <code>goroutine #9</code>  在  <code>chan</code>  被阻塞后恢复。但是，它必须等待 <code>#2</code> 、 <code>#5</code>  和 <code>#4</code>  之后才能运行。 <code>goroutine #5</code>  将阻塞其线程，从而延迟 <code>goroutine #9</code> ，并使其面临被另一个  <code>P</code>  窃取的风险。<br>\n<img data-src=\"/images/go/13-60.png\" alt=\"\"></li>\n</ul>\n<p>针对  <code>communicate-and-wait</code>  模式，进行了亲缘性调度的优化。 <code>Go 1.5</code>  在  <code>P</code>  中引入了  <code>runnext</code>  特殊的一个字段，可以高优先级执行  <code>unblock G</code> 。<br>\n <code>goroutine #9</code>  现在被标记为下一个可运行的。这种新的优先级排序允许  <code>goroutine</code>  在再次被阻塞之前快速运行。这一变化对运行中的标准库产生了总体上的积极影响，提高了一些包的性能。<br>\n<img data-src=\"/images/go/13-61.png\" alt=\"\"></p>\n<h2 id=\"goroutine-lifecycle\"><a class=\"markdownIt-Anchor\" href=\"#goroutine-lifecycle\">#</a> Goroutine Lifecycle</h2>\n<h3 id=\"go-程序的启动\"><a class=\"markdownIt-Anchor\" href=\"#go-程序的启动\">#</a> go 程序的启动</h3>\n<p><img data-src=\"/images/go/13-62.png\" alt=\"\"></p>\n<p>整个程序始于一段汇编，而在随后的 runtime・rt0_go（也是汇编程序）中，会执行很多初始化工作。</p>\n<p><img data-src=\"/images/go/13-63.png\" alt=\"\"></p>\n<ul>\n<li>绑定 m0 和 g0，m0 就是程序的主线程，程序启动必然会拥有一个主线程，这个就是 m0。g0 负责调度，即 shedule () 函数。</li>\n<li>创建 P，绑定 m0 和 p0，首先会创建 GOMAXPROCS 个 P ，存储在 sched 的 空闲链表 (pidle)。</li>\n<li>新建任务 g 到 p0 本地队列，m0 的 g0 会创建一个 指向 runtime.main () 的 g ，并放到 p0 的本地队列。<br>\nruntime.main (): 启动 sysmon 线程；启动 GC 协程；执行 init，即代码中的各种 init 函数；执行 main.main 函数。</li>\n</ul>\n<h4 id=\"os-thread-创建\"><a class=\"markdownIt-Anchor\" href=\"#os-thread-创建\">#</a> Os Thread 创建</h4>\n<p>准备运行的新 goroutine 将唤醒 P 以更好地分发工作。这个 P 将创建一个与之关联的 M 绑定到一个 OS thread。<br>\n<img data-src=\"/images/go/13-64.png\" alt=\"\"><br>\n<img data-src=\"/images/go/13-66.png\" alt=\"\"></p>\n<p><code>go func()</code>  中 触发  <code>Wakeup</code>  唤醒机制：<br>\n有空闲的  <code>P</code>  而没有在  <code>spinning</code>  状态的 M 时候，需要去唤醒一个空闲 (睡眠) 的  <code>M</code>  或者新建一个。当线程首次创建时，会执行一个特殊的  <code>G</code> ，即  <code>g0</code> ，它负责管理和调度  <code>G</code> 。<br>\n<img data-src=\"/images/go/13-65.png\" alt=\"\"></p>\n<h4 id=\"特殊的g0\"><a class=\"markdownIt-Anchor\" href=\"#特殊的g0\">#</a> 特殊的 g0</h4>\n<p><code>Go</code>  基于两种断点将  <code>G</code>  调度到线程上：</p>\n<ul>\n<li>当  <code>G</code>  阻塞时：系统调用、互斥锁或  <code>chan</code> 。阻塞的  <code>G</code>  进入睡眠模式 / 进入队列，并允许  <code>Go</code>  安排和运行等待其他的  <code>G</code> 。</li>\n<li>在函数调用期间，如果  <code>G</code>  必须扩展其堆栈。这个断点允许  <code>Go</code>  调度另一个  <code>G</code>  并避免运行  <code>G</code>  占用  <code>CPU</code> 。<br>\n在这两种情况下，运行调度程序的  <code>g0</code>  将当前  <code>G</code>  替换为另一个  <code>G</code> ，即  <code>ready to run</code> 。然后，选择的  <code>G</code>  替换  <code>g0</code>  并在线程上运行。与常规  <code>G</code>  相反， <code>g0</code>  有一个固定和更大的栈。</li>\n<li><code>Defer</code>  函数的分配</li>\n<li><code>GC</code>  收集，比如  <code>STW</code> 、扫描  <code>G</code>  的堆栈和标记、清除操作</li>\n<li>栈扩容，当需要的时候，由  <code>g0</code>  进行扩栈操作</li>\n</ul>\n<p><img data-src=\"/images/go/13-67.png\" alt=\"\"></p>\n<h4 id=\"schedule\"><a class=\"markdownIt-Anchor\" href=\"#schedule\">#</a> Schedule</h4>\n<p>在  <code>Go</code>  中， <code>G</code>  的切换相当轻便，其中需要保存的状态仅仅涉及以下两个：</p>\n<ul>\n<li><code>Goroutine</code>  在停止运行前执行的指令，程序当前要运行的指令是记录在程序计数器（ <code>PC</code> ）中的，  <code>G</code>  稍后将在同一指令处恢复运行；</li>\n<li><code>G</code>  的堆栈，以便在再次运行时还原局部变量；在切换之前，堆栈将被保存，以便在  <code>G</code>  再次运行时进行恢复：</li>\n</ul>\n<p><img data-src=\"/images/go/13-68.png\" alt=\"\"><br>\n<img data-src=\"/images/go/13-69.png\" alt=\"\"><br>\n<img data-src=\"/images/go/13-70.png\" alt=\"\"><br>\n<img data-src=\"/images/go/13-71.png\" alt=\"\"></p>\n<p>从  <code>g</code>  到  <code>g0</code>  或从  <code>g0</code>  到  <code>g</code>  的切换是相当迅速的，它们只包含少量固定的指令 ( <code>9-10ns</code> )。相反，对于调度阶段，调度程序需要检查许多资源以便确定下一个要运行的  <code>G</code> 。<br>\n当前  <code>g</code>  阻塞在 chan 上并切换到  <code>g0</code> ：</p>\n<ul>\n<li>1、PC 和堆栈指针一起保存在内部结构中；</li>\n<li>2、将 g0 设置为正在运行的 goroutine；</li>\n<li>3、g0 的堆栈替换当前堆栈；</li>\n</ul>\n<p><code>g0</code>  寻找新的  <code>Goroutine</code>  来运行<br>\n <code>g0</code>  使用所选的  <code>Goroutine</code>  进行切换：</p>\n<ul>\n<li>1、 <code>PC</code>  和堆栈指针是从其内部结构中获取的；</li>\n<li>2、程序跳转到对应的  <code>PC</code>  地址；</li>\n</ul>\n<p><img data-src=\"/images/go/13-72.png\" alt=\"\"></p>\n<h3 id=\"goroutine-recycle\"><a class=\"markdownIt-Anchor\" href=\"#goroutine-recycle\">#</a> Goroutine Recycle</h3>\n<p><code>goroutine</code>  重用</p>\n<p><code>G</code>  很容易创建，栈很小以及快速的上下文切换。基于这些原因，开发人员非常喜欢并使用它们。然而，一个产生许多  <code>shortlive</code>  的  <code>G</code>  的程序将花费相当长的时间来创建和销毁它们。<br>\n每个  <code>P</code>  维护一个  <code>freelist G</code> ，保持这个列表是本地的，这样做的好处是不使用任何锁来  <code>push/get</code>  一个空闲的  <code>G</code> 。当  <code>G</code>  退出当前工作时，它将被  <code>push</code>  到这个空闲列表中。</p>\n<p><img data-src=\"/images/go/13-73.png\" alt=\"\"></p>\n<p>为了更好地分发空闲的  <code>G</code>  ，调度器也有自己的列表。它实际上有两个列表：一个包含已分配栈的  <code>G</code> ，另一个包含释放过堆栈的  <code>G</code> （无栈）。<br>\n锁保护  <code>central list</code> ，因为任何 M 都可以访问它。当本地列表长度超过 64 时，调度程序持有的列表从  <code>P</code>  获取  <code>G</code> 。然后一半的  <code>G</code>  将移动到中心列表 ( <code>central list</code> )。需求回收  <code>G</code>  是一种节省分配成本的好方法。但是，由于堆栈是动态增长的，现有的 <code>G</code>  最终可能会有一个大栈。因此，<b>当堆栈增长（即超过 <code>2K</code> ）时， <code>Go</code>  不会保留这些栈。</b></p>\n<p><img data-src=\"/images/go/13-74.png\" alt=\"\"></p>\n<h2 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybmt1LmNvbS9hcnRpY2xlcy80MTcyOA==\">https://learnku.com/articles/41728</span></p>\n",
            "tags": [
                "go",
                "go-runtimes"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/03/04/mylogs/talk_about_log/",
            "url": "https://fangjiaxiaobai.github.io/2022/03/04/mylogs/talk_about_log/",
            "title": "聊聊日志",
            "date_published": "2022-03-04T10:18:18.000Z",
            "content_html": "<p><code>https://github.com/golang/glog</code> ，是  <code>google</code>  提供的一个不维护的日志库， <code>glog</code>  有其他语言的一些版本，对我当时使用  <code>log</code>  库有很大的影响。它包含如下日志级别：  <code>Info</code> ,  <code>Warning</code> ,  <code>Error</code> ,  <code>Fatal</code>  (会中断程序执行)<br>\n 还有类似  <code>log4go</code> ,  <code>loggo</code>  , <code>zap</code>  等其他第三方日志库，他们还提供了设置日志级别的可见行，一般提供日志级别：  <code>Trace</code>  ,  <code>Debug</code>  ,  <code>Info</code>  ,  <code>Warning</code>  ,  <code>Error</code>  ,  <code>Critical</code> .</p>\n<h2 id=\"日志级别\"><a class=\"markdownIt-Anchor\" href=\"#日志级别\">#</a> 日志级别</h2>\n<h3 id=\"warning\"><a class=\"markdownIt-Anchor\" href=\"#warning\">#</a> Warning</h3>\n<p>没人看警告，因为从定义上讲，没有什么出错。也许将来会出问题，但这听起来像是别人的问题。我们尽可能的消除警告级别，它要么是一条信息性消息，要么是一个错误。我们参考  <code>Go</code>  语言设计额哲学，所有警告都是错误，其他语言的  <code>warning</code>  都可以忽略，除非  <code>IDE</code>  或者在  <code>CICD</code>  流程中强制他们为  <code>error</code> ，然后逼着程序员们尽可能去消除。同样的，如果想要最终消除  <code>warning</code>  可以记录为  <code>error</code> ，让代码作者重视起来。</p>\n<h3 id=\"fatal\"><a class=\"markdownIt-Anchor\" href=\"#fatal\">#</a> Fatal</h3>\n<p>记录消息后，直接调用  <code>os.Exit(1)</code> ，这意味着： 在其他  <code>goroutine</code>   <code>defer</code>  语句不会被执行； 各种  <code>buffers</code>  不会被  <code>flush</code>  ，包括日志的； 临时文件或者目录不会被移除； 不要使用  <code>fatal</code>  记录日志，而是向调用者返回错误。如果错误一直持续到  <code>main.main</code> 。 <code>main.main</code>  那就是在退出之前做处理任何清理操作的正确位置。</p>\n<h3 id=\"error\"><a class=\"markdownIt-Anchor\" href=\"#error\">#</a> Error</h3>\n<p>也有很多人，在错误发生的地方要立马记录日志，尤其要使用  <code>error</code>  级别记录。</p>\n<p><img data-src=\"/images/mylogs/12-log-01.png\" alt=\"\"></p>\n<h4 id=\"处理-error\"><a class=\"markdownIt-Anchor\" href=\"#处理-error\">#</a> 处理 error</h4>\n<p>把  <code>error</code>  抛给调用者，在顶部打印日志；<br>\n如果您选择通过日志记录来处理错误，那么根据定义，它不再是一个错误 — 您已经处理了它。记录错误的行为会处理错误，因此不再适合将其记录为错误。</p>\n<p><img data-src=\"/images/mylogs/12-log-02.png\" alt=\"\"></p>\n<h3 id=\"debug\"><a class=\"markdownIt-Anchor\" href=\"#debug\">#</a> DEBUG</h3>\n<p>相信只有两件事你应该记录：</p>\n<ul>\n<li>开发人员在开发或调试软件时关心的事情。</li>\n<li>用户在使用软件时关心的事情。</li>\n</ul>\n<p>显然，它们分别是调试和信息级别。<br>\n <code>log.Info</code>  只需将该行写入日志输出。不应该有关闭它的选项，因为用户只应该被告知对他们有用的事情。如果发生了一个无法处理的错误，它就会抛出到  <code>main.main</code> 。 <code>main.main</code>  程序终止的地方。在最后的日志消息前面插入  <code>fatal</code>  前缀，或者直接写入  <code>os.Stderr</code> 。<br>\n <code>log.Debug</code> ，是完全不同的事情。它由开发人员或支持工程师控制。在开发过程中，调试语句应该是丰富的，而不必求助于  <code>trace</code>  或  <code>debug2</code> （您知道自己是谁）级别。日志包应该支持细粒度控制，以启用或禁用调试，并且只在包或更精细的范围内启用或禁用调试语句。</p>\n<p>B 站的 go 框架是如何设计和思考的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvLWtyYXRvcy9rcmF0b3MvdHJlZS92Mi4wLngvbG9n\">https://github.com/go-kratos/kratos/tree/v2.0.x/log</span></p>\n<h2 id=\"日志选型\"><a class=\"markdownIt-Anchor\" href=\"#日志选型\">#</a> 日志选型</h2>\n<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>\n<ul>\n<li>收集－能够采集多种来源的日志数据；</li>\n<li>传输－能够稳定的把日志数据传输到中央系统；</li>\n<li>存储－如何存储日志数据；</li>\n<li>分析－可以支持  <code>UI</code>  分析；</li>\n<li>警告－能够提供错误报告，监控机制；</li>\n</ul>\n<p>开源界鼎鼎大名  <code>ELK stack</code> ，分别表示： <code>Elasticsearch</code>  ,  <code>Logstash</code> ,  <code>Kibana</code>  , 它们都是开源软件。新增了一个  <code>FileBeat</code> ，它是一个轻量级的日志收集处理工具 ( <code>Agent</code> )， <code>Filebeat</code>  占用资源少，适合于在各个服务器上搜集日志后传输给  <code>Logstash</code> ，官方也推荐此工具。</p>\n<h3 id=\"elk\"><a class=\"markdownIt-Anchor\" href=\"#elk\">#</a> ELK</h3>\n<p>此架构由  <code>Logstash</code>  分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的  <code>Elasticsearch</code>  进行存储。<br>\n <code>Elasticsearch</code>  将数据以分片的形式压缩存储并提供多种  <code>API</code>  供用户查询，操作。用户亦可以更直观的通过配置  <code>Kibana Web</code>  方便的对日志查询，并根据数据生成报表。<br>\n因为  <code>logstash</code>  属于  <code>server</code>  角色，必然出现流量集中式的热点问题，因此我们不建议使用这种部署方式，同时因为 还需要做大量  <code>match</code>  操作（格式化日志），消耗的  <code>CPU</code>  也很多，不利于  <code>scale out</code> 。</p>\n<p><img data-src=\"/images/mylogs/12-log-03.png\" alt=\"\"></p>\n<p><img data-src=\"/images/mylogs/12-log-04.png\" alt=\"\"></p>\n<p>此种架构引入了消息队列机制，位于各个节点上的  <code>Logstash Agent</code>  先将数据 / 日志传递给  <code>Kafka</code> ，并将队列中消息或数据间接传递给  <code>Logstash</code> ， <code>Logstash</code>  过滤、分析后将数据传递给 <code>Elasticsearch</code>  存储。最后由  <code>Kibana</code>  将日志和数据呈现给用户。因为引入了  <code>Kafka</code> ，所以即使远端  <code>Logstash server</code>  因故障停止运行，数据将会先被存储下来，从而避免数据丢失。<br>\n更进一步的：  将收集端  <code>logstash</code>  替换为  <code>beats</code> , 更灵活，消耗资源更少，扩展性更强。</p>\n<p><img data-src=\"/images/mylogs/12-log-05.png\" alt=\"\"></p>\n<h2 id=\"日志系统的设计目标\"><a class=\"markdownIt-Anchor\" href=\"#日志系统的设计目标\">#</a> 日志系统的设计目标</h2>\n<ul>\n<li>接入方式收敛；</li>\n<li>日志格式规范；</li>\n<li>日志解析对日志系统透明；</li>\n<li>系统高吞吐、低延迟；</li>\n<li>系统高可用、容量可扩展、高可运维性；</li>\n</ul>\n<h2 id=\"日志系统的格式规范\"><a class=\"markdownIt-Anchor\" href=\"#日志系统的格式规范\">#</a> 日志系统的格式规范</h2>\n<p><code>JSON</code>  作为日志的输出格式：<br>\n <code>time</code> : 日志产生时间， <code>ISO8601</code>  格式；<br>\n <code>level</code> : 日志等级， <code>ERROR</code> 、 <code>WARN</code> 、 <code>INFO</code> 、 <code>DEBUG</code> ；<br>\n <code>app_id</code> : 应用 <code>id</code> ，用于标示日志来源；<br>\n <code>instance_id</code> : 实例  <code>id</code> ，用于区分同一应用不同实例，即  <code>hostname</code> ；</p>\n<p><img data-src=\"/images/mylogs/12-log-06.png\" alt=\"\"></p>\n<h2 id=\"日志系统的设计与实现\"><a class=\"markdownIt-Anchor\" href=\"#日志系统的设计与实现\">#</a> 日志系统的设计与实现</h2>\n<p>日志从产生到可检索，经历几个阶段：</p>\n<ul>\n<li><b>生产 &amp; 采集</b></li>\n<li><b>传输 &amp; 切分</b></li>\n<li><b>存储 &amp; 检索</b></li>\n</ul>\n<h3 id=\"采集\"><a class=\"markdownIt-Anchor\" href=\"#采集\">#</a> 采集</h3>\n<p><img data-src=\"/images/mylogs/12-log-07.png\" alt=\"\"></p>\n<h4 id=\"logstash\"><a class=\"markdownIt-Anchor\" href=\"#logstash\">#</a>  <code>logstash</code> ：</h4>\n<p>监听  <code>tcp/udp</code> <br>\n 适用于通过网络上报日志的方式</p>\n<h4 id=\"filebeat\"><a class=\"markdownIt-Anchor\" href=\"#filebeat\">#</a>  <code>filebeat</code> ：</h4>\n<p>直接采集本地生成的日志文件<br>\n适用于日志无法定制化输出的应用</p>\n<h4 id=\"logagent\"><a class=\"markdownIt-Anchor\" href=\"#logagent\">#</a>  <code>logagent</code> ：</h4>\n<p>物理机部署，监听  <code>unixsocket</code> <br>\n 日志系统提供各种语言  <code>SDK</code> <br>\n 直接读取本地日志文件</p>\n<p><img data-src=\"/images/mylogs/12-log-08.png\" alt=\"logagent的设计\"></p>\n<h3 id=\"传输\"><a class=\"markdownIt-Anchor\" href=\"#传输\">#</a> 传输</h3>\n<p>基于  <code>flume + Kafka</code>  统一传输平台<br>\n基于  <code>LogID</code>  做日志分流：</p>\n<ul>\n<li>一般级别</li>\n<li>低级别</li>\n<li>高级别（ <code>ERROR</code> ）</li>\n</ul>\n<p>现在替换为  <code>Flink + Kafka</code>  的实现方式。</p>\n<p><img data-src=\"/images/mylogs/12-log-09.png\" alt=\"\"></p>\n<h3 id=\"切分\"><a class=\"markdownIt-Anchor\" href=\"#切分\">#</a> 切分</h3>\n<p>从 <code>kafka</code>  消费日志，解析日志，写入 <code>elasticsearch</code> <br>\n <code>bili-index</code> : 自研， <code>golang</code>  开发，逻辑简单，性能 高，可定制化方便。<br>\n・日志规范产生的日志 ( <code>log agent</code>  收集)<br>\n <code>logstash</code> :  <code>es</code>  官方组件，基于  <code>jruby</code>  开发，功能强大， 资源消耗高，性能低。<br>\n・处理未按照日志规范产生的日志 ( <code>filebeat</code> 、 <code>logstash</code>  收集)，需配置各种日志解析规则。</p>\n<h3 id=\"存储和检索\"><a class=\"markdownIt-Anchor\" href=\"#存储和检索\">#</a> 存储和检索</h3>\n<p><code>elasticsearch</code>  多集群架构：<br>\n日志分级、高可用</p>\n<p>单数据集群内:<br>\n <code>master node + data node(hot/stale) + client node</code> <br>\n 每日固定时间进行热 -&gt; 冷迁移<br>\n <code>Index</code>  提前一天创建，基于  <code>template</code>  进行 <code>mapping</code>  管理<br>\n检索基于  <code>kibana</code></p>\n<h4 id=\"存储-文件\"><a class=\"markdownIt-Anchor\" href=\"#存储-文件\">#</a> 存储 - 文件</h4>\n<ul>\n<li>使用自定义协议，对  <code>SDK</code>  质量、版本升级都有比较高的要求，因此我们长期会使用 “本地文件” 的方案实现：</li>\n<li>采集本地日志文件：位置不限，容器内 <code>or</code>  物理机</li>\n<li>配置自描述：不做中心化配置，配置由  <code>app/paas</code>  自身提供， <code>agent</code>  读取配置并生效</li>\n<li>日志不重不丢：多级队列，能够稳定地处理日志收集过程中各种异常</li>\n<li>可监控：实时监控运行状态</li>\n<li>完善的自我保护机制：限制自身对于宿主机资源的消耗，限制发送速度</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "log",
                "go-log"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/02/24/go/go-errors/",
            "url": "https://fangjiaxiaobai.github.io/2022/02/24/go/go-errors/",
            "title": "浅析go的error",
            "date_published": "2022-02-24T10:18:18.000Z",
            "content_html": "<p>异常处理 方法解释：</p>\n<ul>\n<li><code>New</code> : 创建一个 <code>Error</code></li>\n<li><code>Is</code> ： 判断是不是特定的一个 <code>Error</code></li>\n<li><code>As</code> ：类型转换为特定的 <code>Error</code></li>\n<li><code>UnWrap</code> : 解除包装，返回被包装的 <code>error</code> .</li>\n</ul>\n<p><code>error.New(string)</code>  方法返回的是  <code>error struct</code>  的指针。</p>\n<p><code>errors is values</code> .  <code>error</code>  其实就是一个 <code>interface (struct)</code></p>\n<h1 id=\"error的类型\"><a class=\"markdownIt-Anchor\" href=\"#error的类型\">#</a>  <code>error</code>  的类型</h1>\n<h2 id=\"sentinel-error\"><a class=\"markdownIt-Anchor\" href=\"#sentinel-error\">#</a>  <code>Sentinel Error</code></h2>\n<p><code>Sentinel Error</code>  预定义的特定错误。我们称为  <code>Sentinel Error</code> . 这个名字来源于计算机编程中使用一个特定值来表示不可能进一步处理的错误。 类似于：  <code>io.EOF</code>  或者，更底层的： <code>syscall.ENOENT</code> .</p>\n<p>尽可能避免的使用 <code>Sentinel Error</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := errors.New(<span class=\"string\">&quot;this is a error&quot;</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(err.Error())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"error-type-错误类型\"><a class=\"markdownIt-Anchor\" href=\"#error-type-错误类型\">#</a>  <code>Error Type</code>  (错误类型)</h2>\n<p><code>Error Type</code>  是实现了  <code>error</code>  接口的自定义类型。例如下面的 <code>MyError</code> . 用户可以使用断言来转换这个错误，获取更多的异常信息。 如 下代码。相比于  <code>Sentinel Error</code> ,  <code>Error Type</code>  的一大改进就是 能够为包装底层  <code>error</code>  提供上下文。 例如 <code>os.PathError</code> . 但是：调用使用类型断言和类型  <code>switch</code>  . 就要让自定义的  <code>error</code>  变为  <code>public</code>  。 这种模型会导致错误类型和调用者强耦合，从而导致 <code>Api</code>  变得脆弱。</p>\n<p>建议：避免使用  <code>error Type</code>  或者 至少避免将他们作为公共 <code>API</code>  的一部分。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyError /** demo2.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmsg        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfileName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tlineNumber <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现了 error接口。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%s:%d: %s&quot;</span>, m.fileName, m.lineNumber, m.msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testError</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyError&#123;msg: <span class=\"string\">&quot;this is a error&quot;</span>, fileName: <span class=\"string\">&quot;demo8_error_resolve&quot;</span>, lineNumber: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := testError()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> err := err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *MyError:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;error: &quot;</span>, err.lineNumber)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"opaque-error\"><a class=\"markdownIt-Anchor\" href=\"#opaque-error\">#</a>  <code>Opaque Error</code></h2>\n<p>将这种风格称为 不透明错误。虽然你知道发生了错误，但是您没能力看到错误的内部，作为调用者，关于操作的结果，您所知道的就是他成功或者失败了<br>\n ==&gt; 只返回错误，但不返回错误内容。 ==&gt; 同时返回错误的类型，而不是错误的类型。 如下示例:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Write</span><span class=\"params\">(w io.Writer, buf []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t_, err := w.Write(buf)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;这里发生了错误，%w\\n&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OpaqueError /***** demo3</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> OpaqueError <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\terror</span><br><span class=\"line\">\tIsTemporary() <span class=\"keyword\">bool</span> <span class=\"comment\">// 是否是临时错误。</span></span><br><span class=\"line\">\tIsTimeout() <span class=\"keyword\">bool</span>   <span class=\"comment\">// 是否是超时</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> temporary <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tTemporary() <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为Temporary Error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isTemporary</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tte, ok := err.(temporary)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ok &amp;&amp; te.Temporary()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"handing-error-处理异常\"><a class=\"markdownIt-Anchor\" href=\"#handing-error-处理异常\">#</a>  <code>Handing Error</code>  处理异常</h1>\n<ul>\n<li>一种处理 <code>error</code>  的方式，编写代码技巧，让代码更易读。</li>\n<li><code>wrap Errors</code> . 使用第三方库。  <code>github.com/pkg/errors. go</code>  的 <code>1.13</code>  版本之后，可以使用:  <code>fmt.Errorf(&quot;%w&quot;,err)</code> . 和  <code>errors.Is()</code> , <code>errors.As()</code> . 规范：\n<ul>\n<li>如果是一个跨项目，多重复用的项目里，应该直接返回 <code>error</code> , 而不是返回包装后的 <code>error</code> .</li>\n<li>如果函数 / 方法不打算处理错误，那么用足够的上下文  <code>wrap error</code>  并将其返回到调用堆栈中。</li>\n<li>一旦确定函数 / 方法要处理错误，错误就不再是错误， 如果函数 / 方法仍然需要发出返回，则它不能返回错误值，它应该只返回零 (比如降级处理中， 你返回了 降级数据，然后需要返回 <code>nil</code> .)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"go-2x-的发展参考\"><a class=\"markdownIt-Anchor\" href=\"#go-2x-的发展参考\">#</a>  <code>go 2.x</code>  的发展参考</h1>\n<p>建议多看看，可以把握一下  <code>go</code>  未来的发展方向</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi8yOTkzNC1lcnJvci12YWx1ZXMubWQ=\">https://go.googlesource.com/proposal/+/master/design/29934-error-values.md</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi9nbzJkcmFmdC1lcnJvci1oYW5kbGluZy5tZA==\">https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi9nbzJkcmFmdC1lcnJvci1oYW5kbGluZy1vdmVydmlldy5tZA==\">https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md</span></p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "go",
                "go-error"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/02/11/notes/architecture/Learn_Architecture_From_zero-01-basic/",
            "url": "https://fangjiaxiaobai.github.io/2022/02/11/notes/architecture/Learn_Architecture_From_zero-01-basic/",
            "title": "【笔记】 从0开始学架构 一 架构基础",
            "date_published": "2022-02-11T10:18:18.000Z",
            "content_html": "<p><span class=\"spoiler\" title=\"...\">本文是学习 极客时间 - 李运华 - 从 0 开始学架构 的笔记。侵删～</span></p>\n<p class=\"gallery\" data-height=\"300\"><img data-src=\"/images/architecture/Learn_Architecture_From_0/course.jpeg\" alt=\"购课链接\"></p>\n<p><span class=\"label warning\">🔥购买后加微信，返现赏金 (全额)</span></p>\n<p><mark>架构设计的关键思维在于判断和取舍。程序设计的关键思维在于逻辑和实现.</mark></p>\n<h2 id=\"定义架构\"><a class=\"markdownIt-Anchor\" href=\"#定义架构\">#</a> 定义架构.</h2>\n<p><b>软件架构 指软件系统的顶层结构</b></p>\n<ul>\n<li>系统是一群关联个体组成的。这些个体可以是子系统，模块，组件等。架构需要明确系统中包含哪些个体。</li>\n<li>系统中的个体需要” 根据魔种规则 “运作，架构需要明确个体运作和协作的规则。</li>\n<li>维基百科定义的架构用到了 “基础结构” 这个说法，我改为 “顶层结构”，可以更好<br>\n地区分系统和子系统，避免将系统架构和子系统架构混淆在一起导致架构层次混乱。</li>\n</ul>\n<p>架构是顶层设计，框架是面向编程或配置的半成品，组件是从技术维度上的复用， 模型是从业务维度上职责的划分，系统是相互协同可运行的实体。</p>\n<h2 id=\"架构设计的历史背景\"><a class=\"markdownIt-Anchor\" href=\"#架构设计的历史背景\">#</a> 架构设计的历史背景</h2>\n<h3 id=\"软件开发进化的历史\"><a class=\"markdownIt-Anchor\" href=\"#软件开发进化的历史\">#</a> 软件开发进化的历史</h3>\n<ul>\n<li><code>1940</code>  年之前，机器语言。\n<ul>\n<li>直接使用二进制  <code>0</code>  和  <code>1</code>  来标识机器可以识别的指令和数据。</li>\n<li>机器语言的主要问题是：太难写，太难读，太难改。</li>\n</ul>\n</li>\n<li><code>20</code>  世纪 <code>40</code>  年代 汇编语言\n<ul>\n<li>符号语言，用助记符代替机器指令的操作码，用地址符号或者标号代替指令和操作数的地址。</li>\n<li>编写复杂。</li>\n<li>不同 <code>CPU</code>  的汇编指令和结构是不同的。</li>\n</ul>\n</li>\n<li><code>20</code>  世界 <code>50</code>  年代 高级语言\n<ul>\n<li>通过编译程序的处理，高级语言可以被编译为适合不同  <code>CPU</code>  指令的机器语言。<br>\n程序员只要写一次程序，就可以在多个不同的机器上编译运行，无须根据不同的机器指令重<br>\n写整个程序。</li>\n</ul>\n</li>\n<li><code>20</code>  世纪 <code>60</code>  年代 - <code>70</code>  年代 第一次软件危机和结构化程序设计\n<ul>\n<li><code>20</code>  世纪 <code>60</code>  年代中期，由于软件的” 逻辑 “变得非常复杂。爆发了软件危机，随后提出了软件工程的解决方法，但是 软件工程无法根除软件危机，只能在一定程度上环节软件危机。</li>\n<li>差不多同时间，” 结构化程序设计 “作为另外一种解决软件危机的方案被提了出来。并诞生了第一个结构化的程序语言： <code>Pascal</code> .</li>\n<li>结构化程序设计本质上还是一种面向过程的设计思想，但通过 “自顶向下、逐步细化、模块化” 的方法，将软件的复杂度控制在一定范围内，从而从整体上降低了软件开发的复杂度。结构化程序方法成为了  <code>20</code>  世纪  <code>70</code>  年代软件开发的潮流。</li>\n</ul>\n</li>\n<li><code>20</code>  世纪 <code>80</code>  年代 第二次软件危机和面向对象\n<ul>\n<li>由于软件生产力远远跟不上硬件和业务的发展。第二次软件危机爆发了。主要表现为 软件的扩展变得非常复杂。</li>\n<li>软件领域迫切希望找到新的银弹来解决软件危机，在这种背景下，面向对象的思想开始流行起来。</li>\n<li>面向对象真正开始流行是在  <code>20</code>  世纪  <code>80</code>  年代，主要得益于  <code>C++</code>  的功劳，后来的  <code>Java</code> 、 <code>C#</code>  把面向对象推向了新的高峰。到现在为止，面向对象已经成为了主流的开发思想。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"软件架构的历史背景\"><a class=\"markdownIt-Anchor\" href=\"#软件架构的历史背景\">#</a> 软件架构的历史背景</h3>\n<p>软件架构的出现有其历史必然性。  <code>20</code>  世纪  <code>60</code>  年代第一次软件危机引出了 “结构化编程”，创造了 “模块” 概念； <code>20</code>  世纪  <code>80</code>  年代第二次软件危机引出了 “面向对象编程”，创造了 “对象” 概念；到了  <code>20</code>  世纪  <code>90</code>  年代 “软件架构” 开始流行，创造了 “组件” 概念。我们可以看到，“模块”“对象”“组件” 本质上都是对达到一定规模的软件进行拆分，差别只是在于随着软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。</p>\n<h2 id=\"架构设计的目的\"><a class=\"markdownIt-Anchor\" href=\"#架构设计的目的\">#</a> 架构设计的目的</h2>\n<p><span class=\"label success\">架构设计是解决系统复杂度带来的问题</span></p>\n<h3 id=\"复杂度来源高性能\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源高性能\">#</a> 复杂度来源：高性能</h3>\n<p>软件系统中 高性能 带来的复杂度主要体现在两方面。</p>\n<ul>\n<li>单台计算机内部为了高性能带来的复杂度</li>\n<li>多台计算机集群为了高性能带来的复杂度</li>\n</ul>\n<h3 id=\"复杂度来源高可用\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源高可用\">#</a> 复杂度来源：高可用</h3>\n<p>系统无中断的执行其功能的能力，代表系统的可用性程度，是进行系统设计时的准则之一。</p>\n<p>无中断？硬件会出故障，软件会有 <code>bug</code> , 硬件会老化，软件会越来越复杂和庞大。断电，断网，地震等等外部因素也不可能做到 “无中断”。</p>\n<p>系统高可用的方案，本质上都是通过 冗余 来实现的。</p>\n<p>高性能增加机器的目的是在于扩展，高可用增加机器的目的在于 冗余 处理单元。</p>\n<h4 id=\"计算高可用\"><a class=\"markdownIt-Anchor\" href=\"#计算高可用\">#</a> 计算高可用</h4>\n<p>这里的计算是个名词。计算指的是，业务的逻辑处理。</p>\n<p>从一台业务服务扩展到两台业务服务时，必须要增加一个任务分配器 (第三者) 来协调 (调度) 哪台机器提供服务。这里就要考虑： 性能，成本，可维护性，可用性等方面因素。</p>\n<p>任务分配器和真正的业务服务器之间有连接和交互，需要选择合适的连接方式，并且对连接进行管理。例如，连接建立、连接检测、连接中断后如何处理等。任务分配器需要增加分配算法。例如，常见的双机算法有主备、主主，主备方案又可以细分为冷备、温备、热备。</p>\n<p><img data-src=\"/images/architecture/Learn_Architecture_From_0/01-gaokeyong01.png\" alt=\"\"></p>\n<h4 id=\"存储高可用\"><a class=\"markdownIt-Anchor\" href=\"#存储高可用\">#</a> 存储高可用</h4>\n<p>存储和计算相比，有一个本质的区别：将数据从一台机器搬到另一台机器，需要经过线路进行传输。</p>\n<p>线路传输的速度是毫秒级的，但是对高可用系统，有这本质上的不同。 这意味着整个系统在某个时间点上，数据肯定是不一致的。按照 “<span class=\"label warning\">数据 + 逻辑 = 业务</span>” 这个公式来套的话，数据不一致，即使逻辑一致，最后的业务表现就不一样了。</p>\n<p>所以： 存储高可用的难点 不在于 如何备份数据，而在于如何减少或者规避数据不一致对业务造成的影响。</p>\n<h4 id=\"高可用状态决策\"><a class=\"markdownIt-Anchor\" href=\"#高可用状态决策\">#</a> 高可用状态决策</h4>\n<p>无论是计算高可用还是存储高可用，其基础都是 “状态决策”，即系统需要能够判断当前的状态是正常还是异常，如果出现了异常就要采取行动来保证高可用。但在具体实践的过程中，恰好存在一个本质的矛盾：通过冗余来实现的高可用系统，状态决策本质上就不可能做到完全正确。</p>\n<h5 id=\"独裁式决策\"><a class=\"markdownIt-Anchor\" href=\"#独裁式决策\">#</a> 独裁式决策</h5>\n<p>独裁式决策指的是存在一个独立的决策主体，我们姑且称它为 “决策者”，负责收集信息然后进行决策；所有冗余的个体，我们姑且称它为 “上报者”，都将状态信息发送给决策者。</p>\n<p><img data-src=\"/images/architecture/Learn_Architecture_From_0/01-gaokeyong02.png\" alt=\"\"></p>\n<p>独裁式的决策方式不会出现决策混乱的问题，因为只有一个决策者，但问题也正是在于只有一个决策者。当决策者本身故障时，整个系统就无法实现准确的状态决策。如果决策者本身又做一套状态决策，那就陷入一个递归的死循环了。</p>\n<h5 id=\"协商式\"><a class=\"markdownIt-Anchor\" href=\"#协商式\">#</a> 协商式</h5>\n<p>协商式决策指的是两个独立的个体通过交流信息，然后根据规则进行决策，最常用的协商式决策就是主备决策。</p>\n<h5 id=\"民主式\"><a class=\"markdownIt-Anchor\" href=\"#民主式\">#</a> 民主式</h5>\n<p>民主式决策指的是多个独立的个体通过投票的方式来进行状态决策。例如， <code>ZooKeeper</code>  集群在选举  <code>leader</code>  时就是采用这种方式。</p>\n<p>这种方式实现复杂，还有一个缺陷：脑裂。脑裂的根本原因是，原来统一的集群因为连接中断，造成了两个独立分隔的子集群，每个子集群单独进行选举，于是选出了  <code>2</code>  个主机，相当于人体有两个大脑了。</p>\n<p>为了解决脑裂问题，民主式决策的系统一般都采用 “投票节点数必须超过系统总节点数一半” 规则来处理。，但同时降低了系统整体的可用性，即如果系统不是因为脑裂问题导致投票节点数过少，而真的是因为节点故障时系统也不会选出主节点，整个系统就相当于宕机了，</p>\n<p>综合分析，无论采取什么样的方案，状态决策都不可能做到任何场景下都没有问题，但完全不做高可用方案又会产生更大的问题，如何选取适合系统的高可用方案，也是一个复杂的分析、判断和选择的过程。</p>\n<h3 id=\"复杂度来源可扩展性\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源可扩展性\">#</a> 复杂度来源：可扩展性</h3>\n<p>设计具备良好可扩展性的系统，有两个基本条件：正确预测变化、完美封装变化。但要达成这两个条件，本身也是一件复杂的事情。</p>\n<h4 id=\"预测变化\"><a class=\"markdownIt-Anchor\" href=\"#预测变化\">#</a> 预测变化</h4>\n<p>预测变化的复杂性在于：</p>\n<ul>\n<li><ins class=\"wavy success\">不能每个设计点都考虑可扩展性。</ins></li>\n<li><ins class=\"wavy success\">不能完全不考虑可扩展性。</ins></li>\n<li><ins class=\"wavy success\">所有的预测都存在出错的可能性。</ins></li>\n</ul>\n<p>对于架构师来说，如何把握预测的程度和提升预测结果的准确性，是一件很复杂的事情，而且没有通用的标准可以简单套上去，更多是靠自己的经验、直觉，所以架构设计评审的时候经常会出现两个设计师对某个判断争得面红耳赤的情况，原因就在于没有明确标准，不同的人理解和判断有偏差，而最终又只能选择一个判断。</p>\n<h4 id=\"应对变化\"><a class=\"markdownIt-Anchor\" href=\"#应对变化\">#</a> 应对变化</h4>\n<p><ins class=\"wavy success\">预测变化是一回事，采取什么方案来应对变化，又是另外一个复杂的事情.</ins></p>\n<ul>\n<li>\n<p>第一种应对变化的常见方案是将 “变化” 封装在一个 “变化层”，将不变的部分封装在一个独立的 “稳定层”。那么主要的问题就会聚焦在 变化层和稳定层。</p>\n<ol>\n<li>系统需要拆分出变化层和稳定层对于哪些属于变化层，哪些属于稳定层，很多时候并不是像前面的示例（不同接口协议或者不同数据库）那样明确，不同的人有不同的理解，导致架构设计评审的时候可能吵翻天。</li>\n<li>需要设计变化层和稳定层之间的接口接口设计同样至关重要，对于稳定层来说，接口肯定是越稳定越好；但对于变化层来说，在有差异的多个实现方式中找出共同点，并且还要保证当加入新的功能时原有的接口设计不需要太大修改，这是一件很复杂的事情。</li>\n</ol>\n</li>\n<li>\n<p>第二种常见的应对变化的方案是提炼出一个 “抽象层” 和一个 “实现层”。抽象层是稳定的，实现层可以根据具体业务需要定制开发，当加入新的功能时，只需要增加新的实现，无须修改抽象层。这种方案典型的实践就是设计模式和规则引擎。</p>\n</li>\n</ul>\n<p><ins>封装变化，隔离可变性</ins></p>\n<h3 id=\"复杂度来源低成本\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源低成本\">#</a> 复杂度来源：低成本</h3>\n<p>低成本给架构设计带来的主要复杂度体现在，往往只有 “创新” 才能达到低成本目标。无论是引入新技术，还是自己创造新技术，都是一件复杂的事情。引入新技术的主要复杂度在于需要去熟悉新技术，并且将新技术与已有技术结合起来；创造新技术的主要复杂度在于需要自己去创造全新的理念和技术，并且新技术跟旧技术相比，需要有质的飞跃。</p>\n<h3 id=\"复杂度来源安全\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源安全\">#</a> 复杂度来源：安全</h3>\n<p>安全本身是一个庞大而又复杂的技术领域，并且一旦出问题，对业务和企业形象影响非常大。<br>\n从技术的角度来讲，安全可以分为两类：一类是功能上的安全，一类是架构上的安全。</p>\n<ul>\n<li>功能安全是一个逐步完善的过程，而且往往都是在问题出现后才能有针对性的提出解决方案，我们永远无法预测系统下一个漏洞在哪里，也不敢说自己的系统肯定没有任何问题、</li>\n<li>架构安全：传统的架构安全主要依靠防火墙，防火墙最基本的功能就是隔离网络，通过将网络划分成不同的区域，制定出不同区域之间的访问控制策略来控制不同信任程度区域间传送的数据流。</li>\n</ul>\n<p>基于上述原因，互联网系统的架构安全目前并没有太好的设计手段来实现，更多地是依靠运营商或者云服务商强大的带宽和流量清洗的能力，较少自己来设计和实现。</p>\n<p><code>2018</code>  年，美国东部时间  <code>2</code>  月  <code>28</code>  日， <code>GitHub</code>  在一瞬间遭到高达  <code>1.35Tbps</code>  的带宽攻击。</p>\n<h3 id=\"复杂度来源规模\"><a class=\"markdownIt-Anchor\" href=\"#复杂度来源规模\">#</a> 复杂度来源：规模</h3>\n<p>规模带来复杂度的主要原因就是 “量变引起质变”，当数量超过一定的阈值后，复杂度会发生质的变化。常见的规模带来的复杂度有：</p>\n<ol>\n<li>功能越来越多，导致系统复杂度指数级上升</li>\n<li>数据越来越多，系统复杂度发生质变</li>\n</ol>\n<h2 id=\"架构设计原则\"><a class=\"markdownIt-Anchor\" href=\"#架构设计原则\">#</a> 架构设计原则</h2>\n<p>对于编程来说，本质上是不能存在不确定的，对于同样一段代码，不管是谁写的，不管什么时候执行，执行的结果应该都是确定的（注意：“确定的” 并不等于 “正确的”，有  <code>bug</code>  也是确定的）。而对于架构设计来说，本质上是不确定的，同样的一个系统， <code>A</code>  公司和  <code>B</code>  公司做出来的架构可能差异很大，但最后都能正常运转；同样一个方案， <code>A</code>  设计师认为应该这样做， <code>B</code>  设计师认为应该那样做，看起来好像都有道理…… 相比编程来说，架构设计并没有像编程语言那样的语法来进行约束，更多的时候是面对多种可能性时进行选择。</p>\n<h3 id=\"合适原则\"><a class=\"markdownIt-Anchor\" href=\"#合适原则\">#</a> 合适原则</h3>\n<p><span class=\"label success\">❤️❤️❤️合适原则宣言：“合适优于业界领先”</span></p>\n<p>真正优秀的架构都是在企业当前人力、条件、业务等各种约束下设计出来的，能够合理地将资源整合在一起并发挥出最大功效，并且能够快速落地。这也是很多 BAT 出来的架构师到了小公司或者创业团队反而做不出成绩的原因，因为没有了大公司的平台、资源、积累，只是生搬硬套大公司的做法，失败的概率非常高。</p>\n<h3 id=\"演化原则\"><a class=\"markdownIt-Anchor\" href=\"#演化原则\">#</a> 演化原则</h3>\n<p><span class=\"label success\">❤️❤️演化原则宣言：“演化优于一步到位”</span></p>\n<p>对于建筑来说，永恒是主题；而对于软件来说，变化才是主题。软件架构需要根据业务的发展而不断变化。设计  <code>Windows</code>  和  <code>Android</code>  的人都是顶尖的天才，即便如此，他们也不可能在  <code>1985</code>  年设计出  <code>Windows 8</code> ，不可能在  <code>2009</code>  年设计出  <code>Android 6.0</code> 。</p>\n<p>考虑到软件架构需要根据业务发展不断变化这个本质特点，软件架构设计其实更加类似于大自然 “设计” 一个生物，通过演化让生物适应环境，逐步变得更加强大：</p>\n<p>首先，设计出来的架构要满足当时的业务需要。<br>\n其次，架构要不断地在实际应用过程中迭代，保留优秀的设计，修复有缺陷的设计，改正错误的设计，去掉无用的设计，使得架构逐渐完善。<br>\n第三，当业务发生变化时，架构要扩展、重构，甚至重写；代码也许会重写，但有价值的经验、教训、逻辑、设计等（类似生物体内的基因）却可以在新架构中延续。</p>\n<h3 id=\"简单原则\"><a class=\"markdownIt-Anchor\" href=\"#简单原则\">#</a> 简单原则</h3>\n<p><span class=\"label success\">❤️简单原则宣言：“简单优于复杂”</span></p>\n<p>结构上的复杂性存在的第三个问题是，定位一个复杂系统中的问题总是比简单系统更加困难。首先是组件多，每个组件都有嫌疑，因此要逐一排查；其次组件间的关系复杂，有可能表现故障的组件并不是真正问题的根源。</p>\n<p>逻辑上的复杂。</p>\n<p>综合前面的分析，我们可以看到，无论是结构的复杂性，还是逻辑的复杂性，都会存在各种问题，所以架构设计时如果简单的方案和复杂的方案都可以满足需求，最好选择简单的方案。</p>\n<p>课程中介绍了两个案例：淘宝和手机 <code>qq</code> .</p>\n<p>两本书：《淘宝技术发展》 . 《QQ 1.4 亿在线背后的故事》</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "架构",
                "笔记"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/01/07/daily/2022-01-07/",
            "url": "https://fangjiaxiaobai.github.io/2022/01/07/daily/2022-01-07/",
            "title": "Springboot集成Netty.",
            "date_published": "2022-01-07T10:18:18.000Z",
            "content_html": "<h2 id=\"添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#添加依赖\">#</a> 添加依赖</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.72.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建服务\"><a class=\"markdownIt-Anchor\" href=\"#创建服务\">#</a> 创建服务</h2>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line_number&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelOption;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.LineBasedFrameDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PreDestroy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Netty 服务端</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022-01-07 23:37</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterServer2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * boss 线程组用于处理连接工作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> EventLoopGroup boss = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * work 线程组用于数据处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> EventLoopGroup work = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChannelHandler childHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * SpringBoot 启动的时候 调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException 中断异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">        bootstrap.group(boss, work)</span><br><span class=\"line\">            <span class=\"comment\">// 指定Channel </span></span><br><span class=\"line\">            .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">            <span class=\"comment\">//使用指定的端口设置套接字地址</span></span><br><span class=\"line\">            .localAddress(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">7788</span>))</span><br><span class=\"line\">            <span class=\"comment\">//服务端可连接队列数,对应TCP/IP协议listen函数中backlog参数</span></span><br><span class=\"line\">            .option(ChannelOption.SO_BACKLOG, <span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"comment\">//设置TCP长连接,一般如果两个小时内没有数据的通信时,TCP会自动发送一个活动探测数据报文</span></span><br><span class=\"line\">            .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">            <span class=\"comment\">//将小的数据包包装成更大的帧进行传送，提高网络的负载,即TCP延迟传输</span></span><br><span class=\"line\">            .childOption(ChannelOption.TCP_NODELAY, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;Channel&gt;() &#123; ④</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(Channel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    ch.pipeline()</span><br><span class=\"line\">                        <span class=\"comment\">//添加编码器 ⓪</span></span><br><span class=\"line\">                        .addLast(<span class=\"keyword\">new</span> RouterMessageEncode())</span><br><span class=\"line\">                        <span class=\"comment\">//添加Netty 自带的 换行解码器（用来解决 沾包，拆包） ①</span></span><br><span class=\"line\">                        .addLast(<span class=\"keyword\">new</span> LineBasedFrameDecoder(<span class=\"number\">1024</span>))</span><br><span class=\"line\">                        <span class=\"comment\">//添加自定义的 解码器 ②</span></span><br><span class=\"line\">                        .addLast(<span class=\"keyword\">new</span> RouterMessageDecode())</span><br><span class=\"line\">                        <span class=\"comment\">//添加 接收消息的 处理器 ③</span></span><br><span class=\"line\">                        .addLast(<span class=\"keyword\">new</span> ServiceMessageReceiveHandler());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        ChannelFuture future = bootstrap.bind().sync();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (future.isSuccess()) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;start router Server success on port 7788&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * SpringBoot 销毁的时候 调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException 中断异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        boss.shutdownGracefully().sync();</span><br><span class=\"line\">        work.shutdownGracefully().sync();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;关闭Netty&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>🔥 ⓪: <code>RouterMessageEncode</code> : 这个是我们自己实现的消息编码器。<br>\n🔥①: 使用 <code>Netty</code>  提供的包处理工具，处理粘包问题已经用来拆包。<br>\n🔥②: 自定义的解码器。<br>\n🔥③: 自定义的消息处理器。 通用用来编写业务逻辑。<br>\n🔥④: 这里配置的是在 <code>Netty</code>  启动时，需要添加的  <code>Channel</code> .</p>\n<h2 id=\"自定义编码器\"><a class=\"markdownIt-Anchor\" href=\"#自定义编码器\">#</a> 自定义编码器</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToMessageEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.CharBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编码器</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022-01-07 23:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterMessageEncode</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToMessageEncoder</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, String message,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        List&lt;Object&gt; list)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        list.add(ByteBufUtil.encodeString(channelHandlerContext.alloc(), CharBuffer.wrap(message), Charset.defaultCharset()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义解码器\"><a class=\"markdownIt-Anchor\" href=\"#自定义解码器\">#</a> 自定义解码器</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToMessageDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解码器</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022-01-07 23:54</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterMessageDecode</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToMessageDecoder</span>&lt;<span class=\"title\">ByteBuf</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf msg, List&lt;Object&gt; list)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 解码</span></span><br><span class=\"line\">        String message = msg.toString(Charset.defaultCharset());</span><br><span class=\"line\">        list.add(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息处理逻辑\"><a class=\"markdownIt-Anchor\" href=\"#消息处理逻辑\">#</a> 消息处理逻辑</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消息处理器</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022-01-07 23:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceMessageReceiveHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, String msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到消息:&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册一个  channel</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx ChannelHandlerContext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRegistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelRegistered(ctx);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;channel registed ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * channel 退出</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelUnregistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelUnregistered(ctx);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;channel unregistered ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收到的事件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx ChannelHandlerContext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> evt Object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">userEventTriggered</span><span class=\"params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.userEventTriggered(ctx, evt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (evt <span class=\"keyword\">instanceof</span> IdleStateEvent) &#123;</span><br><span class=\"line\">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;event:&quot;</span> + event.state());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通道异常 应该在此关闭通道</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cause</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.exceptionCaught(ctx, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<p>编写一个客户端进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.Delimiters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022-01-08 00:40</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        bootstrap.group(group);</span><br><span class=\"line\">        <span class=\"comment\">// 第2步 绑定客户端通道</span></span><br><span class=\"line\">        bootstrap.channel(NioSocketChannel.class);</span><br><span class=\"line\">        <span class=\"comment\">//第3步 给NIoSocketChannel初始化handler， 处理读写事件</span></span><br><span class=\"line\">        <span class=\"comment\">//通道是NioSocketChannel</span></span><br><span class=\"line\">        bootstrap.handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//字符串编码器，一定要加在SimpleClientHandler 的上面</span></span><br><span class=\"line\">                ch.pipeline().addLast(<span class=\"keyword\">new</span> StringEncoder())</span><br><span class=\"line\">                    .addLast(<span class=\"keyword\">new</span> DelimiterBasedFrameDecoder(</span><br><span class=\"line\">                        Integer.MAX_VALUE, Delimiters.lineDelimiter()[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">        ChannelFuture future = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7788</span>).sync();</span><br><span class=\"line\">        System.out.println(future.isSuccess());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            future.channel().writeAndFlush(<span class=\"string\">&quot;test netty message\\r\\n&quot;</span>).sync(); ⑤</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发送成功。。。。。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>🔥⑤ 注意这里，需要加上  <code>\\r\\n</code> , 否则你永远收不到消息。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "日常",
                "Springboot",
                "Netty"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/01/02/rocketMQ/3-01-RocketMQ-Transaction-msg/",
            "url": "https://fangjiaxiaobai.github.io/2022/01/02/rocketMQ/3-01-RocketMQ-Transaction-msg/",
            "title": "RocketMQ事务实现原理",
            "date_published": "2022-01-02T10:18:00.000Z",
            "content_html": "<p>最近有点浮躁，玩了一个周，没有写文章了。今天继续搞 <code>RocketMQ</code>  的事务实现。</p>\n<h2 id=\"往期文章\"><a class=\"markdownIt-Anchor\" href=\"#往期文章\">#</a> 往期文章</h2>\n<ul>\n<li><a href=\"/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/\">RocketMQ 搭建</a></li>\n<li><a href=\"/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/\">RocketMQ 架构设计之启动</a></li>\n<li><a href=\"/2021/09/28/rocketMQ/2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF/\">RocketMQ 架构设计之消息</a></li>\n</ul>\n<h2 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\">#</a> 分布式事务</h2>\n<p>分布式事务，是指事务的发起者、资源及资源管理器和事务协调者分别位于分布式系统的不同节点之上。当然，分布式事务也是一个老生常谈的话题，尤其是面试中。常用的分布式事务解决方案有很多，比如：两阶段提交， <code>TCC</code> ， <code>SAGA</code>  等等。</p>\n<p>本篇文章，我主要看看  <code>RocketMQ</code>  的事务实现。</p>\n<h2 id=\"从一个例子开始\"><a class=\"markdownIt-Anchor\" href=\"#从一个例子开始\">#</a> 从一个例子开始</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事务消息的监听器。</span></span><br><span class=\"line\">TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\"><span class=\"comment\">// 创建一个 事务消息生产者</span></span><br><span class=\"line\">TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Message msg =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest1234&quot;</span>, <span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;KEY&quot;</span> + i,</span><br><span class=\"line\">            (<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">    <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">    SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">1000L</span> * <span class=\"number\">60</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">producer.shutdown();</span><br></pre></td></tr></table></figure>\n<p>这里我们介绍下事务消息的常用的 <code>API</code>  吧。</p>\n<ul>\n<li><code>producer.setTransactionListener()</code> . 设置检测事务消息的回调。当定时任务执行检测到有事务消息时就会调用  <code>checkLocalTransaction</code>  方法。</li>\n<li><code>producer.setExecutorService(ExecutorService executorService)</code> : 设置检查事务的线程池。默认使用: <code>ThreadPoolExecutor</code> , 每分钟执行一次。</li>\n<li><code>producer.sendMessageInTransaction(final Message msg, final Object arg)</code> : 发送事务消息。</li>\n</ul>\n<p>从上面的这个案例来看， 发送事务消息 和 普通消息的发送并没有什么太大的不同，只是需要创建  <code>TransactionMQProducer</code>  和 使用  <code>sendMessageInTransaction</code>  发送消息就可以了。</p>\n<p>其中 <code>TransactionMQProducer</code>  继承了 <code>DefaultMQProducer</code> , 这个并不陌生了，我们在<a href=\"/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/\"> RocketMQ 架构设计之启动</a>这篇文章中，已经看过很多次了。而在启动时，案例中的 <code>producer.start();</code>  就是直接调用父类 <code>DefaultMQProducer</code>  的  <code>start()</code>  方法， <code>DefaultMQProducer</code>  会通过  <code>defaultMQProducerImpl.start()</code>  完成整个生产者部分的启动。这里就不多赘述了。</p>\n<p>我们来看最精彩的发送消息的过程.</p>\n<p><code>producer.sendMessageInTransaction(msg, null)</code></p>\n<p>我们一路追踪  <code>sendMessageInTransaction</code>  方法，很容易就看到了： <code>DefaultMQProducerImpl#sendMessageInTransaction</code></p>\n<p>这个方法主要有两个部分，如下图：</p>\n<p><img data-src=\"/images/rocketmq/3-01-01.png\" alt=\"\"></p>\n<p>第一部分：发送带有 事务标识 ( <code>TRAN_MSG</code> ) 的消息.<br>\n 第二部分：结束事务。 主要有提交  <code>offset</code> , 和 同步给  <code>Broker</code>  是  <code>commit</code>  还是  <code>rollback</code> .</p>\n<p><b>所以， <code>RocketMQ</code>  使用的分布式事务方案是：二阶段提交 (XA) </b></p>\n<h3 id=\"事务消息生产过程\"><a class=\"markdownIt-Anchor\" href=\"#事务消息生产过程\">#</a> 事务消息生产过程</h3>\n<p>发送消息的过程，在上篇文章中我们也已经说过了: <a href=\"/2021/09/28/rocketMQ/2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF/\">RocketMQ 系列 - 架构设计之消息</a>。 可以总结为 <code>3</code>  步，根据  <code>topic</code>  获取路由元数据， 选择适合的  <code>MessageQueue</code>  进行存储， 将  <code>Message</code>  通过  <code>Netty</code>  发送给  <code>Broker</code> .</p>\n<p>特别需要注意的时候，在发送事务消息的时候，会给消息添加事务标志。  <code>MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, &quot;true&quot;);</code>  这里是干什么用的呢？接着往下看</p>\n<p><img data-src=\"/images/rocketmq/3-01-02.png\" alt=\"\"></p>\n<p><code>TransactionalMessageService</code>  和  <code>MessageStore</code>  这两种存储方式有什么不同呢？</p>\n<p>其实存储并没有什么不同，而是存储的消息是不一样的，我们继续往下看：</p>\n<p><img data-src=\"/images/rocketmq/3-01-03.png\" alt=\"\"></p>\n<p><code>TransactionalMessageService</code>   使用的存储和 普通消息都是一样的，都是在启动时候创建的  <code>MessageStore</code> . 不同的是，事务消息存储的 经过   <code>parseHalfMessageInner</code>  处理之后的 消息.</p>\n<p><img data-src=\"/images/rocketmq/3-01-04.png\" alt=\"\"></p>\n<p>可以看到，处理之后消息， <code>topic</code>  和  <code>queueId</code>  都被设置成了默认的   <code>RMQ_SYS_TRANS_OP_HALF_TOPIC</code>  和 0。</p>\n<p><b>所以：事务消息会被存储到 默认的  <code>RMQ_SYS_TRANS_OP_HALF_TOPIC</code>  中，并根据是否为延迟消息和延迟的等级存储到不同的  <code>MessageQueue</code>  中。</b></p>\n<p>开源 <code>RocketMQ</code>  支持延迟消息，但是不支持秒级精度。默认支持 <code>18</code>  个 <code>level</code>  的延迟消息，这是通过 <code>broker</code>  端的 <code>messageDelayLevel</code>  配置项确定的.</p>\n<p>具体延迟队列的实现，我们会在下一篇文章中详细的分析一下  <code>RocketMQ</code>  延时消息队列的实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span><br></pre></td></tr></table></figure>\n<p>看完了，事务的第一个阶段，发送事务消息。 接下来，我们继续看第二个阶段。</p>\n<h3 id=\"结束事务-commit-or-callback\"><a class=\"markdownIt-Anchor\" href=\"#结束事务-commit-or-callback\">#</a> 结束事务: commit or callback.</h3>\n<p>结束事务主要是做两件事情:</p>\n<ul>\n<li>提交消息的偏移量</li>\n<li>发送提交事务还是回滚事务。</li>\n</ul>\n<p>实现逻辑如下图:</p>\n<p><img data-src=\"/images/rocketmq/3-01-05.png\" alt=\"\"></p>\n<p>主要的流程就是：封装 <code>RequestHeader</code> , 会设置 事务 <code>id</code> , 事务的状态。 然后设置本次请求的 <code>RequestCode</code>  为  <code>END_TRANSACTION(37)</code> .</p>\n<p>在  <code>Broker</code>  端 接收到对应的请求之后，会根据 事务的状态执行提交事务或者回滚操作。如右上图。</p>\n<p>我们从两方面来分析一下：</p>\n<h4 id=\"提交事务\"><a class=\"markdownIt-Anchor\" href=\"#提交事务\">#</a> 提交事务</h4>\n<p><img data-src=\"/images/rocketmq/3-01-06.png\" alt=\"\"></p>\n<p>可以看到 根据  <code>offset</code>  查到了消息，然后根据消息的状态封装成  <code>MessageExtBrokerInner</code>  对象。通过通过 <code>sendFianlMessage</code>  方法完成将消息写入到 消息原来的队列中 (不是默认的事务队列了). 最后删除  <code>prepare</code>  消息。如上图。</p>\n<h3 id=\"回滚事务\"><a class=\"markdownIt-Anchor\" href=\"#回滚事务\">#</a> 回滚事务</h3>\n<p><img data-src=\"/images/rocketmq/3-01-07.png\" alt=\"\"></p>\n<p>回滚事务就比较简单了，检查消息的状态，查看直接删除掉  <code>prepare</code>  消息就 OK 了。</p>\n<p>以上就是 整个事务消息的生产过程了。</p>\n<h3 id=\"事务回查\"><a class=\"markdownIt-Anchor\" href=\"#事务回查\">#</a> 事务回查</h3>\n<p>我们在介绍  <code>TranscationMQProducer</code>  的 <code>api</code>  时候，有一个  <code>setExecutorService(ExecutorService executorService)</code>  方法。 方法的作用是：设置检查事务的线程池。 这个线程池的作用就是 事务回查。</p>\n<p><img data-src=\"/images/rocketmq/3-01-08.png\" alt=\"\"></p>\n<p>我们追踪这个方法的调用方，可以发现，调用是  <code>NettyServer</code>  调用的，那是谁请求的呢？我们跟踪这个请求码发现在 Broker2Client 的类中发现了这个 请求码。 跟踪这个方法，查看其调用方，最终终于在  <code>TransactionalMessageCheckService</code>  发现了新大陆。<br>\n当我看到  <code>public class TransactionalMessageCheckService extends ServiceThread</code>  的时候，我就不禁想起了， Broker 在启动的时候会初始化事务，这是会创建一个  <code>TransactionalMessageCheckService</code>  对象.</p>\n<p>我们从  <code>Broker</code>  端开始还原一下这个事务回查的场景。</p>\n<p>在 Broker 端进行启动时会初识化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化事务逻辑</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialTransaction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transactionalMessageService = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_SERVICE_ID, TransactionalMessageService.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == <span class=\"keyword\">this</span>.transactionalMessageService) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transactionalMessageService = <span class=\"keyword\">new</span> TransactionalMessageServiceImpl(<span class=\"keyword\">new</span> TransactionalMessageBridge(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.getMessageStore()));</span><br><span class=\"line\">        log.warn(<span class=\"string\">&quot;Load default transaction message hook service: &#123;&#125;&quot;</span>, TransactionalMessageServiceImpl.class.getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Broker 检查事务状态的listner.。 Producer 写入 half 消息，但是没有收到 finalMessage .回调。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transactionalMessageCheckListener = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_LISTENER_ID, AbstractTransactionalMessageCheckListener.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == <span class=\"keyword\">this</span>.transactionalMessageCheckListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transactionalMessageCheckListener = <span class=\"keyword\">new</span> DefaultTransactionalMessageCheckListener();</span><br><span class=\"line\">        log.warn(<span class=\"string\">&quot;Load default discard message hook service: &#123;&#125;&quot;</span>, DefaultTransactionalMessageCheckListener.class.getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transactionalMessageCheckListener.setBrokerController(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Broker 检查事务状态的线程。 Producer 写入 half 消息，但是没有收到 finalMessage.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transactionalMessageCheckService = <span class=\"keyword\">new</span> TransactionalMessageCheckService(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里初始化了  <code>transactionalMessageCheckService</code>  和  <code>transactionalMessageCheckListener</code> . 然后在  <code>start</code>  方法中通过  <code>startProcessorByHa</code>  启动了  <code>transactionalMessageCheckService</code>  线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Broker的容灾处理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!messageStoreConfig.isEnableDLegerCommitLog()) &#123;</span><br><span class=\"line\">    startProcessorByHa(messageStoreConfig.getBrokerRole());</span><br><span class=\"line\">    handleSlaveSynchronize(messageStoreConfig.getBrokerRole());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.registerBrokerAll(<span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样  <code>transactionalMessageCheckService</code>  就启动起来了。运行代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;Start transaction check service thread!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 限制只有一个本类可以运行，最终会调用 onWaitEnd()</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.waitForRunning(checkInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;End transaction check service thread!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onWaitEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> timeout = brokerController.getBrokerConfig().getTransactionTimeOut();</span><br><span class=\"line\">    <span class=\"comment\">// 回查的最大次数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> checkMax = brokerController.getBrokerConfig().getTransactionCheckMax();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;Begin to check prepare message, begin time:&#123;&#125;&quot;</span>, begin);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 开始回查</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brokerController.getTransactionalMessageService().check(timeout, checkMax, <span class=\"keyword\">this</span>.brokerController.getTransactionalMessageCheckListener());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;End to check prepare message, consumed time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - begin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在回查的过程中，  <code>RocketMQ</code>  会获取 事务 Topic 下的所有 MessageQueue.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 事务topic中下的所有MessageQueue.</span></span><br><span class=\"line\">String topic = TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC;</span><br><span class=\"line\">Set&lt;MessageQueue&gt; msgQueues = transactionalMessageBridge.fetchMessageQueues(topic);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (msgQueues == <span class=\"keyword\">null</span> || msgQueues.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    log.warn(<span class=\"string\">&quot;The queue of topic is empty :&quot;</span> + topic);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后遍历所有的  <code>MessageQueue</code> ，按个处理所有队列里的待回查的消息。怎么判断消息需要回查呢？前面说过了，通过 <code>Op队列</code> 判断，因此还需要定位到 <code>HalfQueue</code>  对应的 <code>OpQueue</code> ，以及它们的 <code>ConsumeQueue</code>  偏移量， 获取到  <code>halfMessage</code> , 然后判断是否需要检测事务状态，如果需要检测则会调用  <code>AbstractTransactionalMessageCheckListener</code>  的  <code>resolveHalfMsg</code>  方法，即会发送 检测的请求 给  <code>Producer</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerController.getBroker2Client().checkProducerTransactionState(groupId, channel, checkTransactionStateRequestHeader, msgExt);</span><br></pre></td></tr></table></figure>\n<p><code>checkProducerTransactionState</code>  方法的实现则是： 向 Producer 端发送 请求码为 39 ( <code>RequestCode.CHECK_TRANSACTION_STATE</code> ) 的请求.</p>\n<p>如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RemotingCommand request =</span><br><span class=\"line\">    RemotingCommand.createRequestCommand(RequestCode.CHECK_TRANSACTION_STATE, requestHeader);</span><br><span class=\"line\">request.setBody(MessageDecoder.encode(messageExt, <span class=\"keyword\">false</span>));</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brokerController.getRemotingServer().invokeOneway(channel, request, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    log.error(<span class=\"string\">&quot;Check transaction failed because invoke producer exception. group=&#123;&#125;, msgId=&#123;&#125;, error=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">            group, messageExt.getMsgId(), e.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就触发了  <code>Producer</code>  的 事务回查。我们接着看、</p>\n<p>在  <code>ClientRemotingProcessor</code>  中可以看到  <code>CHECK_TRANSACTION_STATE</code>  的处理方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查事务状态</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> RequestCode.CHECK_TRANSACTION_STATE:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.checkTransactionState(ctx, request);</span><br></pre></td></tr></table></figure>\n<p>然后获取到  <code>Producer</code>  实例，通过  <code>producer</code>  开始回查事务.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询到对应的 Producer实例</span></span><br><span class=\"line\">MQProducerInner producer = <span class=\"keyword\">this</span>.mqClientFactory.selectProducer(group);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (producer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String addr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());</span><br><span class=\"line\">    <span class=\"comment\">// 开始回查。</span></span><br><span class=\"line\">    producer.checkTransactionState(addr, messageExt, requestHeader);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;checkTransactionState, pick producer by group[&#123;&#125;] failed&quot;</span>, group);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟踪这个  <code>checkTransactionState</code>  便看到了我们一开始说的这个事务回查了。</p>\n<p><img data-src=\"/images/rocketmq/3-01-08.png\" alt=\"\"></p>\n<p>其中  <code>checkExecutor</code>  就是一个线程池了，我们重点来看 回查的任务，即 图中的  <code>Runnable</code>  的实现。</p>\n<p>首先会 获取消息的事务状态，然后将消息的事务状态发送给 Broker。 这样就完成了 事务回查。</p>\n<p>如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable request = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String brokerAddr = addr;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MessageExt message = msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CheckTransactionStateRequestHeader checkRequestHeader = header;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String group = DefaultMQProducerImpl.<span class=\"keyword\">this</span>.defaultMQProducer.getProducerGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        TransactionCheckListener transactionCheckListener = DefaultMQProducerImpl.<span class=\"keyword\">this</span>.checkListener();</span><br><span class=\"line\">        TransactionListener transactionListener = getCheckListener();</span><br><span class=\"line\">        <span class=\"comment\">// 1、查看 消息事务的状态</span></span><br><span class=\"line\">        LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;</span><br><span class=\"line\">        Throwable exception = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transactionCheckListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            localTransactionState = transactionCheckListener.checkLocalTransactionState(message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (transactionListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;Used new check API in transaction message&quot;</span>);</span><br><span class=\"line\">            localTransactionState = transactionListener.checkLocalTransaction(message);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2、处理消息事务, 把事务的状态发送给 Broker。</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.processTransactionState(localTransactionState, group, exception);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 处理消息事务。</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * 将消息事务的状态发送给 Broker</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> localTransactionState</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> producerGroup</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> exception</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processTransactionState</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> LocalTransactionState localTransactionState,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> String producerGroup,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">final</span> Throwable exception)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 封装RequestHeader</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> EndTransactionRequestHeader thisHeader = <span class=\"keyword\">new</span> EndTransactionRequestHeader();</span><br><span class=\"line\">        thisHeader.setCommitLogOffset(checkRequestHeader.getCommitLogOffset());</span><br><span class=\"line\">        thisHeader.setProducerGroup(producerGroup);</span><br><span class=\"line\">        thisHeader.setTranStateTableOffset(checkRequestHeader.getTranStateTableOffset());</span><br><span class=\"line\">        thisHeader.swetFromTransactionCheck(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String uniqueKey = message.getProperties().get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uniqueKey == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            uniqueKey = message.getMsgId();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        thisHeader.setMsgId(uniqueKey);</span><br><span class=\"line\">        thisHeader.setTransactionId(checkRequestHeader.getTransactionId());</span><br><span class=\"line\">        <span class=\"comment\">// 设置 事务的状态.</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (localTransactionState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> COMMIT_MESSAGE:</span><br><span class=\"line\">                thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ROLLBACK_MESSAGE:</span><br><span class=\"line\">                thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;when broker check, client rollback this transaction, &#123;&#125;&quot;</span>, thisHeader);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UNKNOW:</span><br><span class=\"line\">                thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;when broker check, client does not know this transaction state, &#123;&#125;&quot;</span>, thisHeader);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        doExecuteEndTransactionHook(msg, uniqueKey, brokerAddr, localTransactionState, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向Broker端发送请求。</span></span><br><span class=\"line\">        DefaultMQProducerImpl.<span class=\"keyword\">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, thisHeader, remark, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上就是整个事务回查的过程了。这里我再来梳理一下执行的时序图。</p>\n<p><img data-src=\"/images/rocketmq/3-01-09.png\" alt=\"\"></p>\n<p>最后我们想一下，为什么 事务回查呢？<br>\n <code>Half</code>  消息写入成功，可能因为网络，服务重启等等原因没有收到 <code>Producer</code>  的事务状态请求，这是， <code>Broker</code>  就会主动放弃事务回查给 <code>Producer</code> . 来决定该事务消息是提交还是回滚。为了避免消息被无限次的回查，RocketMQ 通过 transactionCheckMax 属性设置消息回查的最大次数，默认是 15 次。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><code>RocketMQ</code>  的事务消息是使用 二阶段提交 ( <code>XA</code> ) 的这种分布式事务解决方案。</li>\n<li><code>RocketMQ</code>  第一阶段会发送带有 事务标志的消息给 <code>Broker</code> .  <code>Broker</code>  会把消息存储到固定的 Topic 中，并根据延迟级别存储到不同的 <code>queue</code>  中。</li>\n<li><code>RocketMQ</code>  第二阶段是结束事务，会提交 <code>offset</code> , 根据消息的事务状态提交或者回滚事务。</li>\n</ul>\n<p><code>RocketMQ</code>  通过改写  <code>Topic</code>  和  <code>queueId</code>  ，将消息暂时存储到的一个对 <code>Consumer</code>  不可见的队列中，然后等待 <code>Producer</code>  执行本地事务，提交事务装填后再决定将 <code>Half</code>  消息 <code>commit</code>  或者  <code>rollback</code> .</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/17/machine-learn/Model-evaluation/01-overview/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/17/machine-learn/Model-evaluation/01-overview/",
            "title": "模型评估概述",
            "date_published": "2021-11-17T10:18:00.000Z",
            "content_html": "<h2 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h2>\n<p>模型评估可以分为 离线评估和在线评估 两大类。在产品的不同阶段，我们要根据不同的场景去应用他们。</p>\n<p>两种评估方式由于其场景不同，所评估的关注点也不尽相同。其中，离线评估关注的是模型效果相关的指标，如精准率、 <code>KS</code>  等等。在线评估关注的是业务相关指标，比如新用户的转化率、优惠券的核销率、信贷审核的通过率等等。由于模型的在线评估与业务场景强相关，所以我们的课程重点将放在模型的离线评估上。</p>\n<h3 id=\"在线评估\"><a class=\"markdownIt-Anchor\" href=\"#在线评估\">#</a> 在线评估</h3>\n<p>在线评估是指在模型部署上线后，使用线上真实数据对模型进行的评估。这个时候，产品经理或者运营同学大多采用  <code>ABTest</code>  的方式去判断业务的表现.</p>\n<h3 id=\"离线评估\"><a class=\"markdownIt-Anchor\" href=\"#离线评估\">#</a> 离线评估</h3>\n<p>离线评估是指在模型部署上线前对模型进行的验证和评估工作，这个时候如果发现问题，我们可以很方便地对模型的参数进行调整和改进。</p>\n<p>离线评估又可以分为 <code>特征评估</code> 和 <code>模型评估</code> 两大类。</p>\n<h4 id=\"特征评估\"><a class=\"markdownIt-Anchor\" href=\"#特征评估\">#</a> 特征评估</h4>\n<p>为什么要关注特征评估呢？如果只评估最终模型的指标是否合规的时候，就相当于把模型作为一个 黑盒子了。但同时也要了解模型里面的内容，所以模型特征的评估也是非常重要的。 那特征评估主要关注那些内容呢？</p>\n<h5 id=\"特征自身的稳定性\"><a class=\"markdownIt-Anchor\" href=\"#特征自身的稳定性\">#</a> 特征自身的稳定性</h5>\n<p>对于特征自身的稳定，我们一般使用 <code>PSI</code>  这个指标来判断。  <code>PSI</code>  是评估某个特征的数据随着时间推移发生变化而不再稳定的指标。简单来说，就是看这个特征是不是稳定的，如果一个重要特征不够稳定，就会直接影响到模型整体的稳定性，自然也会影响业务。</p>\n<blockquote>\n<p><code>PSI</code> : ( <code>Population Stability Index</code> .  <code>PSI</code> ), 这里简单介绍一下，后面我会在一篇文章中，详细的介绍 群体稳定性 ( <code>PSI</code> ) 这个概念。 <code>PSI</code>  可用来衡量测试样本及模型开发样本评分的分布差异，为最常见的模型稳定度评估指标。计算公式为:  <code>PSI = sum(（实际占比-预期占比）* ln(实际占比/预期占比))</code> <br>\n 一般以训练集（ <code>INS</code> ）的样本分布作为预期分布，进而跨时间窗按月 / 周来计算 <code>PSI</code> ，得到 <code>Monthly/weekly PSI Report</code> ，进而剔除不稳定的变量。同理，在模型上线部署后，也将通过 <code>PSI</code>  曲线报表来观察模型的稳定性。</p>\n</blockquote>\n<h5 id=\"特征来源的稳定性\"><a class=\"markdownIt-Anchor\" href=\"#特征来源的稳定性\">#</a> 特征来源的稳定性</h5>\n<p>关于 特征来源的稳定性 评估，大致可以分为两种情况:</p>\n<ul>\n<li>如果特征数据来源于集团内部，主要考虑具体来自哪条业务线，这条业务是否稳定，以及业务方是否可能收回或者停止共享数据。</li>\n<li>如果特征接入方是外部公司，特别注意要看这个公司是否合规，是否具备完善的技术储备等等。</li>\n</ul>\n<h5 id=\"成本\"><a class=\"markdownIt-Anchor\" href=\"#成本\">#</a> 成本</h5>\n<p>在获取数据的时候，也要考虑接入的成本问题。</p>\n<ul>\n<li>公司内部数据，一般来说，不存在成本。在不同业务线的角度来说，可能会存在费用分摊的问题。</li>\n<li>外部数据，肯定是有成本的，或许是公司合作，或许是公司直接购买， 正常支付公司费用就好了。特别是注意，如果数据是按调用次数，流量计费的话，是否可以通过预先拉取数据来减少调用。</li>\n</ul>\n<h4 id=\"模型评估\"><a class=\"markdownIt-Anchor\" href=\"#模型评估\">#</a> 模型评估</h4>\n<p>模型的评估主要包括三个部分：统计性、模型性能和模型稳定性。</p>\n<h5 id=\"统计性指标\"><a class=\"markdownIt-Anchor\" href=\"#统计性指标\">#</a> 统计性指标</h5>\n<p>统计性指标指的就是模型输出结果的覆盖度、最大值、最小值、人群分布等指标。我们拿到一个模型，最先看的不是性能指标也不是稳定性，而是统计性指标，它决定了模型到底能不能用。</p>\n<p>在不同的场景下，由于我们的业务不同，对模型的要求不同，对模型统计性指标的关注点也会不同。 对统计性指标进行评估的时候，我们要充分考虑业务场景。</p>\n<p>比如:</p>\n<ul>\n<li>覆盖度。 在金融风控的场景下，如果一个模型的覆盖率低于  <code>60%</code> , 基本上就很难给到客户使用了，因为覆盖低低，风控的业务人员基本没办法对这个模型应用到决策引擎中。如果非要调用的话，最好的情况也就是用到决策树的某个分支上，专门用于某一小部分人群中，不过意义不大。</li>\n<li>最大最小值，也就是分数范围，以信用评分模型为例，如果信用评分模型覆盖的人数很多，但是模型输出的信用分数范围却很窄，假设是 <code>90-95</code> ，很显然，人群并没有好的区分度。 可以参考下芝麻分的范围就设置到了 <code>350-950</code> 。</li>\n<li>人群分布：指的是模型对人打分后，分数和人群的分布形态，这个分布形态应该符合我们的常识，比如用户消费能力评估模型，对于人群的打分结果就应该符合正态分布。</li>\n</ul>\n<h5 id=\"模型性能\"><a class=\"markdownIt-Anchor\" href=\"#模型性能\">#</a> 模型性能</h5>\n<p>模型的性能评估指标是评估模型效果的指标，他和模型要解决的问题相关， 模型要解决的问题，可以分成分类问题和回归问题。</p>\n<h6 id=\"分类模型\"><a class=\"markdownIt-Anchor\" href=\"#分类模型\">#</a> 分类模型</h6>\n<p>分类模型的性能评价指标主要包括：  <code>混淆矩阵</code> ， <code>KS</code> ，  <code>AUC</code>  等等。分类模型的性能评价指标主要包括： <code>混淆矩阵</code> 、 <code>KS</code> 、 <code>AUC</code>  等等。通过混淆矩阵，我们既可以得到一个模型的精确率、召回率这些指标，从而可以评估一个模型的区分能力，我们也可以计算得到的  <code>TPR</code> 、 <code>FPR</code> ，从而计算出  <code>AUC</code> 、 <code>KS</code>  等相关指标。因此，混淆矩阵是评估二分类模型的基础工具。</p>\n<h6 id=\"回归模型\"><a class=\"markdownIt-Anchor\" href=\"#回归模型\">#</a> 回归模型</h6>\n<p>回归模型的性能评价指标主要包括  <code>MAE</code>  (平均绝对误差),  <code>MSE</code>  (均方误差),  <code>RMSE</code>  (均方根误差), <code>R方</code> 。</p>\n<h5 id=\"模型稳定性\"><a class=\"markdownIt-Anchor\" href=\"#模型稳定性\">#</a> 模型稳定性</h5>\n<p>模型的稳定性即判断模型输出结果，是否会随着时间推移，而发生较大变化不再稳定的指标，模型的稳定性会直接影响模型的结果。比如在风控场景下，如果风控模型不够稳定，对于用户风险判断的结果就会发生较大变化。这个时候，我们需要实时调整风控策略，同时也要注意调整后造成决策不合理的情况。对于模型的稳定性，我们主要使用  <code>PSI</code>  进行评估。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"qrcode\"></p>\n",
            "tags": [
                "MachineLearn",
                "模型评估"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/17/machine-learn/Model-evaluation/02-confusion_matrix/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/17/machine-learn/Model-evaluation/02-confusion_matrix/",
            "title": "模型评估之 分类模型的评估指标",
            "date_published": "2021-11-17T10:18:00.000Z",
            "content_html": "<p>混淆矩阵 ( <code>Confusion Matrix</code> ) 是分类模型的一种评估指标。它是使用一种特定的矩阵来呈现算法性能的可视化效果，通常是监督学习。(非监督学习，通常用匹配矩阵：m <code>atching matrix</code> ) 其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆（也就是一个 <code>class</code>  被预测成另一个 <code>class</code> ）。</p>\n<h2 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\">#</a> 举例</h2>\n<p>我们以 是否感染新冠肺炎的模型来演示 混淆矩阵。</p>\n<p>按照定义，我们可以得到如下矩阵。</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-1.png\" alt=\"\"></p>\n<p>横向看上图，预测感染新冠为  <code>Positive</code> , 即为阳性， 未感染新冠为  <code>Negative</code>  , 即 阴性。</p>\n<p>纵向看上图，预测正确的为  <code>True</code> ,  预测错误的为 <code>False</code> .</p>\n<p>所以会得出 如下四种结果；</p>\n<ul>\n<li><code>True Positive</code> :  <code>TP</code> , 真阳性，即预测结果是新冠，真实值也是新冠。</li>\n<li><code>True Negative</code> :  <code>TN</code> , 真阴性，即预测结果是未感染，真实也未感染新冠。</li>\n</ul>\n<p>这两个结果是模型预测正确的结果，也是我们最想得到的部分，这两部分所占比重越大，模型效果越好。对应上图中绿色部分。其占比成为模型的准确率。</p>\n<ul>\n<li><code>False Positive</code> :  <code>FP</code> , 假阳性，即预测得了新冠，但是实际人并没有感染新冠。这种的属于误报。其占比属于误报率。在统计学中，  <code>FP</code>  又称为 第一类错误 ( <code>Type Error I</code> ，被判定为真的假)</li>\n<li><code>False Negative</code> :  <code>FN</code> , 假阴性，即预测没有感染新冠，但是实例已经感染了新冠。这种属于漏报率。其占比成为漏报率。 <code>FN</code>  又称为 第二类错误 ( <code>Type Error II</code> , 被判定为假的真)</li>\n</ul>\n<p>这两种情况，是模型预测错误的场景，所占比重越低越好。对应上图中红色部分。</p>\n<h2 id=\"指标\"><a class=\"markdownIt-Anchor\" href=\"#指标\">#</a> 指标</h2>\n<p>很多指标都是从混淆矩阵发展出来的。在例子中，我们已经知道了准确率，误报率，漏报率。</p>\n<p>以图为例，我们来详细的看下分类模型中混淆矩阵的相关指标.</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-2.png\" alt=\"\"></p>\n<h3 id=\"准确率\"><a class=\"markdownIt-Anchor\" href=\"#准确率\">#</a> 🔥🔥准确率</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">accuracy=\\frac{TP+TN}{TP+TN+FP+FN}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>那么，本例子中的准确率，就是： <code>(10+30)/100=40%</code></p>\n<p>理解成本最低，但不要滥用。在样本不均衡情况下，指标结果容易出现较大偏差；</p>\n<h3 id=\"精确率\"><a class=\"markdownIt-Anchor\" href=\"#精确率\">#</a> 🔥🔥精确率</h3>\n<p>精确率是判断模型识别出来的结果有多精确的指标。对应到信用评分的产品上，就是模型找到的真的坏人（对应混淆矩阵中的）的比率占模型找到的所有坏人（对应混淆矩阵中的 ）的比率。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">precision=\\frac{TP}{TP+FP}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>用于关注筛选结果是不是正确的场景，宁可没有预测出来，也不能预测错了。比如，在刷脸支付的场景下，我们宁可告诉用户检测不通过，也不能让另外一个人的人脸通过检测。</p>\n<p>精确率，又称为 查准率.</p>\n<h3 id=\"漏报率fnr\"><a class=\"markdownIt-Anchor\" href=\"#漏报率fnr\">#</a> 漏报率 (FNR)</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mi>N</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi>F</mi><mi>N</mi></mrow><mrow><mi>F</mi><mi>N</mi><mo>+</mo><mi>T</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">FNR = \\frac{FN}{FN + TP}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>那么，本例子中的漏报率，就是： <code>20/(10+20)=66.67%</code></p>\n<h3 id=\"误报率\"><a class=\"markdownIt-Anchor\" href=\"#误报率\">#</a> 误报率</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mi>P</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi>F</mi><mi>P</mi></mrow><mrow><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">FPR = \\frac{FP}{FP + TP}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>那么，本例子中的漏报率，就是： <code>40/(40+30)=37.14%</code></p>\n<h3 id=\"召回率\"><a class=\"markdownIt-Anchor\" href=\"#召回率\">#</a> 🔥🔥召回率</h3>\n<p>表示实际患者中，预测患病成功的概率.  <code>Recall Rate</code>  又称为  <code>Sensitive</code> , 查全率。预测感染占实际感染的额比率。即预测为真占实际为真的比率。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mi>P</mi><mi>R</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">Sensitive(TPR)=\\frac{TP}{TP+FN}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>用于关注筛选结果是不是全面的场景，“宁可错杀一千，绝不放过一个”。</p>\n<h3 id=\"specificity\"><a class=\"markdownIt-Anchor\" href=\"#specificity\">#</a> Specificity</h3>\n<p>表示未患病中，预测未患病成功的概率。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mi>N</mi><mi>R</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>T</mi><mi>N</mi></mrow><mrow><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">Specificity(TNR)=\\frac{TN}{TN+FP}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>这两个指标的出现，能更好的帮你比较模型间的差异，并在其中做出取舍。例如当两个模型的  <code>Accuracy</code>  相近时，如果你更看重于预测患病的效果，你应该选  <code>Sensitivity</code>  值较高的；相反，如果你更看重于预测未患病的效果，你就应该选择  <code>Specificity</code>  较高的。</p>\n<h3 id=\"f1-score\"><a class=\"markdownIt-Anchor\" href=\"#f1-score\">#</a> 🔥🔥F1 Score</h3>\n<p><code>F1</code>  可以综合反应精确率 和召回率。  <code>F1</code>  值越高，代表模型在精确率 和 召回率的综合表现越好。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mn>1</mn><mo>=</mo><mfrac><mrow><mn>2</mn><mo>×</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>×</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>+</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">F1=\\frac{2 \\times preciosion \\times recall}{precision+recall}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<h3 id=\"p-r曲线\"><a class=\"markdownIt-Anchor\" href=\"#p-r曲线\">#</a> P-R 曲线</h3>\n<p TP+FP=\"\"><code>P</code>  表示查准率 (或者精确率), 计算公式是: \\frac{TP}</p>\n<p TP+FN=\"\"><code>R</code>  表示查全率 (或者召回率，Sensitive), 计算公式是: \\frac{TP}</p>\n<p><code>P-R</code>  曲线是描述查准率 / 查全率变化的曲线， <code>P-R</code>  曲线定义如下：根据学习器的预测结果（一般为一个实值或概率）对测试样本进行排序，将最可能是 “正例” 的样本排在前面，最不可能是 “正例” 的排在后面，按此顺序逐个把样本作为 “正例” 进行预测，每次计算出当前的 <code>P</code>  值和 <code>R</code>  值，如下图所示：</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-4.png\" alt=\"\"></p>\n<h4 id=\"如何看p-r曲线\"><a class=\"markdownIt-Anchor\" href=\"#如何看p-r曲线\">#</a> 如何看 P-R 曲线？</h4>\n<p><code>P-R</code>  曲线如何评估呢？若一个 <code>学习器A</code>  的 <code>P-R</code>  曲线被另一个 <code>学习器B</code>  的 <code>P-R</code>  曲线完全包住，则称： <code>B</code>  的性能优于 <code>A</code> 。若 <code>A</code>  和 <code>B</code>  的曲线发生了交叉，则谁的曲线下的面积大，谁的性能更优。但一般来说，曲线下的面积是很难进行估算的，所以衍生出了 “平衡点”（ <code>Break-Event Point</code> ，简称 <code>BEP</code> ），即当 <code>P=R</code>  时的取值，平衡点的取值越高，性能更优。</p>\n<p>P 和 R 指标有时会出现矛盾的情况，这样就需要综合考虑他们，最常见的方法就是 F-Measure，又称 F-Score。F-Measure 是 P 和 R 的加权调和平均，即：</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-5.png\" alt=\"\"></p>\n<p>特别地，当 β=1 时，也就是常见的 F1 度量，是 P 和 R 的调和平均，当 F1 较高时，模型的性能越好。</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-6.png\" alt=\"\"></p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-7.png\" alt=\"\"></p>\n<p>有时候我们会有多个二分类混淆矩阵，例如：多次训练或者在多个数据集上训练，那么估算全局性能的方法有两种，分为宏观和微观。简单理解，宏观就是先算出每个混淆矩阵的 <code>P</code>  值和 <code>R</code>  值，然后取得平均 <code>P</code>  值 <code>macro-P</code>  和平均 <code>R</code>  值 <code>macro-R</code> ，在算出 <code>Fβ</code>  或 <code>F1</code> ，而微观则是计算出混淆矩阵的平均 <code>TP</code> 、 <code>FP</code> 、 <code>TN</code> 、 <code>FN</code> ，接着进行计算 <code>P</code> 、 <code>R</code> ，进而求出 <code>Fβ</code>  或 <code>F1</code> 。</p>\n<h3 id=\"roc-曲线-和-auc\"><a class=\"markdownIt-Anchor\" href=\"#roc-曲线-和-auc\">#</a> 🔥🔥ROC 曲线 和 AUC</h3>\n<p><code>ROC</code>  曲线与 <code>P-R</code>  曲线十分类似，都是按照排序的顺序逐一按照正例预测，不同的是 <code>ROC</code>  曲线以 “真正例率”（ <code>True Positive Rate</code> ，简称 <code>TPR</code> , 计算公式: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{TP}{TP+FN}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.275662em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>）为横轴，纵轴为 “假正例率”（ <code>False Positive Rate</code> ，简称 <code>FPR</code> , 计算公式: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>F</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{FP}{TN+FP}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.275662em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, 又称为特异性。 <code>Specificity</code> 。）， <code>ROC</code>  偏重研究基于测试样本评估值的排序好坏。</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-9.png\" alt=\"\"></p>\n<p>简单分析图像，可以得知：当 <code>FN=0</code>  时， <code>TN</code>  也必须 <code>0</code> ，反之也成立，我们可以画一个队列，试着使用不同的截断点（即阈值）去分割队列，来分析曲线的形状， <code>(0,0)</code>  表示将所有的样本预测为负例， <code>(1,1)</code>  则表示将所有的样本预测为正例， <code>(0,1)</code>  表示正例全部出现在负例之前的理想情况， <code>(1,0)</code>  则表示负例全部出现在正例之前的最差情况。</p>\n<h4 id=\"怎么看-roc曲线呢\"><a class=\"markdownIt-Anchor\" href=\"#怎么看-roc曲线呢\">#</a> 怎么看 ROC 曲线呢？</h4>\n<p>若一个学习器 <code>A</code>  的 <code>ROC</code>  曲线被另一个学习器 <code>B</code>  的 <code>ROC</code>  曲线完全包住，则称 <code>B</code>  的性能优于 <code>A</code> 。若 <code>A</code>  和 <code>B</code>  的曲线发生了交叉，则谁的曲线下的面积大，谁的性能更优。 <code>ROC</code>  曲线下的面积定义为 <code>AUC</code> （ <code>Area Uder ROC Curve</code> ），不同于 <code>P-R</code>  的是，这里的 <code>AUC</code>  是可估算的，即 <code>AOC</code>  曲线下每一个小矩形的面积之和。易知： <code>AUC</code>  越大，证明排序的质量越好， <code>AUC</code>  为 <code>1</code>  时，证明所有正例排在了负例的前面， <code>AUC</code>  为 <code>0</code>  时，所有的负例排在了正例的前面。</p>\n<p><code>AUC</code>  计算公式:</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-10.png\" alt=\"\"></p>\n<h3 id=\"代价敏感错误率与代价曲线\"><a class=\"markdownIt-Anchor\" href=\"#代价敏感错误率与代价曲线\">#</a> 代价敏感错误率与代价曲线</h3>\n<p>上面的方法中，将学习器的犯错同等对待，但在现实生活中，将正例预测成假例与将假例预测成正例的代价常常是不一样的，例如：将无疾病–&gt; 有疾病只是增多了检查，但有疾病–&gt; 无疾病却是增加了生命危险。以二分类为例，由此引入了 “代价矩阵”（ <code>cost matrix</code> ）。</p>\n<p>在非均等错误代价下，我们希望的是最小化 “总体代价”，这样 “代价敏感” 的错误率为:</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-11.png\" alt=\"\"></p>\n<p>同样对于 ROC 曲线，在非均等错误代价下，演变成了 “代价曲线”，代价曲线横轴是取值在 [0,1] 之间的正例概率代价，式中 p 表示正例的概率，纵轴是取值为 [0,1] 的归一化代价。</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-12.png\" alt=\"\"><br>\n<img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-13.png\" alt=\"\"></p>\n<p>代价曲线的绘制很简单：设 <code>ROC</code>  曲线上一点的坐标为 ( <code>TPR</code> ， <code>FPR</code> ) ，则可相应计算出 <code>FNR</code> ，然后在代价平面上绘制一条从 ( <code>0</code> ， <code>FPR</code> ) 到 ( <code>1</code> ， <code>FNR</code> ) 的线段，线段下的面积即表示了该条件下的期望总体代价；如此将 <code>ROC</code>  曲线图的每个点转化为代价平面上的一条线段，然后取所有线段的下界，围成的面积即为在所有条件下学习器的期望总体代价，如图所示：</p>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-confusionMetrix-14.png\" alt=\"\"></p>\n<p>以上就是 由混淆矩阵引申出来的指标了，当然这些指标都是用来评估分类模型的。下篇文章，我们再来介绍回归模型的评估指标。</p>\n<h3 id=\"指标图\"><a class=\"markdownIt-Anchor\" href=\"#指标图\">#</a> 指标图</h3>\n<p><img data-src=\"/images/ml/model_evalution/model-evalution-4.png\" alt=\"\"></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"qrcode\"></p>\n",
            "tags": [
                "MachineLearn",
                "模型评估"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0495-teemo-attacking/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0495-teemo-attacking/",
            "title": "LC:495.提莫攻击",
            "date_published": "2021-11-13T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄。他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。</p>\n<p>当提莫攻击艾希，艾希的中毒状态正好持续  <code>duration</code>  秒。</p>\n<p>正式地讲，提莫在 t 发起发起攻击意味着艾希在时间区间  <code>[t, t + duration - 1]</code> （含  <code>t</code>  和  <code>t + duration - 1</code> ）处于中毒状态。如果提莫在中毒影响结束 前 再次攻击，中毒状态计时器将会 重置 ，在新的攻击之后，中毒影响将会在  <code>duration</code>  秒后结束。</p>\n<p>给你一个 非递减 的整数数组  <code>timeSeries</code>  ，其中  <code>timeSeries[i]</code>  表示提莫在  <code>timeSeries[i]</code>  秒时对艾希发起攻击，以及一个表示中毒持续时间的整数  <code>duration</code>  。</p>\n<p>返回艾希处于中毒状态的 总 秒数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1：</h3>\n<p>输入：timeSeries = [1,4], duration = 2<br>\n 输出：4<br>\n 解释：提莫攻击对艾希的影响如下：</p>\n<ul>\n<li>第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</li>\n<li>第 4 秒，提莫再次攻击艾希，艾希中毒状态又持续 2 秒，即第 4 秒和第 5 秒。<br>\n艾希在第 1、2、4、5 秒处于中毒状态，所以总中毒秒数是 4 。</li>\n</ul>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2：</h3>\n<p>输入：timeSeries = [1,2], duration = 2<br>\n 输出：3<br>\n 解释：提莫攻击对艾希的影响如下：</p>\n<ul>\n<li>第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</li>\n<li>第 2 秒，提莫再次攻击艾希，并重置中毒计时器，艾希中毒状态需要持续 2 秒，即第 2 秒和第 3 秒。<br>\n艾希在第 1、2、3 秒处于中毒状态，所以总中毒秒数是 3 。</li>\n</ul>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<ul>\n<li>1 &lt;= timeSeries.length &lt;= 104</li>\n<li>0 &lt;= timeSeries[i], duration &lt;= 107</li>\n<li>timeSeries 按 非递减 顺序排列</li>\n</ul>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）495.提莫攻击\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdGVlbW8tYXR0YWNraW5n\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdGVlbW8tYXR0YWNraW5n\">力扣（LeetCode）495.提莫攻击</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPoisonedDuration</span><span class=\"params\">(<span class=\"keyword\">int</span>[] timeSeries, <span class=\"keyword\">int</span> duration)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 中毒时长</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> poisonedCount = duration;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; timeSeries.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeSeries[i-<span class=\"number\">1</span>]+duration &lt; timeSeries[i])&#123;</span><br><span class=\"line\">                poisonedCount += duration;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                poisonedCount += (timeSeries[i] - timeSeries[i-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> poisonedCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0520-detect-capital/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0520-detect-capital/",
            "title": "LC:520.检测大写字母",
            "date_published": "2021-11-13T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<p>全部字母都是大写，比如  <code>USA</code> 。<br>\n单词中所有字母都不是大写，比如  <code>leetcode</code>  。<br>\n如果单词不只含有一个字母，只有首字母大写， 比如  <code>Google</code>  。<br>\n给你一个字符串  <code>word</code>  。如果大写用法正确，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p>输入：word = “USA”<br>\n 输出：true</p>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p>输入：word = “FlaG”<br>\n 输出：false</p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p>1. <code>1 &lt;= word.length &lt;= 100</code> <br>\n2. <code>word</code>  由小写和大写英文字母组成</p>\n<p>来源：力扣（LeetCode）<br>\n链接：<br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）520.检测大写字符\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGV0ZWN0LWNhcGl0YWw=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGV0ZWN0LWNhcGl0YWw=\">力扣（LeetCode）520.检测大写字符</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">detectCapitalUse</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (word.length() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = word.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt;= <span class=\"string\">&#x27;Z&#x27;</span> &amp;&amp; c &gt;= <span class=\"string\">&#x27;A&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首字符大写</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> c2 = word.charAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c2 &lt;= <span class=\"string\">&#x27;Z&#x27;</span> &amp;&amp; c2 &gt;= <span class=\"string\">&#x27;A&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> word.equals(word.toUpperCase(Locale.ROOT));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String substring = word.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> substring.equals(substring.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首字母小写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> word.equals(word.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/",
            "title": "不要再在用JDK11写JDK8的代码了!",
            "date_published": "2021-11-11T10:18:18.000Z",
            "content_html": "<p>入职新公司两个月了，用 <code>JDK11</code>  写了两个月 <code>JDK8</code>  的代码，再也憋不住想看看 <code>JDK11</code>  的新特性了。没用过 <code>JDK9,10</code> . 那就说说 <code>JDK8-JDK11</code>  的变化吧。</p>\n<h2 id=\"新\"><a class=\"markdownIt-Anchor\" href=\"#新\">#</a> 新</h2>\n<ul>\n<li>语法增强\n<ul>\n<li>本地变量类型推断</li>\n<li><code>Collection</code>  增强</li>\n<li><code>Stream</code>  增强</li>\n<li><code>Optional</code>  增强</li>\n<li><code>InputStream</code>  增强</li>\n<li><code>String</code>  增强</li>\n</ul>\n</li>\n<li>模块化开发</li>\n<li>新工具\n<ul>\n<li><code>REPL</code>  交互式编程</li>\n<li><code>Low-Overhead Heap Profiling</code></li>\n<li><code>Flight Recorder</code></li>\n</ul>\n</li>\n<li>新功能\n<ul>\n<li>源代码直接执行</li>\n<li>完全支持 <code>Linux</code>  容器</li>\n<li>支持 <code>Unicode 10</code></li>\n<li>新支持的加密算法</li>\n<li><code>HttpClient</code></li>\n</ul>\n</li>\n<li>垃圾回收器\n<ul>\n<li><code>ZGC</code></li>\n<li><code>Epsilon</code></li>\n<li>更好的 <code>G1</code></li>\n</ul>\n</li>\n<li>移除与不再推荐使用的类库或功能\n<ul>\n<li>移除了 <code>Java EE</code>  和 <code>CORBA Moudles</code></li>\n<li>将 <code>Nashorn Javascript</code>  标记为不推荐</li>\n<li>将 <code>Pack200 Tools and API</code>  标记为不推荐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdk8-jdk11的语法新特性\"><a class=\"markdownIt-Anchor\" href=\"#jdk8-jdk11的语法新特性\">#</a> JDK8-JDK11 的语法新特性</h2>\n<h3 id=\"本地变量类型推断\"><a class=\"markdownIt-Anchor\" href=\"#本地变量类型推断\">#</a> 本地变量类型推断</h3>\n<p><code>since JDK10</code></p>\n<p><code>Java10</code>  以后可以用 <code>var</code>  定义一个局部变量，不用显式写出它的类型。但要注意，被 <code>var</code>  定义的变量仍然是静态类型，编译器会试图去推断其类型。所以，我们需要注意  <code>1</code> . 不兼容的类型是不能重新赋值的！ <code>2</code> . 只要编译器无法推断出变量类型，就会编译错误！</p>\n<p>举个栗子:</p>\n<h4 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;local variable type interface&quot;</span>;</span><br><span class=\"line\">    String str2 = <span class=\"string\">&quot;local variable type interface&quot;</span>;</span><br><span class=\"line\">    System.out.println(str1 == str2); <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简化泛型声明\"><a class=\"markdownIt-Anchor\" href=\"#简化泛型声明\">#</a> 简化泛型声明</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简化泛型声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item : lists) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> entries = item.entrySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> entry : entries) &#123;</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> values = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value : values) &#123;</span><br><span class=\"line\">                System.out.println(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>幸好编译器会有类型提示。如下图。</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-1.png\" alt=\"\"></p>\n<h4 id=\"简化lambda参数\"><a class=\"markdownIt-Anchor\" href=\"#简化lambda参数\">#</a> 简化 lambda 参数</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * lambda参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 从Java 11开始，lambda参数也允许使用var关键字：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Predicate&lt;String&gt; predNotNull = (<span class=\"keyword\">var</span> a) -&gt; a != <span class=\"keyword\">null</span> &amp;&amp; !a.isBlank();</span><br><span class=\"line\"></span><br><span class=\"line\">    String strAfterFilter = Stream.of(<span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;love&quot;</span>, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;my&quot;</span>, <span class=\"string\">&quot;wife&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;very&quot;</span>, <span class=\"string\">&quot;much&quot;</span>)</span><br><span class=\"line\">            .filter(predNotNull)</span><br><span class=\"line\">            .collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">    System.out.println(strAfterFilter); <span class=\"comment\">//I love my wife very much</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不兼容的类型赋值\"><a class=\"markdownIt-Anchor\" href=\"#不兼容的类型赋值\">#</a> 不兼容的类型赋值</h4>\n<p>这种直接编译失败，第一行和第二行已经推断出来了  <code>str</code>  是  <code>String</code>  类型。 第三行就不能赋值为 <code>double</code>  类型了。</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-2.png\" alt=\"\"></p>\n<h4 id=\"不能推测的类型\"><a class=\"markdownIt-Anchor\" href=\"#不能推测的类型\">#</a> 不能推测的类型</h4>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-3.png\" alt=\"\"></p>\n<p>但是，对于用习惯了  <code>IDEA</code>  快捷指令的我来说，这个 <code>var</code>  变量，对我来说毫无意义。感觉 <code>jdk</code>  是在炫技，但我毫无兴趣。</p>\n<p>比如，在 <code>idea</code>  中，你输入  <code>new ArrayList().var</code>  , 然后回车， <code>IDEA</code>  就会为你自动生成类型。<br>\n类似的还有  <code>lists.for</code> ,  <code>lists.fori</code>  等等。所以，个人并不推荐大家使用该语法，并非不能用，比如在  <code>lambda</code>  中使用替换类型时还是比较好的。如果你还没有掌握  <code>xx.var</code>  这种异能加持的话，想用就用吧。</p>\n<p>总之，看别人写了个  <code>var</code>  时，不要发出 “哇藕， <code>Java</code>  还可以这么写”。</p>\n<h3 id=\"collection增强\"><a class=\"markdownIt-Anchor\" href=\"#collection增强\">#</a> Collection 增强</h3>\n<p>这个比较简单，就是  <code>List</code>  ,  <code>Set</code> ,  <code>Map</code>  这三种集合多了两个方法  <code>of</code>  和  <code>copyOf</code> .</p>\n<p><code>since jdk9</code></p>\n<p>这里直接用三个栗子分别演示一下</p>\n<h4 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> List</h4>\n<p><code>List.of</code>  内部是创建一个的   <code>immutable collections</code> 。不可变集合。所以不可以增删改元素。</p>\n<p><code>List.of()</code>   和  <code>List.copyOf()</code>  都是创建的不可变集合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 List</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; integers1 = List.copyOf(integers);</span><br><span class=\"line\">    System.out.println(integers == integers1); <span class=\"comment\">// true</span></span><br><span class=\"line\">    integers.add(<span class=\"number\">5</span>); <span class=\"comment\">//  UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h4>\n<p><code>Set</code>  和  <code>List</code>  的用法类似。 同样的，也是不可变集合。需要注意的是， <code>copyOf</code>  方法，如果形参是可变集合，则返回的也是可变集合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 Set</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; integers = Set.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    Set&lt;Integer&gt; integers1 = Set.copyOf(integers);</span><br><span class=\"line\">    System.out.println(integers == integers1); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//        integers.add(5); //  UnsupportedOperationException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Set&lt;Integer&gt; integers2 = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    integers2.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    integers2.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    integers2.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">    Set&lt;Integer&gt; integers3 = Set.copyOf(integers2);</span><br><span class=\"line\">    System.out.println(integers3 == integers2); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 元素不能重复 =&gt;  java.lang.IllegalArgumentException</span></span><br><span class=\"line\">    Set&lt;Integer&gt; integers4 = Set.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用of创建Map</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; map1 = Map.of(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    Map&lt;String, Integer&gt; map2 = Map.copyOf(map1);</span><br><span class=\"line\">    System.out.println(map1 == map2); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// copyOf，取决于传入的map是否为可变集合</span></span><br><span class=\"line\">    HashMap&lt;String, Integer&gt; map3 = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map3.put(<span class=\"string\">&quot;k1&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    map3.put(<span class=\"string\">&quot;k2&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    Map&lt;String, Integer&gt; map4 = Map.copyOf(map3);</span><br><span class=\"line\">    System.out.println(map3 == map4); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// key不能重复 =&gt; java.lang.IllegalArgumentExceptio</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; map5 = Map.of(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"stream增强\"><a class=\"markdownIt-Anchor\" href=\"#stream增强\">#</a> Stream 增强</h3>\n<p><code>since JDK9</code></p>\n<p><code>Stream</code>  相关内容，新增了 <code>4</code>  个方法.</p>\n<h4 id=\"增加单个参数构造方法\"><a class=\"markdownIt-Anchor\" href=\"#增加单个参数构造方法\">#</a> 增加单个参数构造方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增单个元素的Stream构造,允许为空</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(Stream.ofNullable(<span class=\"keyword\">null</span>).count()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">    System.out.println(Stream.of(<span class=\"number\">1</span>).count()); <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加takewhile方法\"><a class=\"markdownIt-Anchor\" href=\"#增加takewhile方法\">#</a> 增加 takeWhile 方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示take while方法</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * 从头开始计算，遇到不满足Predicate的元素即停止。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).takeWhile(i -&gt; i &lt;= <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).takeWhile(i -&gt; i &gt; <span class=\"number\">6</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [ ]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加-dropwhile-方法\"><a class=\"markdownIt-Anchor\" href=\"#增加-dropwhile-方法\">#</a> 增加 dropWhile 方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示 dropWhile 方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 从头开始计算，遇到第一个不满足 Predicte的元素时，开始计算。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).dropWhile(i -&gt; i &lt;= <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 3, 4, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).dropWhile(i -&gt; i &gt; <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [4, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iterate-重载方法\"><a class=\"markdownIt-Anchor\" href=\"#iterate-重载方法\">#</a> iterate 重载方法</h4>\n<p>这个  <code>iterate</code>  方法的新重载方法，可以让你提供一个  <code>Predicate</code>  (判断条件) 来指定什么时候结束迭代。</p>\n<p>需要注意的是：相比 <code>JDK8</code>  的方法， <code>iterator</code>  是第三个参数，第二个参数是 <code>Prediction</code> 。 <code>Prediction</code>  中进行判断的取值是迭代之后的数值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示 iterate 的重载方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Jdk8支持使用这种方式， 生成从1开始的平方数</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.iterate(<span class=\"number\">1</span>, i -&gt; i * <span class=\"number\">2</span>).limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 4, 8, 16]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK9 支持，加入一个 Prediction, 判断如何终止。</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.iterate(<span class=\"number\">1</span>, i -&gt; i &lt;= <span class=\"number\">16</span>, i -&gt; i * <span class=\"number\">2</span>).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [1, 2, 4, 8, 16]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"optional-增强\"><a class=\"markdownIt-Anchor\" href=\"#optional-增强\">#</a> Optional 增强</h3>\n<p><code>Since JDK 9</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 提供一个默认的Optional对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量, 可能为空 or not</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> variable = <span class=\"string\">&quot;jdk 11&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jdk 8 支持of(),ofNullable() 转换为Optional对象。</span></span><br><span class=\"line\">    List&lt;String&gt; collect = Optional.of(variable).stream().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK 8 可以通过 orElse, 当 variable 为空的时候，返回一个默认的字符串值。</span></span><br><span class=\"line\">    Optional.ofNullable(variable).orElse(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jdk 9 提供了提供 or() 返回一个默认Optional对象。</span></span><br><span class=\"line\">    Optional.empty().or(() -&gt; Optional.of(<span class=\"string\">&quot;jdk 11&quot;</span>)).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"inputstream-加强\"><a class=\"markdownIt-Anchor\" href=\"#inputstream-加强\">#</a> InputStream 加强</h3>\n<p><code>InputStream</code>  终于有了一个非常有用的方法： <code>transferTo</code> ，可以用来将数据直接传输到  <code>OutputStream</code> ，这是在处理原始数据流时非常常见的一种用法。</p>\n<p>还是举个栗子吧:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 直接将数据写入输出流</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> classLoader = ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inputStream = classLoader.getResourceAsStream(<span class=\"string\">&quot;readFile.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> javastack = File.createTempFile(<span class=\"string\">&quot;writeFile&quot;</span>, <span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"keyword\">var</span> outputStream = <span class=\"keyword\">new</span> FileOutputStream(javastack)) &#123;</span><br><span class=\"line\">        inputStream.transferTo(outputStream);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"string增强\"><a class=\"markdownIt-Anchor\" href=\"#string增强\">#</a> String 增强</h3>\n<h4 id=\"isblank\"><a class=\"markdownIt-Anchor\" href=\"#isblank\">#</a> isBlank</h4>\n<p>判断目标字符串是否是空白字符。</p>\n<p>使用功能上的问题，感觉还是例子来的舒服。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 判断字符串是否为空</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 半角空格  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; &quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全角空格  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;　&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 半角空格的unicode字符值  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\u0020&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全角空格的unicode字符值  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\u3000&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 制表符  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回车  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\r&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 换行  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\n&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 各种空白字符拼接  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; \\t\\r\\n　&quot;</span>.isBlank());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"stripstripleading与striptrailing\"><a class=\"markdownIt-Anchor\" href=\"#stripstripleading与striptrailing\">#</a> strip，stripLeading 与 stripTrailing</h4>\n<p>去除字符串的前后字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全角空格 + 制表符 + 回车 + 换行 + 半角空格 + &lt;内容&gt; + 全角空格 + 制表符 + 回车 + 换行 + 半角空格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strTest = <span class=\"string\">&quot;　\\t\\r\\n 你好 jdk11　\\t\\r\\n &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strip 去除两边空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.strip() + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// stripLeading 去除开头的空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.stripLeading() + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// stripTrailing 去除结尾的空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.stripTrailing() + <span class=\"string\">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"repeat\"><a class=\"markdownIt-Anchor\" href=\"#repeat\">#</a> repeat</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strOri = <span class=\"string\">&quot;jdk11&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = strOri.repeat(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = strOri.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(str1);</span><br><span class=\"line\">System.out.println(str2);</span><br><span class=\"line\"><span class=\"comment\">// repeat传入参数为1时，不会创建一个新的String对象，而是直接返回原来的String对象。</span></span><br><span class=\"line\">System.out.println(str1 == strOri);</span><br></pre></td></tr></table></figure>\n<h4 id=\"lines\"><a class=\"markdownIt-Anchor\" href=\"#lines\">#</a> lines</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 按照换行符拆分字符串</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strContent = <span class=\"string\">&quot;hello java\\rhello jdk11\\nhello world\\r\\nhello everyone&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// lines方法用 \\r 或 \\n 或 \\r\\n 对字符串切割并返回stream对象</span></span><br><span class=\"line\">    strContent.lines().forEach(System.out::println);</span><br><span class=\"line\">    System.out.println(strContent.lines().count());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块化开发\"><a class=\"markdownIt-Anchor\" href=\"#模块化开发\">#</a> 模块化开发</h2>\n<p><code>Java9</code>  引入了模块化， <code>Java Platform Module System</code> ， <code>java</code>  平台模块系统，简称 <code>JPMS</code> 。</p>\n<p>这里和大家一起做一下。</p>\n<h3 id=\"新建两个-module\"><a class=\"markdownIt-Anchor\" href=\"#新建两个-module\">#</a> 新建两个 module</h3>\n<p>我们新建两个模块 core 和 business。 如下图</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-5.png\" alt=\"\"></p>\n<h3 id=\"core-模块配置\"><a class=\"markdownIt-Anchor\" href=\"#core-模块配置\">#</a> core 模块配置</h3>\n<ul>\n<li>新建一个类 RestResult ，表示公共调用的类。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResult</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String errMsg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RestResult</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个  <code>module-info.java</code> . 声明  <code>module</code>  信息.   <code>exports</code>  将  <code>com.fxb.learn.module.core</code>  这个包下的类都 export 出去。\n<ul>\n<li>如果是一个 <code>java</code>  的普通应用，则在  <code>src</code>  目录下，新建  <code>module-info.java</code>  文件即可。</li>\n<li>如果是一个 <code>maven</code>  应用，则需要在  <code>src/main/java</code>  目录下，新建  <code>module-info.java </code> 文件。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// core 是module的名称</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> core &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将指定的包下类，export出去</span></span><br><span class=\"line\">    <span class=\"keyword\">exports</span> com.fxb.learn.<span class=\"keyword\">module</span>.core;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"business-模块配置\"><a class=\"markdownIt-Anchor\" href=\"#business-模块配置\">#</a> business 模块配置</h3>\n<ul>\n<li>在 <code>business</code>  模块下，新建一个  <code>module-info.java</code> . 文件位置上 <code>core</code>  模块中的一致。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> business &#123;</span><br><span class=\"line\">    <span class=\"keyword\">requires</span> core;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 <code>Idea</code>  中配置， <code>business</code>  模块引用 <code>core</code>  模块。</li>\n</ul>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-4.png\" alt=\"\"></p>\n<h3 id=\"写个例子看看\"><a class=\"markdownIt-Anchor\" href=\"#写个例子看看\">#</a> 写个例子看看</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示模块调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RestResult&lt;User&gt; <span class=\"title\">getUserById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestResult&lt;&gt;(<span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;fangjiaxiaobai&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新工具\"><a class=\"markdownIt-Anchor\" href=\"#新工具\">#</a> 新工具</h2>\n<p><code>JDK</code>  还提供了一些新的工具，  <code>REPL</code>  交互式编程， <code>Low-Overhead Heap Profiling</code>  (免费的低耗能飞行记录仪和堆分析仪), <code>Flight Recorder</code>  (黑盒子)</p>\n<h3 id=\"repl交互式编程\"><a class=\"markdownIt-Anchor\" href=\"#repl交互式编程\">#</a>  <code>REPL</code>  交互式编程</h3>\n<p>你是否使用 j <code>upter</code> ,  <code>java </code> 也有了！</p>\n<p><code>Java</code>  提供了一个新的工具 <code>jshell</code> ， <code>Java</code>  终于可以像 <code>python</code> ， <code>scala</code>  等语言那样，交互式演示语法了</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-6.png\" alt=\"\"></p>\n<p>具体命令可以使用  <code>/help</code>  命令查看。</p>\n<h3 id=\"low-overhead-heap-profiling\"><a class=\"markdownIt-Anchor\" href=\"#low-overhead-heap-profiling\">#</a> Low-Overhead Heap Profiling</h3>\n<p>免费的低耗能飞行记录仪和堆分析仪。</p>\n<p>通过 <code>JVMTI</code>  的 <code>SampledObjectAlloc</code>  回调提供了一个开销低的 <code>heap</code>  分析方式提供一个低开销的，为了排错 <code>java</code>  应用问题，以及 <code>JVM</code>  问题的数据收集框架。<br>\n具有一下功能:</p>\n<ul>\n<li>提供用于生产和消费数据作为事件的 <code>API</code></li>\n<li>提供缓存机制和二进制数据格式</li>\n<li>允许事件配置和事件过滤</li>\n<li>提供 <code>OS</code> , <code>JVM</code>  和 <code>JDK</code>  库的事件</li>\n</ul>\n<h3 id=\"flight-recorder\"><a class=\"markdownIt-Anchor\" href=\"#flight-recorder\">#</a> Flight Recorder</h3>\n<p><code>Flight Recorder</code>  源自飞机的黑盒子。  <code>Flight Recorder</code>  以前是商业版的特性，在 <code>java11</code>  当中开源出来，它可以导出事件到文件中，之后可以用 <code>Java Mission Control</code>  来分析。</p>\n<p>两种启动方式:</p>\n<p>可以在应用启动时配置 <code>java -XX:StartFlightRecording</code> <br>\n 应用启动之后，使用 <code>jcmd</code>  来录制，如下代码:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd &lt;pid&gt; JFR.start  <span class=\"comment\"># 启动记录仪</span></span><br><span class=\"line\">$ jcmd &lt;pid&gt; JFR.dump.filename=recording.jfr  <span class=\"comment\"># 将记录内容保存到文件里</span></span><br><span class=\"line\">$ jcmd &lt;pid&gt; JFR.stop  <span class=\"comment\"># 停止记录仪</span></span><br></pre></td></tr></table></figure>\n<p>不过在  <code>jdk11</code>  是没办法查看  <code>jfr</code>  的。如果想看，安装  <code>jdk12</code>  吧。 不，可以试试  <code>jdk16</code>  ,   <code>jdk16</code>  也是 <code>LTS</code>  版本！・</p>\n<blockquote>\n<p>JFR 是一套集成进入 JDK、JVM 内部的事件机制框架，通过良好架构和设计的框架，硬件层面的极致优化，生产环境的广泛验证，它可以做到极致的可靠和低开销。在 SPECjbb2015 等基准测试中，JFR 的性能开销最大不超过 1%，所以，工程师可以基本没有心理负担地在大规模分布式的生产系统使用，这意味着，我们既可以随时主动开启 JFR 进行特定诊断，也可以让系统长期运行 JFR, 用以在复杂环境中进行 &quot;After-the-fact&quot; 分析。还需要苦恼重现随机问题吗？JFR 让问题简化了很多<br>\n在保证低开销的基础上，JFR 提供的能力也令人眼前一亮，例如：我们无需 BCI 就可以进行 Object Allocation Profiling， 终于不用担心 BTrace 之类把进程搞挂了。对锁竞争、阻塞、延迟，JVM GC、SafePoint 等领域，进行非常细粒度分析。甚至深入 JIT Compiler 内部，全面把握热点方法、内联、逆优化等等。JFR 提供了标准的 Java,C++ 等扩展 API, 可以与各种层面的应用进行定制、集成，为复杂的企业应用栈或者复杂的分布式应用，提供 All-in-One 解决方案。而这一切都是内建在 JDK 和 JVM 内部的，并不需要额外的依赖，开箱即用。</p>\n</blockquote>\n<h2 id=\"新功能\"><a class=\"markdownIt-Anchor\" href=\"#新功能\">#</a> 新功能</h2>\n<h3 id=\"httpclient\"><a class=\"markdownIt-Anchor\" href=\"#httpclient\">#</a> HttpClient</h3>\n<p><code>JDK 9</code>  开始引入 <code>HttpClient API</code>  来处理 <code>HTTP</code>  请求。 从 <code>JDK 11</code>  开始，这个・正式进入标准库包。<br>\n参考网址：<span class=\"exturl\" data-url=\"aHR0cDovL29wZW5qZGsuamF2YS5uZXQvZ3JvdXBzL25ldC9odHRwY2xpZW50L2ludHJvLmh0bWw=\">http://openjdk.java.net/groups/net/httpclient/intro.html</span></p>\n<p><code>HttpClient</code>  具有以下特性:</p>\n<ul>\n<li>支持  <code>HTTP1.1</code>  和  <code>HTTP2</code> ,  <code>websocket</code>  协议</li>\n<li>支持同步和异步编程模型</li>\n<li>将请求和响应主体作为响应式流 ( <code>reactive-streams</code> ) 处理，并使用构建器模式</li>\n<li>要发送 <code>http</code>  请求，首先要使用其构建器创建一个 <code>HttpClient</code> 。这个构建器能够配置每个客户端的状态：\n<ul>\n<li>首选协议版本 (  <code>HTTP/1.1</code>  或  <code>HTTP/2</code>  )</li>\n<li>是否跟随重定向</li>\n<li>代理</li>\n<li>身份验证</li>\n</ul>\n</li>\n</ul>\n<p>一旦构建完成，就可以使用 <code>HttpClient</code>  发送多个请求。</p>\n<h4 id=\"httprequest\"><a class=\"markdownIt-Anchor\" href=\"#httprequest\">#</a> HttpRequest</h4>\n<p><code>HttpRequest</code>  是由它的构建器创建的。请求的构建器可用于设置:</p>\n<ul>\n<li>请求 <code>URI</code></li>\n<li>请求 <code>Method</code>  (  <code>GET</code> ,  <code>PUT</code> ,  <code>POST</code>  )</li>\n<li>请求主体 (如果有)</li>\n<li>超时时间</li>\n<li>请求头</li>\n</ul>\n<p><code>HttpRequest</code>  构建之后是不可变的，但可以发送多次。</p>\n<h4 id=\"synchronous-or-asynchronous\"><a class=\"markdownIt-Anchor\" href=\"#synchronous-or-asynchronous\">#</a> Synchronous or Asynchronous</h4>\n<p>请求既可以同步发送，也可以异步发送。当然同步的 <code>API</code>  会导致线程阻塞直到 <code>HttpResponse</code>  可用。异步 <code>API</code>  立即返回一个 <code>CompletableFuture</code> ，当 <code>HttpResponse</code>  可用时，它将获取 <code>HttpResponse</code>  并执行后续处理。</p>\n<h4 id=\"data-as-reactive-streams\"><a class=\"markdownIt-Anchor\" href=\"#data-as-reactive-streams\">#</a> Data as reactive-streams</h4>\n<p>请求和响应的主体作为响应式流 (具有非阻塞背压的异步数据流) 供外部使用。 <code>HttpClient</code>  实际上是请求正文的订阅者和响应正文字节的发布者。 <code>BodyHandler</code>  接口允许在接收实际响应体之前检查响应代码和报头，并负责创建响应 <code>BodySubscriber</code> 。</p>\n<p><code>HttpRequest</code>  和 <code>HttpResponse</code>  类型提供了许多便利的工厂方法，用于创建请求发布者和响应订阅者，以处理常见的主体类型，如文件、字符串和字节。这些便利的实现要么累积数据，直到可以创建更高级别的 <code>Java</code>  类型（如 <code>String</code> ），要么就文件流传输数据。 <code>BodySubscriber</code>  和 <code>BodyPublisher</code>  接口可以实现为自定义反应流处理数据。</p>\n<p><code>HttpRequest</code>  和 <code>HttpResponse</code>  还提供了转换器，用于将  <code>java.util.concurrent.Flow</code>  的  <code>Publisher/Subscriber</code>  类型转换为  <code>HTTP Client</code>  的  <code>BodyPublisher/BodySubscriber</code>  类型。</p>\n<h4 id=\"请求协议-http2\"><a class=\"markdownIt-Anchor\" href=\"#请求协议-http2\">#</a> 请求协议 HTTP/2</h4>\n<p><code>Java HTTP Client</code>  支持  <code>HTTP/1.1</code>  和  <code>HTTP/2</code> 。默认情况下，客户端将使用  <code>HTTP/2</code>  发送请求。发送到尚不支持  <code>HTTP/2 </code> 的服务器的请求将自动降级为  <code>HTTP/1.1</code> 。</p>\n<p>以下是 <code>HTTP/2</code>  带来的主要改进:</p>\n<ul>\n<li>标头压缩。 HTTP/2 使用 HPACK 压缩，从而减少了开销。</li>\n<li>与服务器的单一连接减少了建立多个 TCP 连接所需的往返次数。</li>\n<li>多路复用。 在同一连接上，同时允许多个请求。</li>\n<li>服务器推送。 可以将其他将来需要的资源发送给客户端。</li>\n<li>二进制格式。 更紧凑。</li>\n</ul>\n<p>由于 <code>HTTP/2</code>  是默认的首选协议，并且在需要的地方无缝地实现回退到 <code>HTTP/1.1</code> ，那么当 <code>HTTP/2</code>  被更广泛地部署时， <code>Java HTTP</code>  客户端就无需修正它的应用代码。</p>\n<p>具体的 <code>Java Doc</code>  可以参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5uZXQuaHR0cC9qYXZhL25ldC9odHRwL3BhY2thZ2Utc3VtbWFyeS5odG1s\">https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html</span></p>\n<p>看了  <code>Java Doc</code> , 感觉使用起来比较简单。这里就不举例了。感兴趣的朋友，可以自行深入研究一下。</p>\n<h3 id=\"源代码直接执行\"><a class=\"markdownIt-Anchor\" href=\"#源代码直接执行\">#</a> 源代码直接执行</h3>\n<p>一个单文件源代码，也就是说，单独的 <code>java</code>  文件，有 <code>main</code>  方法，且只依赖 <code>jdk</code>  类库以及自己文件内部定义的类，可以直接用 <code>java</code>  执行而无需先编译再执行编译后的 <code>class</code>  文件了。</p>\n<p>你可能问了，有什么用呢？我平时也不关系它是否生成了 <code>class</code>  文件。</p>\n<p>如果你是做数据相关的工作，可能需要写一些脚本的时候，这却是轻松了很多。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  learn git:(master) ✗ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java</span><br><span class=\"line\">➜  learn git:(master) ✗ java SourceCodeExecDemo.java</span><br><span class=\"line\">1.解析数据格式.....</span><br><span class=\"line\">2.处理数据.....</span><br><span class=\"line\">3.重组数据.....</span><br><span class=\"line\">➜  learn git:(master) ✗ ll                          </span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java</span><br></pre></td></tr></table></figure>\n<p>可以看到确实没有  <code>class</code>  文件生成。</p>\n<h3 id=\"完全支持linux容器\"><a class=\"markdownIt-Anchor\" href=\"#完全支持linux容器\">#</a> 完全支持 Linux 容器</h3>\n<p>在 <code>Docker</code>  容器中运行 <code>Java</code>  应用程序一直存在一个问题，那就是在容器中运行的 <code>JVM</code>  程序在设置内存大小和 <code>CPU</code>  使用率后，会导致应用程序的性能下降。这是因为 <code>Java</code>  应用程序没有意识到它正在容器中运行。随着 <code>Java10</code>  的发布，这个问题总算得以解诀， <code>JVM</code>  现在可以识别由容器控制组 ( <code>cgroups</code> ) 设置的约束，可以在容器中使用内存和 <code>CPU</code>  约束来直接管理 <code>Java</code>  应用程序，其中包括:</p>\n<ul>\n<li>遵守容器中设置的内存限制</li>\n<li>在容器中设置可用的 <code>CPU</code></li>\n<li>在容器中设置 <code>CPU</code>  约束</li>\n</ul>\n<h3 id=\"支持unicode-10\"><a class=\"markdownIt-Anchor\" href=\"#支持unicode-10\">#</a> 支持 Unicode 10</h3>\n<p><code>Unicode 10</code>  新增了 <code>8518</code>  个字符，总计达到了 <code>136690</code>  个字符。包括 <code>56</code>  个新的 <code>emoji</code>  表情符号。</p>\n<p><code>JDK11</code>  在 <code>java.lang</code>  下增加了 4 个类来处理:</p>\n<ul>\n<li><code>CharacterData00.class</code></li>\n<li><code>CharacterData01.class</code></li>\n<li><code>CharacterData02.class</code></li>\n<li><code>CharacterData0E.class</code></li>\n</ul>\n<h3 id=\"新支持的加密算法\"><a class=\"markdownIt-Anchor\" href=\"#新支持的加密算法\">#</a> 新支持的加密算法</h3>\n<p><code>Java</code>  实现了 <code>RFC7539</code>  中指定的 <code>ChaCha20</code>  和 <code>Poly1305</code>  两种加密算法，代替 <code>RC4</code> 。<br>\n <code>RFC7748</code>  定义的密钥协商方案更高效，更安全， <code>JDK</code>  增加了两个新的接口 <code>XECPublicKey</code>  和 <code>XECPrivateKey</code> 。</p>\n<h2 id=\"垃圾回收器\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收器\">#</a> 垃圾回收器</h2>\n<h3 id=\"zgc\"><a class=\"markdownIt-Anchor\" href=\"#zgc\">#</a> ZGC</h3>\n<p>启用方法： <code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code></p>\n<p>说明： <code>ZGC</code> , <code> A Scalable Low-Latency Garbage collector</code> (  <code>Experimental</code> ) ，一个可伸缩的低延时的垃圾回收器。 <code>GC</code>  暂停时间不会超过 <code>10ms</code> ，既能处理几百兆的小堆，也能处理几个 <code>T</code>  的大堆。和 <code>G1</code>  相比，应用吞吐能力不会下降超过 <code>15%</code> ，为未来的 <code>GC</code>  功能和利用 <code>colord</code>  指针以及 <code>Load barriers</code>  优化奠定了基础。初始只支持 <code>64</code>  位系统。</p>\n<p><code>ZGC</code>  的设计目标是：支持 <code>TB</code>  级内存容量，暂停时间低 ( <code>&lt;10ms</code> )，对整个程序吞吐量的影响小于 <code>15%</code> 。将来还可以扩 展实现机制，以支持不少令人兴奋的功能，例如多层堆 (即热对象置于 <code>DRAM</code>  和冷对象置于 <code>NVMe</code>  闪存)，或压缩堆。</p>\n<p><code>GC</code>  是 <code>java</code>  主要优势之一。然而，当 <code>GC</code>  停顿太长，就会开始影响应用的响应时间。消除或者减少 <code>GC</code>  停顿时长， <code>java</code>  将有可能在更广泛的应用场景中成长为一个更有吸引力的平台。此外，现代系统中可用内存不断增长，用户和程序员希望 <code>JVM</code>  能够以高效的方式充分利用这些内存，并且无需长时间的 <code>GC</code>  暂停时间。</p>\n<p><code>ZGC</code>  是一个并发，基于 <code>region</code> , 压缩型的垃圾收集器，只有 <code>root</code>  扫描阶段会 <code>STW</code> , 因此 <code>GC</code>  停顿时间不会随着堆的增长和存活对象的增长而变长。</p>\n<h3 id=\"epsilon\"><a class=\"markdownIt-Anchor\" href=\"#epsilon\">#</a> Epsilon</h3>\n<p>实验性质，生产环境不建议使用。</p>\n<p>启用方法： <code>-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC</code></p>\n<p>说明：开发一个处理内存分配但不实现任何实际内存回收机制的 <code>GC</code> , 一旦可用堆内存用完， <code>JVM</code>  就会退出，如果有 <code>System.gc()</code>  调用，实际上什么也不会发生 (这种场景下和 <code>-XX:+DisableExplicitGC</code>  效果一样), 因为没有内存回收，这个实现可能会警告用户尝试强制 <code>GC</code>  是徒劳的。</p>\n<p>主要用途如下:</p>\n<ul>\n<li>性能测试 (它可以帮助过滤掉 <code>GC</code>  引起的性能假象)</li>\n<li>内存压力测试 (例如，知道测试用例应该分配不超过 <code>1GB</code>  的内存，我们可以使用 <code>-Xmx1g -XX:+UseEpsilonGC</code> ，如果程序有问题，则程序会崩溃。</li>\n<li>非常短的 <code>JOB</code>  任务 (对于这种任务， <code>GC</code>  是在浪费资源)</li>\n<li><code>VM</code>  接口测试</li>\n<li><code>Last-drop</code>  延迟 &amp; 吞吐改进</li>\n</ul>\n<h3 id=\"更好的g1\"><a class=\"markdownIt-Anchor\" href=\"#更好的g1\">#</a> 更好的 G1</h3>\n<p>对于 <code>G1 GC</code> , 相比于 <code>JDK8</code> , 升级到 <code>JDK 11</code>  即可免费享受到：并行的 <code>Full GC</code> , 快速的 <code>CardTable</code>  扫描，自适应的堆占用比例调整 ( <code>IHOP</code> ), 在并发标记阶段的类型卸载等等。这些都是针对 <code>G1</code>  的不断增强，其中串行 <code>FullGC</code>  等甚至是曾经被广泛诟病的短板，你会发现 <code>GC</code>  配置和调优在 <code>JDK11</code>  中越来越方便。</p>\n<h2 id=\"移除与不再推荐使用的类库或功能\"><a class=\"markdownIt-Anchor\" href=\"#移除与不再推荐使用的类库或功能\">#</a> 移除与不再推荐使用的类库或功能</h2>\n<p><code>Jdk9</code>  到 <code>Jdk11</code> ，陆续移除了一些类库或功能。</p>\n<h3 id=\"移除了java-ee和corba-moudles\"><a class=\"markdownIt-Anchor\" href=\"#移除了java-ee和corba-moudles\">#</a> 移除了 Java EE 和 CORBA Moudles</h3>\n<p>在 <code>java11</code>  中移除了不太使用的 <code>JavaEE</code>  模块和 <code>CORBA</code>  技术。</p>\n<p><code>CORBA</code>  来自于二十世纪九十年代， <code>Oracle</code>  认为，现在用 <code>CORBA</code>  开发现代 <code>Java</code>  应用程序已经没有意义了，维护 <code>CORBA</code>  的成本已经超过了保留它带来的好处。</p>\n<p>但是删除 <code>CORBA</code>  将使得那些依赖于 <code>JDK</code>  提供部分 <code>CORBAAPI</code>  的 <code>CORBA</code>  实现无法运行。目前还没有第三方 <code>CORBA</code>  版本，也不确定是否会有第三方愿意接手 <code>CORBA API</code>  的维护工作。</p>\n<p>在 <code>java11</code>  中将 <code>java9</code>  标记废弃的 <code>Java EE</code>  及 <code>CORBA</code>  模块移除掉，具体如下:</p>\n<p><code>xml</code>  相关被移除的：</p>\n<ul>\n<li><code>java.xml.ws</code></li>\n<li><code>java.xml.bind</code></li>\n<li><code>java.xml.ws</code></li>\n<li><code>java.xml.ws.annotation</code></li>\n<li><code>jdk.xml.bind</code></li>\n<li><code>jdk.xml.ws</code></li>\n</ul>\n<p>只剩下 <code>java.xml</code> ,  <code>java.xml.crypto.jdk.xml.dom</code>  这几个模块。</p>\n<p>其它被移除的 Java EE 和 CORBA 相关类库:</p>\n<ul>\n<li><code>java.corba</code></li>\n<li><code>java.se.ee</code></li>\n<li><code>java.activation</code></li>\n<li><code>java.transaction</code>  (但是 <code>java11</code>  新增了一个 <code>java.transaction.xa</code>  模块)</li>\n</ul>\n<h3 id=\"其他移除的类库\"><a class=\"markdownIt-Anchor\" href=\"#其他移除的类库\">#</a> 其他移除的类库</h3>\n<ul>\n<li><code>com.sun.awt.AWTUtilities</code></li>\n<li><code>sun.miss.Unsafe.defineClass</code></li>\n<li><code>Thread.destroy()</code>  以及  <code>Thread.stop(Throwable)</code>  方法</li>\n<li><code>sun.nio.ch.disableSystemWideOverlappingFileLockCheck</code>  属性</li>\n<li><code>sun.locale.formatasdefault</code>  属性</li>\n<li><code>jdk snmp</code>  模块</li>\n<li><code>javafx</code></li>\n<li><code>java Mission Control</code></li>\n<li><code>Root Certificates</code> : 一些根证书被移除： <code>Baltimore Cybertrust Code Signing CA, SECOM Root Certificate, AOL and Swisscom Root Certificates</code></li>\n</ul>\n<p>其中，使用 <code>java.lang.invoke.MethodHandles.Lookup.defineClass</code>  来替代移除的 <code>sun.miss.Unsafe.defineClass</code> 。</p>\n<h3 id=\"将nashorn-javascript标记为不推荐\"><a class=\"markdownIt-Anchor\" href=\"#将nashorn-javascript标记为不推荐\">#</a> 将 Nashorn Javascript 标记为不推荐</h3>\n<p>将 <code>Javascript</code>  引擎标记为 <code>Deprecate</code> ，后续版本会移除，有需要的可以考虑使用开源的 <code>GraalVM</code> 。</p>\n<h3 id=\"将pack200-tools-and-api标记为不推荐\"><a class=\"markdownIt-Anchor\" href=\"#将pack200-tools-and-api标记为不推荐\">#</a> 将 Pack200 Tools and API 标记为不推荐</h3>\n<p><code>java11</code>  中将 <code>pack200</code>  以及 <code>unpack200</code>  工具以及 <code>java.tiljar</code>  中的 <code>Pack200 API</code>  标记为 <code>Deprecate</code> 。因为 <code>Pack200</code>  主要是用来压缩 <code>jar</code>  包的工具，由于网络下载速度的提升以及 <code>java9</code>  引入模块化系统之后不再依赖 <code>Pack200</code> ，因此这个版本将其标记为 <code>Deprecate</code> 。</p>\n<h2 id=\"预告\"><a class=\"markdownIt-Anchor\" href=\"#预告\">#</a> 预告</h2>\n<p>继 <code>LTS JDK8</code>  之后，又一 <code>LTS</code> , 你会用吗？ <code>JDK16</code> , 它来了。</p>\n<h2 id=\"对了\"><a class=\"markdownIt-Anchor\" href=\"#对了\">#</a> 对了</h2>\n<p><code>JDK11</code>  写  <code>JDK8</code>  的代码？</p>\n<p>代码始终是代码，写的再多，写不懂你我。</p>\n<p>多看一点，就比其他们多懂一点。所以，你关不关注我，问题不大！</p>\n<p>人情世故。不是世故，就是事故。问题真的不大。</p>\n<p>文中所有代码，在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfamRrMTE=\">https://gitee.com/fangjiaxiaobai/learn_java/tree/master/fxb_jdk11</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/java/jdk/versions/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "JDK",
                "JDK版本",
                "JDK11"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/06/BQ/LeetCode/0268-miss-number/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/06/BQ/LeetCode/0268-miss-number/",
            "title": "LC:268.丢失的数字",
            "date_published": "2021-11-06T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定一个包含  <code>[0, n]</code>  中  <code>n</code>  个数的数组  <code>nums</code>  ，找出  <code>[0, n]</code>  这个范围内没有出现在数组中的那个数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,0,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [9,6,4,2,3,5,7,0,1]</span><br><span class=\"line\">输出：8</span><br><span class=\"line\">解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-4\"><a class=\"markdownIt-Anchor\" href=\"#示例-4\">#</a> 示例 4</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n == nums.length</span><br><span class=\"line\">1 &lt;= n &lt;= 104</span><br><span class=\"line\">0 &lt;= nums[i] &lt;= n</span><br><span class=\"line\">nums 中的所有数字都 独一无二</span><br></pre></td></tr></table></figure>\n<h4 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\">#</a> 进阶</h4>\n<p>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题？</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）268.丢失的数字\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWlzc2luZy1udW1iZXIv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWlzc2luZy1udW1iZXIv\">力扣（LeetCode）268.丢失的数字</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）136. 只出现一次的数字\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2luZ2xlLW51bWJlci8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2luZ2xlLW51bWJlci8=\">力扣（LeetCode）136. 只出现一次的数字</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）287. 寻找重复数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlci8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlci8=\">力扣（LeetCode）287. 寻找重复数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）41. 缺失的第一个正数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtbWlzc2luZy1wb3NpdGl2ZS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtbWlzc2luZy1wb3NpdGl2ZS8=\">力扣（LeetCode）41. 缺失的第一个正数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）765. 情侣牵手\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291cGxlcy1ob2xkaW5nLWhhbmRzLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291cGxlcy1ob2xkaW5nLWhhbmRzLw==\">力扣（LeetCode）765. 情侣牵手</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>简单类型的题目。<br>\n先把题目读清楚：<br>\n区间 <code>[0,n]</code>  一共有 <code>n+1</code>  个数，而题目中说的是  <code>[0,n]</code>  是 <code>n</code>  个数的数组，所以只会少 <code>1</code>  个数字。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一排序\"><a class=\"markdownIt-Anchor\" href=\"#解法一排序\">#</a> 解法一：排序</h3>\n<p>将数组 <code>nums</code>  进行排序，找到 <code>nums[i]!=i</code>  的位置，就是缺少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != i) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二额外数组\"><a class=\"markdownIt-Anchor\" href=\"#解法二额外数组\">#</a> 解法二：额外数组</h3>\n<p>由于  <code>[0,n]</code>  是数字连续的。所以我们使用一个额外的  <code>n+1</code>  长度的数组  <code>pos</code> 。将 <code>nums[i]</code>  作为 <code>pos</code>  的索引赋值为 <code>1</code> ，从 <code>1</code>  开始遍历 <code>pos</code>  数组， <code>pos[i]==0</code>  即为少的那个数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        pos[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; pos.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> != pos[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法三数学计算\"><a class=\"markdownIt-Anchor\" href=\"#解法三数学计算\">#</a> 解法三：数学计算</h3>\n<p>区间 <code>[0,n]</code>  是连续的数组，那么利用等差数列的性质可以算出来 <code>n</code>  个数的总和，减去 <code>nums</code>  数组中的元素，则就是少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = <span class=\"number\">0</span>, sum = n * (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) cur += i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum - cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法四亦或\"><a class=\"markdownIt-Anchor\" href=\"#解法四亦或\">#</a> 解法四：亦或</h3>\n<p>亦或计算使然。  <code>a^a=0</code> , <code>0^a=a</code> .</p>\n<p>所以将  <code>0...n</code>  和  <code>nums[0...n]</code>  进行亦或计算，则计算出来的值就是缺少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) ans ^= i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) ans ^= i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/",
            "title": "LC:42.接雨水",
            "date_published": "2021-11-04T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定  <code>n</code>  个非负整数表示每个宽度为  <code>1</code>  的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1：</h3>\n<p><img data-src=\"/images/ac-code/42/demo.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [4,2,0,3,2,5]</span><br><span class=\"line\">输出：9</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n == height.length</span><br><span class=\"line\">1 &lt;= n &lt;= 2 * 104</span><br><span class=\"line\">0 &lt;= height[i] &lt;= 105</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）42.接雨水\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlcg==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlcg==\">力扣（LeetCode）42.接雨水</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）407.接雨水II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\">力扣（LeetCode）407.接雨水II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<div class=\"links\"><div class=\"item\" title=\"方家小白-LeetCode题解.407.接雨水II\" style=\"--block-color:#e0b971;\"><a href=\"https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/\" class=\"image\" data-background-image=\"https://avatars.githubusercontent.com/u/22616214?v=4\"></a>\n          <div class=\"info\">\n          <a href=\"https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/\" class=\"title\">方家小白-LeetCode题解.407.接雨水II</a>\n          <p class=\"desc\">日常积累的代码，知识点, 数据结构与算法的学习与实现，以及例题分享</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trapRainWater</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] heightMap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMap.length &lt;= <span class=\"number\">2</span> || heightMap[<span class=\"number\">0</span>].length &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = heightMap.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = heightMap[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[m][n];</span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1[<span class=\"number\">1</span>] - o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == m - <span class=\"number\">1</span> || j == <span class=\"number\">0</span> || j == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i * n + j, heightMap[i][j]&#125;);</span><br><span class=\"line\">                visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dirs = &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] curr = pq.poll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = curr[<span class=\"number\">0</span>] / n + dirs[k];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = curr[<span class=\"number\">0</span>] % n + dirs[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; !visit[nx][ny]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curr[<span class=\"number\">1</span>] &gt; heightMap[nx][ny]) &#123;</span><br><span class=\"line\">                    res += curr[<span class=\"number\">1</span>] - heightMap[nx][ny];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nx * n + ny, Math.max(heightMap[nx][ny], curr[<span class=\"number\">1</span>])&#125;);</span><br><span class=\"line\">                visit[nx][ny] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/",
            "title": "LC:407.接雨水II",
            "date_published": "2021-11-04T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你一个  <code>m x n</code>  的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p><img data-src=\"/images/ac-code/407/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p><img data-src=\"/images/ac-code/407/demo2.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m == heightMap.length</span><br><span class=\"line\">n == heightMap[i].length</span><br><span class=\"line\">1 &lt;= m, n &lt;= 200</span><br><span class=\"line\">0 &lt;= heightMap[i][j] &lt;= 2 * 104</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）407.接雨水II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\">力扣（LeetCode）407.接雨水II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<div class=\"links\"><div class=\"item\" title=\"方家小白-LeetCode题解-42.接雨水\" style=\"--block-color:#e0b971;\"><a href=\"http://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/\" class=\"image\" data-background-image=\"https://avatars.githubusercontent.com/u/22616214?v=4\"></a>\n          <div class=\"info\">\n          <a href=\"http://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/\" class=\"title\">方家小白-LeetCode题解-42.接雨水</a>\n          <p class=\"desc\">日常积累的代码，知识点, 数据结构与算法的学习与实现，以及例题分享</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trapRainWater</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] heightMap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMap.length &lt;= <span class=\"number\">2</span> || heightMap[<span class=\"number\">0</span>].length &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = heightMap.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = heightMap[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[m][n];</span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1[<span class=\"number\">1</span>] - o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == m - <span class=\"number\">1</span> || j == <span class=\"number\">0</span> || j == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i * n + j, heightMap[i][j]&#125;);</span><br><span class=\"line\">                visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dirs = &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] curr = pq.poll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = curr[<span class=\"number\">0</span>] / n + dirs[k];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = curr[<span class=\"number\">0</span>] % n + dirs[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; !visit[nx][ny]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curr[<span class=\"number\">1</span>] &gt; heightMap[nx][ny]) &#123;</span><br><span class=\"line\">                    res += curr[<span class=\"number\">1</span>] - heightMap[nx][ny];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nx * n + ny, Math.max(heightMap[nx][ny], curr[<span class=\"number\">1</span>])&#125;);</span><br><span class=\"line\">                visit[nx][ny] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "有点难的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/03/BQ/LeetCode/0367-valid-perfect-square/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/03/BQ/LeetCode/0367-valid-perfect-square/",
            "title": "LC:367.有效的完全平方数",
            "date_published": "2021-11-03T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定一个 正整数  <code>num</code>  ，编写一个函数，如果  <code>num</code>  是一个完全平方数，则返回  <code>true</code>  ，否则返回  <code>false</code>  。</p>\n<p>进阶：不要 使用任何内置的库函数，如   <code>sqrt</code>  。</p>\n<p></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = 16</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = 14</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p><code>1 &lt;= num &lt;= 2^31 - 1</code></p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）367. 有效的完全平方数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGVyZmVjdC1zcXVhcmU=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGVyZmVjdC1zcXVhcmU=\">力扣（LeetCode）367. 有效的完全平方数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>简单的题目，没什么可以分析的。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一规律\"><a class=\"markdownIt-Anchor\" href=\"#解法一规律\">#</a> 解法一：规律</h3>\n<p><code>4=1+3</code>   <code>9=1+3+5</code>   <code>16=1+3+5+7</code>  以此类推，模仿它可以使用一个 <code>while</code>  循环，不断减去一个从 <code>1</code>  开始不断增大的奇数，若最终减成了 <code>0</code> ，说明是完全平方数，否则，不是。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPerfectSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      num -= num1;</span><br><span class=\"line\">      num1 += <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二-平方计算\"><a class=\"markdownIt-Anchor\" href=\"#解法二-平方计算\">#</a> 解法二：平方计算</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPerfectSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxTry = num &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tryCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tryCount &lt;= maxTry) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == tryCount * tryCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; tryCount * tryCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tryCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/02/BQ/LeetCode/0237-delete-node-in-a-linked-list/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/02/BQ/LeetCode/0237-delete-node-in-a-linked-list/",
            "title": "LC:237.删除链表中的节点",
            "date_published": "2021-11-02T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点  <code>head</code>  ，只能直接访问 要被删除的节点 。</p>\n<p>题目数据保证需要删除的节点 不是末尾节点 。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p><img data-src=\"/images/ac-code/237/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [4,5,1,9], node = 5</span><br><span class=\"line\">输出：[4,1,9]</span><br><span class=\"line\">解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p><img data-src=\"/images/ac-code/237/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [4,5,1,9], node = 1</span><br><span class=\"line\">输出：[4,5,9]</span><br><span class=\"line\">解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4], node = 3</span><br><span class=\"line\">输出：[1,2,4]</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-4\"><a class=\"markdownIt-Anchor\" href=\"#示例-4\">#</a> 示例 4</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [0,1], node = 0</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-5\"><a class=\"markdownIt-Anchor\" href=\"#示例-5\">#</a> 示例 5</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [-3,5,-99], node = -3</span><br><span class=\"line\">输出：[5,-99]</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示：</h2>\n<ul>\n<li>链表中节点的数目范围是 [2, 1000]</li>\n<li>-1000 &lt;= Node.val &lt;= 1000</li>\n<li>链表中每个节点的值都是唯一的</li>\n<li>需要删除的节点 node 是 链表中的一个有效节点 ，且 不是末尾节点</li>\n</ul>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）237.删除链表中的节点\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVsZXRlLW5vZGUtaW4tYS1saW5rZWQtbGlzdC8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVsZXRlLW5vZGUtaW4tYS1saW5rZWQtbGlzdC8=\">力扣（LeetCode）237.删除链表中的节点</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>需要特别注意：入参中的 <code>Node</code>  不一定是头节点！</p>\n<p>所以 =&gt; 张冠李戴，就… 杀了李。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/0575-distribute-candies/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/0575-distribute-candies/",
            "title": "LC:575.分糖果",
            "date_published": "2021-11-01T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><code>Alice</code>  有  <code>n</code>  枚糖，其中第  <code>i</code>  枚糖的类型为  <code>candyType[i]</code>  。 <code>Alice</code>  注意到她的体重正在增长，所以前去拜访了一位医生。</p>\n<p>医生建议  <code>Alice</code>  要少摄入糖分，只吃掉她所有糖的  <code>n / 2</code>  即可（ <code>n</code>  是一个偶数）。 <code>Alice</code>  非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。</p>\n<p>给你一个长度为  <code>n</code>  的整数数组  <code>candyType</code>  ，返回：  <code>Alice</code>  在仅吃掉  <code>n / 2</code>  枚糖的情况下，可以吃到糖的最多种类数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p>输入：candyType = [1,1,2,2,3,3]<br>\n 输出：3<br>\n 解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。</p>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p>输入：candyType = [1,1,2,3]<br>\n 输出：2<br>\n 解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。</p>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<p>输入：candyType = [6,6,6,6]<br>\n 输出：1<br>\n 解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。</p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p>n == candyType.length<br>\n2 &lt;= n &lt;= 104<br>\nn 是一个偶数<br>\n - 105 &lt;= candyType [i] &lt;= 105</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）575.分糖果\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlzdHJpYnV0ZS1jYW5kaWVz\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlzdHJpYnV0ZS1jYW5kaWVz\">力扣（LeetCode）575.分糖果</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">distributeCandies</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candyType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糖的种类</span></span><br><span class=\"line\">    Set&lt;Integer&gt; set = Arrays.stream(candyType).boxed().collect(Collectors.toSet());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 比较大小</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integer.min(set.size(), candyType.length &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "title": "LC:1218.最长定差子序列",
            "date_published": "2021-11-01T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你一个整数数组  <code>arr</code>  和一个整数  <code>difference</code> ，请你找出并返回  <code>arr</code>  中最长等差子序列的长度，该子序列中相邻元素之间的差等于  <code>difference</code>  。</p>\n<p>子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从  <code>arr</code>  派生出来的序列。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,2,3,4], difference = 1</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [1,2,3,4]。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,3,5,7], difference = 1</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [7,5,3,1]。</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= arr.length &lt;= 105</span><br><span class=\"line\">-104 &lt;= arr[i], difference &lt;= 104</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）1218.最长定差子序列\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\">力扣（LeetCode）1218.最长定差子序列</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#解法一-动态规划\">#</a> 解法一：动态规划</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubsequence</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> difference)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">40001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">20000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        dp[arr[i] + offset] = Integer.max(<span class=\"number\">1</span>, dp[arr[i] + offset - difference] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxLength &lt; dp[arr[i] + offset]) &#123;</span><br><span class=\"line\">            maxLength = dp[arr[i] + offset];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#解法二暴力解法\">#</a> 解法二：暴力解法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span> || arr.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 最长子序列的长度数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">t[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组arr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    t[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] - difference == arr[j]) &#123;</span><br><span class=\"line\">            t[i] = t[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxLength &lt; t[i]) &#123;</span><br><span class=\"line\">                maxLength = t[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> maxLength;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "动态规划"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/29/machine-learn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A002-K-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/29/machine-learn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A002-K-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/",
            "title": "K-近邻算法(KNN)",
            "date_published": "2021-10-29T10:18:00.000Z",
            "content_html": "<p><code>k-近邻算法</code> ，英文名:  <code>K Nearest Neighbor</code>  算法  又叫 <code>KNN算法</code> ，这个算法是机器学习里面一个比较经典的算法， 总体来说 1 算法是相对比较容易理解的算法.</p>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h2>\n<p>如果一个样本在特征空间中的 k 个最相似 (即特征空间中最邻近) 的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p>\n<blockquote>\n<p><code>KNN</code>  算法最早是由 <code>Cover</code>  和 <code>Hart</code>  提出的一种分类算法。应用场景有字符识别、文本分类、图像识别等领域。</p>\n</blockquote>\n<h2 id=\"算法的理解\"><a class=\"markdownIt-Anchor\" href=\"#算法的理解\">#</a> 算法的理解</h2>\n<p>举一个例子来，来分析一下  <code>KNN</code>  算法的实现原理</p>\n<p>假设我们现在有几部电影，如下图:</p>\n<p><img data-src=\"/images/ml/02-knn-1.png\" alt=\"\"></p>\n<p>我们要 根据 搞笑镜头，拥抱镜头，打斗镜头的个数 这三个特征来预测出 《唐人街探案》所属的电影类型.</p>\n<p>我们使用  <code>KNN算法</code>  思想来实现预测。</p>\n<p>将样本中特征作为坐标抽，建立坐标系。从而建立特征空间。本例中，分别把 搞笑镜头，拥抱镜头，打斗镜头 作为 <code>x,y,z</code>  轴。然后把计算出每个样本和 《唐人街探案》 的距离，选择距离最近的前 k 个 ( <code>KNN中的k</code> ) 样本，这 <code>k</code>  个样本大多数所属的电影类别就是 《唐人街探案》的电影类型。</p>\n<blockquote>\n<p>特征空间：是指已特征为坐标轴简历的一种特征的坐标系，可能是多维的。</p>\n</blockquote>\n<p>那你可能对 距离 是如何计算的，有点疑惑。计算距离的方式有很多种。<br>\n先学习一下最简单的 欧氏距离。(初中都学过的！)</p>\n<p>在二维坐标系中， 我们可以使用一下方式来计算出两个点的距离。</p>\n<p><img data-src=\"/images/ml/02-knn-2.png\" alt=\"\"></p>\n<p>在多维的特征空间中，我们也可以使用同样的方式来计算欧式距离。如下图：</p>\n<p><img data-src=\"/images/ml/02-knn-3.png\" alt=\"\"></p>\n<p>那计算一下样本集中的欧式距离，如下图:</p>\n<p><img data-src=\"/images/ml/02-knn-4.png\" alt=\"\"></p>\n<p>并计算出了最近的 5 个样本中有三个喜剧片类型，2 两个爱情片类型。 那根据 <code>KNN</code>  就是喜剧片类型。</p>\n<p>这就是 <code>KNN算法</code> 的核心思想了。</p>\n<p>这个例子中，我们选则了 最近的 <code>5</code>  个样本，也就是 k=5 的时候，会有三个喜剧片类型，两个爱情片类型。这个 <code>5</code>  是如何选择的呢？</p>\n<h2 id=\"k值的选择\"><a class=\"markdownIt-Anchor\" href=\"#k值的选择\">#</a> k 值的选择</h2>\n<p><code>K值</code> 选择问题，李航博士的一书「统计学习方法」上所说：</p>\n<ol>\n<li>\n<p>选择较小的 <code>K</code>  值，就相当于用较小的领域中的训练实例进行预测，“学习” 近似误差会减小，只有与输入实例较近或相似的训练实例才会对预测结果起作用，与此同时带来的问题是 “学习” 的估计误差会增大，换句话说， <code>K值</code> 的减小就意味着整体模型变得复杂，容易发生过拟合；</p>\n</li>\n<li>\n<p>选择较大的 <code>K值</code> ，就相当于用较大领域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测器作用，使预测发生错误，且 K 值的增大就意味着整体的模型变得简单。</p>\n</li>\n<li>\n<p><code>K=N</code> （ <code>N</code>  为训练样本个数），则完全不足取，因为此时无论输入实例是什么，都只是简单的预测它属于在训练实例中最多的类，模型过于简单，忽略了训练实例中大量有用信息。</p>\n</li>\n</ol>\n<p>在实际应用中， <code>K值</code> 一般取一个比较小的数值，例如采用交叉验证法 ( <code>cross validation</code> )（简单来说，就是把训练数据在分成两组：训练集和验证集）来选择最优的 K 值。对这个简单的分类器进行泛化，用核方法把这个线性模型扩展到非线性的情况，具体方法是把低维数据集映射到高维特征空间。</p>\n<h2 id=\"knn的优化\"><a class=\"markdownIt-Anchor\" href=\"#knn的优化\">#</a> KNN 的优化</h2>\n<p><code>KNN</code>  算法需要计算所有的样本数据和预测数据的距离，需要选择出距离预测数据最近的 k 个样本数据的预测归类。在庞大的数据量面前，计算所有样本数据距离，显然是不可取的。为了避免每次都重新计算一遍距离， <code>KNN</code>  算法提供了多种优化方法， 比如  <code>KD-tree</code> ,  <code>ball_tree</code> ,  <code>brute</code> . 这几种优化方式的具体实现逻辑，我会在后面的几篇文章中挨个分析。</p>\n<h2 id=\"距离的计算\"><a class=\"markdownIt-Anchor\" href=\"#距离的计算\">#</a> 距离的计算</h2>\n<p><code>KNN</code>  算法，最重要的就是距离。 除了上文提到的欧式距离，还有其他计算距离的方法吗？</p>\n<p>有。</p>\n<p>除了欧式距离，还有 曼哈顿距离，</p>\n<h3 id=\"曼哈顿距离\"><a class=\"markdownIt-Anchor\" href=\"#曼哈顿距离\">#</a> 曼哈顿距离</h3>\n<p>在曼哈顿街区要从一个十字路口开车到另一个十字路口，驾驶距离显然不是两点间的直线距离。这个实际驾驶距离就是 “曼哈顿距离”。曼哈顿距离也称为 “城市街区距离”( <code>City Block distance</code> )。如下图:<br>\n<img data-src=\"/images/ml/02-knn-6.png\" alt=\"\"></p>\n<p>计算公式见下图:</p>\n<p><img data-src=\"/images/ml/02-knn-7.png\" alt=\"\"></p>\n<h3 id=\"切比雪夫距离-chebyshev-distance\"><a class=\"markdownIt-Anchor\" href=\"#切比雪夫距离-chebyshev-distance\">#</a> 切比雪夫距离 (Chebyshev Distance)</h3>\n<p>国际象棋中，国王可以直行、横行、斜行，所以国王走一步可以移动到相邻 8 个方格中的任意一个。国王从格子 <code>(x1,y1)</code>  走到格子 <code>(x2,y2)</code>  最少需要多少步？这个距离就叫切比雪夫距离。</p>\n<p><img data-src=\"/images/ml/02-knn-8.png\" alt=\"\"></p>\n<p>计算公式见下图:</p>\n<p><img data-src=\"/images/ml/02-knn-9.png\" alt=\"\"></p>\n<h3 id=\"闵可夫斯基距离minkowski-distance\"><a class=\"markdownIt-Anchor\" href=\"#闵可夫斯基距离minkowski-distance\">#</a> 闵可夫斯基距离 (Minkowski Distance)</h3>\n<p>闵氏距离不是一种距离，而是一组距离的定义，是对多个距离度量公式的概括性的表述。</p>\n<p>两个 n 维变量 <code>a(x11,x12,…,x1n)</code>  与 <code>b(x21,x22,…,x2n)</code>  间的闵可夫斯基距离定义为：</p>\n<p><img data-src=\"/images/ml/02-knn-10.png\" alt=\"\"></p>\n<p>其中 <code>p</code>  是一个变参数：<br>\n当 <code>p=1</code>  时，就是曼哈顿距离；<br>\n当 <code>p=2</code>  时，就是欧氏距离；<br>\n当 <code>p→∞</code> 时，就是切比雪夫距离。</p>\n<p>根据 p 的不同，闵氏距离可以表示某一类 / 种的距离。</p>\n<p>小结：<br>\n1 闵氏距离，包括曼哈顿距离、欧氏距离和切比雪夫距离都存在明显的缺点:<br>\n <code>e.g.</code>  二维样本 (身高 <code>[单位:cm]</code> , 体重 <code>[单位:kg]</code> ), 现有三个样本： <code>a(180,50)</code> ， <code>b(190,50)</code> ， <code>c(180,60)</code> 。<br>\n <code>a</code>  与 <code>b</code>  的闵氏距离（无论是曼哈顿距离、欧氏距离或切比雪夫距离）等于 <code>a</code>  与 <code>c</code>  的闵氏距离。但实际上身高的 <code>10cm</code>  并不能和体重的 <code>10kg</code>  划等号。</p>\n<p>2 闵氏距离的缺点：<br>\n​ (1) 将各个分量的量纲 ( <code>scale</code> )，也就是 “单位” 相同的看待了；<br>\n​ (2) 未考虑各个分量的分布（期望，方差等）可能是不同的。</p>\n<h3 id=\"标准化欧氏距离-standardized-euclideandistance\"><a class=\"markdownIt-Anchor\" href=\"#标准化欧氏距离-standardized-euclideandistance\">#</a> 标准化欧氏距离 (Standardized EuclideanDistance)</h3>\n<p>标准化欧氏距离是针对欧氏距离的缺点而作的一种改进。</p>\n<p>思路：既然数据各维分量的分布不一样，那先将各个分量都 “标准化” 到均值、方差相等。假设样本集 X 的均值 ( <code>mean</code> ) 为 <code>m</code> ，标准差 ( <code>standard deviation</code> ) 为 <code>s</code> ， <code>X</code>  的 “标准化变量” 表示为：</p>\n<p><img data-src=\"/images/ml/02-knn-11.png\" alt=\"\"></p>\n<p>如果将方差的倒数看成一个权重，也可称之为加权欧氏距离 ( <code>Weighted Euclidean distance</code> )。</p>\n<h3 id=\"余弦距离cosine-distance\"><a class=\"markdownIt-Anchor\" href=\"#余弦距离cosine-distance\">#</a> 余弦距离 (Cosine Distance)</h3>\n<p>几何中，夹角余弦可用来衡量两个向量方向的差异；机器学习中，借用这一概念来衡量样本向量之间的差异。</p>\n<p>二维空间中向量 <code>A(x1,y1)</code>  与向量 <code>B(x2,y2)</code>  的夹角余弦公式：<br>\n<img data-src=\"/images/ml/02-knn-12.png\" alt=\"\"></p>\n<p>两个 <code>n</code>  维样本点 <code>a(x11,x12,…,x1n)</code>  和 <code>b(x21,x22,…,x2n)</code>  的夹角余弦为：</p>\n<p><img data-src=\"/images/ml/02-knn-13.png\" alt=\"\"></p>\n<p>即:</p>\n<p><img data-src=\"/images/ml/02-knn-14.png\" alt=\"\"></p>\n<p>夹角余弦取值范围为 <code>[-1,1]</code> 。余弦越大表示两个向量的夹角越小，余弦越小表示两向量的夹角越大。当两个向量的方向重合时余弦取最大值 <code>1</code> ，当两个向量的方向完全相反余弦取最小值 <code>-1</code></p>\n<h3 id=\"汉明距离hamming-distance\"><a class=\"markdownIt-Anchor\" href=\"#汉明距离hamming-distance\">#</a> 汉明距离 (Hamming Distance)</h3>\n<p>两个等长字符串 <code>s1</code>  与 <code>s2</code>  的汉明距离为：将其中一个变为另外一个所需要作的最小字符替换次数。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Hamming distance between &quot;1011101&quot; and &quot;1001001&quot; is 2. </span><br><span class=\"line\">The Hamming distance between &quot;2143896&quot; and &quot;2233796&quot; is 3. </span><br><span class=\"line\">The Hamming distance between &quot;toned&quot; and &quot;roses&quot; is 3.</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/ml/02-knn-15.png\" alt=\"\"></p>\n<p>汉明重量：是字符串相对于同样长度的零字符串的汉明距离，也就是说，它是字符串中非零的元素个数：对于二进制字符串来说，就是  <code>1</code>  的个数，所以  <code>11101</code>  的汉明重量是  <code>4</code> 。因此，如果向量空间中的元素 <code>a</code>  和 <code>b</code>  之间的汉明距离等于它们汉明重量的差 <code>a-b</code> 。</p>\n<p>应用：汉明重量分析在包括信息论、编码理论、密码学等领域都有应用。比如在信息编码过程中，为了增强容错性，应使得编码间的最小汉明距离尽可能大。但是，如果要比较两个不同长度的字符串，不仅要进行替换，而且要进行插入与删除的运算，在这种场合下，通常使用更加复杂的编辑距离等算法。</p>\n<h3 id=\"杰卡德距离jaccard-distance\"><a class=\"markdownIt-Anchor\" href=\"#杰卡德距离jaccard-distance\">#</a> 杰卡德距离 (Jaccard Distance)</h3>\n<p>杰卡德相似系数 ( <code>Jaccard similarity coefficient</code> )：两个集合 <code>A</code>  和 <code>B</code>  的交集元素在 <code>A</code> ， <code>B</code>  的并集中所占的比例，称为两个集合的杰卡德相似系数，用符号 <code>J(A,B</code> ) 表示：</p>\n<p><img data-src=\"/images/ml/02-knn-16.png\" alt=\"\"></p>\n<p>杰卡德距离 ( <code>Jaccard Distance</code> )：与杰卡德相似系数相反，用两个集合中不同元素占所有元素的比例来衡量两个集合的区分度：</p>\n<p><img data-src=\"/images/ml/02-knn-17.png\" alt=\"\"></p>\n<h3 id=\"马氏距离mahalanobis-distance\"><a class=\"markdownIt-Anchor\" href=\"#马氏距离mahalanobis-distance\">#</a> 马氏距离 (Mahalanobis Distance)</h3>\n<p>下图有两个正态分布图，它们的均值分别为 <code>a</code>  和 <code>b</code> ，但方差不一样，则图中的 <code>A</code>  点离哪个总体更近？或者说 <code>A</code>  有更大的概率属于谁？显然， <code>A</code>  离左边的更近， <code>A</code>  属于左边总体的概率更大，尽管 <code>A</code>  与 <code>a</code>  的欧式距离远一些。这就是马氏距离的直观解释。</p>\n<p><img data-src=\"/images/ml/02-knn-18.png\" alt=\"\"></p>\n<p>马氏距离是基于样本分布的一种距离。</p>\n<p>马氏距离是由印度统计学家马哈拉诺比斯提出的，表示数据的协方差距离。它是一种有效的计算两个位置样本集的相似度的方法。</p>\n<p>与欧式距离不同的是，它考虑到各种特性之间的联系，即独立于测量尺度。</p>\n<p>马氏距离定义：设总体 <code>G</code>  为 <code>m</code>  维总体（考察 <code>m</code>  个指标），均值向量为 <code>μ=（μ1，μ2，… ...，μm，）</code> , 协方差阵为 <code>∑=（σij）</code> ,</p>\n<p>则样本 <code>X=（X1，X2，… …，Xm，）</code> 与总体 G 的马氏距离定义为：</p>\n<p><img data-src=\"/images/ml/02-knn-19.png\" alt=\"\"></p>\n<p>马氏距离也可以定义为两个服从同一分布并且其协方差矩阵为 <code>∑</code> 的随机变量的差异程度：如果协方差矩阵为单位矩阵，马氏距离就简化为欧式距离；如果协方差矩阵为对角矩阵，则其也可称为正规化的欧式距离。</p>\n<h4 id=\"马氏距离特性\"><a class=\"markdownIt-Anchor\" href=\"#马氏距离特性\">#</a> 马氏距离特性：</h4>\n<p>1. 量纲无关，排除变量之间的相关性的干扰；</p>\n<p>2. 马氏距离的计算是建立在总体样本的基础上的，如果拿同样的两个样本，放入两个不同的总体中，最后计算得出的两个样本间的马氏距离通常是不相同的，除非这两个总体的协方差矩阵碰巧相同；</p>\n<p>3 . 计算马氏距离过程中，要求总体样本数大于样本的维数，否则得到的总体样本协方差矩阵逆矩阵不存在，这种情况下，用欧式距离计算即可。</p>\n<p>4. 还有一种情况，满足了条件总体样本数大于样本的维数，但是协方差矩阵的逆矩阵仍然不存在，比如三个样本点 <code>(3,4)</code> ， <code>(5,6)</code> ， <code>(7,8)</code> ，这种情况是因为这三个样本在其所处的二维空间平面内共线。这种情况下，也采用欧式距离计算。</p>\n<h4 id=\"欧式距离马氏距离\"><a class=\"markdownIt-Anchor\" href=\"#欧式距离马氏距离\">#</a> 欧式距离 &amp; 马氏距离：</h4>\n<p><img data-src=\"/images/ml/02-knn-20.png\" alt=\"\"></p>\n<p>举例：</p>\n<p>已知有两个类 <code>G1</code>  和 <code>G2</code> ，比如 <code>G1</code>  是设备 <code>A</code>  生产的产品， <code>G2</code>  是设备 <code>B</code>  生产的同类产品。设备 <code>A</code>  的产品质量高（如考察指标为耐磨度 <code>X</code> ），其平均耐磨度 <code>μ1=80</code> ，反映设备精度的方差 <code>σ2(1)=0.25</code> ; 设备 B 的产品质量稍差，其平均耐磨损度 <code>μ2=75</code> ，反映设备精度的方差 <code>σ2(2)=4</code> .</p>\n<p>今有一产品 <code>G0</code> ，测的耐磨损度 <code>X0=78</code> ，试判断该产品是哪一台设备生产的？</p>\n<p>直观地看， <code>X0</code>  与 <code>μ1</code> （ <code>设备A</code> ）的绝对距离近些，按距离最近的原则，是否应把该产品判断 <code>设备A</code>  生产的？</p>\n<p>考虑一种相对于分散性的距离，记 <code>X0</code>  与 <code>G1</code> ， <code>G2</code>  的相对距离为 <code>d1</code> ， <code>d2</code> , 则：</p>\n<p><img data-src=\"/images/ml/02-knn-21.png\" alt=\"\"></p>\n<p>因为 <code>d2=1.5 &lt; d1=4</code> ，按这种距离准则，应判断 <code>X0</code>  为设备 B 生产的。</p>\n<p>设备 <code>B</code>  生产的产品质量较分散，出现 <code>X0</code>  为 <code>78</code>  的可能性较大；而 <code>设备A</code>  生产的产品质量较集中，出现 <code>X0</code>  为 <code>78</code>  的可能性较小。</p>\n<p>这种相对于分散性的距离判断就是马氏距离。</p>\n<p><img data-src=\"/images/ml/02-knn-22.png\" alt=\"\"></p>\n<h2 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\">#</a> 案例</h2>\n<h3 id=\"预测鸢尾花种类\"><a class=\"markdownIt-Anchor\" href=\"#预测鸢尾花种类\">#</a> 预测鸢尾花种类</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iris_demo</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.准备数据</span></span><br><span class=\"line\">    iris = load_iris()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.数据基本处理</span></span><br><span class=\"line\">    x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.特征工程</span></span><br><span class=\"line\">    <span class=\"comment\"># 3.1 标准化</span></span><br><span class=\"line\">    transfer = StandardScaler()</span><br><span class=\"line\">    x_train = transfer.fit_transform(x_train)</span><br><span class=\"line\">    x_test = transfer.transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.机器训练(模型训练)</span></span><br><span class=\"line\">    estimator = KNeighborsClassifier(n_neighbors=<span class=\"number\">3</span>)</span><br><span class=\"line\">    estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.模型评估</span></span><br><span class=\"line\">    <span class=\"comment\"># 5.1  方法1：比对真实值和预测值</span></span><br><span class=\"line\">    predict_data = estimator.predict(x_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测值为: \\n&quot;</span>, predict_data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;比对真实值和预测值;\\n&quot;</span>, predict_data == y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.2  方法2: 直接计算正确率</span></span><br><span class=\"line\">    score = estimator.score(x_test, y_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确率:&quot;</span>, score)</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出结果\"><a class=\"markdownIt-Anchor\" href=\"#输出结果\">#</a> 输出结果</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预测值为: </span><br><span class=\"line\"> [0 2 1 2 1 1 1 2 1 0 2 1 2 2 0 2 1 1 1 1 0 2 0 1 2 0 2 2 2 2]</span><br><span class=\"line\">比对真实值和预测值;</span><br><span class=\"line\"> [ True  True  True  True  True  True  True  True  True  True  True  True</span><br><span class=\"line\">  True  True  True  True  True  True False  True  True  True  True  True</span><br><span class=\"line\">  True  True  True  True  True  True]</span><br><span class=\"line\">正确率: 0.9666666666666667</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-gscv-优化\"><a class=\"markdownIt-Anchor\" href=\"#使用-gscv-优化\">#</a> 使用 GSCV 优化</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split, GridSearchCV</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iris_demo</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.准备数据</span></span><br><span class=\"line\">    iris = load_iris()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.数据基本处理</span></span><br><span class=\"line\">    x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.特征工程</span></span><br><span class=\"line\">    <span class=\"comment\"># 3.1 标准化</span></span><br><span class=\"line\">    transfer = StandardScaler()</span><br><span class=\"line\">    x_train = transfer.fit_transform(x_train)</span><br><span class=\"line\">    x_test = transfer.transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.机器训练(模型训练)</span></span><br><span class=\"line\">    estimator = KNeighborsClassifier()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.1 准备要调的超参数</span></span><br><span class=\"line\">    param_dict = &#123;<span class=\"string\">&quot;n_neighbors&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 4.2 创建 GridSearchCV,使用网格搜索和交叉验证</span></span><br><span class=\"line\">    estimator = GridSearchCV(estimator, param_grid=param_dict, cv=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.模型评估</span></span><br><span class=\"line\">    <span class=\"comment\"># 5.1  方法1：比对真实值和预测值</span></span><br><span class=\"line\">    predict_data = estimator.predict(x_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测值为: \\n&quot;</span>, predict_data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;比对真实值和预测值;\\n&quot;</span>, predict_data == y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.2  方法2: 直接计算正确率</span></span><br><span class=\"line\">    score = estimator.score(x_test, y_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确率:&quot;</span>, score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6. 直接查看评估结果哦</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;在交叉验证中验证的最好结果：&quot;</span>, estimator.best_score_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;最好的参数模型：&quot;</span>, estimator.best_estimator_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;每次交叉验证后的准确率结果：\\n&quot;</span>, estimator.cv_results_)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    iris_demo()</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出结果-2\"><a class=\"markdownIt-Anchor\" href=\"#输出结果-2\">#</a> 输出结果</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预测值为: </span><br><span class=\"line\"> [0 2 1 2 1 1 1 1 1 0 2 1 2 2 0 2 1 1 1 1 0 2 0 1 2 0 2 2 2 2 0 0 1 1 1 0 0</span><br><span class=\"line\"> 0]</span><br><span class=\"line\">比对真实值和预测值;</span><br><span class=\"line\"> [ True  True  True  True  True  True  True False  True  True  True  True</span><br><span class=\"line\">  True  True  True  True  True  True False  True  True  True  True  True</span><br><span class=\"line\">  True  True  True  True  True  True  True  True  True  True  True  True</span><br><span class=\"line\">  True  True]</span><br><span class=\"line\">正确率: 0.9473684210526315</span><br><span class=\"line\">在交叉验证中验证的最好结果： 0.9732100521574205</span><br><span class=\"line\">最好的参数模型： KNeighborsClassifier()</span><br><span class=\"line\">每次交叉验证后的准确率结果：</span><br><span class=\"line\"> &#123;&#x27;mean_fit_time&#x27;: array([0.0008928 , 0.00045244, 0.00044529]), &#x27;std_fit_time&#x27;: array([5.74547103e-04, 5.05512361e-06, 2.92218150e-06]), &#x27;mean_score_time&#x27;: array([0.00226967, 0.00184425, 0.00182239]), &#x27;std_score_time&#x27;: array([6.28895378e-04, 2.09757168e-05, 1.41269575e-05]), &#x27;param_n_neighbors&#x27;: masked_array(data=[1, 3, 5],</span><br><span class=\"line\">             mask=[False, False, False],</span><br><span class=\"line\">       fill_value=&#x27;?&#x27;,</span><br><span class=\"line\">            dtype=object), &#x27;params&#x27;: [&#123;&#x27;n_neighbors&#x27;: 1&#125;, &#123;&#x27;n_neighbors&#x27;: 3&#125;, &#123;&#x27;n_neighbors&#x27;: 5&#125;], &#x27;split0_test_score&#x27;: array([0.97368421, 0.97368421, 0.97368421]), &#x27;split1_test_score&#x27;: array([0.97297297, 0.97297297, 0.97297297]), &#x27;split2_test_score&#x27;: array([0.94594595, 0.89189189, 0.97297297]), &#x27;mean_test_score&#x27;: array([0.96420104, 0.94618303, 0.97321005]), &#x27;std_test_score&#x27;: array([0.01291157, 0.03839073, 0.00033528]), &#x27;rank_test_score&#x27;: array([2, 3, 1], dtype=int32)&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"预测facebook签到位置\"><a class=\"markdownIt-Anchor\" href=\"#预测facebook签到位置\">#</a> 预测 facebook 签到位置</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GridSearchCV</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">facebook_demo</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">    data = pd.read_csv(<span class=\"string\">&#x27;./train.csv&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data.head())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.数据基本处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## 2.1 处理时间特征</span></span><br><span class=\"line\">    time = pd.to_datetime(data[<span class=\"string\">&#x27;time&#x27;</span>], unit=<span class=\"string\">&#x27;s&#x27;</span>)</span><br><span class=\"line\">    time = pd.DatetimeIndex(time)</span><br><span class=\"line\"></span><br><span class=\"line\">    data[<span class=\"string\">&#x27;hour&#x27;</span>] = time.hour</span><br><span class=\"line\">    data[<span class=\"string\">&#x27;day&#x27;</span>] = time.day</span><br><span class=\"line\">    data[<span class=\"string\">&#x27;weekday&#x27;</span>] = time.weekday</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data.head(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.2.去掉签到少的地方</span></span><br><span class=\"line\">    place_count = data.groupby(<span class=\"string\">&quot;place_id&quot;</span>).count()</span><br><span class=\"line\">    place_count = place_count[place_count[<span class=\"string\">&quot;row_id&quot;</span>] &gt; <span class=\"number\">3</span>]</span><br><span class=\"line\">    data = data[data[<span class=\"string\">&quot;place_id&quot;</span>].isin(place_count.index)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.3 确定特征和目标值</span></span><br><span class=\"line\">    x = data[[<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&quot;accuracy&quot;</span>, <span class=\"string\">&quot;day&quot;</span>, <span class=\"string\">&quot;hour&quot;</span>, <span class=\"string\">&quot;weekday&quot;</span>]]</span><br><span class=\"line\">    y = data[[<span class=\"string\">&#x27;place_id&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.4 拆分数据集</span></span><br><span class=\"line\">    x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3. 特征处理</span></span><br><span class=\"line\">    <span class=\"comment\"># 3.1 标准化处理</span></span><br><span class=\"line\">    transfer = StandardScaler()</span><br><span class=\"line\">    x_train = transfer.fit_transform(x_train)</span><br><span class=\"line\">    x_test = transfer.transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.机器学习</span></span><br><span class=\"line\">    <span class=\"comment\"># 4.1 实例化估计器</span></span><br><span class=\"line\">    estimator = KNeighborsClassifier()</span><br><span class=\"line\">    param_dict = &#123;<span class=\"string\">&#x27;neighbors&#x27;</span>: [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]&#125;</span><br><span class=\"line\">    estimator = GridSearchCV(estimator=estimator, param_grid=param_dict)</span><br><span class=\"line\">    <span class=\"comment\"># 4.2 模型训练</span></span><br><span class=\"line\">    estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 模型评估</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n最后预测的准确率为: &quot;</span>, estimator.score(x_test, y_test))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n在交叉验证中验证的最好结果:\\n&quot;</span>, estimator.best_score_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n最好的参数模型:\\n&quot;</span>, estimator.best_estimator_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n每次交叉验证后的验证集准确率结果和训练集准确率结果:\\n&quot;</span>, estimator.cv_results_)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    facebook_demo()</span><br></pre></td></tr></table></figure>\n<p>本案例来自  <code>Kaggle</code>  的题目，感兴趣的朋友可以登录:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9uYXZvc2h0YS9ncmlkLWtubi9zY3JpcHQ=\">https://www.kaggle.com/navoshta/grid-knn/script</span>  查看</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/ml/qrcode.jpg\" alt=\"qrcode\"></p>\n",
            "tags": [
                "MachineLearn",
                "KNN"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/28/machine-learn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A001-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BA%86%E8%A7%A3/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/28/machine-learn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A001-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BA%86%E8%A7%A3/",
            "title": "机器学习-简介",
            "date_published": "2021-10-28T10:18:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<h3 id=\"什么是机器学习\"><a class=\"markdownIt-Anchor\" href=\"#什么是机器学习\">#</a> 什么是机器学习</h3>\n<p>从历史数据中自动分析获得规律 (模型), 并利用规律对未知数据进行预测。</p>\n<h3 id=\"为什么需要机器学习\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要机器学习\">#</a> 为什么需要机器学习</h3>\n<p>解放生产力：智能客服<br>\n解决专业问题: ET 医疗<br>\n提供社会便利：提供社会便利</p>\n<h3 id=\"机器学习的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#机器学习的应用场景\">#</a> 机器学习的应用场景</h3>\n<p>方方面面</p>\n<h2 id=\"机器学习的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#机器学习的工作流程\">#</a> 机器学习的工作流程</h2>\n<p>获取数据 -&gt; 数据基本处理 -&gt; 特征工程 -&gt; 机器学习 (模型训练) -&gt; 模型评估。</p>\n<p>评估符合要求，则上线服务。如果不符合要求，则重复上述步骤。</p>\n<h2 id=\"数据集的结构\"><a class=\"markdownIt-Anchor\" href=\"#数据集的结构\">#</a> 数据集的结构</h2>\n<p>机器学习的数据大部分数据存储到文件中。数据库中间件 (mysql,nosql) 等性能瓶颈，读取速度，格式不符合机器学习要求的数据格式。<br>\nnumpy 非常快，因为什么？释放了 GIL。</p>\n<p>在数据集中：<br>\n一行数据成为一个样本。<br>\n一列数据称为一个特征。</p>\n<h3 id=\"可用的数据集\"><a class=\"markdownIt-Anchor\" href=\"#可用的数据集\">#</a> 可用的数据集</h3>\n<p>Kaggle: 大数据竞赛平台，80 万科学家，真实数据，数据量巨大 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cw==\">https://www.kaggle.com/datasets</span></p>\n<p>UCI: 收录了 360 个数据集。覆盖科学，生活经济等领域，数据量几十万 <span class=\"exturl\" data-url=\"aHR0cDovL2FyY2hpdmUuaWNzLnVjaS5lZHUvbWwvaW5kZXgucGhw\">http://archive.ics.uci.edu/ml/index.php</span></p>\n<p>scikit-learn: 数据量小，方便学习。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS8saHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS9zdGFibGUvZGF0YXNldHMvaW5kZXguaHRtbA==\">https://scikit-learn.org/stable/,https://scikit-learn.org/stable/stable/datasets/index.html</span></p>\n<h3 id=\"常用数据集数据的结构组成\"><a class=\"markdownIt-Anchor\" href=\"#常用数据集数据的结构组成\">#</a> 常用数据集数据的结构组成</h3>\n<ul>\n<li>特征值 + 目标值 (目标值是练习的和离散的)。特征？比如分辨男女，一个人身高体重皮肤颜色，头发长度。都是特征值。目标值：这个人是男是女，就是目标值。</li>\n<li>只有特征值，没有目标值</li>\n</ul>\n<h3 id=\"数据分割\"><a class=\"markdownIt-Anchor\" href=\"#数据分割\">#</a> 数据分割</h3>\n<p>机器学习一般的数据集会划分为两个部分。</p>\n<ul>\n<li>训练数据：用于训练，构建模型</li>\n<li>测试数据：在数据检验时使用，用于评估模型是否有效、</li>\n</ul>\n<p>划分比例：</p>\n<ul>\n<li>训练集： 79% 80% 75%</li>\n<li>测试集： 30%， 20% 25%</li>\n</ul>\n<h2 id=\"数据的特征工程\"><a class=\"markdownIt-Anchor\" href=\"#数据的特征工程\">#</a> 数据的特征工程</h2>\n<h3 id=\"数据特征是什么\"><a class=\"markdownIt-Anchor\" href=\"#数据特征是什么\">#</a> 数据特征是什么</h3>\n<p>将原始数据转换为更好的代表预测模型的潜在问题的特征的过程，从而提高对未知数据的预测准确性。</p>\n<p>使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发送更好的作用的过程。</p>\n<ul>\n<li>\n<p>特征提取： 将任意数据 (文本或者图像) 转换为可用于机器学习的数字特征。</p>\n</li>\n<li>\n<p>特征预处理：通过转化函数将特征数据转换成更加适合算法模型的特征数据过程。</p>\n<ul>\n<li>归一化：为什么要进行归一化？特征的单位或者大小相差较大，或者某特征的方法相比其他特征要大出几个数量级，容易影响 (支配) 目标结果，使得算法无法学习到其他的特征。\n<ul>\n<li>归一化的定义： 通过对原始数据进行变换，把数据映射到默认 <code>[0,1]</code>  之间。<br>\n计算公式:<br>\n<img data-src=\"./images/%E5%BD%92%E4%B8%80%E5%8C%96%E5%85%AC%E5%BC%8F.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>标准化：通过对原始数据进行把数据变换到均值为 0，标准差为 1 的范围内。<br>\n<img data-src=\"./images/%E6%A0%87%E5%87%86%E5%8C%96%E5%85%AC%E5%BC%8F.png\" alt=\"\"><br>\n对于归一化来说：如果出现异常点，影响了最大值和最小值，那么结果显然会发生改变<br>\n对于标准化来说：如果出现异常点，由于具有一定数据量，少量的异常点对于平均值的影响并不大，从而方差改变较小。</li>\n</ul>\n</li>\n<li>\n<p>特征降维：指在限定条件下，降低随机变量 (特征) 个数，得到一组 &quot;不相关&quot; 主变量的过程。<br>\n减少特征的数量，同时保留原来数据的大部分信息。可以通过 PCA 算法来是实现特征降维。</p>\n</li>\n</ul>\n<p>为什么要降维呢？随着数据维度不断降低，数据存储所需的空间也会随之减少。低维数据有助于减少计算 / 训练用时。一些算法在高维度数据上容易表现不佳，降维可提高算法可用性。降维可以用删除冗余特征解决多重共线性问题。比如我们有两个变量：“一段时间内在跑步机上的耗时” 和 “卡路里消耗量”。这两个变量高度相关，在跑步机上花的时间越长，燃烧的卡路里自然就越多。因此，同时存储这两个数据意义不大，只需一个就够了。降维有助于数据可视化。如前所述，如果数据维度很高，可视化会变得相当困难，而绘制二维三维数据的图表非常简单。</p>\n<h3 id=\"特征工程的意义\"><a class=\"markdownIt-Anchor\" href=\"#特征工程的意义\">#</a> 特征工程的意义</h3>\n<p>直接影响预测结果。</p>\n<h4 id=\"特征抽取实例演示\"><a class=\"markdownIt-Anchor\" href=\"#特征抽取实例演示\">#</a> 特征抽取实例演示</h4>\n<h4 id=\"特征抽取api\"><a class=\"markdownIt-Anchor\" href=\"#特征抽取api\">#</a> 特征抽取 API</h4>\n<p>字典特征抽取类:   <code>sklearn.feature_extraction.DictVectorizer</code> <br>\n 作用：对字典进行特征值化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DictVectorizer(sparse=<span class=\"literal\">True</span>,....)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># X: 字典或者包含字典的迭代器</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值: 返回sparse矩阵</span></span><br><span class=\"line\">DictVectorizer.fit_transform(X):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># X: array数组或者sparse矩阵</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值: 转换之前的数据格式</span></span><br><span class=\"line\">DictVectorizer.invers_transform(X)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回类别名称</span></span><br><span class=\"line\">DictVectorizer.get_feature_names()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照原先的标准转换</span></span><br><span class=\"line\">DictVectorizerr.transform(X)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"使用流程\"><a class=\"markdownIt-Anchor\" href=\"#使用流程\">#</a> 使用流程</h5>\n<p>1. 实例化类 DictVectorizer<br>\n2. 调用 fit_transform 方法进行特征抽取</p>\n<h4 id=\"字典数据提取的现象\"><a class=\"markdownIt-Anchor\" href=\"#字典数据提取的现象\">#</a> 字典数据提取的现象:</h4>\n<p>把字典中国的一些类别数据，分别进行转换特征数据。</p>\n<blockquote>\n<p>文本特征抽取 Count</p>\n</blockquote>\n<h4 id=\"作用-对文本数据进行特征值化\"><a class=\"markdownIt-Anchor\" href=\"#作用-对文本数据进行特征值化\">#</a> 作用：对文本数据进行特征值化</h4>\n<h4 id=\"类-sklearnfeature_extractiontextcountvectorizer\"><a class=\"markdownIt-Anchor\" href=\"#类-sklearnfeature_extractiontextcountvectorizer\">#</a> 类: sklearn.feature_extraction.text.CountVectorizer</h4>\n<h4 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\">#</a> API</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回的是词频矩阵</span></span><br><span class=\"line\">CountVectorizer()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 统计所有文章中出现的词的位置标识，对应着列表中的单词(单个字母不统计,不支持中文,需要使用jieba分词)，</span></span><br><span class=\"line\">    <span class=\"comment\"># X 文本或者包含文本字符串的可迭代对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 返回sparse矩阵</span></span><br><span class=\"line\">    CountVectorizer.fit_transform(X)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># X： array数据或者sparse矩阵</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值：转换之前的数据格式</span></span><br><span class=\"line\">    CountVetorizer.inverse_transform(X)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 单词列表</span></span><br><span class=\"line\">    CountVetorizer.get_feature_names()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>文本特征抽取 tfidf</p>\n</blockquote>\n<p>主要思想是： 如果某个词或短语在一篇文章中出现的概率高，b 并且在其他文章中很少出现，则认为该词或者短语具有很好的类别区分能力，适合用来分类。</p>\n<p>TF-IDF 的作用：  用以评估一字词对于一个文件集成一个语料库中的其中一份文件的重要程度。</p>\n<p>tf (term frequency 词的频率)<br>\n idf (inverse document frequency 逆文档频率) log (总文档数据 / 该词出现的文档数量)</p>\n<p>tf * idf 这个值称为重要性。</p>\n<h4 id=\"类-sklearnfeature_extractiontexttfidfvectorizer\"><a class=\"markdownIt-Anchor\" href=\"#类-sklearnfeature_extractiontexttfidfvectorizer\">#</a> 类  <code>sklearn.feature_extraction.text.TfidfVectorizer </code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回的是词频矩阵</span></span><br><span class=\"line\">CountVectorizer(stop_worlds=N)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 统计所有文章中出现的词的位置标识，对应着列表中的单词(单个字母不统计,不支持中文,需要使用jieba分词)，</span></span><br><span class=\"line\">    <span class=\"comment\"># X 文本或者包含文本字符串的可迭代对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 返回sparse矩阵</span></span><br><span class=\"line\">    CountVectorizer.fit_transform(X)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># X： array数据或者sparse矩阵</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值：转换之前的数据格式</span></span><br><span class=\"line\">    CountVetorizer.inverse_transform(X)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 单词列表</span></span><br><span class=\"line\">    CountVetorizer.get_feature_names()</span><br></pre></td></tr></table></figure>\n<h4 id=\"为什么需要这\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要这\">#</a> 为什么需要这</h4>\n<p>分类机器学习算法的应用基础。</p>\n<h4 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h4>\n<ul>\n<li>文本分类</li>\n<li>情感分析</li>\n</ul>\n<h4 id=\"数据的预处理\"><a class=\"markdownIt-Anchor\" href=\"#数据的预处理\">#</a> 数据的预处理</h4>\n<p>通过特定的统计方法 (数学方法), 将数据转换成算法要求的数据。</p>\n<h5 id=\"数据处理的方法\"><a class=\"markdownIt-Anchor\" href=\"#数据处理的方法\">#</a> 数据处理的方法</h5>\n<p>API:<br>\n 在 sklearn.preprocessing 中。</p>\n<ul>\n<li>\n<p>数值型数据:</p>\n<ul>\n<li>\n<p>标准缩放</p>\n<ul>\n<li>\n<p>归一化:<br>\n 通过对原始数据机型交换把数据映射到 (默认 [0,1]) 之间<br>\n<img data-src=\"./images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%E5%BD%92%E4%B8%80%E5%BD%92%E4%B8%80%E5%8C%96%E5%85%AC%E5%BC%8F.png\" alt=\"机器学习_归一归一化公式.png\"><br>\n <code> API: MinMaxScalar</code> <br>\n 实现归一化的步骤：</p>\n<ul>\n<li>实例化 <code>MinMaxScalar</code></li>\n<li>调用  <code>fit_transform</code>  进行转换</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mm = MinMaxScalar(feature_range=(<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">data = mm.fit_transform([[],[],[]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>标准化<br>\n通过对原始数据进行变换把数据变换到均值为 0，标准差为 1 的范围内。<br>\n<img data-src=\"./images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%E6%A0%87%E5%87%86%E5%8C%96%E5%85%AC%E5%BC%8F.png\" alt=\"机器学习_标准化公式\"><br>\n对于归一化来讲，如果出现了异常点，影响了最大值和最小值，那么结果显然会发生改变.<br>\n 对标准化来讲，如果出现异常点，由于具有一定数据量，少量的异常点对平均值的影响并不大，从而方差改变较小。</p>\n<p><code>API: StandardScalar(....) </code> <br>\n标准化的步骤：</p>\n<ul>\n<li>实例化 StandardScalar</li>\n<li>调用 fit_transfrom</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#处理之后每列来说所有数据都聚集在均值0附近标准差差为1</span></span><br><span class=\"line\">StandardScalar(...)</span><br><span class=\"line\">    <span class=\"comment\"># X:numpy array格式的数据[n_samples,n_features]</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 转换后的形状相同的array</span></span><br><span class=\"line\">    StandardScalar.fit_transfrom(X)</span><br><span class=\"line\">    <span class=\"comment\"># 原始数据中每列特征的平均值</span></span><br><span class=\"line\">    StandardScalar.mean_</span><br><span class=\"line\">    <span class=\"comment\"># 原始数据每列特征的方差</span></span><br><span class=\"line\">    StandardScalar.std_</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>缺失值<br>\n处理缺失值的方法:</p>\n<ul>\n<li>删除</li>\n<li>插补</li>\n</ul>\n</li>\n</ul>\n<p>插补使用的是:  <code>Imputer</code>  方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 完成缺失值插补</span></span><br><span class=\"line\">Imputer(miss_values=<span class=\"string\">&#x27;NaN&#x27;</span>,strategy=<span class=\"string\">&#x27;mean&#x27;</span>,axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># X: numpy array格式的数据[n_samples,n_features]</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 转换后的形状相同的array</span></span><br><span class=\"line\">    Imputer.fit_transform(X)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>类别型数据</p>\n<ul>\n<li>one-hot 编码</li>\n</ul>\n</li>\n<li>\n<p>时间类型</p>\n<ul>\n<li>时间的拆分</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据的降维\"><a class=\"markdownIt-Anchor\" href=\"#数据的降维\">#</a> 数据的降维</h3>\n<p>降维指的是降的是特征的维度 (特征的数量)。<br>\n两种方式：特征选择 和 主成分分析</p>\n<h4 id=\"特征选择的原因\"><a class=\"markdownIt-Anchor\" href=\"#特征选择的原因\">#</a> 特征选择的原因</h4>\n<ul>\n<li>冗余：部分特征的相关度高，容易消耗计算机性能</li>\n<li>噪声：部分特征会对结果产生影响</li>\n</ul>\n<h4 id=\"特征选择是什么\"><a class=\"markdownIt-Anchor\" href=\"#特征选择是什么\">#</a> 特征选择是什么？</h4>\n<p>就是单纯的从提取到的所有特征中选择部分特征作为训练集特征，特征在选择前后可以改变值，也可以不改变值。但是选择后的特征维数肯定比选择前小，毕竟我们只选择了其中一部分特征。<br>\n主要方法有:</p>\n<ul>\n<li>filter (过滤式): varianceThreshold</li>\n<li>Embedde (嵌入式): 正则化，决策树</li>\n<li>Wrapper (包裹式)</li>\n<li>神经网络</li>\n</ul>\n<p>API:  <code> sklearn.feature_selection.VarianceThreshold</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除所有低方差特征</span></span><br><span class=\"line\">VarianceThreshold(threhold=<span class=\"number\">0.0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># X: numpy array格式的数据[n_samples,n_features]</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 训练集差异地域threshold的特征将被删除</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认值是保留所有非零方差特征,即删除所有样本中具有相同值的特征</span></span><br><span class=\"line\">    Variance.fit_transform(X)</span><br></pre></td></tr></table></figure>\n<h3 id=\"pca-分析简化数据集的技术\"><a class=\"markdownIt-Anchor\" href=\"#pca-分析简化数据集的技术\">#</a> PCA 分析简化数据集的技术</h3>\n<p>目的是： 数据维度压缩，尽可能降低原数据的维度 (复杂度), 损失少量信息<br>\n作用：可以削减回归分析或者聚类分析中特征的数量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将数据分解为较低维数的空间</span></span><br><span class=\"line\">PCA(n_components=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"comment\"># X: numpy array格式的数据[n_samples,n_features]</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回值: 转化后制定维度的array</span></span><br><span class=\"line\">    PCA.fit_transform(X)</span><br></pre></td></tr></table></figure>\n<h2 id=\"机器学习算法基础\"><a class=\"markdownIt-Anchor\" href=\"#机器学习算法基础\">#</a> 机器学习算法基础</h2>\n<h3 id=\"监督学习supervised-learnning\"><a class=\"markdownIt-Anchor\" href=\"#监督学习supervised-learnning\">#</a> 监督学习：supervised learnning</h3>\n<p>输入数据由输入特征值 和 目标值组成。</p>\n<p>目标值连续则是回归问题， 目标值离散则是分类问题。</p>\n<h3 id=\"无监督学习-unsupervised-learning\"><a class=\"markdownIt-Anchor\" href=\"#无监督学习-unsupervised-learning\">#</a> 无监督学习. unsupervised learning</h3>\n<p>输入数据并未进行标记，没有目标值。 =&gt; 聚类 (kmeans)</p>\n<h3 id=\"半监督学习-semi-supervised-learning\"><a class=\"markdownIt-Anchor\" href=\"#半监督学习-semi-supervised-learning\">#</a> 半监督学习： semi-supervised learning</h3>\n<p>训练集同时包含有标记样本数据 和 未标记样本数据</p>\n<h3 id=\"强化学习-reinforcement-learning\"><a class=\"markdownIt-Anchor\" href=\"#强化学习-reinforcement-learning\">#</a> 强化学习: reinforcement learning</h3>\n<p>本质是 make decisions 问题，即自动决策问题，并且可以做连续决策。</p>\n<p>没有训练数据，建立模型的时候人为设定好可以操作的规则，不断自我尝试，自己去探索。</p>\n<p>强化学习的目标就是获取更多的累计奖励。</p>\n<p>举个例子:</p>\n<p>小孩子想要走路，但是在这之前，他需要先站起来，站起来之后还要保持平衡，接下来就要先迈出一条腿，是左腿还是右腿，迈出一步还要迈出下一步。</p>\n<p>小孩子就是 agent，他试图通过 行动 (即行走) 来模型环境 (行走的表面) 并且从一个状态转变到另一个状态 (即他走的每一步)，当他完成了任务的子任务（即走了几步) 时，孩子收到奖励，并且当他不能走路时，就不会给奖励。</p>\n<p>主要包含四个元素: agent  行动 环境  奖励</p>\n<p><img data-src=\"./images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB.png\" alt=\"\"></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "MachineLearn"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/18/BQ/hdoj/HD-1005/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/18/BQ/hdoj/HD-1005/",
            "title": "1005 Number Sequence",
            "date_published": "2021-10-18T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 257509    Accepted Submission(s): 65939</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>A number sequence is defined as follows:</p>\n<p>f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.</p>\n<p>Given A, B, and n, you are to calculate the value of f(n).</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>The input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 &lt;= A, B &lt;= 1000, 1 &lt;= n &lt;= 100,000,000). Three zeros signal the end of input and this test case is not to be processed.</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each test case, print the value of f(n) on a single line.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 3</span><br><span class=\"line\">1 2 10</span><br><span class=\"line\">0 0 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A, B, i;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;A, &amp;B, &amp;n) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a[<span class=\"number\">50</span>];</span><br><span class=\"line\">        a[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        a[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((A + B + n) == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i &lt;= <span class=\"number\">48</span>; i++) &#123;</span><br><span class=\"line\">            a[i] = (A * a[i - <span class=\"number\">1</span>] + B * a[i - <span class=\"number\">2</span>]) % <span class=\"number\">7</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = n % <span class=\"number\">48</span>;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[<span class=\"number\">48</span>];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a[n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<p>这道题，难道找规律。规律怎么找出来的，是困难的。</p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1005\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\">杭电Oj - 1005</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1005题解\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDA1LTIuamF2YQ==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDA1LTIuamF2YQ==\">【C】杭电Oj-1005题解</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/17/BQ/hdoj/HD-1004/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/17/BQ/hdoj/HD-1004/",
            "title": "1004 Let the Balloon Rise",
            "date_published": "2021-10-17T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 194179    Accepted Submission(s): 78028</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges’ favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.</p>\n<p>This year, they decide to leave this lovely job to you.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>Input contains multiple test cases. Each test case starts with a number N (0 &lt; N &lt;= 1000) – the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.</p>\n<p>A test case with N = 0 terminates the input and this test case is not to be processed.</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each case, print the color of balloon for the most popular problem on a single line. It is guaranteed that there is a unique solution for each test case.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">green</span><br><span class=\"line\">red</span><br><span class=\"line\">blue</span><br><span class=\"line\">red</span><br><span class=\"line\">red</span><br><span class=\"line\">3</span><br><span class=\"line\">pink</span><br><span class=\"line\">orange</span><br><span class=\"line\">pink</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">red</span><br><span class=\"line\">pink</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"java语言解法\"><a class=\"markdownIt-Anchor\" href=\"#java语言解法\">#</a> Java 语言解法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sc.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = sc.nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            HashMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            String key = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                String s = sc.nextLine();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> value = map.getOrDefault(s, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxCount &lt; value) &#123;</span><br><span class=\"line\">                    maxCount = value;</span><br><span class=\"line\">                    key = s;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                map.put(s, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<p>to easy. nothing…   but High-level language YYDS.</p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1004\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\">杭电Oj - 1004</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1004题解\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDA0LTIuamF2YQ==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDA0LTIuamF2YQ==\">【C】杭电Oj-1004题解</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/16/BQ/hdoj/HD-1003/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/16/BQ/hdoj/HD-1003/",
            "title": "1003 Max Sum",
            "date_published": "2021-10-16T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 377960    Accepted Submission(s): 90742</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>Given a sequence a[1],a[2],a[3]…a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5 6 -1 5 4 -7</span><br><span class=\"line\">7 0 6 -1 1 -6 7 -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1:</span><br><span class=\"line\">14 1 4</span><br><span class=\"line\"></span><br><span class=\"line\">Case 2:</span><br><span class=\"line\">7 1 6</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<h4 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\">#</a> 动态规划</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num[<span class=\"number\">100001</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum[<span class=\"number\">100001</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = sum[<span class=\"number\">0</span>] = num[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> endIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum[i - <span class=\"number\">1</span>] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum[i] = num[i];</span><br><span class=\"line\">                temp = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sum[i] = num[i] + sum[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxSum &lt; sum[i]) &#123;</span><br><span class=\"line\">                maxSum = sum[i];</span><br><span class=\"line\">                endIndex = i;</span><br><span class=\"line\">                startIndex = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, maxSum, startIndex + <span class=\"number\">1</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反过头来，继续看这段代码的话，我们可以发现，其实我们只用了 <code>sum[i-1]</code>  这一个值， <code>sum[i-2]....sum[0]</code>  我们是没有什么用的。所以我们可以使用一个变量才替换 <code>sum</code>  数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex, endIndex;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = startIndex = endIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;previous);</span><br><span class=\"line\">        max = previous;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previous &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                previous = a;</span><br><span class=\"line\">                temp = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                previous += a;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previous &gt; max) &#123;</span><br><span class=\"line\">                max = previous;</span><br><span class=\"line\">                endIndex = i;</span><br><span class=\"line\">                startIndex = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, max, startIndex , endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"滑动窗口法\"><a class=\"markdownIt-Anchor\" href=\"#滑动窗口法\">#</a> 滑动窗口法</h4>\n<p>注意： 这种解法是会  <code>Time Limit Exceeded</code>  的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口法。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num[<span class=\"number\">100000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxStartIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">-10000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (width &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - width; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                    sum += num[i + j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxSum &lt; sum) &#123;</span><br><span class=\"line\">                    maxSum = sum;</span><br><span class=\"line\">                    maxStartIndex = i;</span><br><span class=\"line\">                    maxWidth = width;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            width--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, maxSum, maxStartIndex + <span class=\"number\">1</span>, maxStartIndex + maxWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<p>nothing…</p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1003\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\">杭电Oj - 1003</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-滑动窗口(C语言版)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLmNwcA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLmNwcA==\">【C】杭电Oj-1003题解-滑动窗口(C语言版)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-动态规划(C语言版)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTIuY3Bw\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTIuY3Bw\">【C】杭电Oj-1003题解-动态规划(C语言版)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-动态规划(优化版本)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTMuY3Bw\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTMuY3Bw\">【C】杭电Oj-1003题解-动态规划(优化版本)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "动态规划",
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/15/BQ/hdoj/HD-1002/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/15/BQ/hdoj/HD-1002/",
            "title": "1002 A + B Problem II",
            "date_published": "2021-10-15T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 565951    Accepted Submission(s): 107979</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line is the an equation “A + B = Sum”, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">112233445566778899 998877665544332211</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1:</span><br><span class=\"line\">1 + 2 = 3</span><br><span class=\"line\"></span><br><span class=\"line\">Case 2:</span><br><span class=\"line\">112233445566778899 + 998877665544332211 = 1111111111111111110</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> num1[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> num2[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> res[<span class=\"number\">1001</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res_end_pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num1_end_pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num2_end_pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %s&quot;</span>, num1, num2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将下标计算到数值的个位。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"string\">&#x27;\\0&#x27;</span> != num1[num1_end_pos]) &#123;</span><br><span class=\"line\">            num1_end_pos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"string\">&#x27;\\0&#x27;</span> != num2[num2_end_pos]) &#123;</span><br><span class=\"line\">            num2_end_pos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 按照下标从大到小的顺序，累加，并计算是否需要进位。</span></span><br><span class=\"line\">        res_end_pos = (num1_end_pos &gt; num2_end_pos ? num1_end_pos : num2_end_pos) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        res[res_end_pos] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num1_end_pos &gt; <span class=\"number\">0</span> &amp;&amp; num2_end_pos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            num2_end_pos--;</span><br><span class=\"line\">            num1_end_pos--;</span><br><span class=\"line\">            res_end_pos--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> number1 = num1[num1_end_pos] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> number2 = num2[num2_end_pos] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            temp = number1 + number2 + (temp / <span class=\"number\">10</span>);</span><br><span class=\"line\">            res[res_end_pos] = (temp % <span class=\"number\">10</span>) + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算进位以及某个数值位数不一致的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (res_end_pos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res_end_pos--;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp_res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num1_end_pos == <span class=\"number\">0</span> &amp;&amp; num2_end_pos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                num2_end_pos--;</span><br><span class=\"line\">                temp_res = (num2[num2_end_pos] - <span class=\"string\">&#x27;0&#x27;</span>) + temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num1_end_pos &gt; <span class=\"number\">0</span> &amp;&amp; num2_end_pos == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                num1_end_pos--;</span><br><span class=\"line\">                temp_res = (num1[num1_end_pos] - <span class=\"string\">&#x27;0&#x27;</span>) + temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp_res = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp_res;</span><br><span class=\"line\">            res[res_end_pos] = temp_res % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理没有进位导致的输出问题(多输出一个0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(res[j]!=<span class=\"string\">&#x27;\\0&#x27;</span>)&#123;</span><br><span class=\"line\">                res[j] = res[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s + %s = %s\\n&quot;</span>, num1, num2, res);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; n)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<ul>\n<li>注意输出结果： 每个 case 之前会隔一个空行。最后一个 case 后面没有空行。注意读题。</li>\n</ul>\n<h3 id=\"长点心吧\"><a class=\"markdownIt-Anchor\" href=\"#长点心吧\">#</a> 长点心吧</h3>\n<p><span class=\"label warning\">理清需求啊</span></p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1002\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\">杭电Oj - 1002</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1002题解\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAyLmNwcA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAyLmNwcA==\">【C】杭电Oj-1002题解</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-Dubbo%20with%20Springboot/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-Dubbo%20with%20Springboot/",
            "title": "Dubbo 与 Springboot 集成",
            "date_published": "2021-10-14T14:58:55.000Z",
            "content_html": "<blockquote>\n<p>本文使用技术介绍<br>\n Dubbo 3.0.3<br>\nSpringboot 2.5.5<br>\n 文中代码已删减，具体代码位置见文末。</p>\n</blockquote>\n<h2 id=\"本文目标\"><a class=\"markdownIt-Anchor\" href=\"#本文目标\">#</a> 本文目标</h2>\n<p>快速构建  <code>Springboot</code>  应用，并继承 <code>Dubbo</code> 。</p>\n<p>提供一个服务者，一个消费者。 在浏览器中请求消费者服务， 消费者服务调用 服务提供者，返回 响应。</p>\n<h2 id=\"创建项目\"><a class=\"markdownIt-Anchor\" href=\"#创建项目\">#</a> 创建项目</h2>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE1.png\" alt=\"\"></p>\n<h3 id=\"创建服务提供者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务提供者\">#</a> 创建服务提供者</h3>\n<p>在 <code>chapter02-provider</code>  这个  <code>module</code>  下，编写了两个  <code>sub module</code> .  <code>chapter02-provider-api</code>  表示对外提供的 <code>RPC</code>  接口。  <code>chapter02-provider-impl</code>  表示 RPC 接口的实现。</p>\n<p>目录结构如下：</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE3.png\" alt=\"\"></p>\n<h4 id=\"chapter02-provider-api\"><a class=\"markdownIt-Anchor\" href=\"#chapter02-provider-api\">#</a> chapter02-provider-api</h4>\n<h5 id=\"引入pom文件\"><a class=\"markdownIt-Anchor\" href=\"#引入pom文件\">#</a> 引入 pom 文件</h5>\n<p>本模块下无需改动，使用 <code>IDEA</code>  生成的即可。具体代码见文末</p>\n<h5 id=\"定义rpc接口\"><a class=\"markdownIt-Anchor\" href=\"#定义rpc接口\">#</a> 定义 RPC 接口</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务者提供的接口规范</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 20:44</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 演示调用demo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 入参，随即返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &quot;hello, &#123;name&#125; . I am dubbo.&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样  <code>provider-api</code>  服务就配置完成了。</p>\n<h4 id=\"chapter02-provider-impl\"><a class=\"markdownIt-Anchor\" href=\"#chapter02-provider-impl\">#</a> chapter02-provider-impl</h4>\n<h5 id=\"引入-pom文件\"><a class=\"markdownIt-Anchor\" href=\"#引入-pom文件\">#</a> 引入 pom 文件</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 服务提供者的RPC接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>chapter02-provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入Dubbo --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置applicationyml\"><a class=\"markdownIt-Anchor\" href=\"#配置applicationyml\">#</a> 配置 application.yml</h4>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\">#application-name</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springboot-multicast-provider</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">springboot-multicast-provider</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># 以广播的协议进行发布.</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">multicast://224.5.6.7:1234</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">registry</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">20880</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实现服务提供者的业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#实现服务提供者的业务逻辑\">#</a> 实现服务提供者的业务逻辑</h4>\n<p>即 实现 <code>RPC</code>  接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * sayHello 的具体实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 20:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DubboService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;hello, %s.  I am dubbo.&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加dubbo注解\"><a class=\"markdownIt-Anchor\" href=\"#添加dubbo注解\">#</a> 添加 Dubbo 注解</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">// 集成Dubbo</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter02ProviderImplApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Chapter02ProviderImplApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们启动服务。可以看到:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE2.png\" alt=\"\"></p>\n<p>这样服务提供者就启动成功了。</p>\n<h3 id=\"创建服务消费者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务消费者\">#</a> 创建服务消费者</h3>\n<p>消费者的目录结构如下:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE4.png\" alt=\"\"></p>\n<h4 id=\"引入maven依赖\"><a class=\"markdownIt-Anchor\" href=\"#引入maven依赖\">#</a> 引入 maven 依赖</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 支持dubbo --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 服务提供者的RPC接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>chapter02-provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置applicationyml-2\"><a class=\"markdownIt-Anchor\" href=\"#配置applicationyml-2\">#</a> 配置 application.yml</h4>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\">#application-name</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">chapter02-with-springboot-consumer</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">chapter02-with-springboot-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">multicast://224.5.6.7:1234</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">registry</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">20880</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"编写controller\"><a class=\"markdownIt-Anchor\" href=\"#编写controller\">#</a> 编写 Controller</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费者demo，</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 21:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConsumerService consumerService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;chapter02/sayHello/&#123;name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consumerService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写service层调用提供提供者\"><a class=\"markdownIt-Anchor\" href=\"#编写service层调用提供提供者\">#</a> 编写 Service 层，调用提供提供者</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费业务逻辑实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 21:02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引用Dubbo服务。使用@DubboReference注解</span></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IProviderService providerService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> providerService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写启动类\"><a class=\"markdownIt-Anchor\" href=\"#编写启动类\">#</a> 编写启动类</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter02ConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Chapter02ConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到控制台:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE5.png\" alt=\"\"></p>\n<p>表示启动成功</p>\n<h4 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h4>\n<p>我们可以在浏览器中调用消费者的 sayHello 接口  <code>http://localhost:8081/chapter02/sayHello/fangjiaxiaobai</code>  就会看到  <code>hello, fangjiaxiaobai. I am dubbo.</code></p>\n<p>这样一个最最精简的 <code>Dubbo</code>  集成 <code>Springboot</code>  的服务就部署完成了。</p>\n<h3 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h3>\n<div class=\"links\"><div class=\"item\" title=\"Dubbo与Springboot集成\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==\">Dubbo与Springboot集成</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/learn_java.git</p>\n          </div></div></div>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/dubbo/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "Java",
                "dubbo"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-dubbo-with-springboot/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-dubbo-with-springboot/",
            "title": "最简版 springboot 集成 dubbo",
            "date_published": "2021-10-14T14:58:55.000Z",
            "content_html": "<blockquote>\n<p>本文使用技术介绍<br>\n <code>Dubbo 3.0.3</code> <br>\n <code>Springboot 2.5.5</code> <br>\n 文中代码已删减，具体代码位置见文末。</p>\n</blockquote>\n<h2 id=\"本文目标\"><a class=\"markdownIt-Anchor\" href=\"#本文目标\">#</a> 本文目标</h2>\n<p>快速构建  <code>Springboot</code>  应用，并集成 <code>Dubbo</code> 。</p>\n<p>提供一个服务者，一个消费者。 在浏览器中请求消费者服务， 消费者服务调用 服务提供者，返回 响应。</p>\n<h2 id=\"创建项目\"><a class=\"markdownIt-Anchor\" href=\"#创建项目\">#</a> 创建项目</h2>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE1.png\" alt=\"\"></p>\n<h3 id=\"创建服务提供者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务提供者\">#</a> 创建服务提供者</h3>\n<p>在 <code>chapter02-provider</code>  这个  <code>module</code>  下，编写了两个  <code>sub module</code> .  <code>chapter02-provider-api</code>  表示对外提供的 <code>RPC</code>  接口。  <code>chapter02-provider-impl</code>  表示  <code>RPC</code>  接口的实现。</p>\n<p>目录结构如下：</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE3.png\" alt=\"\"></p>\n<h4 id=\"chapter02-provider-api\"><a class=\"markdownIt-Anchor\" href=\"#chapter02-provider-api\">#</a>  <code>chapter02-provider-api</code></h4>\n<h5 id=\"引入pom文件\"><a class=\"markdownIt-Anchor\" href=\"#引入pom文件\">#</a> 引入 <code>pom</code>  文件</h5>\n<p>本模块下无需改动，使用 <code>IDEA</code>  生成的即可。具体代码见文末</p>\n<h5 id=\"定义rpc接口\"><a class=\"markdownIt-Anchor\" href=\"#定义rpc接口\">#</a> 定义 <code>RPC</code>  接口</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务者提供的接口规范</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 20:44</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 演示调用demo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 入参，随即返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &quot;hello, &#123;name&#125; . I am dubbo.&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样  <code>provider-api</code>  服务就配置完成了。</p>\n<h4 id=\"chapter02-provider-impl\"><a class=\"markdownIt-Anchor\" href=\"#chapter02-provider-impl\">#</a>  <code>chapter02-provider-impl</code></h4>\n<h5 id=\"引入pom文件-2\"><a class=\"markdownIt-Anchor\" href=\"#引入pom文件-2\">#</a> 引入 <code>pom</code>  文件</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 服务提供者的RPC接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>chapter02-provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入Dubbo --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置applicationyml\"><a class=\"markdownIt-Anchor\" href=\"#配置applicationyml\">#</a> 配置 <code>application.yml</code></h4>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\">#application-name</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springboot-multicast-provider</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">springboot-multicast-provider</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># 以广播的协议进行发布.</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">multicast://224.5.6.7:1234</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">registry</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">20880</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实现服务提供者的业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#实现服务提供者的业务逻辑\">#</a> 实现服务提供者的业务逻辑</h4>\n<p>即 实现 <code>RPC</code>  接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * sayHello 的具体实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 20:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DubboService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;hello, %s.  I am dubbo.&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加dubbo注解\"><a class=\"markdownIt-Anchor\" href=\"#添加dubbo注解\">#</a> 添加 <code>Dubbo</code>  注解</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">// 集成Dubbo</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter02ProviderImplApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Chapter02ProviderImplApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们启动服务。可以看到:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE2.png\" alt=\"\"></p>\n<p>这样服务提供者就启动成功了。</p>\n<h3 id=\"创建服务消费者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务消费者\">#</a> 创建服务消费者</h3>\n<p>消费者的目录结构如下:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE4.png\" alt=\"\"></p>\n<h4 id=\"引入maven依赖\"><a class=\"markdownIt-Anchor\" href=\"#引入maven依赖\">#</a> 引入 maven 依赖</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 支持dubbo --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 服务提供者的RPC接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>chapter02-provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置applicationyml-2\"><a class=\"markdownIt-Anchor\" href=\"#配置applicationyml-2\">#</a> 配置 application.yml</h4>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\">#application-name</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">chapter02-with-springboot-consumer</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">chapter02-with-springboot-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">multicast://224.5.6.7:1234</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">registry</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">20880</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"编写controller\"><a class=\"markdownIt-Anchor\" href=\"#编写controller\">#</a> 编写 Controller</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费者demo，</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 21:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConsumerService consumerService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;chapter02/sayHello/&#123;name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consumerService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写service层调用提供提供者\"><a class=\"markdownIt-Anchor\" href=\"#编写service层调用提供提供者\">#</a> 编写 <code>Service</code>  层，调用提供提供者</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费业务逻辑实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 21:02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引用Dubbo服务。使用@DubboReference注解</span></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IProviderService providerService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> providerService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写启动类\"><a class=\"markdownIt-Anchor\" href=\"#编写启动类\">#</a> 编写启动类</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter02ConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Chapter02ConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到控制台:</p>\n<p><img data-src=\"/images/dubbo/chapter002-%E5%9B%BE5.png\" alt=\"\"></p>\n<p>表示启动成功</p>\n<h4 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h4>\n<p>我们可以在浏览器中调用消费者的 sayHello 接口  <code>http://localhost:8081/chapter02/sayHello/fangjiaxiaobai</code>  就会看到  <code>hello, fangjiaxiaobai. I am dubbo.</code></p>\n<p>这样一个最最精简的 <code>Dubbo</code>  集成 <code>Springboot</code>  的服务就部署完成了。</p>\n<h2 id=\"文末代码\"><a class=\"markdownIt-Anchor\" href=\"#文末代码\">#</a> 文末代码</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==\">代码地址 -&gt;github</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/dubbo/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "Java",
                "dubbo"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/14/BQ/hdoj/HD-1001/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/14/BQ/hdoj/HD-1001/",
            "title": "1001 Sum Problem",
            "date_published": "2021-10-14T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 1000/500 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 745568    Accepted Submission(s): 188863</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>Hey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).</p>\n<p>In this problem, your task is to calculate SUM(n) = 1 + 2 + 3 + … + n.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>The input will consist of a series of integers n, one integer per line.</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each case, output SUM(n) in one line, followed by a blank line. You may assume the result will be in the range of 32-bit signed integer.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">5050</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (EOF != <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// it not work</span></span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;%d\\n\\n&quot;, m*(m+1)/2);</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            s += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n\\n&quot;</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<ul>\n<li>输出结果后要两个换行.</li>\n<li>这道题一定不要使用等差数列求和。因为 <code>n*(n+1)</code>  会超时  <code>int</code>  类型数值范围。</li>\n</ul>\n<h3 id=\"长点心吧\"><a class=\"markdownIt-Anchor\" href=\"#长点心吧\">#</a> 长点心吧</h3>\n<p><span class=\"label warning\">面前有两条路，中规中矩 and 捷径，是鼓励走捷径的。但是一定要确定捷径的结果是和另一条路是一模一样的。否则还是选择中规中矩的路吧。否则是会付出代价的。你怎么知道捷径是不是一条不归路呢？</span></p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1001\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMQ==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMQ==\">杭电Oj - 1001</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1001题解\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAxLmNwcA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAxLmNwcA==\">【C】杭电Oj-1001题解</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/13/java%E7%B3%BB%E5%88%97/dubbo/01-%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BA%AFdubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/13/java%E7%B3%BB%E5%88%97/dubbo/01-%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BA%AFdubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/",
            "title": "搭建第一个纯dubbo微服务应用",
            "date_published": "2021-10-13T14:58:55.000Z",
            "content_html": "<p>本文旨在快速搭建一个 <b>纯 dubbo 微服务</b> 应用。</p>\n<h2 id=\"创建一个项目\"><a class=\"markdownIt-Anchor\" href=\"#创建一个项目\">#</a> 创建一个项目</h2>\n<p><img data-src=\"/images/dubbo/chapter01-%E5%9B%BE1.png\" alt=\"\"></p>\n<ul>\n<li><code>consumer</code>  表示一个消费者。</li>\n<li><code>provider</code>  标识一个服务提供者。</li>\n<li><code>provider-api</code>  表示对外提供服务的 api.</li>\n</ul>\n<p>我们现实的开发中，往往是一个服务既充当服务提供者角色，又充当服务消费者的角色。所以，每个服务都会有一个两个模块， <code>1.provider</code> ，服务的实现逻辑模块，  <code>2.provider-api</code> : 服务对外暴露的 api 模块。</p>\n<h2 id=\"引入依赖\"><a class=\"markdownIt-Anchor\" href=\"#引入依赖\">#</a> 引入依赖</h2>\n<p>在 父级 <code>pom</code>  中加入如下依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo.version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">dubbo.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，我们使用的 <code>dubbo3.x</code>  版本。在这个版本中，开发者将 <code>dubbo</code>  的依赖进行拆分，所以，我们引入了  <code>dubbo</code>  和  <code>dubbo-dependencies-zookper</code>  这两个依赖。</p>\n<h2 id=\"创建服务提供者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务提供者\">#</a> 创建服务提供者</h2>\n<p><img data-src=\"/images/dubbo/chapter01-%E5%9B%BE2.png\" alt=\"\"></p>\n<h3 id=\"设置api依赖\"><a class=\"markdownIt-Anchor\" href=\"#设置api依赖\">#</a> 设置 api 依赖</h3>\n<p>在服务提供者的具体实现模块中 ( <code>provider/pom.xml</code> )，加入 <code>api</code>  模块依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"定义-服务间的交互协议契约规范\"><a class=\"markdownIt-Anchor\" href=\"#定义-服务间的交互协议契约规范\">#</a> 定义 服务间的交互协议 (契约 / 规范)</h3>\n<p>其实就是定义服务间的 <code>RPC</code>  接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义rpc的交互规范</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 16:16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * say hello</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &quot;hello dubbo&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现服务提供者的业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#实现服务提供者的业务逻辑\">#</a> 实现服务提供者的业务逻辑</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现服务的具体逻辑</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 16:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IProviderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello, dubbo!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对外提供服务\"><a class=\"markdownIt-Anchor\" href=\"#对外提供服务\">#</a> 对外提供服务</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务启动</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 16:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String zookeeperHost = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ServiceConfig&lt;IProviderService&gt; service = <span class=\"keyword\">new</span> ServiceConfig&lt;&gt;();</span><br><span class=\"line\">        service.setApplication(<span class=\"keyword\">new</span> ApplicationConfig(<span class=\"string\">&quot;first-dubbo-provider&quot;</span>));</span><br><span class=\"line\">        service.setRegistry(<span class=\"keyword\">new</span> RegistryConfig(<span class=\"string\">&quot;zookeeper://&quot;</span> + zookeeperHost + <span class=\"string\">&quot;:2181&quot;</span>));</span><br><span class=\"line\">        service.setInterface(IProviderService.class);</span><br><span class=\"line\">        service.setRef(<span class=\"keyword\">new</span> ProviderServiceImpl());</span><br><span class=\"line\">        service.export();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dubbo service started&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>).await();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建服务消费者\"><a class=\"markdownIt-Anchor\" href=\"#创建服务消费者\">#</a> 创建服务消费者</h2>\n<p><img data-src=\"/images/dubbo/chapter01-%E5%9B%BE3.png\" alt=\"\"></p>\n<h3 id=\"引入api依赖\"><a class=\"markdownIt-Anchor\" href=\"#引入api依赖\">#</a> 引入 api 依赖</h3>\n<p>在服务消费者的 <code>pom</code>  文件中 ( <code>comsumer/pom.xml</code> )，添加如下 <code>maven</code>  依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>provider-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"消费逻辑\"><a class=\"markdownIt-Anchor\" href=\"#消费逻辑\">#</a> 消费逻辑</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务消费者</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-10-13 16:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String zookeeperHost = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ReferenceConfig&lt;IProviderService&gt; reference = <span class=\"keyword\">new</span> ReferenceConfig&lt;&gt;();</span><br><span class=\"line\">        reference.setApplication(<span class=\"keyword\">new</span> ApplicationConfig(<span class=\"string\">&quot;first-dubbo-consumer&quot;</span>));</span><br><span class=\"line\">        reference.setRegistry(<span class=\"keyword\">new</span> RegistryConfig(<span class=\"string\">&quot;zookeeper://&quot;</span> + zookeeperHost + <span class=\"string\">&quot;:2181&quot;</span>));</span><br><span class=\"line\">        reference.setInterface(IProviderService.class);</span><br><span class=\"line\">        IProviderService service = reference.get();</span><br><span class=\"line\">        String message = service.sayHello();</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录搭建zookeeper注册中心\"><a class=\"markdownIt-Anchor\" href=\"#附录搭建zookeeper注册中心\">#</a> 附录：搭建 <code>zookeeper</code>  注册中心</h2>\n<p>由于是单机演示，就简单的使用  <code>单机zookeeper</code>  就好了，</p>\n<p>通过  <code>https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz</code>  下载 <code>zookeeper</code>  的 <code>jar</code>  包，解压后，使用  <code>zkServer.sh(Mac OS) </code> 或者  <code>zkServer.cmd(Windows平台)</code>  启动就可以了。默认端口使用的是 <code>2181</code> .</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/dubbo/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "Java",
                "dubbo"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/13/BQ/hdoj/HD-1000/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/13/BQ/hdoj/HD-1000/",
            "title": "1000 A + B Problem",
            "date_published": "2021-10-13T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 1060311    Accepted Submission(s): 313490</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>Calculate A + B.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>Each line will contain two integers A and B. Process to end of file.</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each case, output A + B in one line.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (EOF != <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;m, &amp;n)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, m + n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<ul>\n<li>输出结果后要换行.</li>\n<li><code>EOF != scanf(&quot;%d %d&quot;, &amp;m, &amp;n)</code>  也可以写成  <code>~scanf(&quot;%d %d&quot;, &amp;m, &amp;n)</code></li>\n</ul>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1000\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMA==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMA==\">杭电Oj - 1000</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1000题解\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAwLmNwcA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAwLmNwcA==\">【C】杭电Oj-1000题解</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-02-RocketMQ-Arch-Message/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-02-RocketMQ-Arch-Message/",
            "title": "RocketMQ系列-架构设计之消息",
            "date_published": "2021-09-28T11:26:00.000Z",
            "content_html": "<p>上一篇文章<a href=\"/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/\"> RocketMQ 架构设计之启动过程解析</a> 分析了  <code>NameServer</code> ,  <code>Broker</code> ,  <code>Producer</code> ,  <code>Consumer</code>  四个部分的启动过程，这边文章我们分析 <b>消息的收发过程</b>.</p>\n<h2 id=\"生产者发送消息过程解析\"><a class=\"markdownIt-Anchor\" href=\"#生产者发送消息过程解析\">#</a> 生产者发送消息过程解析</h2>\n<p>我们还是看上篇文章中的例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用GroupName初始化Producer</span></span><br><span class=\"line\">DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 指定NameSrv的地址: 也可以通过环境变量NAMESRV_ADDR来指定，则不需要下面这一行。</span></span><br><span class=\"line\">producer.setNamesrvAddr(<span class=\"string\">&quot;name-server1-ip:9876;name-server2-ip:9876&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 启动实例</span></span><br><span class=\"line\">producer.start();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建消息实例,指定 topic, tag, message body.</span></span><br><span class=\"line\">    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;TagA&quot;</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">        (<span class=\"string\">&quot;Hello RocketMQ !!&quot;</span>).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 发送消息给Broker</span></span><br><span class=\"line\">    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关闭生产者</span></span><br><span class=\"line\">producer.shutdown();</span><br></pre></td></tr></table></figure>\n<p>在上一篇文中，我们是看到了  <code>producer.start();</code> , 现在我们接着来看  <code>producer.send(msg);</code>  的过程。上一篇文章中，有简单的介绍过消息的发送分为三步：</p>\n<ul>\n<li>获取  <code>topic</code>  的元数据信息，包括：路由信息，是否为有序队列， <code>MessageQueue</code>  列表，消息会发送的队列的索引。</li>\n<li>选择  <code>MessageQueue</code></li>\n<li>发送消息</li>\n</ul>\n<p>具体实现的代码在  <code>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl#sendDefaultImpl</code>  方法中。</p>\n<p>在消息的发送过程中，首先会校验当前 <code>Producer</code>  的运行状态，然后判断消息的 <code>group</code> , <code>topic</code>  等等是否为空。 合法之后，会获取 <code>topic</code>  的 <code>MessageQueue</code>  列表。从 <code>messageQueue</code>  列表中查找出一个发送的 <code>messageQueue</code> . 通过什么的机制选取 <code>MessageQueue</code>  呢？这里会涉及到一个  <code>Broker</code>  的延迟容错机制，下面我们会详解的介绍这个机制。当消息第一次过来的时候，会通过 <code>Random</code>  随机选择一个 <code>messageQueue</code> ，进行发送，如果发送失败，会将该 <code>messageQueue</code>  隔离起来，重试的时候，不会给这个  <code>messageQueue</code>  投递消息。选择出来了 <code>MessageQueue</code>  之后，进行发送消息，发送消息首先会根据 <code>BrokerName</code>  获取 <code>broker</code>  的地址，执行几个  <code>RpcHook</code> , 然后封装请求头，根据我们发送方式的不同，会选择对应的请求命令 ( <code>Send_Message</code> , <code>Send_Reply_Message</code> , <code>Send_Reply_Message_V2</code>  等等) 发送，消息发送完成之后，会更新 <code>Producer</code>  端的  <code>broker容错表</code> 。这样消息就发送出去了。</p>\n<h3 id=\"延迟容错机制\"><a class=\"markdownIt-Anchor\" href=\"#延迟容错机制\">#</a> 延迟容错机制</h3>\n<p><code>RocketMQ</code>  发送消息的时候，由于  <code>nameServer</code>  检测  <code>Broker</code>  是否存活是有延迟的，在 选择消息队列的时候，也可能遇到宕机的 <code>Broker</code> , 因网络问题发送失败的不时会发生，因次  <code>RocketMQ</code>  实现这种 高可用的设计方案。</p>\n<p>到底是怎么回事儿呢？</p>\n<p>我们从代码中看看端倪。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%99.png\" alt=\"\"></p>\n<p>文中图片我标注了两处代码</p>\n<h4 id=\"重试\"><a class=\"markdownIt-Anchor\" href=\"#重试\">#</a> 重试</h4>\n<p>当消息是 同步方式发送的时候，根据配置的属性进行重试，默认为 3 次。 如果是单向方式或者异步的方式进行发送时，则就会发送一次，不会重试。 可以看到确实可以从一定程度上提高消息发送成功的几率，但是，如果是 <code>broker</code>  宕机，重试只会增加时长。</p>\n<p>先不急着解决，我们看一下消息第一次发送是怎样的过程。 图中 2 处，会根据  <code>topicPublishInfo</code>  取出一个 <code>MessageQueue</code> 。 跟进代码：</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%992.png\" alt=\"\"></p>\n<p>然后接着进入代码</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%993.png\" alt=\"\"></p>\n<p>我们先假设  <code>sendLatencyFaultEnable = false</code> . 我们再看一下具体实现:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%994.png\" alt=\"\"></p>\n<p>其中  <code>sendWhichQueue</code>  字段就是上一次消息发送的 <code>MessageQueue List</code>  的下标。</p>\n<p>最后就是根据  <code>selectOneMessage()</code>  方法通过轮询的方式来选 <code>MessageQueue</code>  了。第一次是通过随机的方式来选出第一个  <code>MessageQueue</code>  的，重试的都是 轮询的去取了。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%995.png\" alt=\"\"></p>\n<p>那当:  <code>sendLatencyFaultEnable = true</code>  的时候呢？</p>\n<p><code>sendLatencyFaultEnable</code>  是什么意思呢？ 它表示是否启用  <code>Broker</code>  故障延迟机制。 看下图中的代码，我们假设 启用了  <code>Broker</code>  故障延迟机制。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%996.png\" alt=\"\"></p>\n<p>图中标注的部分上面的逻辑 和刚才 选择 <code>MessageQueue的</code> 机制是一样的。 那奥秘肯定是在下面的代码中了 (图中框选的部分)</p>\n<p><code>latencyFaultTolerance</code>  是什么呢？ <code>latencyFaultTolerance</code>  是一个接口，直译就是：延迟容错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 延迟容错</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LatencyFaultTolerance</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新失败的Broker。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name                 brokerName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> currentLatency       本次消息发送的时长</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> notAvailableDuration 规避broker的时长</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateFaultItem</span><span class=\"params\">(<span class=\"keyword\">final</span> T name, <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> currentLatency, <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> notAvailableDuration)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断Broker是否可以用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name broker的名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> T name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从Broker故障列表中移除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">final</span> T name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 弹出最后一个 Broker</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">pickOneAtLeast</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看一下  <code>latencyFaultTolerance.isAvailable(mq.getBrokerName())</code>  的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// faultItemTable 是一个 ConcurrentHashMap</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> FaultItem faultItem = <span class=\"keyword\">this</span>.faultItemTable.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (faultItem != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断该Broker(messageQueue)是否在规避时间内。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> faultItem.isAvailable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>faultItem.isAvailable()</code>  的实现如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (System.currentTimeMillis() - startTimestamp) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这两段代码中可以看出，判断  <code>Broker</code>  是否可用的判断依据就是：当前时间是否大于  <code>startTimeStamp</code> 。  <code>startTimeStamp</code>  标识 该 <code>Broker</code>  可以开始使用的时间。</p>\n<p>看到这里，一头雾水。  分区容错到底是什么东西呢？</p>\n<p>我们返回上一层，从框选的下面接着看：</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%996.png\" alt=\"\"></p>\n<p>如果还没有选出一个可用  <code>MessageQueue</code> ，则会中 故障的 <code>Broker</code>  列表中选出一个 <code>Broker</code> ，判断这个 broker 是否有 <code>MessageQueue</code> ，如果有则随机 (轮询) 的选一个，如果没有则从故障的 <code>Broker</code>  列表中移除一个，使用默认的机制选择一个 <code>MessageQueue</code>  投送消息。</p>\n<p>选择出来 <code>MessageQueue</code>  之后，就会发送消息了。</p>\n<p>发送完消息 还进行了一个操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 更新topic的一个MessageQueue 是否可用</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这是干什么呢？ 我们直译过来 更新故障 (错误) 的条目。去看一下代码实现:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%997.png\" alt=\"\"></p>\n<p>可以看到最终是调用了  <code>MqFaultStrategty</code>  的  <code>updateFaultItem()</code>  方法。 这个方法中执行了两个方法， <code>computeNotAvailableDuration</code>  计算不可用的时长， 和   <code>latencyFaultTolerance</code>  的 <code>updateFaultItem</code>  方法。</p>\n<p>上图中贴出了  <code>computeNotAvailableDuration</code>  方法的实现。方法中使用了两个数组  <code>latencyMax</code>  和  <code>notAvailableDuration</code>  , 这两个数组就是延迟机制的核心了。数组的定义如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 延迟机制 - 本次消息发送时长区间，用于映射计算出需要规避Broker的时长。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] latencyMax = &#123;<span class=\"number\">50L</span>, <span class=\"number\">100L</span>, <span class=\"number\">550L</span>, <span class=\"number\">1000L</span>, <span class=\"number\">2000L</span>, <span class=\"number\">3000L</span>, <span class=\"number\">15000L</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 延迟机制 - 规避Broker的时长</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] notAvailableDuration = &#123;<span class=\"number\">0L</span>, <span class=\"number\">0L</span>, <span class=\"number\">30000L</span>, <span class=\"number\">60000L</span>, <span class=\"number\">120000L</span>, <span class=\"number\">180000L</span>, <span class=\"number\">600000L</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>方法中的形参  <code>currentlatency</code>  为本次消息发送的延迟时间。</p>\n<p>调用 <code>computeNotAvailableDuration</code>  方法的实参  <code>isolation</code>  表示该 <code>Broker</code>  是否需要规避。如果消息发送成功， <code>isolation</code>  就是 <code>false</code> , 反之，就是代表 <code>Broker</code>  需要被规避。从  <code>computeNotAvailableDuration</code>  方法的实现可以看出：其会根据 本校消息发送的延迟时间 从  <code>latencyMax</code>  数组尾部找到第一个 比  <code>currentlatency</code>  小的数组下标 <code>i</code> ，没有则返回 <code>0</code> ， 将  <code>notAvailableDuration[i]</code>  进行返回。 当 <code>isolation=true</code>  的时候，就会默认有 <code>10</code>  分钟的规避时长，反之，规避时长就会消息发送的延时是多少了。</p>\n<p>我们接着看  <code>latencyFaultTolerance</code>  的 <code>updateFaultItem</code>  方法</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%998.png\" alt=\"\"></p>\n<p>图中对代码进行注释，不过多解释了。其中  <code>FaultItem</code>  是 存储故障 <code>broker</code>  的类，可以称为 失败条目，每个 <code>FaultItem</code>  存储了 <code>broker</code>  的名称，消息发送延迟的时长，故障规避结束的开始时间。</p>\n<p>那么更新这两个字段的值有什么作用呢？不知你是否有印象，刚才说有一头雾水的地方。</p>\n<p>在选择 <code>MessageQueue</code>  的时候，会判断 <code>messageQueue</code>  是否可用，调用了 故障容器接口的  <code>isAvalilable</code>  方法，方法就是根据  <code>startTimestamp</code>  来进行判断改队列是否可用的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (System.currentTimeMillis() - startTimestamp) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果当前的系统时间大于故障规避开始时间，说明 <code>broker</code>  可以加入轮询的队伍里。</p>\n<p>以上就是 生产者发送消息 整个过程了。</p>\n<h3 id=\"生产者总结\"><a class=\"markdownIt-Anchor\" href=\"#生产者总结\">#</a> 生产者总结</h3>\n<p>我们知道了 生产者发送消息，三步完成，1. 获取 <code>topic</code>  的元数据信息，比如路由信息， <code>MessageQueue</code>  队列列表等， 2. 选择合适的 <code>MessageQueue</code> ，我们也着重介绍了  <code>Broker</code>  的故障延迟机制，这也是 <code>RocketMQ</code>  实现高可用的方式之一。 3. 发送消息，这里我们并没有过多的介绍，使用 <code>nettyClient</code>  将  <code>Message</code>  发送过  <code>Broker</code>  端。</p>\n<h2 id=\"broker-存储消息\"><a class=\"markdownIt-Anchor\" href=\"#broker-存储消息\">#</a> Broker 存储消息</h2>\n<p>上面我们分析了生产者发送消息的整体过程，尤其着重的分析了 生产者选择 <code>MessageQueue</code>  时候的容错机制。生产者会把消息发送给 <code>Broker</code> ，进行存储，存储是一个怎样的流程呢？</p>\n<p>我直接进入主题，从  <code>SendMessageProcessor</code>  说起。</p>\n<p>为什么上来就说 这个类呢？上篇文章中，我们分析了 <code>Broker</code>  的启动过程中，可以知道的  <code>Broker</code>  启动了 <code>NettyServer</code>  等待生产者，消费者发送来请求。这个  <code>SendMessageProcessor</code>  就是 <code>Broker</code>  接受生产者发送消息的处理器。</p>\n<p>具体的代码在  <code>org.apache.rocketmq.broker.BrokerController#registerProcessor</code>  中。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF1.png\" alt=\"\"></p>\n<p>根据之前的内容，我们已知 发送的消息有 事务消息，批量消息，单条的普通消息三种类型，并且  <code>RocketMQ</code>  支持同步存储和异步存储两种方式。所以 肯定是 <code>Broker</code>  端提供了这六种消息的存储方式。</p>\n<p>实际上，也确实支持了这 6 种方式。我们先从  <code>SendMessageProcessor</code>  的类继承关系来看一下  <code>Broker</code>  是如何进行消息存储，我也会按照这样的思路来行文。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF2.png\" alt=\"\"></p>\n<h3 id=\"接收同步消息\"><a class=\"markdownIt-Anchor\" href=\"#接收同步消息\">#</a> 接收同步消息</h3>\n<p>同步消息处理的本质上还是异步的处理方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = asyncProcessRequest(ctx, request).get();</span><br></pre></td></tr></table></figure>\n<p>接着往下看</p>\n<h3 id=\"异步消息处理\"><a class=\"markdownIt-Anchor\" href=\"#异步消息处理\">#</a> 异步消息处理</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CompletableFuture&lt;RemotingCommand&gt; <span class=\"title\">asyncProcessRequest</span><span class=\"params\">(ChannelHandlerContext ctx,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        RemotingCommand request)</span> <span class=\"keyword\">throws</span> RemotingCommandException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SendMessageContext mqtraceContext;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 消费者发送回来的消息(可能是消费失败之后的?)</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.asyncConsumerSendMsgBack(ctx, request);</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"comment\">// 处理生产者发送来的消息</span></span><br><span class=\"line\">                SendMessageRequestHeader requestHeader = parseRequestHeader(request);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class=\"line\">                <span class=\"comment\">// 消息发送前的钩子。在消息发送之前，执行一些操作。</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader.isBatch()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果是批量消息</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 不是批量消息</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到， <code>Broker</code>  不仅处理来自 生产者发送来的消息，还需要处理 消费者 消费失败重试的消息。消费者重试的消息这部分比较复杂，我们后面再分析。我们先看处理生产者发送来的消息这部分。</p>\n<p>代码中显示，会判断消息的类型，是否是批量消息，分别调用不同的方法，进行存储。如下图。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF3.png\" alt=\"\"></p>\n<p>上图中不是完整的代码，我删除了一些不重要的代码，可以看出来，不管是批量消息还是单条消息 (除事务消息) 都是交给了  <code>MessageStore</code>  进行存储的。 当然，事务消息是交给了  <code>TransactionalMessageService</code>  进行存储的，这个内容我们在分析 <code>RocketMQ</code>  事务消息的时候，会着重的分析，本文中就不做分析了。</p>\n<p>继续跟进代码</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF4.png\" alt=\"\"></p>\n<p><code>MessageStore</code>  只是对消息 和  <code>Broker</code>  进行了简单的校验，并没有真正的去存储消息。 而是把消息交给了  <code>commitLog</code>  进行存储消息。</p>\n<p>我们以单条消息为例，来看一下  <code>commitLog</code>  将消息存储到文件中的具体流程。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF5.png\" alt=\"\"></p>\n<p>如上图中，  <code>commitLog</code>  收到消息，首先会选择一个 <code>MappedFile</code> , 这个  <code>MappedFile</code>  代表 磁盘上的物理文件在内容中的映射。指代  <code>$HOME/store/commitlog</code>  目录下的文件。也代表了消息要写入的文件。  <code>MappedFile</code>  会把消息写到缓冲区中 (即右上图)， 消息顺利写完之后，就触发刷盘动作，刷盘有两种方式： 同步写盘和异步刷盘。 同步写盘是指等待  <code>FlushCommitLogService</code>  把消息真正写到物理磁盘上，然后再返回。异步刷盘是指 唤醒  <code>FlushCommitLogService</code>  执行的线程，不等待其是否真正把消息写入了物理磁盘中。 最后，会把消息同步到其他的副本服务中。</p>\n<h3 id=\"存储消息流程总结\"><a class=\"markdownIt-Anchor\" href=\"#存储消息流程总结\">#</a> 存储消息流程总结</h3>\n<p><code>Broker</code>  收到生产者发送的消息，会由  <code>SendMessageProcessor</code>  进行接收，然后会根据消息的类型单条消息，批量消息，还是事务消息，分别进行不同的处理。当然也会区分异步存储还是同步的存储消息。方法实现上本质还是调用 异步的方法来实现的， <code>SendMessageProcessor</code>  会把消息转交给  <code>CommitLog</code>  进行校验，会检查当前 <code>Broker</code>  和当前消息的状态，然后交给 <code>MappedFile</code>  真正的存储消息， <code>MappedFile</code>  表示存储消息的物理文件在内存中的映射，首先会把消息的内容写到缓冲区中，然后调用刷盘的方式 (同步写盘或者异步刷盘) 将消息真正的写到物理磁盘上。然后，将消息同步给其他副本。</p>\n<h3 id=\"再探讨一点细节\"><a class=\"markdownIt-Anchor\" href=\"#再探讨一点细节\">#</a> 再探讨一点细节</h3>\n<h4 id=\"获取mappedfile\"><a class=\"markdownIt-Anchor\" href=\"#获取mappedfile\">#</a> 获取 MappedFile</h4>\n<p>在 Broker 将消息写入 MappedFile 之前，就需要需要获取到一个 MappedFile 进行写入。如何获取的呢？</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF6.png\" alt=\"\"></p>\n<p>在 asyncPutMessages 方法中，有两处获取 MappedFile 的代码。</p>\n<p>第一处代码，倒是没有复杂的逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappedFile <span class=\"title\">getLastMappedFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MappedFile mappedFileLast = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.mappedFiles.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mappedFileLast = <span class=\"keyword\">this</span>.mappedFiles.get(<span class=\"keyword\">this</span>.mappedFiles.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//continue;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;getLastMappedFile has exception.&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mappedFileLast;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二处代码，稍有猫腻。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappedFile <span class=\"title\">getLastMappedFile</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> startOffset)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getLastMappedFile(startOffset, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF7.png\" alt=\"\"></p>\n<p>创建文件的代码和执行过程如上图所示，代码有删减。</p>\n<p>解释一下猫腻：创建  <code>MappedFile</code>  的时候，一次会创建两个 <code>MappedFile</code> , 这样下次就可以直接通过 一处的代码获取到  <code>MappedFile</code> ，而不用再去创建  <code>MappedFile</code>  了。 由于 真实的创建 <code>MappedFile</code>  是由 后台  <code>AllocateMappedFileService</code>  线程来创建的，所以也不会浪费时间。</p>\n<p>代码显示，会把  <code>AllocateRequest</code>  分别放到  <code>requestTable</code>  和  <code>requestQueue</code>  中。  <code>AllocateRequest</code>  是 创建  <code>MappedFile</code>  文件请求，  <code>requesetTable</code>  是一个  <code>concurrentHashMap</code>  ,  <code>key</code>  是文件的路径， <code>Value</code>  是  <code>AllocateRequest</code> 。 存储了 路径和 <code>AllocateRequest</code>  的映射关系。  <code>requestQueue</code> ，是请求的队列， <code>PriorityBlockingQueue</code> ，后台 <code>AllocateMappedFileService</code>  线程会 <code>requestQueue</code>  取出一个请求，分配的时候有两种策略，一种是使用 <code>Mmap</code>  的方式来构建 <code>MappedFile</code>  实例，另外一种是从 <code>TransientStorePool</code>  堆外内存池中获取相应的 <code>DirectByteBuffer</code>  来构建 <code>MappedFile</code> .</p>\n<h2 id=\"consumer-消费消息\"><a class=\"markdownIt-Anchor\" href=\"#consumer-消费消息\">#</a> Consumer 消费消息</h2>\n<p>在上一篇文章中，我们介绍了 消费者有两种实现:  <code>DefaultLitePullConsumerImpl</code>  和  <code>DefaultMQPushConsumerImpl</code> . 我们先暂时抛开这两种具体的实现方式。 从稍微高一点的角度来看一下消息者消费消息的逻辑。从 <b>消费者注册</b>, <b>负载均衡</b>，<b>拉取消息</b>，<b>消费消息</b> 这个思路来行文。</p>\n<h3 id=\"消息者注册\"><a class=\"markdownIt-Anchor\" href=\"#消息者注册\">#</a> 消息者注册</h3>\n<p>消费者启动后，每隔 <code>10ms</code>  会从  <code>NameServer</code>  查询一次用户订阅的所有话题路由信息.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 每10ms从NameServer拉取一下 TopicRouteInfo*/</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            MQClientInstance.<span class=\"keyword\">this</span>.updateTopicRouteInfoFromNameServer();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;ScheduledTask updateTopicRouteInfoFromNameServer exception&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>, <span class=\"keyword\">this</span>.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>\n<p>更新 <code>topic</code>  路由信息在上篇文中已经介绍过了，这里就不详细的去介绍了，只是简单的串一下消息者消费消息的流程。</p>\n<p>除此之外，还有一下操作：</p>\n<ul>\n<li>每秒发送一次心跳检测.</li>\n<li>每 10s 持久化一次  <code>Consumer</code>  的 <code>offset</code> . 说到这类， 在启动的时候也会加载指定目录下的  <code>consumeOffset</code> .</li>\n<li>每分钟 扫描  <code>consumerTable</code>  自动调整线程池大小</li>\n</ul>\n<h3 id=\"消费者负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#消费者负载均衡\">#</a> 消费者负载均衡</h3>\n<p>在消费者启动过程中，会启动  <code>RebalenceService</code> . 看名字就知道这是一个负载均衡服务。 什么作用呢？在任何一个消费者 启动，关闭，重置消费偏移 的时候，都会触发这个这个服务的重平衡操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 本机 启动时=&gt;其他的消费者会受到 consumerIds发生变更的请求。</span></span><br><span class=\"line\"><span class=\"comment\">/** 5.启动负载均衡服务 org.apache.rocketmq.client.impl.factory.MQClientInstance#start*/</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.rebalanceService.start();</span><br><span class=\"line\"><span class=\"comment\">// 其他的消息者启动或者关闭时,即 consumerId 发生变动的时候 org.apache.rocketmq.client.impl.ClientRemotingProcessor#processRequest</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> RequestCode.NOTIFY_CONSUMER_IDS_CHANGED:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.notifyConsumerIdsChanged(ctx, request);</span><br><span class=\"line\"><span class=\"comment\">// 控制端 重置消费偏移量时 org.apache.rocketmq.client.impl.ClientRemotingProcessor#processRequest</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> RequestCode.RESET_CONSUMER_CLIENT_OFFSET:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.resetOffset(ctx, request);</span><br></pre></td></tr></table></figure>\n<p>重平衡操作发生了什么？</p>\n<p>我们都知道 在 <code>Broker</code>  端管理消息的最小单位是 <code>MessageQueue</code>  , 而不是  <code>topic</code> 。比如 当你发送了  <code>10</code>  条相同话题的消息，这  <code>10</code>  条话题可能存储在了不同  <code>Broker</code>  服务器的不同队列中。所以 当我们讨论消息队列负载均衡的时候，就是在讨论服务器端的所有队列如何给所有消费者消费的问题。在  <code>RocketMQ</code>  中，客户端有两种消费模式，一种是<b>广播模式</b>，另外一种是<b>集群模式</b>。</p>\n<p>我们现在假设总共有两台  <code>Broker</code>  服务器，假设用户使用  <code>Producer</code>  已经发送了  <code>8</code>  条消息，这  <code>8</code>  条消息现在均衡的分布在两台 Broker 服务器的  <code>8</code>  个队列中，每个队列中有一个消息。现在有  <code>3</code>  台消费者都订阅了  <code>Test</code>  话题的消费者实例，我们来看在不同消费模式下，不同的消费者会收到哪几条消息。</p>\n<h4 id=\"广播模式\"><a class=\"markdownIt-Anchor\" href=\"#广播模式\">#</a> 广播模式</h4>\n<p>这种方式下，每台消费者都会收到 <code>8</code>  条消息。所以，在广播的模式下，重平衡操作执行如下所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 消费者的模式: 广播还是集群模式</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (messageModel) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 广播方式。</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> BROADCASTING: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// topicSubscribeInfoTable: 存储topic 对应的 MessageQueue 列表.</span></span><br><span class=\"line\">        Set&lt;MessageQueue&gt; mqSet = <span class=\"keyword\">this</span>.topicSubscribeInfoTable.get(topic);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mqSet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新 消费者消费订阅表。返回是否发生了变动。</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">this</span>.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (changed) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果发生了变动，则根据不同的消费消费方式处理：</span></span><br><span class=\"line\">                <span class=\"comment\">// push,则需要通知给Broker，更新各个消费者的订阅关系。</span></span><br><span class=\"line\">                <span class=\"comment\">// pull,则会通知消费者，执行消费逻辑。</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.messageQueueChanged(topic, mqSet, mqSet);</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;messageQueueChanged &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, consumerGroup, topic, mqSet, mqSet);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;</span>, consumerGroup, topic);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ....:</span><br><span class=\"line\">    <span class=\"comment\">// 省略..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上面代码中的注释， 主要注意的是，广播模式下， <code>messageQueue</code>  发生变动，需要根据不同的消费方式 ( <code>pull</code> / <code>push</code> ), 执行不同的逻辑。</p>\n<ul>\n<li><code>push</code>  方式：会更新消息消费订阅表的版本，然后会通知 <code>Broker</code> ，触发 <code>consumerId</code>  变动。</li>\n<li><code>pull</code>  方式：会重新 <code>pull</code>  消息，执行 <code>pullTask</code> .</li>\n</ul>\n<h4 id=\"集群模式\"><a class=\"markdownIt-Anchor\" href=\"#集群模式\">#</a> 集群模式</h4>\n<p>集群模式是指所有的消息队列会按照某种分配策略来分给不同的消费者客户端。</p>\n<p>集群方式，不就是多个消费者协同的消费一个 <code>topic</code>  的数据吗，也就是说多个消费者协同的订阅 <code>topic</code>  下的多个消息队列 ( <code>MessageQueue</code> ). 那就需要一种策略去分配多个 <code>MessageQueue</code>  给每个消费者。</p>\n<p><code>RocktMQ</code>  提供了六种 <code>MessageQueue</code>  的消费策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当前消费者 需要消费哪几个消息队列中消息的分配策略。</span></span><br><span class=\"line\">AllocateMessageQueueStrategy strategy = <span class=\"keyword\">this</span>.allocateMessageQueueStrategy;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;MessageQueue&gt; allocateResult = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mqAll:当前topic和group下的消费队列列表.   cidAll: 所有消费队列的id.</span></span><br><span class=\"line\">    <span class=\"comment\">// 两者一一对应。</span></span><br><span class=\"line\">    allocateResult = strategy.allocate(<span class=\"keyword\">this</span>.consumerGroup, <span class=\"keyword\">this</span>.mQClientFactory.getClientId(),</span><br><span class=\"line\">        mqAll, cidAll);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Throwable e)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>根据分配策略分配好自己要订阅的 <code>MessageQueue</code>  之后，就会 更新消费者消费订阅表。然后需要根据不同的消费方式 ( <code>pull</code> / <code>push</code> ), 执行不同的逻辑。</p>\n<ul>\n<li><code>push</code>  方式：会更新消息消费订阅表的版本，然后会通知 <code>Broker</code> ，触发 <code>consumerId</code>  变动。</li>\n<li><code>pull</code>  方式：会重新 <code>pull</code>  消息，执行 <code>pullTask</code> .</li>\n</ul>\n<p>我们就一起看下  <code>AllocateMessageQueueStrategy</code>  的六种实现。</p>\n<h5 id=\"平均哈希队列算法allocatemessagequeueaveragely\"><a class=\"markdownIt-Anchor\" href=\"#平均哈希队列算法allocatemessagequeueaveragely\">#</a> 平均哈希队列算法 (AllocateMessageQueueAveragely)</h5>\n<p>这种策略比较简单。举个例子来说明:</p>\n<p>假设有 <code>5</code>  个 <code>mq</code> ,  <code>3</code>  个消费者，那么消费者 <code>id</code>  为 <code>1</code>  的 <code>C1</code>  会订阅 <code>mq1,mq2</code> .   <code>C2=&gt;mq3,mq4</code> .   <code>C3=&gt;mq5</code> .<br>\n 假设有 <code>5</code>  个 <code>mq</code> ,  <code>6</code>  个消费者，那么订阅关系则为:  <code>C1=&gt;mq1</code> , <code>C2=&gt;mq2</code> , <code>C3=&gt;mq3</code> , <code>C4=&gt;mq4</code> , <code>C5=&gt;mq5</code> , <code>C6=&gt;[]</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cidAll: 消费者id列表</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index = cidAll.indexOf(currentCID);</span><br><span class=\"line\"><span class=\"comment\">// mqAll: 消息队列的列表</span></span><br><span class=\"line\"><span class=\"comment\">// mod: 表示 有多个队列无法平均分配。</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mod = mqAll.size() % cidAll.size();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4 &lt;= 5 ? 1 : (4 &gt; 0 &amp;&amp; 1 &lt; 4 ? 4 / 5 + 1 : 4 / 5)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> averageSize;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mqAll.size() &lt;= cidAll.size()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 队列比消费者少，每个消费者最大消费1个队列。</span></span><br><span class=\"line\">    averageSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mod &gt; <span class=\"number\">0</span> &amp;&amp; index &lt; mod) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不能平均分, 并且消费者的id比余数小。那么该消费者要多消费一个MessageQueue.</span></span><br><span class=\"line\">        averageSize = mqAll.size() / cidAll.size() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 正好平均分 或者 当前消费者的id大于mod, 那么该消费者就平均分.</span></span><br><span class=\"line\">        <span class=\"comment\">// 会有两种情况: 1、mq有5个,consumer有5个， cid=5,则每个消费者都正好订阅一个mq</span></span><br><span class=\"line\">        <span class=\"comment\">// 2、mq有5个，consumer有6个,cid=6, 则该消费者不会订阅mq</span></span><br><span class=\"line\">        averageSize = mqAll.size() / cidAll.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//        int averageSize =</span></span><br><span class=\"line\"><span class=\"comment\">//            mqAll.size() &lt;= cidAll.size() ? 1 : (mod &gt; 0 &amp;&amp; index &lt; mod ? mqAll.size() / cidAll.size()</span></span><br><span class=\"line\"><span class=\"comment\">//                + 1 : mqAll.size() / cidAll.size());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅mq 的起始 索引. 比如5个mq，3个consumer, 那么,c1=&gt;m1,m2; c2=&gt;m3,m4; c3=&gt;m5</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> startIndex = (mod &gt; <span class=\"number\">0</span> &amp;&amp; index &lt; mod) ? index * averageSize : index * averageSize + mod;</span><br><span class=\"line\"><span class=\"keyword\">int</span> range = Math.min(averageSize, mqAll.size() - startIndex);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; range; i++) &#123;</span><br><span class=\"line\">    result.add(mqAll.get((startIndex + i) % mqAll.size()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<h5 id=\"循环平均哈希队列算法allocatemessagequeueaveragelybycircle\"><a class=\"markdownIt-Anchor\" href=\"#循环平均哈希队列算法allocatemessagequeueaveragelybycircle\">#</a> 循环平均哈希队列算法 (AllocateMessageQueueAveragelyByCircle)</h5>\n<p>这种实现页是很简单的实现。举例来说明，不过多介绍了。</p>\n<p>假设有 <code>5</code>  个 <code>mq</code> ,  <code>3</code>  个消费者，那么订阅关系则为:<br>\n <code>C1=&gt;mq1,mq4</code> .<br>\n <code>C2=&gt;mq2,mq5</code> .<br>\n <code>C3=&gt;mq3</code> .</p>\n<p>假设有 <code>5</code>  个 <code>mq</code> ,  <code>6</code>  个消费者，那么订阅关系则为:  <code>C1=&gt;mq1</code> , <code>C2=&gt;mq2</code> , <code>C3=&gt;mq3</code> , <code>C4=&gt;mq4</code> , <code>C5=&gt;mq5</code> , <code>C6=&gt;[]</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index: 表示第index个消费者</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index = cidAll.indexOf(currentCID);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; mqAll.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环分配给消费者。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % cidAll.size() == index) &#123;</span><br><span class=\"line\">        result.add(mqAll.get(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"一致性哈希队列算法allocatemessagequeueconsistenthash\"><a class=\"markdownIt-Anchor\" href=\"#一致性哈希队列算法allocatemessagequeueconsistenthash\">#</a> 一致性哈希队列算法 (AllocateMessageQueueConsistentHash)</h5>\n<p>这个算法实现起来比较复杂，涉及到了一个分布式算法，一致性哈希算法。</p>\n<p>具体的算法实现内容可以参考: <a href=\"/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/\">哈希算法</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 哈希环的节点</span></span><br><span class=\"line\">Collection&lt;ClientNode&gt; cidNodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String cid : cidAll) &#123;</span><br><span class=\"line\">    cidNodes.add(<span class=\"keyword\">new</span> ClientNode(cid));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一致性哈希的Router</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ConsistentHashRouter&lt;ClientNode&gt; router;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (customHashFunction != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    router = <span class=\"keyword\">new</span> ConsistentHashRouter&lt;&gt;(cidNodes, virtualNodeCnt, customHashFunction);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    router = <span class=\"keyword\">new</span> ConsistentHashRouter&lt;&gt;(cidNodes, virtualNodeCnt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将MQf通过Router分配给消费者</span></span><br><span class=\"line\">List&lt;MessageQueue&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MessageQueue mq : mqAll) &#123;</span><br><span class=\"line\">    ClientNode clientNode = router.routeNode(mq.toString());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clientNode != <span class=\"keyword\">null</span> &amp;&amp; currentCID.equals(clientNode.getKey())) &#123;</span><br><span class=\"line\">        results.add(mq);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> results;</span><br></pre></td></tr></table></figure>\n<p>这种算法的好处也特别明显：当有消费者加入或者退出的时候，不会移动跨节点的 <code>MQ</code>  分配情况。</p>\n<h5 id=\"通过配置的属性分配队列allocatemessagequeuebyconfig\"><a class=\"markdownIt-Anchor\" href=\"#通过配置的属性分配队列allocatemessagequeuebyconfig\">#</a> 通过配置的属性分配队列 (AllocateMessageQueueByConfig)</h5>\n<p>这种算法就是 根据配置的 <code>MQ</code> , 进行消费。</p>\n<p>通过  <code>set</code>  方法设置该消费者要消费的 <code>MQ</code> ,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessageQueueList</span><span class=\"params\">(List&lt;MessageQueue&gt; messageQueueList)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.messageQueueList = messageQueueList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分配方法则，直接将  <code>messageQueueList</code>  返回即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;MessageQueue&gt; <span class=\"title\">allocate</span><span class=\"params\">(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    List&lt;String&gt; cidAll)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.messageQueueList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"机房hash队列算法allocatemessagequeuebymachineroom\"><a class=\"markdownIt-Anchor\" href=\"#机房hash队列算法allocatemessagequeuebymachineroom\">#</a> 机房 Hash 队列算法 (AllocateMessageQueueByMachineRoom)</h5>\n<p>这个算法 和 循环平均哈希队列算法 是一样的。只不过是根据  <code>brokerName</code>  进行 <code>Hash</code>  计算的。</p>\n<p>举个例子来说:</p>\n<p>假设 5 个 <code>mq</code>  ( <code>fxb-test01@fxb.com</code> , <code>fxb-test02@fxb.com</code> , <code>fxb-test03@fxb.com</code> , <code>fxb-test04@fxb.com</code> , <code>fxb-test05@fxb.com</code> ),3 个消费者。则订阅关系如下:<br>\n <code>C1=&gt;mq1,mq4</code> .<br>\n <code>C2=&gt;mq2,mq5</code> .<br>\n <code>C3=&gt;mq3</code> .</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;MessageQueue&gt; premqAll = <span class=\"keyword\">new</span> ArrayList&lt;MessageQueue&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MessageQueue mq : mqAll) &#123;</span><br><span class=\"line\">    String[] temp = mq.getBrokerName().split(<span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.length == <span class=\"number\">2</span> &amp;&amp; consumeridcs.contains(temp[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">        premqAll.add(mq);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mod = premqAll.size() / cidAll.size();</span><br><span class=\"line\"><span class=\"keyword\">int</span> rem = premqAll.size() % cidAll.size();</span><br><span class=\"line\"><span class=\"keyword\">int</span> startIndex = mod * currentIndex;</span><br><span class=\"line\"><span class=\"keyword\">int</span> endIndex = startIndex + mod;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startIndex; i &lt; endIndex; i++) &#123;</span><br><span class=\"line\">    result.add(premqAll.get(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rem &gt; currentIndex) &#123;</span><br><span class=\"line\">    result.add(premqAll.get(currentIndex + mod * cidAll.size()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<h5 id=\"基于机房远近优先allocatemachineroomnearby\"><a class=\"markdownIt-Anchor\" href=\"#基于机房远近优先allocatemachineroomnearby\">#</a> 基于机房远近优先 (AllocateMachineRoomNearby)</h5>\n<p>这种算法会根据消费者的命名来区分。比如相同机房的消费者有相同的命名格式: <code>beijing-mxy-001</code> , <code>beijing-mxy-002...</code>  ，那么这类的消费者和 <code>MQ</code>  会被认为属于同一个机房。<b>在同一个机房内的 <code>MQ</code>  会优先被本机房的消费者进行消费</b> 如果本机房内没有存活的消费者，那该机房中的 <code>MQ</code>  会被所有的消费者所共享。  至于某一个消费者会订阅哪个 <code>MQ</code> ，则由具体指定的分配策略来分配。具体如下代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  根据机房分组 broker,</span></span><br><span class=\"line\">Map&lt;String<span class=\"comment\">/*machine room */</span>, List&lt;MessageQueue&gt;&gt; mr2Mq = <span class=\"keyword\">new</span> TreeMap&lt;String, List&lt;MessageQueue&gt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MessageQueue mq : mqAll) &#123;</span><br><span class=\"line\">    String brokerMachineRoom = machineRoomResolver.brokerDeployIn(mq);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isNoneEmpty(brokerMachineRoom)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mr2Mq.get(brokerMachineRoom) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mr2Mq.put(brokerMachineRoom, <span class=\"keyword\">new</span> ArrayList&lt;MessageQueue&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mr2Mq.get(brokerMachineRoom).add(mq);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Machine room is null for mq &quot;</span> + mq);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据机房分组consumer</span></span><br><span class=\"line\">Map&lt;String<span class=\"comment\">/*machine room */</span>, List&lt;String<span class=\"comment\">/*clientId*/</span>&gt;&gt; mr2c = <span class=\"keyword\">new</span> TreeMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String cid : cidAll) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据cid判断出所属的机房==&gt; 相同机房的消费需要有相同的命名格式.</span></span><br><span class=\"line\">    String consumerMachineRoom = machineRoomResolver.consumerDeployIn(cid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isNoneEmpty(consumerMachineRoom)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mr2c.get(consumerMachineRoom) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mr2c.put(consumerMachineRoom, <span class=\"keyword\">new</span> ArrayList&lt;String&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mr2c.get(consumerMachineRoom).add(cid);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Machine room is null for consumer id &quot;</span> + cid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;MessageQueue&gt; allocateResults = <span class=\"keyword\">new</span> ArrayList&lt;MessageQueue&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算当前consumer可以消费的MQ. 当前机房有多个消费者的时候，则使用真正分配策略(其他的分配策略)进行分配。</span></span><br><span class=\"line\"><span class=\"comment\">// 1.allocate the mq that deploy in the same machine room with the current consumer</span></span><br><span class=\"line\">String currentMachineRoom = machineRoomResolver.consumerDeployIn(currentCID);</span><br><span class=\"line\">List&lt;MessageQueue&gt; mqInThisMachineRoom = mr2Mq.remove(currentMachineRoom);</span><br><span class=\"line\">List&lt;String&gt; consumerInThisMachineRoom = mr2c.get(currentMachineRoom);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mqInThisMachineRoom != <span class=\"keyword\">null</span> &amp;&amp; !mqInThisMachineRoom.isEmpty()) &#123;</span><br><span class=\"line\">    allocateResults.addAll(allocateMessageQueueStrategy.allocate(consumerGroup, currentCID, mqInThisMachineRoom, consumerInThisMachineRoom));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.allocate the rest mq to each machine room if there are no consumer alive in that machine room</span></span><br><span class=\"line\"><span class=\"comment\">// 如果当前机房没有存活的消费者，那么当前机房的MQ会被所有的消费者共享。根据真实的分配策略进行分配</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String machineRoom : mr2Mq.keySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mr2c.containsKey(machineRoom)) &#123; <span class=\"comment\">// no alive consumer in the corresponding machine room, so all consumers share these queues</span></span><br><span class=\"line\">        allocateResults.addAll(allocateMessageQueueStrategy.allocate(consumerGroup, currentCID, mr2Mq.get(machineRoom), cidAll));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> allocateResults;</span><br></pre></td></tr></table></figure>\n<p>以上就是 <code>RocketMQ</code>  使用的负载均衡的内容了，当然，我们也可以自定义 分配策略。只需要实现  <code>AllocateMessageQueueStrategy</code>  , 在创建消费者实例的时候使用就好了。</p>\n<h3 id=\"拉取消息\"><a class=\"markdownIt-Anchor\" href=\"#拉取消息\">#</a> 拉取消息</h3>\n<p>我们知道的是， RocketMQ 支持两种消费者类型，一种是推送方式的，一种是主动拉取消息。</p>\n<p>这里我们先从拉取消息说起。  你懂的，我们是要讲的是:  <code>DefaultLitePullConsumer</code> .</p>\n<h4 id=\"defaultlitepullconsumer\"><a class=\"markdownIt-Anchor\" href=\"#defaultlitepullconsumer\">#</a> DefaultLitePullConsumer</h4>\n<p><code>DefaultLitePullConsumer</code> ，会为每个  <code>messageQueue</code>  创建一个 <code>PullTaskImpl</code> .  它会定时的从  <code>Broker</code>  端拉取消息。然后封装成  <code>PullRequest</code> , 放到  <code>consumeRequestCache</code>  这个阻塞队列中， 然 后  <code>DefaultLitePullConsumer</code>  会调用 <code>poll</code>  方法，获取 List<MessageExt>, 这样就算是消费完成了。</p>\n<p>是客户端 定时任务主动想 <code>Broker</code>  端发送请求，拉取消息。</p>\n<p>而 推的方式，就不是这么简单了。</p>\n<h4 id=\"defaultmqpushconsumer\"><a class=\"markdownIt-Anchor\" href=\"#defaultmqpushconsumer\">#</a> DefaultMQPushConsumer</h4>\n<p>这还是要从 <code>Broker</code>  端存储完消息之后说起，Broker 会运行一个  <code>ReputMessageService</code> . 这是一个线程，有什么作用呢？<br>\n 它是推送消息的线程，负责将写入 <code>CommitLog</code>  的消息推送给对应的消费者。</p>\n<p>这里会有两个问题:</p>\n<ul>\n<li>1、 <code>ReputMessageService</code>  怎么知道要去推送消息给消费者呢</li>\n</ul>\n<p><code>ReputMessageService</code>  每隔 1 秒会检查一下这个  <code>CommitLog</code>  是否有新的数据写入。 <code>ReputMessageService</code>  自身维护了一个偏移量  <code>reputFromOffset</code> ，用以对比和  <code>CommitLog</code>  文件中的消息总偏移量的差距。当这两个偏移量不同的时候，就代表有新的消息到来了。</p>\n<p>如下图:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-03-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF.png\" alt=\"\"></p>\n<ul>\n<li><code>ReputMessageService</code>  是怎样推送消息的</li>\n</ul>\n<p>从上图中可以看见，  <code>ReputMessageService</code>  封装了一个  <code>DispatchRequest</code> ，然后通过  <code>DefaultMessageStore.doDispatch</code>  方法，转发了出去。虽说是转发了出去，但是并非直接发送给了消费者。</p>\n<p>而是转发给了  <code>CommitLogDispatcherBuildConsumeQueue</code> . 它主要是根据这条请求按照不同的队列  <code>ID</code>  创建不同的消费队列文件，并在内存中维护一份消费队列列表。然后将  <code>DispatchRequest</code>  请求中这条消息的消息偏移量、消息大小以及消息在发送时候附带的标签的  <code>Hash</code>  值写入到相应的消费队列文件中去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putMessagePositionInfo</span><span class=\"params\">(DispatchRequest dispatchRequest)</span> </span>&#123;</span><br><span class=\"line\">    ConsumeQueue cq = <span class=\"keyword\">this</span>.findConsumeQueue(dispatchRequest.getTopic(), dispatchRequest.getQueueId());</span><br><span class=\"line\">    cq.putMessagePositionInfoWrapper(dispatchRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后台通过 <code>FlushConsumeQueueService</code>  线程来定时的持久化到磁盘中，写文件和  <code>Broker</code>  写入 <code>MappedLogFile</code>  一样。只是位置不同。</p>\n<p>好家伙，到现在还没有给消息推送消息，自己先存起来了。</p>\n<p>而事实上，RocketMQ 并没有实现 Broker 端 发送消息给 消费者。 推模型的消息消费模式，是通过拉模式实现的。</p>\n<p>这里需要区分 广播模式 和 集群模型分开来说了。</p>\n<h5 id=\"广播模式-2\"><a class=\"markdownIt-Anchor\" href=\"#广播模式-2\">#</a> 广播模式</h5>\n<p>每个消费队列的偏移量肯定不能存储在  <code>Broker</code>  服务器端，因为多个消费者对于同一个队列的消费可能不一致，偏移量会互相覆盖掉。因此，在广播模式下，每个客户端的消费偏移量是存储在本地的，然后每隔  <code>5</code>  秒将内存中的  <code>offsetTable</code>  持久化到磁盘中。当首次从服务器获取可消费队列的时候，偏移量是直接从本地文件中读取的。</p>\n<h5 id=\"集群模式-2\"><a class=\"markdownIt-Anchor\" href=\"#集群模式-2\">#</a> 集群模式</h5>\n<p>在集群模式下，由于每个客户端所消费的消息队列不同，所以每个消息队列已经消费到哪里的消费偏移量是记录在  <code>Broker</code>  服务器端的。</p>\n<p>消费者客户端在内存中维护了一个  <code>offsetTable</code>  表，在  <code>Broker</code>  服务器端也维护了一个偏移量表。在消费者客户端， <code>RebalanceService</code>  服务会定时地 (默认 20 秒) 从  <code>Broker</code>  服务器获取当前客户端所需要消费的消息队列，并与当前消费者客户端的消费队列进行对比，看是否有变化。对于每个消费队列，会从  <code>Broker</code>  服务器查询这个队列当前的消费偏移量。然后根据这几个消费队列，创建对应的拉取请求  <code>PullRequest</code>  准备从  <code>Broker</code>  服务器拉取消息。当从  <code>Broker</code>  服务器拉取下来消息以后，只有当用户成功消费的时候，才会更新本地的偏移量表。本地的偏移量表再通过定时服务每隔  <code>5</code>  秒同步到  <code>Broker</code>  服务器端，维护在  <code>Broker</code>  服务器端的偏移量表也会每隔  <code>5</code>  秒钟序列化到磁盘中.</p>\n<p>那么重点来了，创建的 <code>PullRequest</code>  就会被放到  <code>pullRequestQueue</code>  中。</p>\n<h4 id=\"拉取消息-2\"><a class=\"markdownIt-Anchor\" href=\"#拉取消息-2\">#</a> 拉取消息</h4>\n<p>在 消费者启动 一文中，可以知道 消费者启动后，后台会一直运行一个  <code>PullMessageService</code>  线程。它会阻塞的从  <code>pullRequestQueue</code>  中获取  <code>PullRequest</code>  向 <code>Broker</code>  端发送请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 出队</span></span><br><span class=\"line\">            PullRequest pullRequest = <span class=\"keyword\">this</span>.pullRequestQueue.take();</span><br><span class=\"line\">            <span class=\"comment\">// 拉取消息</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pullMessage(pullRequest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>pullRequestQueue</code>  便是  <code>pull Message Request Queue</code>  了。(拉取消息请求的队列了)</p>\n<p>当真正尝试拉取消息之前，其会检查当前请求的内部缓存的消息数量、消息大小、消息阈值跨度是否超过了某个阈值，如果超过某个阈值，则推迟  <code>50</code>  毫秒重新执行这个请求，当执行完一些必要的检查之后，客户端会将用户指定的过滤信息以及一些其它必要消费字段封装到请求信息体中，然后才开始从  <code>Broker</code>  服务器拉取这个请求从当前偏移量开始的消息，默认一次性最多拉取  <code>32</code>  条，服务器返回的响应会告诉客户端这个队列下次开始拉取时的偏移量。客户端每次都会注册一个  <code>PullCallback</code>  回调，用以接受服务器返回的响应信息，根据响应信息的不同状态信息，然后修正这个请求的偏移量，并进行下次请求。</p>\n<p>对了，都有些什么时候会将  <code>PullRequest</code>  放入  <code>pullRequestQueue</code>  中的呢？</p>\n<ul>\n<li>重平衡的时候\n<ul>\n<li>有消费者加入，发生重平衡</li>\n<li>定时任务，发送重平衡。</li>\n</ul>\n</li>\n<li>消息消费失败，重试。</li>\n<li>启动的时候。</li>\n</ul>\n<p>这些都是会触发拉取消息的。</p>\n<p>最后，终于到最后一步了，消费消息。</p>\n<h4 id=\"消费消息\"><a class=\"markdownIt-Anchor\" href=\"#消费消息\">#</a> 消费消息</h4>\n<p>当把消息放在  <code>PullRequestQueue</code>  这个阻塞队列中之后，后台线程会不断从这个阻塞队列中获取  <code>PullRequest</code> . 如下图代码中所示。拿到了  <code>PullRequest</code>  则会提交了一个  <code>ConsumeRequest</code> . 我想这又被你猜到了。哈哈。这里将  <code>ConsumeRequest</code>   <code>submit</code>  给了一个后台线程  <code>consumeExecutor</code> 。接着往下看吧。该线程会每分钟执行一次。进行消息消费。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF8.png\" alt=\"\"></p>\n<p>依赖于用户指定的消息回调函数的不同，消息的消费分为两种：并发消费和有序消费。</p>\n<p>并发消费没有考虑消息发送的顺序，客户端从服务器获取到消息就会直接回调给用户。而有序消费会考虑每个队列消息发送的顺序，注意此处并不是每个话题消息发送的顺序，一定要记住  <code>RocketMQ</code>  控制消息的最细粒度是消息队列。当我们讲有序消费的时候，就是在说对于某个话题的某个队列，发往这个队列的消息，客户端接受消息的顺序与发送的顺序完全一致。</p>\n<h5 id=\"并发消费\"><a class=\"markdownIt-Anchor\" href=\"#并发消费\">#</a> 并发消费</h5>\n<p>当用户注册消息回调类的时候，如果注册的是  <code>MessageListenerConcurrently</code>  回调类，那么就认为用户不关心消息的顺序问题。我们在上文提到过每个  <code>PullRequest</code>  都关联了一个处理队列  <code>ProcessQueue</code> ，而每个处理队列又都关联了一颗消息树  <code>msgTreeMap</code> 。当客户端拉取到新的消息以后，其先将消息放入到这个请求所关联的处理队列的消息树中，然后提交一个消息消费请求，用以回调用户端的代码消费消息.</p>\n<p>提交给  <code>consumeExecutor</code>  之后，  <code>ConsumeRequest</code>  实现逻辑如下:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF9.png\" alt=\"\"></p>\n<h5 id=\"有序消费\"><a class=\"markdownIt-Anchor\" href=\"#有序消费\">#</a> 有序消费</h5>\n<p><code>RocketMQ</code>  的有序消费主要依靠两把锁，一把是维护在  <code>Broker</code>  端，一把维护在消费者客户端。 <code>Broker</code>  端有一个  <code>RebalanceLockManager</code>  服务，其内部维护了一个  <code>mqLockTable</code>  消息队列锁表:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF10.png\" alt=\"\"></p>\n<p>在有序消费的时候， <code>Broker</code>  需要确保任何一个队列在任何时候都只有一个客户端在消费它，都在被一个客户端所锁定。当客户端在本地根据消息队列构建  <code>PullRequest</code>  之前，会与  <code>Broker</code>  沟通尝试锁定这个队列，另外当进行有序消费的时候，客户端也会周期性地 (默认是  <code>20</code>  秒) 锁定所有当前需要消费的消息队列.</p>\n<p>代码逻辑如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 顺序消费</span></span><br><span class=\"line\"><span class=\"comment\">* 每秒 定时多实例消费的所有队列，上锁成功将 ProcessQueue的lock属性设置为true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.defaultMQPushConsumerImpl.messageModel())) &#123; <span class=\"comment\">/// 只支持集群模式</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.lockMQPeriodically();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span> * <span class=\"number\">1</span>, ProcessQueue.REBALANCE_LOCK_INTERVAL, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在  <code>Broker</code>  这端，每个客户端所锁定的消息队列对应的锁项  <code>LogEntry</code>  有一个上次锁定时的时间戳，当超过锁的超时时间 (默认是 60 秒) 后，也会判定这个客户端已经不再持有这把锁，以让其他客户端能够有序消费这个队列。</p>\n<p>在前面我们说到过  <code>RebalanceService</code>  均衡服务会定时地依据不同消费者数量分配消费队列。我们假设  <code>Consumer-1</code>  消费者客户端一开始需要消费  <code>3</code>  个消费队列，这个时候又加入了  <code>Consumer-2</code>  消费者客户端，并且分配到了  <code>MessageQueue-2</code>  消费队列。当  <code>Consumer-1</code>  内部的均衡服务检测到当前消费队列需要移除  <code>MessageQueue-2</code>  队列，这个时候，会首先解除  <code>Broker</code>  端的锁，确保新加入的  <code>Consumer-2</code>  消费者客户端能够成功锁住这个队列，以进行有序消费。</p>\n<p>消费者客户端每一次拉取消息请求，如果有发现新的消息，那么都会将这些消息封装为  <code>ConsumeRequest</code>  来喂给消费线程池，等待消费。如果消息特别多，这样一个队列可能有多个消费请求正在等待客户端消费，用户可能会先消费偏移量大的消息，后消费偏移量小的消息。所以消费同一队列的时候，需要一把锁以消费请求顺序化。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeMessageOrderlyService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConsumeMessageService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumeRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ProcessQueue processQueue;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MessageQueue messageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConsumeRequest</span><span class=\"params\">(ProcessQueue processQueue, MessageQueue messageQueue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processQueue = processQueue;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.messageQueue = messageQueue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ProcessQueue <span class=\"title\">getProcessQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> processQueue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">getMessageQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> messageQueue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object objLock = messageQueueLock.fetchLockObject(<span class=\"keyword\">this</span>.messageQueue);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objLock) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.defaultMQPushConsumerImpl.messageModel())|| (<span class=\"keyword\">this</span>.processQueue.isLocked() &amp;&amp; !<span class=\"keyword\">this</span>.processQueue.isLockExpired())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">boolean</span> continueConsume = <span class=\"keyword\">true</span>; continueConsume; ) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 每次获取消息的数量</span></span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> consumeBatchSize =</span><br><span class=\"line\">                            ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</span><br><span class=\"line\">                        <span class=\"comment\">// 拿到可以消费的消息列表。默认为 1 条。</span></span><br><span class=\"line\">                        List&lt;MessageExt&gt; msgs = <span class=\"keyword\">this</span>.processQueue.takeMessages(consumeBatchSize);</span><br><span class=\"line\">                        defaultMQPushConsumerImpl.resetRetryAndNamespace(msgs, defaultMQPushConsumer.getConsumerGroup());</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!msgs.isEmpty()) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">final</span> ConsumeOrderlyContext context = <span class=\"keyword\">new</span> ConsumeOrderlyContext(<span class=\"keyword\">this</span>.messageQueue);</span><br><span class=\"line\">                            ConsumeOrderlyStatus status = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            ConsumeMessageContext consumeMessageContext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// 消费者加锁</span></span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.processQueue.getConsumeLock().lock();</span><br><span class=\"line\">                                <span class=\"comment\">// 回调消费者消息</span></span><br><span class=\"line\">                                status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.processQueue.getConsumeLock().unlock();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            continueConsume = ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.processConsumeResult(msgs, status, context, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            continueConsume = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ConsumeMessageOrderlyService.<span class=\"keyword\">this</span>.tryLockLaterAndReconsume(<span class=\"keyword\">this</span>.messageQueue, <span class=\"keyword\">this</span>.processQueue, <span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样消息就消费完了。不得不说，这个消费的整体消费的逻辑是真的复杂。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>我们从生产者发送消息，到  <code>Broker</code>  端存储消息， 再到 消费者消费消息。将整个流程都跑通了。<br>\n每个过程都不是我们想象的那样直接发送消息给 <code>Broker</code> ， <code>Broker</code>  将消息直接写入硬盘， 消费者直接去 <code>Broker</code>  中拉取消息，拉取到之后直接调用客户端进行消费。</p>\n<p>接下来，我们会深入到  <code>RocketMQ</code>  某个特性的具体实现中去。会逐一分析 事务消息，延时消息，消息可靠性措施，载均衡，消息重放，消息过滤等功能的实现。</p>\n<p>下一篇文章：事务消息。请期待～</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-01-RocketMQ-Arch-Start/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-01-RocketMQ-Arch-Start/",
            "title": "RocketMQ系列-架构设计之启动",
            "date_published": "2021-09-28T02:26:00.000Z",
            "content_html": "<p>之前我们已经学习了 <code>RocketMQ</code>  是由四个部分组成的。这篇文章更加深入的来看看这个四个部分。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"nameserver\"><a class=\"markdownIt-Anchor\" href=\"#nameserver\">#</a>  <code>NameServer</code></h2>\n<p>接下来，我们来看  <code>NameServer</code>  的相关内容，我们都知道  <code>NameServer</code>  是  <code>RocketMQ</code>  的注册中心。那它肯定会有 服务发现，检查检查，路由等等功能， 我们就按照这个思路去看看  <code>NameServer</code>  是如何启动的。</p>\n<h3 id=\"namesrv-的启动过程\"><a class=\"markdownIt-Anchor\" href=\"#namesrv-的启动过程\">#</a>  <code>NameSrv</code>  的启动过程</h3>\n<p>我们在部署  <code>RocketMQ</code>  的时候，使用下面的命令启动了 <code>RocketMQ</code>  的 <code>NameServer</code> .</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure>\n<p>这条命令其实执行的是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh <span class=\"variable\">$&#123;ROCKETMQ_HOME&#125;</span>/bin/runserver.sh org.apache.rocketmq.namesrv.NamesrvStartup <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n<p>也就说，这条命令执行运行的  <code>NamesrvStartup</code>  类。</p>\n<p><code>NameSrv</code>  的启动其实就两步：</p>\n<ul>\n<li>封装配置参数： 根据命令行参数封装  <code>NameSrvConfig</code>  配置。 可以执行配置文件，会解析配置文件中的相关配置。</li>\n<li>初始化并启动  <code>NamesrvController</code> .\n<ul>\n<li>初始化:\n<ul>\n<li>对  <code>NameSrvController</code>  进行配置，</li>\n<li>创建远程  <code>netty Server</code> ,</li>\n<li>注册  <code>DefaultRequestProcessor</code>  ，处理各种连接请求，</li>\n<li>创建了两个定时任务：每  <code>10s</code>  扫描一次  <code>Broker</code>  列表，移除不存活的  <code>Broker</code>  。每 <code>10s</code>  打印一次配置属性。</li>\n<li>创建配置文件监听器，监听配置文件是否有变化。</li>\n</ul>\n</li>\n<li>启动：\n<ul>\n<li>启动  <code>netty Server</code>  : 实际上启动一个 Netty 服务。</li>\n<li>启动文件监听器。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>在启动过程中， <code>Broker</code>  的健康检测是通过定时任务来实现的。那路由功能是怎么实现的呢？</p>\n<p>这就要看 在  <code>NameServer</code>  中最重要的一个类了：  <code>DefaultRequetProcessor</code>  .  <code>DefaultRequestProcessor</code>  封装了各种连接请求的处理。比如 <code>Broker</code>  的注册，根据 <code>Topic</code>  获取路由信息等等。具体可以参考如下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RemotingCommand <span class=\"title\">processRequest</span><span class=\"params\">(ChannelHandlerContext ctx,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        RemotingCommand request)</span> <span class=\"keyword\">throws</span> RemotingCommandException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;receive request, &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>,</span><br><span class=\"line\">                request.getCode(),</span><br><span class=\"line\">                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),</span><br><span class=\"line\">                request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.PUT_KV_CONFIG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.putKVConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_KV_CONFIG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getKVConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.DELETE_KV_CONFIG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.deleteKVConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.QUERY_DATA_VERSION:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryBrokerTopicConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.REGISTER_BROKER:</span><br><span class=\"line\">            Version brokerVersion = MQVersion.value2Version(request.getVersion());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (brokerVersion.ordinal() &gt;= MQVersion.Version.V3_0_11.ordinal()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.registerBrokerWithFilterServer(ctx, request);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.registerBroker(ctx, request);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.UNREGISTER_BROKER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.unregisterBroker(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_ROUTEINFO_BY_TOPIC:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getRouteInfoByTopic(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_BROKER_CLUSTER_INFO:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getBrokerClusterInfo(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.WIPE_WRITE_PERM_OF_BROKER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wipeWritePermOfBroker(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_ALL_TOPIC_LIST_FROM_NAMESERVER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getAllTopicListFromNameserver(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.DELETE_TOPIC_IN_NAMESRV:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> deleteTopicInNamesrv(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_KVLIST_BY_NAMESPACE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getKVListByNamespace(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_TOPICS_BY_CLUSTER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getTopicsByCluster(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_NS:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getSystemTopicListFromNs(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_UNIT_TOPIC_LIST:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getUnitTopicList(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_HAS_UNIT_SUB_TOPIC_LIST:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getHasUnitSubTopicList(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getHasUnitSubUnUnitTopicList(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.UPDATE_NAMESRV_CONFIG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.updateConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RequestCode.GET_NAMESRV_CONFIG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getConfig(ctx, request);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码里实现了所有的 <code>Broker</code> ， <code>Producer</code> ， <code>Customer</code>  和 <code>NameServer</code>  交互的处理逻辑，包括路由功能等等。</p>\n<h3 id=\"nameserver的关闭\"><a class=\"markdownIt-Anchor\" href=\"#nameserver的关闭\">#</a>  <code>NameServer</code>  的关闭</h3>\n<p><code>NameServer</code>  的关闭就非常简单了.</p>\n<p><code>NameSrvStartUp</code>  在  <code>initialize</code>  和  <code>start</code>  之间，加入了 一个 关闭事件的监听器.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加关闭的回调。</span></span><br><span class=\"line\">Runtime.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> ShutdownHookThread(log, <span class=\"keyword\">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        controller.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>内部是使用  <code>NameSrvController</code>  的 <code>shutdown</code>  方法。<br>\n主要进行：</p>\n<ul>\n<li>关闭 <code>Netty</code>  服务</li>\n<li>关闭线程池</li>\n<li>关闭 <code>scheduledExecutorService</code></li>\n<li>关闭文件监听器</li>\n</ul>\n<h2 id=\"broker\"><a class=\"markdownIt-Anchor\" href=\"#broker\">#</a> Broker</h2>\n<ul>\n<li><code>Broker</code>  的启动过程</li>\n<li><code>Broker</code>  怎么样进行消息存储的</li>\n<li><code>Broker</code>  的内部运行原理是什么样的？</li>\n<li>关闭流程</li>\n</ul>\n<p>在  <code>RocketMQ</code>  的  <code>Broker</code>  这个启动环节下，我们可以直接找到 <a href=\"https://gitee.com/fangjiaxiaobai/source_code_read/blob/master/rocketmq/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java\"> <code>BrokerStartUp.java</code> </a> 这个类。</p>\n<h3 id=\"broker的启动过程\"><a class=\"markdownIt-Anchor\" href=\"#broker的启动过程\">#</a> Broker 的启动过程</h3>\n<p><code>Broker</code>  的启动本质上是启动了 一个 <code>Netty</code>  服务端和一个 <code>Netty</code>  客户端。 使用 <code>Netty</code>  客户端完成向 <code>NameSrv</code>  的注册，心跳检测，等数据交互。 使用 <code>Netty</code>  服务端处理  <code>Producer</code>  发送的消息，并将消息按照不同的消息类型存储下来。</p>\n<p>首先  <code>Broker</code>  依然还是会加载  <code>Broker</code>  的相关配置，包括：a. 命令行中指定的参数，比如 <code>mqbroker</code> ,-c 等， b. <code>-c</code>  指定的文件中的 <code>Broker</code>  属性。然后根据加载的 <code>NettyServerConfig</code>  (启动的 <code>Netty</code>  服务端的配置), <code>NettyClientConfig</code>  (启动的 <code>Netty</code>  客户端的配置),  <code>BrokerConfig</code> ( <code>Broker</code>  的配置),  <code>messageStoreConfig</code>  (存储消息的配置) 创建  <code>BrokerController</code> .  之后及时初始化 <code>BrokerController</code> ，注册 <code>Shutdown</code>  回调。最后启动 <code>BrokerController</code> 。   <code>shutdown</code>  回调其实没有什么可说的。我们再简单的看看初始化过程。</p>\n<h4 id=\"初始化过程\"><a class=\"markdownIt-Anchor\" href=\"#初始化过程\">#</a> 初始化过程</h4>\n<p>初始化过程是一个  <code>&quot;漫长&quot;</code>  的过程。一开始是在去加载一些数据，初始化会去加载 创建的 <code>topic</code>  数据，消息的消费偏移量，广播组，消费过滤数据等的数据，然后创建  <code>MessageStore</code>  对象，作用是存储消息。注意这个  <code>MessageStore</code>  是支持插件的形式扩展的。 如果数据加载成功之后，就会启动  <code>netty</code>  服务端。 代码中 启动了两个 netty 服务端:  <code>remotingServer</code>  和  <code>fastRemotingServer</code> 。然后就是初始化了一些线程池 用于注册 <code>Processor</code> 。 在注册  <code>Processor</code>  的过程中，可以看到  <code>fastRemotingServer</code>  和  <code>remotingServer</code>  除了端口不一样之外，  <code>fastRemotingServer</code>  没有 注册  <code>PullMessageProcessor</code>  . 也就是说  <code>fastRemotingServer</code>  不支持  <code>pullMessage</code>  请求。然后  <code>BrokerController</code>  创建很多的定时任务，比如：定时记录每天的消息数据，定时持久化消费者消息。定时持久化 消费者过滤时的数据情况 等。再就是 更新 <code>Broker</code>  的 <code>NameServer</code>  地址。 最后初始化事务，初始化权限，初始化 <code>RPC</code>  钩子。</p>\n<h4 id=\"启动过程\"><a class=\"markdownIt-Anchor\" href=\"#启动过程\">#</a> 启动过程</h4>\n<p>在完了初识话之后，下一步就是启动了。和 <code>NameServer</code>  一样的流程，先初始化，在 <code>start</code> . 启动过程分为以下几步:</p>\n<ul>\n<li>启动  <code>messageStore</code></li>\n<li>启动  <code>remotingServer</code></li>\n<li>启动  <code>fastRemotingServer</code></li>\n<li>启动文件监听器</li>\n<li>启动  <code>BrokerOutAPI</code>  , 向  <code>NameServer</code>  服务端发送相关请求的连接与断开等，定时扫描 <code>ResponseTable</code>  并触发回调。</li>\n<li>启动 <code>PullRequestHoldService</code> : 存储  <code>pull Message</code>  的请求，并触发执行 <code>pull Message</code> .</li>\n<li>启动定时任务，定时扫描不存活的生产者，消费者，消息过滤服务 (非 <code>tag</code>  过滤)。</li>\n<li>启动消息过滤服务。 消息过滤服务并非是基于 <code>tag</code>  的消息的过滤，而是在 <code>Broker</code>  端提供了一种更加细粒度的消息过滤控制。</li>\n<li><code>Broker</code>  的容灾处理</li>\n<li>定时任务：注册  <code>Broker</code>  到  <code>NameServer</code></li>\n<li>启动 <code>broker</code>  统计，无动作</li>\n<li>清理过期请求。</li>\n</ul>\n<h4 id=\"关闭过程\"><a class=\"markdownIt-Anchor\" href=\"#关闭过程\">#</a> 关闭过程</h4>\n<p>这个关闭流程这里就不多说了，就是把上面启动的过程挨个关闭就好了。具体细节可以参考  <code>org.apache.rocketmq.broker.BrokerController#shutdown()</code>  我们后面也会分析这部分的代码。 除了关闭上面启动的服务之外，在关闭的时候，需要将消息进行持久化。 比如  <code>ConsumerOffset</code> ,  <code>ConsumerFilter</code> , 这也是当服务再次启动时保证消息能够正常被消费的保障。</p>\n<h2 id=\"producer\"><a class=\"markdownIt-Anchor\" href=\"#producer\">#</a> Producer</h2>\n<p>消息发布的角色，支持分布式集群方式部署。 <code>Producer</code>  通过 MQ 的负载均衡模块选择相应的 <code>Broker</code>  集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p>\n<blockquote>\n<p>我们从最简单的一个示例来看，生产者的启动流程</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用GroupName初始化Producer</span></span><br><span class=\"line\">DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 指定NameSrv的地址: 也可以通过环境变量NAMESRV_ADDR来指定，则不需要下面这一行。</span></span><br><span class=\"line\">producer.setNamesrvAddr(<span class=\"string\">&quot;name-server1-ip:9876;name-server2-ip:9876&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 启动实例</span></span><br><span class=\"line\">producer.start();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建消息实例,指定 topic, tag, message body.</span></span><br><span class=\"line\">    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;TagA&quot;</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">        (<span class=\"string\">&quot;Hello RocketMQ !!&quot;</span>).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 发送消息给Broker</span></span><br><span class=\"line\">    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关闭生产者</span></span><br><span class=\"line\">producer.shutdown();</span><br></pre></td></tr></table></figure>\n<p>关于 生产者角色，我们应该了解什么？或者说，看到上面的代码，你想更深入的知道些什么吗？(我听到了你说，不想…)</p>\n<ul>\n<li>生产者是如何启动？启动过程中生产者都做了哪些事情？</li>\n<li>生产者是如何和 <code>Namesrv</code>  进行交互的？交互是什么信息？生产者是如何和 <code>NameSrv</code>  进行健康检查的？</li>\n<li>生产者是怎么样发送消息的？发送消息的过程是什么样的？</li>\n<li>生产者的关闭流程是什么样的？</li>\n</ul>\n<h3 id=\"生产者启动流程\"><a class=\"markdownIt-Anchor\" href=\"#生产者启动流程\">#</a> 生产者启动流程</h3>\n<h4 id=\"封装生产者的属性\"><a class=\"markdownIt-Anchor\" href=\"#封装生产者的属性\">#</a> 封装生产者的属性</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>我们可以通过  <code>DefaultMQProducer</code>  类创建一个生产者对象。 这个类我们打算发送消息的程序入口。需要注意的是：这个类的实例是<strong>线程安全</strong>的：在配置并启动进程后，该类可以被视为线程安全的，可以在多个线程上下文中使用。</p>\n<p><code>DefaultMQProducer</code>  提供了 <code>5</code>  个构造参数 ( <code>4.9.1</code>  版本，并非在一个构造方式中)。</p>\n<ul>\n<li><code>String namespace</code> : 生产者实例的命名空间。可以理解为 MQ 生产者的名称。</li>\n<li><code>String producerGroup</code> : 生产者组。 生产者组在概念上聚合了完全相同角色的生产者实例。 这对事务消息非常重要。对非事务性消息就没有太大关系了。(=&gt; 小白说：一类生产者。)</li>\n<li><code>RPCHook rpcHook</code> : 每个远程命令执行要执行的 RPC 回调。RPCHook 是一个接口，提供了两个方法 doBeforeRequest 和 doAfterResponse，表示在执行请求之前和接收返回之后分别执行相关逻辑；</li>\n<li><code>boolean enableMsgTrace</code> : 是否开启消息追踪</li>\n<li><code>String customizedTraceTopic</code> : 消息追踪日志使用的队列名字</li>\n<li><code>String nameSrvAddr</code> : 这个字段没有在构造方法中，我们可以手动调用 set 方法进行设置，也可以通过系统变量的形式进行设置。</li>\n</ul>\n<p>生产者在设置完对应的参数之后，就会调用 <code>Start()</code>  方法。  <code>start</code>  方法会设置 <code>group</code> , 然后调用在 构造方法中初始化的  <code>defaultMQProducerImpl</code>  实例。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-DefaultProducerImpl%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png\" alt=\"\"></p>\n<p>如上图</p>\n<ul>\n<li>生产者首先会检查  <code>producerGroup</code>  的合法性。</li>\n<li>然后设置 <code>ProducerGroup</code></li>\n<li>创建  <code>MQClientFactory</code> . 将 <code>producer</code>  注册到 <code>MQClientInstance</code>  中，</li>\n<li>初始化 <code>topicPushlishInfo</code> .  <code>topicPushlishInfo</code>  主要用于存放消息的路由信息。</li>\n<li>然后通过  <code>mQClientFactory.start()</code>  完成启动，这一步骤很重要，我们来看一下里面的具体实现.<br>\n<img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-MQInstance%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png\" alt=\"\">\n<ul>\n<li>1. 首先会设置  <code>NameServerAddr</code> 。前面有说过可以通过  <code>DefaultProducer</code>  的 <code>setNameSrvAddr</code>  方法手动设置，也可以通过系统变量的方式进行设置 <code>NameServer</code>  的地址： <code>System.setProperty(&quot;rocketmq.namesrv.domain&quot;, &quot;localhost&quot;);</code></li>\n<li>2. 开启定时任务：总共启动了 <code>5</code>  个定时器任务，分别是：定时更新 <code>NameServerAddr</code>  信息，定时更新 <code>topic</code>  的路由信息，定时清理下线的 <code>broker</code> ，定时持久化 <code>Consumer</code>  的 <code>Offset</code>  信息，定时调整线程池；</li>\n<li>3. <code>pullMessageService</code>  和 <code>rebalanceService</code>  被用在消费端的两个服务类，分别是：从 <code>broker</code>  拉取消息的服务和均衡消息队列服务，负责分配消费者可消费的消息队列</li>\n</ul>\n</li>\n<li>同步的发送心跳给所有的 <code>Broker</code> .</li>\n<li>开启定时任务：定时扫描过期的请求。</li>\n</ul>\n<h3 id=\"生产者发送消息\"><a class=\"markdownIt-Anchor\" href=\"#生产者发送消息\">#</a> 生产者发送消息</h3>\n<p>生产者启动完成之后，我们再看一下发送消息的过程:<br>\n 发送消息的逻辑主要是在  <code>sendDefaultImpl</code>  方法中。主要逻辑分成三步：1. 获取队列的路由信息，2. 获取  <code>MessageQueue</code> , 3. 发送消息。</p>\n<h4 id=\"获取队列路由信息\"><a class=\"markdownIt-Anchor\" href=\"#获取队列路由信息\">#</a> 获取队列路由信息</h4>\n<p>在 启动生产者流程中，已经将 <code>topic</code>  的路由信息存储到了  <code>topicPushlishInfo</code>  中，并以  <code>producerGroup</code>  为  <code>key</code> ,  <code>topicPushlishInfo</code>  为 Value ，存储到  <code>topicPublishInfoTable</code>  这个 <code>Map</code>  中。</p>\n<p>获取路由信息则是通过  <code>mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer)</code>  获取的。此方法根据 <code>topic</code>  获取路由信息，具体连接哪台 <code>nameServer</code> ，会从列表中顺序的选择 <code>nameServer</code> ，实现负载均衡；</p>\n<h4 id=\"获取messagequeue\"><a class=\"markdownIt-Anchor\" href=\"#获取messagequeue\">#</a> 获取 <code>MessageQueue</code></h4>\n<p>获取  <code>MessageQueue</code>  则是通过  <code>this.mqFaultStrategy.selectOneMessageQueue(tpInfo, lastBrokerName)</code>  来实现的。  <code>MQFaultStrategy</code>  这个类实现了选择  <code>MessageQueue</code>  的策略。主要有四种策略:</p>\n<ul>\n<li><code>latencyFaultTolerance</code> ：延迟容错对象，维护 <code>brokers</code>  的延迟信息；</li>\n<li><code>sendLatencyFaultEnable</code> ：延迟容错开关，默认不开启；</li>\n<li><code>latencyMax</code> ：延迟级别数组；</li>\n<li><code>notAvailableDuration</code>  ：根据延迟级别，对应 <code>broker</code>  不可用的时长；</li>\n</ul>\n<p>获取 <code>MessageQueue</code>  之后需要判定其对应的 <code>Broker</code>  是否可用，同时也需要和当前指定的 <code>brokerName</code>  进行匹配；如果没有获取到就选择一个延迟相对小的， <code>pickOneAtLeast</code>  会做排序处理；如果都不行就直接获取一个 <code>MessageQueue</code> ，不管其他条件了</p>\n<h4 id=\"发送消息\"><a class=\"markdownIt-Anchor\" href=\"#发送消息\">#</a> 发送消息</h4>\n<p>首先需要获取指定 <code>broker</code>  的地址，这要才能创建 <code>channel</code>  与 <code>broker</code>  连接；然后就是一些 <code>hook</code>  处理；接下来就是准备发送的消息头 <code>SendMessageRequestHeader</code> ，最后根据不同的发送策略执行发送消息。</p>\n<p>之前的文章中说过， <code>RocketMQ</code>  发送消息有三种方式：同步，异步和单向。具体的使用方法可以参考<a href=\"./1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B.md\">这篇文章</a>。在 <code>RocketMQ</code>  的生产者端可以发送多种类型的消息包括：延迟消息，顺序消息以及事务消息， 各种消息的发送过程我会在后面通过源码仔细和大家一起学习～。</p>\n<h3 id=\"生产者关闭流程\"><a class=\"markdownIt-Anchor\" href=\"#生产者关闭流程\">#</a> 生产者关闭流程</h3>\n<p>生产者的关闭主要有四步</p>\n<ul>\n<li>取消生产者的注册.</li>\n<li>关闭 <code>MqClient</code> =&gt; 主要是关闭生产者，关闭拉取消息服务，关闭定时任务服务，关闭远程 client，关闭负载均衡服务这 5 种服务。</li>\n<li>关闭 <code>Producer</code>  的定时任务</li>\n<li>修改状态。</li>\n</ul>\n<p>这样就完成了生产者的关闭流程。</p>\n<h3 id=\"生产者总结\"><a class=\"markdownIt-Anchor\" href=\"#生产者总结\">#</a> 生产者总结</h3>\n<p>生产者首先需要设置 <code>namesrv</code> ，或者指定其他方式更新 <code>namesrv</code> ；然后从 <code>namesrv</code>  获取 <code>topic</code>  的路由信息，路由信息包括 <code>broker</code>  以及 <code>Message Queue</code>  等信息，同时将路由信息保存在本地内存中，方便下次使用；最后从 <code>Message Queue</code>  列表中选择合适的 <code>Queue</code>  发送消息，实现负载均衡；</p>\n<h2 id=\"consumer\"><a class=\"markdownIt-Anchor\" href=\"#consumer\">#</a> Consumer</h2>\n<p>现在我们还剩下 消费者 的启动流程了。从一个简单的例子说起:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png\" alt=\"\"></p>\n<p>从图中可以看到使用 MQ 的消费者主要分成三部分： 1. 创建消费者对象，2. 配置消费的属性 nameServer, 消费起点，订阅主题，回调事件等。3. 启动消费者。</p>\n<h3 id=\"consumer的启动过程\"><a class=\"markdownIt-Anchor\" href=\"#consumer的启动过程\">#</a> Consumer 的启动过程</h3>\n<p>正如上文所说， 启动 <code>MQ</code>  消费者主要分为三部分，我们主要讲述第一部分和第三部分：创建 <code>Consumer</code>  对象，启动。</p>\n<h4 id=\"创建-consumer-对象\"><a class=\"markdownIt-Anchor\" href=\"#创建-consumer-对象\">#</a> 创建 Consumer 对象</h4>\n<p><code>RocketMQ</code>  支持两种消息消费模式， <code>pull</code>  模式 和  <code>push</code>  模式。  <code>pull</code>  模式是消费者主动拉取消息， <code>push</code>  模式是  <code>broker</code>  端主动推送消息给消息者端。可想而知， <code>push</code>  模式是不管消费者端死活的，只要有消息就会推给消费者端，不管消费者是否能消费完。而 <code>pull</code>  模式是不管 <code>Broker</code>  端的，可能会造成消息积压的问题。</p>\n<p><code>RocketMQ</code>  分别提供了 <code>pull</code>  模式 和  <code>push</code>  模式的消费者的支持。类结构如下图：</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-Consuomer%E7%B1%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<p>图中  <code>push</code>  模式，提供了  <code>MQPushConsumer</code> ( <code>DefaultMQPushConsumer</code> ) 类来实现。  <code>pull</code>  模式提供  <code>MQPullConsumer</code> ( <code>DefaultMQPullConsumer</code> ) 类来实现。但是这个已经标记为废弃，并在 <code>2022</code>  年会移除，提供了  <code>LitePullConsumer</code> ( <code>DefaultLitePullConsumer</code> ) 来实现 <code>Pull</code>  模式。</p>\n<h5 id=\"创建-defaultmqpushconsumer-对象\"><a class=\"markdownIt-Anchor\" href=\"#创建-defaultmqpushconsumer-对象\">#</a> 创建 DefaultMQPushConsumer 对象</h5>\n<p><code>DefaultMQPullConsumer</code>  对象的构造参数</p>\n<ul>\n<li><code>consumerGroup</code> : 消费者组</li>\n<li><code>namespace</code> : 生产者的  <code>Namespace</code></li>\n<li><code>allocateMessageQueueStrategy</code> : 消息队列分配算法</li>\n<li><code>rpcHook</code> :  <code>rpc</code>  的钩子，用在远程调用之前执行</li>\n<li><code>enableMsgTrace</code> : 是否跟踪消息轨迹</li>\n<li><code>customizedTraceTopic</code> : 跟踪消息轨迹使用 <code>topic</code></li>\n</ul>\n<p>在  <code>DefaultMQPushConsumer</code>  的构造方法中会创建  <code>DefaultMQPushConsumerImpl</code>  对象，我们后面所说的启动过程，其实就是  <code>DefaultMQPushConsumerImpl</code>  的启动过程，即  <code>DefaultMQPushConsumerImpl.start()</code> .</p>\n<h5 id=\"创建-defaultlitepullconsumer-对象\"><a class=\"markdownIt-Anchor\" href=\"#创建-defaultlitepullconsumer-对象\">#</a> 创建  <code>DefaultLitePullConsumer</code>  对象</h5>\n<p><code>DefaultLitePullConsumer</code>  对象的参数:</p>\n<ul>\n<li><code>namespace</code> : 生产者的命名空间</li>\n<li><code>consumerGroup</code> :  消费者组</li>\n<li><code>rpcHook</code> : RPC 的回调钩子</li>\n</ul>\n<p>在  <code>DefaultLitePullConsumer</code>  的构造方法中会创建  <code>defaultLitePullConsumerImpl</code>  对象。而后面的启动过程，即是  <code>DefaultLitePullConsumerImpl</code>  的启动过程。即  <code>DefaultLitePullConsumerImpl.start()</code> .</p>\n<h4 id=\"启动\"><a class=\"markdownIt-Anchor\" href=\"#启动\">#</a> 启动</h4>\n<p>这里我再把使用 DefaultMQPushConsumer 消费消息的案例 粘贴到这里</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png\" alt=\"\"></p>\n<p>我们主要看  <code>consumer.start()</code>  内部的具体实现。</p>\n<h5 id=\"push模式-defaultmqpushconsumerimplstart\"><a class=\"markdownIt-Anchor\" href=\"#push模式-defaultmqpushconsumerimplstart\">#</a> push 模式: DefaultMQPushConsumerImpl.start ()</h5>\n<ul>\n<li>检查必要的参数 <code>consumerGroup</code> , 消费模式，消费起点，负载策略等。</li>\n<li>拷贝订阅关系，绑定到重试 <code>topic</code> , 以防止消费者  <code>ack</code>  失败。</li>\n<li>创建 <code>MQClientInstance</code>  实例。这里是一种单例模式。</li>\n<li>配置消费者再平衡的消费者组，消息模式，消息的分配策略，  <code>MQClientInstance</code>  实例。</li>\n<li>实例化消息拉取的包装类 并注册消息过滤的钩子</li>\n<li>加载消息的消费偏移量。 如果是广播消息从本地获取偏移数据，如果是集群消息的话，则从远程获取偏移数据</li>\n<li>启动消息消费服务。这里只是启动消费服务，但是没有启动开始消费消息。</li>\n<li>绑定消费者  <code>group</code>  和 消费者</li>\n<li>启动  <code>MQ Client Instance</code> . 这里，在生产者中也调用了  <code>mQClientFactory.start()</code> ; 方法。有个疑问，为什么消费者会启动消息推送服务呢？因为在 <code>push</code>  模式下，消费超时的消息会重新发送给 <code>Broker</code> 。所以是会使用消息推送服务的.</li>\n<li>从 <code>NameServer</code>  拉取 <code>topic</code>  的订阅信息</li>\n<li>向 <code>Broker</code>  校验客户端</li>\n<li>向所有的 <code>Broker</code>  的 <code>master</code>  节点发送心跳包，并上传 <code>FilterClass</code>  源文件给 <code>FilterServer</code></li>\n<li>立即消费消息： 将当前 <code>consumer</code>  负载得到的 <code>MessageQueue</code>  全部添加到 <code>PullMessageService.pullRequestQueue</code>  (阻塞队列) 然后 <code>PullMessageService</code>  服务会开始拉取消息。消费消息。</li>\n</ul>\n<h5 id=\"pull模式-defaultlitepullconsumerimplstart\"><a class=\"markdownIt-Anchor\" href=\"#pull模式-defaultlitepullconsumerimplstart\">#</a>  <code>pull</code>  模式:  <code>DefaultLitePullConsumerImpl.start()</code></h5>\n<p>先看下  <code>DefaultLitePullConsumer</code>  的一个简单使用:</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/2-01-DefaultLitePullConsumer%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png\" alt=\"\"></p>\n<p><code>DefaultLitePullConsumer</code>  的实现代码要比   <code>DefaultMQPushConsumer</code>  的代码 规整很多。在  <code>start()</code>  方法中定义了很多的子方法进行调用。</p>\n<ul>\n<li>检查属性配置是否合法。</li>\n<li>初始化  <code>MqClientInstance</code> .\n<ul>\n<li>创建  <code>MQClientInstance</code>  实例</li>\n<li>注册  <code>consumerGroup</code>  和 当前消费者的关系</li>\n</ul>\n</li>\n<li>初始化 消息消费的 再平衡 服务。</li>\n<li>配置消费者再平衡的消费者组，消息模式，消息的分配策略，  <code>MQClientInstance</code>  实例。</li>\n<li>实例化消息拉取的包装类 并注册消息过滤的钩子</li>\n<li>加载消息的消费偏移量。 如果是广播消息从本地获取偏移数据，如果是集群消息的话，则从远程获取偏移数据</li>\n<li>启动  <code>MqClientInstance</code>  实例\n<ul>\n<li>设置  <code>NameServer</code>  的地址</li>\n<li>启动  <code>remoteClient</code> . 底层使用的通讯框架是 <code>Netty</code> ，提供了实现类 <code>NettyRemotingClient</code></li>\n<li>开启定时任务</li>\n<li>启动拉取消息的服务</li>\n<li>启动负载均衡服务</li>\n<li>启动推送消息的服务</li>\n<li>修改服务的状态为启动成功</li>\n</ul>\n</li>\n<li>启动后操作\n<ul>\n<li>如果是广播的模式：更新 <code>topic</code>  的订阅关系</li>\n<li>更新消息拉取任务</li>\n<li>拉取 <code>Topic</code>  的 <code>messageQueue</code> .</li>\n<li>检查  <code>Broker Client</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"pull-模式-和-push-模式的对比\"><a class=\"markdownIt-Anchor\" href=\"#pull-模式-和-push-模式的对比\">#</a> Pull 模式 和 push 模式的对比</h5>\n<p>现在去谈 push 和 pull 两种模式的对比，还为时尚早，我就先从启动上来看下，两种方式启动的不同点:</p>\n<ul>\n<li><code>pull</code>  模式没有拷贝订阅关系，也就是说  <code>pull</code>  模式下， <code>RocketMQ</code>  是没有提供重投机制的。</li>\n<li><code>pull</code>  模式没有和  <code>Broker</code>  保持心跳包。 如果消费者过多的时候，push 模式必然会对 Broker 造成比较啊的压力。</li>\n</ul>\n<h3 id=\"消费者总结\"><a class=\"markdownIt-Anchor\" href=\"#消费者总结\">#</a> 消费者总结</h3>\n<p><code>RocketMQ</code>  对  <code>pull</code>  和  <code>push</code>  两种消息的消费模式提供了支持。 <code>pull</code>  模式，对应的实现是  <code>DefaultMqLitePullConsumer</code> 。  <code>push</code>  模式对应的实现是  <code>DefaultMqPushConsumer</code> . 仅仅对启动过程，两者的启动过程稍有不同。 <code>Push</code>  模式下， <code>RocketMQ</code>  封装了 消息消费的重投机制， <code>pull</code>  模式则没有，一切都需要消费者自己去实现。  <code>push</code>  模式会把 根据  <code>MessageQueue</code>  的分配策略，将 <code>MessageQueue</code>  拉取到本地，存储到阻塞队列中，然后通过回调消费者注册监听器进行消费。  <code>pull</code>  模式则通过在消费逻辑中定时的轮询获取消息进行消费。  下一篇文章，我会仔细的分析消息消费的过程。</p>\n<p>不管是 <code>Pull</code>  模式，还是 <code>push</code>  模式，在启动过程都是 创建  <code>MqClientInstance</code>  实例，并启动。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/",
            "title": "RocketMQ样例:事务消息",
            "date_published": "2021-09-23T09:50:00.000Z",
            "content_html": "<p>事务消息共有三种状态，提交状态、回滚状态、中间状态：</p>\n<p><code>TransactionStatus.CommitTransaction</code> : 提交事务，它允许消费者消费此消息。<br>\n <code>TransactionStatus.RollbackTransaction</code> : 回滚事务，它代表该消息将被删除，不允许被消费。<br>\n <code>TransactionStatus.Unknown</code> : 中间状态，它代表需要检查消息队列来确定状态。</p>\n<h2 id=\"发送事务消息样例\"><a class=\"markdownIt-Anchor\" href=\"#发送事务消息样例\">#</a> 发送事务消息样例</h2>\n<h3 id=\"创建事务性生产者\"><a class=\"markdownIt-Anchor\" href=\"#创建事务性生产者\">#</a> 创建事务性生产者</h3>\n<p>使用  <code>TransactionMQProducer</code>  类创建生产者，并指定唯一的  <code>ProducerGroup</code> ，就可以设置自定义线程池来处理这些检查请求。执行本地事务后、需要根据执行结果对消息队列进行回复。回传的事务状态在请参考前一节。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionProducer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">       TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\">       TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">       ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">2000</span>), <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">               Thread thread = <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">               thread.setName(<span class=\"string\">&quot;client-transaction-msg-check-thread&quot;</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       producer.setExecutorService(executorService);</span><br><span class=\"line\">       producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">       producer.start();</span><br><span class=\"line\">       String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;TagA&quot;</span>, <span class=\"string\">&quot;TagB&quot;</span>, <span class=\"string\">&quot;TagC&quot;</span>, <span class=\"string\">&quot;TagD&quot;</span>, <span class=\"string\">&quot;TagE&quot;</span>&#125;;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               Message msg =</span><br><span class=\"line\">                   <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest1234&quot;</span>, tags[i % tags.length], <span class=\"string\">&quot;KEY&quot;</span> + i,</span><br><span class=\"line\">                       (<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">               SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">               System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">               Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">               e.printStackTrace();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       producer.shutdown();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、实现事务的监听接口<br>\n当发送半消息成功时，我们使用  <code>executeLocalTransaction</code>  方法来执行本地事务。它返回前一节中提到的三个事务状态之一。 <code>checkLocalTransaction</code>  方法用于检查本地事务状态，并回应消息队列的检查请求。它也是返回前一节中提到的三个事务状态之一。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionListener</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> AtomicInteger transactionIndex = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">executeLocalTransaction</span><span class=\"params\">(Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> value = transactionIndex.getAndIncrement();</span><br><span class=\"line\">      <span class=\"keyword\">int</span> status = value % <span class=\"number\">3</span>;</span><br><span class=\"line\">      localTrans.put(msg.getTransactionId(), status);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">checkLocalTransaction</span><span class=\"params\">(MessageExt msg)</span> </span>&#123;</span><br><span class=\"line\">      Integer status = localTrans.get(msg.getTransactionId());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != status) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">              <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">              <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事务消息使用上的限制\"><a class=\"markdownIt-Anchor\" href=\"#事务消息使用上的限制\">#</a> 事务消息使用上的限制</h3>\n<ul>\n<li>事务消息不支持延时消息和批量消息。</li>\n</ul>\n<p>为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为  <code>15</code>  次，但是用户可以通过  <code>Broker</code>  配置文件的  <code>transactionCheckMax</code>  参数来修改此限制。如果已经检查某条消息超过  <code>N</code>  次的话（  <code>N = transactionCheckMax</code>  ） 则  <code>Broker</code>  将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写  <code>AbstractTransactionalMessageCheckListener</code>  类来修改这个行为。</p>\n<p>事务消息将在  <code>Broker</code>  配置文件中的参数  <code>transactionTimeout</code>  这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性  <code>CHECK_IMMUNITY_TIME_IN_SECONDS</code>  来改变这个限制，该参数优先于  <code>transactionTimeout</code>  参数。</p>\n<ul>\n<li>事务性消息可能不止一次被检查或消费。</li>\n</ul>\n<p>提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过  <code>RocketMQ</code>  本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。<br>\n事务消息的生产者  <code>ID</code>  不能与其他类型消息的生产者  <code>ID</code>  共享。与其他类型的消息不同，事务消息允许反向查询、 <code>MQ</code>  服务器能通过它们的生产者  <code>ID</code>  查询到消费者。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/",
            "title": "RocketMQ样例:过滤消息",
            "date_published": "2021-09-23T09:30:00.000Z",
            "content_html": "<p>在大多数情况下， <code>TAG</code>  是一个简单而有用的设计，其可以来选择您想要的消息。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;CID_EXAMPLE&quot;</span>);</span><br><span class=\"line\">consumer.subscribe(<span class=\"string\">&quot;TOPIC&quot;</span>, <span class=\"string\">&quot;TAGA || TAGB || TAGC&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>消费者将接收包含 <code>TAGA</code>  或 <code>TAGB</code>  或 <code>TAGC</code>  的消息。但是限制是一个消息只能有一个标签，这对于复杂的场景可能不起作用。在这种情况下，可以使用 <code>SQL</code>  表达式筛选消息。SQL 特性可以通过发送消息时的属性来进行计算。在 <code>RocketMQ</code>  定义的语法下，可以实现一些简单的逻辑。下面是一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------</span><br><span class=\"line\">| message  |</span><br><span class=\"line\">|----------|  a &gt; 5 AND b = &#x27;abc&#x27;</span><br><span class=\"line\">| a = 10   |  --------------------&gt; Gotten</span><br><span class=\"line\">| b = &#x27;abc&#x27;|</span><br><span class=\"line\">| c = true |</span><br><span class=\"line\">------------</span><br><span class=\"line\">------------</span><br><span class=\"line\">| message  |</span><br><span class=\"line\">|----------|   a &gt; 5 AND b = &#x27;abc&#x27;</span><br><span class=\"line\">| a = 1    |  --------------------&gt; Missed</span><br><span class=\"line\">| b = &#x27;abc&#x27;|</span><br><span class=\"line\">| c = true |</span><br><span class=\"line\">------------</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<p><code>RocketMQ</code>  只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。</p>\n<ul>\n<li>数值比较，比如： <code>&gt;</code> ， <code>&gt;=</code> ， <code>&lt;</code> ， <code>&lt;=</code> ， <code>BETWEEN</code> ， <code>=</code> ；</li>\n<li>字符比较，比如： <code>=</code> ， <code>&lt;&gt;</code> ， <code>IN</code> ；</li>\n<li><code>IS NULL </code> 或者  <code>IS NOT NUL</code> L；</li>\n<li>逻辑符号  <code>AND</code> ， <code>OR</code> ， <code>NOT</code> ；</li>\n<li>常量支持类型为：</li>\n<li>数值，比如： <code>123</code> ， <code>3.1415</code> ；</li>\n<li>字符，比如： <code>'abc'</code> ，必须用单引号包裹起来；</li>\n<li><code>NULL</code> ，特殊的常量</li>\n<li>布尔值， <code>TRUE</code>  或  <code>FALSE</code></li>\n<li>只有使用 <code>push</code>  模式的消费者才能用使用 <code>SQL92</code>  标准的 <code>sql</code>  语句，接口如下： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(finalString topic, <span class=\"keyword\">final</span> MessageSelector messageSelector)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用样例\"><a class=\"markdownIt-Anchor\" href=\"#使用样例\">#</a> 使用样例</h2>\n<h3 id=\"生产者样例\"><a class=\"markdownIt-Anchor\" href=\"#生产者样例\">#</a> 生产者样例</h3>\n<p>发送消息时，你能通过 <code>putUserProperty</code>  来设置消息的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">producer.start();</span><br><span class=\"line\">Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span>,</span><br><span class=\"line\">   tag,</span><br><span class=\"line\">   (<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 设置一些属性</span></span><br><span class=\"line\">msg.putUserProperty(<span class=\"string\">&quot;a&quot;</span>, String.valueOf(i));</span><br><span class=\"line\">SendResult sendResult = producer.send(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">producer.shutdown();</span><br></pre></td></tr></table></figure>\n<h3 id=\"消费者样例\"><a class=\"markdownIt-Anchor\" href=\"#消费者样例\">#</a> 消费者样例</h3>\n<p>用 <code>MessageSelector.bySql</code>  来使用 <code>sql</code>  筛选消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;please_rename_unique_group_name_4&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 只有订阅的消息有这个属性a, a &gt;=0 and a &lt;= 3</span></span><br><span class=\"line\">consumer.subscribe(<span class=\"string\">&quot;TopicTest&quot;</span>, MessageSelector.bySql(<span class=\"string\">&quot;a between 0 and 3&quot;</span>);</span><br><span class=\"line\">consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">consumer.start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/",
            "title": "RocketMQ样例:批量消息",
            "date_published": "2021-09-23T09:19:00.000Z",
            "content_html": "<h2 id=\"批量消息样例\"><a class=\"markdownIt-Anchor\" href=\"#批量消息样例\">#</a> 批量消息样例</h2>\n<p>批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的 <code>topic</code> ，相同的 <code>waitStoreMsgOK</code> ，而且不能是延时消息。此外，这一批消息的总大小不应超过 <code>4MB</code> 。</p>\n<h2 id=\"发送批量消息\"><a class=\"markdownIt-Anchor\" href=\"#发送批量消息\">#</a> 发送批量消息</h2>\n<p>如果您每次只发送不超过 <code>4MB</code>  的消息，则很容易使用批处理，样例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String topic = <span class=\"string\">&quot;BatchTest&quot;</span>;</span><br><span class=\"line\">List&lt;Message&gt; messages = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">messages.add(<span class=\"keyword\">new</span> Message(topic, <span class=\"string\">&quot;TagA&quot;</span>, <span class=\"string\">&quot;OrderID001&quot;</span>, <span class=\"string\">&quot;Hello world 0&quot;</span>.getBytes()));</span><br><span class=\"line\">messages.add(<span class=\"keyword\">new</span> Message(topic, <span class=\"string\">&quot;TagA&quot;</span>, <span class=\"string\">&quot;OrderID002&quot;</span>, <span class=\"string\">&quot;Hello world 1&quot;</span>.getBytes()));</span><br><span class=\"line\">messages.add(<span class=\"keyword\">new</span> Message(topic, <span class=\"string\">&quot;TagA&quot;</span>, <span class=\"string\">&quot;OrderID003&quot;</span>, <span class=\"string\">&quot;Hello world 2&quot;</span>.getBytes()));</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   producer.send(messages);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">   <span class=\"comment\">//处理error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息列表分割\"><a class=\"markdownIt-Anchor\" href=\"#消息列表分割\">#</a> 消息列表分割</h2>\n<p>复杂度只有当你发送大批量时才会增长，你可能不确定它是否超过了大小限制（ <code>4MB</code> ）。这时候你最好把你的消息列表分割一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListSplitter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">Message</span>&gt;&gt; </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIZE_LIMIT = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Message&gt; messages;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> currIndex;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListSplitter</span><span class=\"params\">(List&lt;Message&gt; messages)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.messages = messages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currIndex &lt; messages.size(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = getStartIndex();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextIndex = startIndex;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; nextIndex &lt; messages.size(); nextIndex++) &#123;</span><br><span class=\"line\">            Message message = messages.get(nextIndex); </span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmpSize = calcMessageSize(message);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmpSize + totalSize &gt; SIZE_LIMIT) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                totalSize += tmpSize; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Message&gt; subList = messages.subList(startIndex, nextIndex); </span><br><span class=\"line\">        currIndex = nextIndex;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getStartIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Message currMessage = messages.get(currIndex); </span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpSize = calcMessageSize(currMessage); </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmpSize &gt; SIZE_LIMIT) &#123;</span><br><span class=\"line\">            currIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">            Message message = messages.get(curIndex); </span><br><span class=\"line\">            tmpSize = calcMessageSize(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currIndex; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">calcMessageSize</span><span class=\"params\">(Message message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpSize = message.getTopic().length() + message.getBody().length(); </span><br><span class=\"line\">        Map&lt;String, String&gt; properties = message.getProperties();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">            tmpSize += entry.getKey().length() + entry.getValue().length(); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmpSize = tmpSize + <span class=\"number\">20</span>; <span class=\"comment\">// 增加⽇日志的开销20字节</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSize; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//把大的消息分裂成若干个小的消息</span></span><br><span class=\"line\">ListSplitter splitter = <span class=\"keyword\">new</span> ListSplitter(messages);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (splitter.hasNext()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      List&lt;Message&gt;  listItem = splitter.next();</span><br><span class=\"line\">      producer.send(listItem);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">      <span class=\"comment\">//处理error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/",
            "title": "RocketMQ样例:延时消息",
            "date_published": "2021-09-23T09:17:00.000Z",
            "content_html": "<h2 id=\"启动消费者等待传入订阅消息\"><a class=\"markdownIt-Anchor\" href=\"#启动消费者等待传入订阅消息\">#</a> 启动消费者等待传入订阅消息</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledMessageConsumer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实例化消费者</span></span><br><span class=\"line\">      DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;ExampleConsumer&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 订阅Topics</span></span><br><span class=\"line\">      consumer.subscribe(<span class=\"string\">&quot;TestTopic&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 注册消息监听者</span></span><br><span class=\"line\">      consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; messages, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (MessageExt message : messages) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// Print approximate delay time period</span></span><br><span class=\"line\">                  System.out.println(<span class=\"string\">&quot;Receive message[msgId=&quot;</span> + message.getMsgId() + <span class=\"string\">&quot;] &quot;</span> + (System.currentTimeMillis() - message.getBornTimestamp()) + <span class=\"string\">&quot;ms later&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 启动消费者</span></span><br><span class=\"line\">      consumer.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"发送延时消息\"><a class=\"markdownIt-Anchor\" href=\"#发送延时消息\">#</a> 发送延时消息</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledMessageProducer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实例化一个生产者来产生延时消息</span></span><br><span class=\"line\">      DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;ExampleProducerGroup&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 启动生产者</span></span><br><span class=\"line\">      producer.start();</span><br><span class=\"line\">      <span class=\"keyword\">int</span> totalMessagesToSend = <span class=\"number\">100</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalMessagesToSend; i++) &#123;</span><br><span class=\"line\">          Message message = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TestTopic&quot;</span>, (<span class=\"string\">&quot;Hello scheduled message &quot;</span> + i).getBytes());</span><br><span class=\"line\">          <span class=\"comment\">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span></span><br><span class=\"line\">          message.setDelayTimeLevel(<span class=\"number\">3</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">          producer.send(message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 关闭生产者</span></span><br><span class=\"line\">      producer.shutdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a class=\"markdownIt-Anchor\" href=\"#验证\">#</a> 验证</h2>\n<p>您将会看到消息的消费比存储时间晚 <code>10</code>  秒。</p>\n<h2 id=\"延时消息的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#延时消息的使用场景\">#</a> 延时消息的使用场景</h2>\n<p>比如电商里，提交了一个订单就可以发送一个延时消息， <code>1h</code>  后去检查这个订单的状态，如果还是未付款就取消订单释放库存。</p>\n<h2 id=\"延时消息的使用限制\"><a class=\"markdownIt-Anchor\" href=\"#延时消息的使用限制\">#</a> 延时消息的使用限制</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// org/apache/rocketmq/store/config/MessageStoreConfig.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String messageDelayLevel = <span class=\"string\">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>现在 <code>RocketMq</code>  并不支持任意时间的延时，需要设置几个固定的延时等级，从 <code>1s</code>  到 <code>2h</code>  分别对应着等级 1 到 18 消息消费失败会进入延时消息队列，消息发送时间与设置的延时等级和重试次数有关，详见代码 <code>SendMessageProcessor.java</code></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/",
            "title": "RocketMQ样例:全局顺序消息",
            "date_published": "2021-09-06T09:17:00.000Z",
            "content_html": "<p>消息有序指的是可以按照消息的发送顺序来消费 ( <code>FIFO</code> )。 <code>RocketMQ</code>  可以严格的保证消息有序，可以分为分区有序或者全局有序。</p>\n<p>顺序消费的原理解析：在默认的情况下消息发送会采取 <code>Round Robin</code>  轮询方式把消息发送到不同的 <code>queue</code>  (分区队列)；而消费消息的时候从多个 <code>queue</code>  上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个 <code>queue</code>  中，消费的时候只从这个 <code>queue</code>  上依次拉取，则就保证了顺序。当发送和消费参与的 <code>queue</code>  只有一个，则是全局有序；如果多个 <code>queue</code>  参与，则为分区有序，即相对每个 <code>queue</code> ，消息都是有序的。</p>\n<p>下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个 <code>OrderId</code>  获取到的肯定是同一个队列。</p>\n<p>2.1 顺序消息生产</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.order2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Producer，发送顺序消息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       producer.setNamesrvAddr(<span class=\"string\">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">       String[] tags = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;TagA&quot;</span>, <span class=\"string\">&quot;TagC&quot;</span>, <span class=\"string\">&quot;TagD&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 订单列表</span></span><br><span class=\"line\">       List&lt;OrderStep&gt; orderList = <span class=\"keyword\">new</span> Producer().buildOrders();</span><br><span class=\"line\"></span><br><span class=\"line\">       Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">       SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">       String dateStr = sdf.format(date);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 加个时间前缀</span></span><br><span class=\"line\">           String body = dateStr + <span class=\"string\">&quot; Hello RocketMQ &quot;</span> + orderList.get(i);</span><br><span class=\"line\">           Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span>, tags[i % tags.length], <span class=\"string\">&quot;KEY&quot;</span> + i, body.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">           SendResult sendResult = producer.send(msg, <span class=\"keyword\">new</span> MessageQueueSelector() &#123;</span><br><span class=\"line\">               <span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">select</span><span class=\"params\">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">                   Long id = (Long) arg;  <span class=\"comment\">//根据订单id选择发送queue</span></span><br><span class=\"line\">                   <span class=\"keyword\">long</span> index = id % mqs.size();</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> mqs.get((<span class=\"keyword\">int</span>) index);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;, orderList.get(i).getOrderId());<span class=\"comment\">//订单id</span></span><br><span class=\"line\"></span><br><span class=\"line\">           System.out.println(String.format(<span class=\"string\">&quot;SendResult status:%s, queueId:%d, body:%s&quot;</span>,</span><br><span class=\"line\">               sendResult.getSendStatus(),</span><br><span class=\"line\">               sendResult.getMessageQueue().getQueueId(),</span><br><span class=\"line\">               body));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       producer.shutdown();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 订单的步骤</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderStep</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> orderId;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getOrderId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> orderId;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrderId</span><span class=\"params\">(<span class=\"keyword\">long</span> orderId)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.orderId = orderId;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDesc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDesc</span><span class=\"params\">(String desc)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;OrderStep&#123;&quot;</span> +</span><br><span class=\"line\">               <span class=\"string\">&quot;orderId=&quot;</span> + orderId +</span><br><span class=\"line\">               <span class=\"string\">&quot;, desc=&#x27;&quot;</span> + desc + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">               <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生成模拟订单数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> List&lt;OrderStep&gt; <span class=\"title\">buildOrders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       List&lt;OrderStep&gt; orderList = <span class=\"keyword\">new</span> ArrayList&lt;OrderStep&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">       OrderStep orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111039L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;创建&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111065L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;创建&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111039L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;付款&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103117235L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;创建&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111065L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;付款&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103117235L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;付款&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111065L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;完成&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111039L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;推送&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103117235L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;完成&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       orderDemo = <span class=\"keyword\">new</span> OrderStep();</span><br><span class=\"line\">       orderDemo.setOrderId(<span class=\"number\">15103111039L</span>);</span><br><span class=\"line\">       orderDemo.setDesc(<span class=\"string\">&quot;完成&quot;</span>);</span><br><span class=\"line\">       orderList.add(orderDemo);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> orderList;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.2 顺序消费消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.order2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 顺序消息消费，带事务方式（应用可控制Offset什么时候提交）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerInOrder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;please_rename_unique_group_name_3&quot;</span>);</span><br><span class=\"line\">       consumer.setNamesrvAddr(<span class=\"string\">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        * 如果非第一次启动，那么按照上次消费的位置继续消费</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">       consumer.subscribe(<span class=\"string\">&quot;TopicTest&quot;</span>, <span class=\"string\">&quot;TagA || TagC || TagD&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerOrderly() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> ConsumeOrderlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class=\"line\">               context.setAutoCommit(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (MessageExt msg : msgs) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序</span></span><br><span class=\"line\">                   System.out.println(<span class=\"string\">&quot;consumeThread=&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;queueId=&quot;</span> + msg.getQueueId() + <span class=\"string\">&quot;, content:&quot;</span> + <span class=\"keyword\">new</span> String(msg.getBody()));</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//模拟业务逻辑处理中...</span></span><br><span class=\"line\">                   TimeUnit.SECONDS.sleep(random.nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Consumer Started.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/",
            "title": "RocketMQ样例:基本的消息生产和消费",
            "date_published": "2021-09-04T09:17:00.000Z",
            "content_html": "<p>首先我们来学习一个简单的消费生产和消费的 <code>demo</code> .</p>\n<h2 id=\"生产消息\"><a class=\"markdownIt-Anchor\" href=\"#生产消息\">#</a> 生产消息</h2>\n<p><code>RocketMQ</code> ， 给我们提供了三种简单的消息生产方式， <code>1.同步发送</code> ，  <code>2.异步发送</code> ，  <code>3.直接发送，不关心发送结果</code> 。</p>\n<p>这三种方式，分别对应三种不同的应用场景</p>\n<h3 id=\"同步发送\"><a class=\"markdownIt-Anchor\" href=\"#同步发送\">#</a> 同步发送</h3>\n<p>这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。这种发送方式，在发送成功之后，才会返回，否则会一直阻塞，直到抛出异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SyncProducer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消息生产者Producer</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">    \tproducer.setNamesrvAddr(<span class=\"string\">&quot;192.168.1.65:9876&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 启动Producer实例</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    \t    <span class=\"comment\">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class=\"line\">    \t    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">        \t<span class=\"string\">&quot;TagA&quot;</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">        \t(<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">        \t);</span><br><span class=\"line\">        \t<span class=\"comment\">// 发送消息到一个Broker</span></span><br><span class=\"line\">            SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">            <span class=\"comment\">// 通过sendResult返回消息是否成功送达</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class=\"line\">    \tproducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步发送\"><a class=\"markdownIt-Anchor\" href=\"#异步发送\">#</a> 异步发送</h3>\n<p>异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待 <code>Broker</code>  的响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncProducer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消息生产者Producer</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">&quot;192.168.1.65:9876&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 启动Producer实例</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        producer.setRetryTimesWhenSendAsyncFailed(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> messageCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 根据消息数量实例化倒计时计算器</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> CountDownLatch2 countDownLatch = <span class=\"keyword\">new</span> CountDownLatch2(messageCount);</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageCount; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">            \t<span class=\"comment\">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;TagA&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;OrderID188&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Hello world&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                <span class=\"comment\">// SendCallback接收异步返回结果的回调</span></span><br><span class=\"line\">                producer.send(msg, <span class=\"keyword\">new</span> SendCallback() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(SendResult sendResult)</span> </span>&#123;</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;%-10d OK %s %n&quot;</span>, index,</span><br><span class=\"line\">                            sendResult.getMsgId());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">      \t              System.out.printf(<span class=\"string\">&quot;%-10d Exception %s %n&quot;</span>, index, e);</span><br><span class=\"line\">      \t              e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            \t&#125;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待5s</span></span><br><span class=\"line\">\tcountDownLatch.await(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    \t<span class=\"comment\">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class=\"line\">    \tproducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单向发送消息\"><a class=\"markdownIt-Anchor\" href=\"#单向发送消息\">#</a> 单向发送消息</h3>\n<p>这种方式主要用在不特别关心发送结果的场景，例如日志发送。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnewayProducer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消息生产者Producer</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">&quot;192.168.1.65:9876&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 启动Producer实例</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class=\"line\">        \tMessage msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;TagA&quot;</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">                (<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">        \t);</span><br><span class=\"line\">        \t<span class=\"comment\">// 发送单向消息，没有任何返回结果</span></span><br><span class=\"line\">        \tproducer.sendOneway(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class=\"line\">    \tproducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息消费\"><a class=\"markdownIt-Anchor\" href=\"#消息消费\">#</a> 消息消费</h2>\n<h3 id=\"push-模式-消费\"><a class=\"markdownIt-Anchor\" href=\"#push-模式-消费\">#</a> Push 模式 消费</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消费者</span></span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">        consumer.setNamesrvAddr(<span class=\"string\">&quot;192.168.1.65:9876&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息</span></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">&quot;TopicTest&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 注册回调实现类来处理从broker拉取回来的消息</span></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s Receive New Messages: %s %n&quot;</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"comment\">// 标记该消息已经被成功消费</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 启动消费者实例</span></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;Consumer Started.%n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pull-模式消费-assign\"><a class=\"markdownIt-Anchor\" href=\"#pull-模式消费-assign\">#</a> Pull 模式消费 - Assign</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LitePullConsumerAssign</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 LitePullConsumer 实例</span></span><br><span class=\"line\">        DefaultLitePullConsumer litePullConsumer = <span class=\"keyword\">new</span> DefaultLitePullConsumer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 不自动提交 消息消费的偏移量</span></span><br><span class=\"line\">        litePullConsumer.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动消费者</span></span><br><span class=\"line\">        litePullConsumer.start();</span><br><span class=\"line\">        <span class=\"comment\">// 拉取topicTest的MessageQueue列表</span></span><br><span class=\"line\">        Collection&lt;MessageQueue&gt; mqSet = litePullConsumer.fetchMessageQueues(<span class=\"string\">&quot;TopicTest&quot;</span>);</span><br><span class=\"line\">        List&lt;MessageQueue&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(mqSet);</span><br><span class=\"line\">        List&lt;MessageQueue&gt; assignList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size() / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            assignList.add(list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 本消费分配的 MessageQueue 列表。本消费者只会消费assignList中的消息</span></span><br><span class=\"line\">        litePullConsumer.assign(assignList);</span><br><span class=\"line\">        <span class=\"comment\">// 改变下一次拉取时，消息的偏移量。</span></span><br><span class=\"line\">        litePullConsumer.seek(assignList.get(<span class=\"number\">0</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 消息拉取 API，默认超时时间为 5s。</span></span><br><span class=\"line\">                List&lt;MessageExt&gt; messageExts = litePullConsumer.poll();</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s %n&quot;</span>, messageExts);</span><br><span class=\"line\">                <span class=\"comment\">// 提交偏移量</span></span><br><span class=\"line\">                litePullConsumer.commitSync();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            litePullConsumer.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pull-模式消费-subcribe\"><a class=\"markdownIt-Anchor\" href=\"#pull-模式消费-subcribe\">#</a> Pull 模式消费 - SUBCRIBE</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LitePullConsumerSubscribe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DefaultLitePullConsumer litePullConsumer = <span class=\"keyword\">new</span> DefaultLitePullConsumer(<span class=\"string\">&quot;lite_pull_consumer_test&quot;</span>);</span><br><span class=\"line\">        litePullConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        litePullConsumer.subscribe(<span class=\"string\">&quot;TopicTest&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        litePullConsumer.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">                List&lt;MessageExt&gt; messageExts = litePullConsumer.poll();</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, messageExts);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            litePullConsumer.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/",
            "title": "RocketMQ系列-在Java应用中的使用",
            "date_published": "2021-09-04T09:14:00.000Z",
            "content_html": "<p>上一篇文章中我们成功地搭建了几种 RocketMQ 的部署方式。<br>\n这篇文章，我们就来看一下 RocketMQ 所支持的消息类型在 Java 应用中的使用。</p>\n<h2 id=\"加入依赖\"><a class=\"markdownIt-Anchor\" href=\"#加入依赖\">#</a> 加入依赖</h2>\n<p>在上一篇文章中，我们已经使用过 RocketMQ 进行收发消息了。这一篇呢，我从头开始来学习使用 RocketMQ.</p>\n<p>首先，引入 Maven 依赖，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.rocketmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rocketmq-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果你使用 <code>gradle</code> ， 则使用  <code>compile 'org.apache.rocketmq:rocketmq-client:4.9.1'</code>  即可。</p>\n<h2 id=\"消息类型\"><a class=\"markdownIt-Anchor\" href=\"#消息类型\">#</a> 消息类型</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"./1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B.md\">基本样例 - 基本的消息收发案例</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> <a href=\"./1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF.md\">顺序消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> <a href=\"./1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF.md\">延时消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> <a href=\"./1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF.md\">批量消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> <a href=\"./1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF.md\">过滤消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"./1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF.md\">事务消息</a></label></li>\n</ul>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"./images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/",
            "title": "RocketMQ系列-搭建RocketMQ集群",
            "date_published": "2021-09-03T09:17:00.000Z",
            "content_html": "<h1 id=\"搭建rocketmq集群\"><a class=\"markdownIt-Anchor\" href=\"#搭建rocketmq集群\">#</a> 搭建 RocketMQ 集群</h1>\n<p>根据之前的了解，我们已经知道了 RocketMQ 可以单机部署，支持集群部署。</p>\n<p>RocketMQ 支持以下集中部署方式  <code>1.单Master模式部署</code> ， <code>2.多Master模式部署</code> ， <code>3.多Master多Slaver模式部署</code></p>\n<h2 id=\"单master模式\"><a class=\"markdownIt-Anchor\" href=\"#单master模式\">#</a> 单 Master 模式</h2>\n<p>这种方式风险较大，一旦 Broker 重启或者宕机时，会导致整个服务不可用。不建议线上环境使用，可以用于本地测试。</p>\n<h3 id=\"启动-nameserver\"><a class=\"markdownIt-Anchor\" href=\"#启动-nameserver\">#</a> 启动 NameServer</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 首先启动Name Server</span></span><br><span class=\"line\">$ nohup sh mqnamesrv &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 验证Name Server 是否启动成功</span></span><br><span class=\"line\">$ tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class=\"line\">The Name Server boot success...</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-broker\"><a class=\"markdownIt-Anchor\" href=\"#启动-broker\">#</a> 启动 Broker</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 启动Broker</span></span><br><span class=\"line\">$ nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 验证Name Server 是否启动成功，例如Broker的IP为：192.168.1.2，且名称为broker-a</span></span><br><span class=\"line\">$ tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class=\"line\">The broker[broker-a, 192.169.1.2:10911] boot success...</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a class=\"markdownIt-Anchor\" href=\"#验证\">#</a> 验证</h3>\n<p>我们使用 Java 程序来简单的验证下消息的发送和消费，这也是我们第一次去使用 RocketMQ.</p>\n<h4 id=\"加入maven依赖\"><a class=\"markdownIt-Anchor\" href=\"#加入maven依赖\">#</a> 加入 maven 依赖</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.rocketmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rocketmq-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生产消息\"><a class=\"markdownIt-Anchor\" href=\"#生产消息\">#</a> 生产消息</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消息生产者Producer</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">    \tproducer.setNamesrvAddr(<span class=\"string\">&quot;localhost:9876&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 启动Producer实例</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    \t    <span class=\"comment\">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class=\"line\">    \t    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">&quot;TopicTest&quot;</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">        \t<span class=\"string\">&quot;TagA&quot;</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">        \t(<span class=\"string\">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">        \t);</span><br><span class=\"line\">        \t<span class=\"comment\">// 发送消息到一个Broker</span></span><br><span class=\"line\">            SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">            <span class=\"comment\">// 通过sendResult返回消息是否成功送达</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s%n&quot;</span>, sendResult);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class=\"line\">    \tproducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"消费消息\"><a class=\"markdownIt-Anchor\" href=\"#消费消息\">#</a> 消费消息</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化消费者</span></span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 设置NameServer的地址</span></span><br><span class=\"line\">        consumer.setNamesrvAddr(<span class=\"string\">&quot;localhost:9876&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息</span></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">&quot;TopicTest&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">// 注册回调实现类来处理从broker拉取回来的消息</span></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s Receive New Messages: %s %n&quot;</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"comment\">// 标记该消息已经被成功消费</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 启动消费者实例</span></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;Consumer Started.%n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遇到的问题:</p>\n</blockquote>\n<p>按照上面的步骤，你运行成功了吗？？？</p>\n<p>我反正是没有成功的生产消息。为什么呢？</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEuTm8=\">1.No</span> route info of this topic, TopicTest</p>\n</blockquote>\n<p>原因是：我们在启动的时候，并没有创建  <code>TopicTest</code>  这个 Topic.</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread &quot;main&quot; org.apache.rocketmq.client.exception.MQClientException: No route info of this topic, TopicTest</span><br><span class=\"line\">See http://rocketmq.apache.org/docs/faq/ <span class=\"keyword\">for</span> further details.</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:<span class=\"number\">610</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1223</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1173</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class=\"number\">214</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> com.fxb.learn_rocketmq.Producer.main(Producer.java:<span class=\"number\">23</span>)</span><br></pre></td></tr></table></figure>\n<p>这种问题的原因两种。 1. 网络不通，连接不到端口。  2. 没有创建这个 Topic.<br>\n 真不巧，我全遇到了。</p>\n<p>第一种呢，使用 telnet 命令，如果通了就解决了。<br>\n第二种，使用  <code>sh mqadmin updateTopic -n localhost:9876 -b 192.168.1.63:10911 -t TopicTest</code>  -n 表示 NameSerer 的地址，-b 表示 Broker 的地址，-t<br>\n 后面的就是 topicName 了。</p>\n<blockquote>\n<p>2.Broker 启动失败，提示 空间不足。</p>\n</blockquote>\n<p>原因是：在 <span class=\"exturl\" data-url=\"aHR0cDovL3J1blNlcnZlci5zaA==\">runServer.sh</span> 和 <span class=\"exturl\" data-url=\"aHR0cDovL3J1bmJyb2tlci5zaA==\">runbroker.sh</span> 脚本中配置了启动的内存大小， NameServer 启动的堆内存是 4G, 而 broker 启动的是 8g 所以，回报错因 空间不足，启动失败。</p>\n<blockquote>\n<p>3. 运行 mqadmin 命令是报错</p>\n</blockquote>\n<p>我遇到的问题是因为 宿主机安装的是 openJDK, 导致 脚本没有加载到对应的 ext 包，所以在 <span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2xzLnNo\">tools.sh</span> 中加入 ext / 包的路径就可以了。 ext/ 就是 jre 下的 ext 包。</p>\n<p>如下图.<br>\n<img data-src=\"/images/rocketmq/1-03%E5%8D%95master%E9%83%A8%E7%BD%B2mqadmin%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99.png\" alt=\"\"></p>\n<h3 id=\"rocket运行程序\"><a class=\"markdownIt-Anchor\" href=\"#rocket运行程序\">#</a> Rocket 运行程序</h3>\n<p>我们先不急着去学习其他的部署方式，我们现在去看下 Rocket 运行程序的目录是什么样的。目的是了解 RocketMQ 是怎么跑起来的。这样遇到问题的时候，我们可以顺藤摸瓜去排查问题是出在什么地方。</p>\n<p><img data-src=\"/images/rocketmq/1-03-RocketMQ%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%9B%AE%E5%BD%95.png\" alt=\"\"></p>\n<ul>\n<li>benchmark 包：提供了 Rocket 用于基准测试的工具。<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3Byb2R1Y2VyLnNo\">producer.sh</span> ：测试普通 MQ 生产者的性能。<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2NvbnN1bWVyLnNo\">consumer.sh</span> ：测试 MQ 消费者的性能。<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3Rwcm9kdWNlci5zaA==\">tproducer.sh</span> ：测试事务 MQ 生产者的性能。<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2JhdGNocHJvZHVjZXIuc2g=\">batchproducer.sh</span>: 测试批量生产者的性能。</li>\n<li>bin: 提供了 启动关闭 NameServer, 启动关闭 Broker，管理 MQ 的工具。\n<ul>\n<li>mqnamesrv： 启动 NameServer 的脚本</li>\n<li>mqbroker: 启动 Broker 的脚本</li>\n<li>mqadmin: 管理 RocketMQ 的脚本</li>\n<li>mqshutdown: 关闭 MQ 的脚本</li>\n</ul>\n</li>\n<li>conf: 对 RocketMQ 进行配置的文件目录。\n<ul>\n<li>broker.conf： broker 的配置</li>\n<li>logback-*.xml: logback 日志的配置，比如 Broker，nameServer,tools 的日志配置</li>\n<li>plain_acl.yml： 权限管理的文件</li>\n<li>tools.yml: 脚本工具的配置</li>\n<li>dledger: 容灾相关的配置</li>\n</ul>\n</li>\n<li>lib: 这里存放的就是编译之后的 class 文件。</li>\n</ul>\n<p>如果在启动或者使用其他的命令遇到问题的时候，可以到对应的目录中，找到文件，然后看下代码进行处理。</p>\n<p>下面我们接着去看其他的部署方式。</p>\n<h2 id=\"多master模式\"><a class=\"markdownIt-Anchor\" href=\"#多master模式\">#</a> 多 Master 模式</h2>\n<p>一个集群无 Slave，全是 Master，例如 2 个 Master 或者 3 个 Master，这种模式的优缺点如下：</p>\n<ul>\n<li>\n<p>优点：配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</p>\n</li>\n<li>\n<p>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</p>\n</li>\n</ul>\n<h3 id=\"启动nameserver\"><a class=\"markdownIt-Anchor\" href=\"#启动nameserver\">#</a> 启动 NameServer</h3>\n<p><b>NameServer 需要先于 Broker 启动，且如果在生产环境使用，为了保证高可用，建议一般规模的集群启动 3 个 NameServer</b>，各节点的启动命令相同，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 首先启动Name Server</span></span><br><span class=\"line\">$ nohup sh mqnamesrv &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 验证Name Server 是否启动成功</span></span><br><span class=\"line\">$ tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class=\"line\">The Name Server boot success...</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动broker集群\"><a class=\"markdownIt-Anchor\" href=\"#启动broker集群\">#</a> 启动 Broker 集群</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-noslave/broker-a.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-noslave/broker-b.properties &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>如上启动命令是在单个 NameServer 情况下使用的。对于多个 NameServer 的集群，Broker 启动命令中 <code>-n</code>  后面的地址列表用分号隔开即可，例如  <code>192.168.1.1:9876;192.161.2:9876</code> 。</p>\n<h2 id=\"13-多master多slave模式-异步复制\"><a class=\"markdownIt-Anchor\" href=\"#13-多master多slave模式-异步复制\">#</a> 1.3 多 Master 多 Slave 模式 - 异步复制</h2>\n<p>每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用异步复制方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p>\n<ul>\n<li>\n<p>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样；</p>\n</li>\n<li>\n<p>缺点：Master 宕机，磁盘损坏情况下会丢失少量消息。</p>\n</li>\n</ul>\n<h3 id=\"启动nameserver-2\"><a class=\"markdownIt-Anchor\" href=\"#启动nameserver-2\">#</a> 启动 NameServer</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 首先启动Name Server</span></span><br><span class=\"line\">$ nohup sh mqnamesrv &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 验证Name Server 是否启动成功</span></span><br><span class=\"line\">$ tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class=\"line\">The Name Server boot success...</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动broker集群-2\"><a class=\"markdownIt-Anchor\" href=\"#启动broker集群-2\">#</a> 启动 Broker 集群</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-async/broker-a.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-async/broker-b.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器C，启动第一个Slave，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-async/broker-a-s.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器D，启动第二个Slave，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-async/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多master多slave模式-同步双写\"><a class=\"markdownIt-Anchor\" href=\"#多master多slave模式-同步双写\">#</a> 多 Master 多 Slave 模式 - 同步双写</h3>\n<p>每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p>\n<ul>\n<li>\n<p>优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</p>\n</li>\n<li>\n<p>缺点：性能比异步复制模式略低（大约低 10% 左右），发送单个消息的 RT 会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</p>\n</li>\n</ul>\n<h3 id=\"启动nameserver-3\"><a class=\"markdownIt-Anchor\" href=\"#启动nameserver-3\">#</a> 启动 NameServer</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 首先启动Name Server</span></span><br><span class=\"line\">$ nohup sh mqnamesrv &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 验证Name Server 是否启动成功</span></span><br><span class=\"line\">$ tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class=\"line\">The Name Server boot success...</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动broker集群-3\"><a class=\"markdownIt-Anchor\" href=\"#启动broker集群-3\">#</a> 启动 Broker 集群</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-a.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器C，启动第一个Slave，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-a-s.properties &amp;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 在机器D，启动第二个Slave，例如NameServer的IP为：192.168.1.1</span></span><br><span class=\"line\">$ nohup sh mqbroker -n 192.168.1.1:9876 -c <span class=\"variable\">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure>\n<p>以上 Broker 与 Slave 配对是通过指定相同的 BrokerName 参数来配对，Master 的 BrokerId 必须是 0，Slave 的 BrokerId 必须是大于 0 的数。另外一个 Master 下面可以挂载多个 Slave，同一 Master 下的多个 Slave 通过指定不同的 BrokerId 来区分。$ROCKETMQ_HOME 指的 RocketMQ 安装目录，需要用户自己设置此环境变量。</p>\n<h1 id=\"mqadmin管理工具\"><a class=\"markdownIt-Anchor\" href=\"#mqadmin管理工具\">#</a> mqadmin 管理工具</h1>\n<p>关于 mqadmin 命令的使用，我们可以通过  <code>sh mqadmin</code>  命令来查看命令的选项，用的多自然就记住了，后面我们也不会通过这种方式来管理 RocketMQ 集群。但是在我们学习的过程中，我们还是会非常频繁的使用这个命令。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>执行命令方法： <code>./mqadmin &#123;command&#125; &#123;args&#125;</code></li>\n<li>几乎所有命令都需要配置 - n 表示 NameServer 地址，格式为 ip:port</li>\n<li>几乎所有命令都可以通过 - h 获取帮助</li>\n<li>如果既有 Broker 地址（-b）配置项又有 clusterName（-c）配置项，则优先以 Broker 地址执行命令，如果不配置 Broker 地址，则对集群中所有主机执行命令，只支持一个 Broker 地址。-b 格式为 ip:port，port 默认是 10911</li>\n<li>在 tools 下可以看到很多命令，但并不是所有命令都能使用，只有在 MQAdminStartup 中初始化的命令才能使用，你也可以修改这个类，增加或自定义命令</li>\n<li>由于版本更新问题，少部分命令可能未及时更新，遇到错误请直接阅读相关命令源码</li>\n</ol>\n</blockquote>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/",
            "title": "RocketMQ系列-RocketMQ概念",
            "date_published": "2021-09-02T09:17:00.000Z",
            "content_html": "<h2 id=\"rocketmq概念\"><a class=\"markdownIt-Anchor\" href=\"#rocketmq概念\">#</a> RocketMQ 概念</h2>\n<p>我在学习 <code>RocketMQ</code>  的时候，看到文档中介绍了很多的概念。我非常反感，但是又没有办法，没有这些概念，就没办法更好的去学习后面的内容，当后面使用很多名词来梳理实现原理的时候，就会一头雾水。</p>\n<p>上一篇文章中，我们知道了 <code>RocketMQ</code>  由四部分构成。</p>\n<h3 id=\"消息模型\"><a class=\"markdownIt-Anchor\" href=\"#消息模型\">#</a> 消息模型</h3>\n<p><code>Producer</code>  负责生产消息， <code>Consumer</code>  负责消费消息， <code>Broker</code>  负责存储消息， <code>NameServer</code>  负责对 <code>Producer</code>  和  <code>Customer</code>  的服务发现，还有路由这两个功能。 <code>Broker</code>  在实际部署过程中对应一台服务器，每个  <code>Broker</code>  可以存储多个 <code>Topic</code>  的消息，每个 <code>Topic</code>  的消息也可以分片存储于不同的  <code>Broker</code> 。 <code>Message Queue</code>  用于存储消息的物理地址，每个 <code>Topic</code>  中的消息地址存储于多个  <code>Message Queue</code>  中。 <code>ConsumerGroup</code>  由多个 <code>Consumer</code>  实例构成。</p>\n<h3 id=\"消息生产者producer\"><a class=\"markdownIt-Anchor\" href=\"#消息生产者producer\">#</a> 消息生产者（Producer）</h3>\n<p>负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到 <code>broker</code>  服务器。 <code>RocketMQ</code>  提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要 <code>Broker</code>  返回确认信息，单向发送不需要。</p>\n<h3 id=\"消息消费者consumer\"><a class=\"markdownIt-Anchor\" href=\"#消息消费者consumer\">#</a> 消息消费者（ <code>Consumer</code> ）</h3>\n<p>负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从 <code>Broker</code>  服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费 ( <code>pull</code> )、推动式消费 ( <code>push</code> )。</p>\n<h3 id=\"生产者组producer-group\"><a class=\"markdownIt-Anchor\" href=\"#生产者组producer-group\">#</a> 生产者组（ <code>Producer Group</code> ）</h3>\n<p>同一类 <code>Producer</code>  的集合，这类 <code>Producer</code>  发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则 <code>Broker</code>  服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p>\n<h3 id=\"消费者组consumer-group\"><a class=\"markdownIt-Anchor\" href=\"#消费者组consumer-group\">#</a> 消费者组（ <code>Consumer Group</code> ）</h3>\n<p>同一类 <code>Consumer</code>  的集合，这类 <code>Consumer</code>  通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的 <code>Topic</code> 。 <code>RocketMQ </code> 支持两种消息模式：集群消费（ <code>Clustering</code> ）和广播消费（ <code>Broadcasting</code> ）。</p>\n<h3 id=\"拉取式消费pull-consumer\"><a class=\"markdownIt-Anchor\" href=\"#拉取式消费pull-consumer\">#</a> 拉取式消费（ <code>Pull Consumer</code> ）</h3>\n<p><code>Consumer</code>  消费的一种类型，应用通常主动调用 <code>Consumer</code>  的拉消息方法从 <code>Broker</code>  服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</p>\n<h3 id=\"推动式消费push-consumer\"><a class=\"markdownIt-Anchor\" href=\"#推动式消费push-consumer\">#</a> 推动式消费（ <code>Push Consumer</code> ）</h3>\n<p><code>Consumer</code>  消费的一种类型，该模式下 <code>Broker</code>  收到数据后会主动推送给消费端，该消费模式一般实时性较高。</p>\n<h3 id=\"主题topic\"><a class=\"markdownIt-Anchor\" href=\"#主题topic\">#</a> 主题（ <code>Topic</code> ）</h3>\n<p>表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是 <code>RocketMQ</code>  进行消息订阅的基本单位。</p>\n<h3 id=\"代理服务器broker-server\"><a class=\"markdownIt-Anchor\" href=\"#代理服务器broker-server\">#</a> 代理服务器（ <code>Broker Server</code> ）</h3>\n<p>消息中转角色，负责存储消息、转发消息。代理服务器在 <code>RocketMQ</code>  系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p>\n<h3 id=\"nameserver\"><a class=\"markdownIt-Anchor\" href=\"#nameserver\">#</a>  <code>NameServer</code></h3>\n<p><code>NameServer</code>  充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的 <code>Broker IP</code>  列表。多个 <code>Nameserver</code>  实例组成集群，但相互独立，没有信息交换。</p>\n<h3 id=\"集群消费clustering\"><a class=\"markdownIt-Anchor\" href=\"#集群消费clustering\">#</a> 集群消费（ <code>Clustering</code> ）</h3>\n<p>集群消费模式下，相同 <code>Consumer Group</code>  的每个 <code>Consumer</code>  实例平均分摊消息。</p>\n<h3 id=\"广播消费broadcasting\"><a class=\"markdownIt-Anchor\" href=\"#广播消费broadcasting\">#</a> 广播消费（ <code>Broadcasting</code> ）</h3>\n<p>广播消费模式下，相同 <code>Consumer Group</code>  的每个 <code>Consumer</code>  实例都接收全量的消息。</p>\n<h3 id=\"普通顺序消息normal-ordered-message\"><a class=\"markdownIt-Anchor\" href=\"#普通顺序消息normal-ordered-message\">#</a> 普通顺序消息（ <code>Normal Ordered Message</code> ）</h3>\n<p>普通顺序消费模式下，消费者通过同一个消息队列（  <code>Topic</code>  分区，称作 M <code>essage Queue</code> ） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</p>\n<h3 id=\"严格顺序消息strictly-ordered-message\"><a class=\"markdownIt-Anchor\" href=\"#严格顺序消息strictly-ordered-message\">#</a> 严格顺序消息（ <code>Strictly Ordered Message</code> ）</h3>\n<p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</p>\n<h3 id=\"消息message\"><a class=\"markdownIt-Anchor\" href=\"#消息message\">#</a> 消息（ <code>Message</code> ）</h3>\n<p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。 <code>RocketMQ</code>  中每个消息拥有唯一的 <code>Message ID</code> ，且可以携带具有业务标识的 <code>Key</code> 。系统提供了通过 <code>Message ID</code>  和 <code>Key</code>  查询消息的功能。</p>\n<h3 id=\"标签tag\"><a class=\"markdownIt-Anchor\" href=\"#标签tag\">#</a> 标签（ <code>Tag</code> ）</h3>\n<p>为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化 <code>RocketMQ</code>  提供的查询系统。消费者可以根据 <code>Tag</code>  实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p>\n<p>这是一篇极为枯燥的文章。从下篇文章开始，我们开始对 <code>RocketMQ</code>  进行实践。从零搭建 <code>RocketMQ</code>  集群.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/",
            "title": "Rocket系列-入门",
            "date_published": "2021-09-01T09:17:00.000Z",
            "content_html": "<h1 id=\"rocketmq-介绍\"><a class=\"markdownIt-Anchor\" href=\"#rocketmq-介绍\">#</a> RocketMQ 介绍</h1>\n<p>截止  <code>2021</code>  年 <code>9</code>  月 <code>1</code>  日，  <code>RocketMQ</code>  最新版本是  <code>4.9.1</code> 。</p>\n<p>最新 <code>Star</code>  数为 <code>1.5w</code> .  <code>fork</code>  数量是 <code>8.4k</code> .</p>\n<p><img data-src=\"/images/rocketmq/RocketMQ-title-pic.png\" alt=\"\"></p>\n<h2 id=\"发展历程\"><a class=\"markdownIt-Anchor\" href=\"#发展历程\">#</a> 发展历程</h2>\n<p><code>RocketMQ</code>  的发展历程分为两部分， <code>2001</code>  年开始 <code>RocketMQ</code>  的前身 <code>Notify</code> ，在 <code>2016</code>  年阿里将 <code>RocketMQ</code>  捐赠给 <code>Apache</code>  基金会中进行孵化。</p>\n<h3 id=\"在阿里\"><a class=\"markdownIt-Anchor\" href=\"#在阿里\">#</a> 在阿里</h3>\n<p>阿里巴巴消息中间件起源于 <code>2001</code>  年的五彩石项目， <code>Notify</code>  在这期间应运而生，用于交易核心消息的流转。</p>\n<p>至 <code>2010</code>  年， <code>B2B</code>  开始大规模使用 <code>ActiveMQ</code>  作为消息内核，随着阿里业务的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， <code>MetaQ 1.0</code>  在 <code>2011</code>  年诞生。</p>\n<p>到 <code>2012</code>  年， <code>MetaQ</code>  已经发展到了 <code>MetaQ 3.0</code> ，并抽象出了通用的消息引擎 <code>RocketMQ</code> 。随后，将 <code>RocketMQ</code>  进行了开源，阿里的消息中间件正式走入了公众的视野。</p>\n<p>到 <code>2015</code>  年， <code>RocketMQ</code>  已经经历了多年双十一的洗礼，在可用性、可靠性以及稳定性等方面都有出色的表现。与此同时，云计算大行其道，阿里消息中间件基于 <code>RocketMQ</code>  推出了 <code>Aliware MQ 1.0</code> ，开始为阿里云上成千上万家企业提供消息服务。</p>\n<p>到今年， <code>MetaQ</code>  在 <code>2016</code>  年双十一承载了万亿级消息的流转，跨越了一个新的里程碑，同时 <code>RocketMQ</code>  进入 <code>Apache</code>  孵化。</p>\n<h3 id=\"apache\"><a class=\"markdownIt-Anchor\" href=\"#apache\">#</a> Apache</h3>\n<ul>\n<li><code>2017</code>  年 <code>2</code>  月 <code>7</code>  日  <code>4.0.0</code>  版本，成为 <code>Apache</code>  项目之后的第一个版本。属于 <code>Apache</code>  的孵化项目。</li>\n<li><code>2017</code>  年 <code>6</code>  月 <code>8</code>  日  <code>4.1.0</code>  版本，</li>\n<li><code>2017</code>  年 <code>12</code>  月 <code>13</code>  日  <code>4.2.0</code></li>\n<li><code>2018</code>  年 <code>7</code>  月 <code>26</code>  日  <code>4.3.0</code></li>\n<li><code>2019</code>  年 <code>1</code>  月 <code>17</code>  日  <code>4.4.0</code>  版本</li>\n<li><code>2019</code>  年 <code>5</code>  月 <code>21</code>  日  <code>4.5.1</code>  版本</li>\n<li><code>2019</code>  年 <code>11</code>  月 <code>19</code>  日  <code>4.6.0</code>  版本</li>\n<li><code>2020</code>  年 <code>3</code>  月 <code>5</code>  日  <code>4.7.0</code>  版本</li>\n<li><code>2020</code>  年 <code>12</code>  月 <code>9</code>  日  <code>4.8.0</code>  版本</li>\n<li><code>2021</code>  年 <code>6</code>  月 <code>17</code>  日  <code>4.9.0</code>  版本</li>\n<li><code>2021</code>  年 <code>8</code>  月 <code>27</code>  日   <code>4.9.1</code>  版本</li>\n</ul>\n<p>截止目前， <code>RocketMQ</code>  先后经历了 <code>20</code>  年的发展，承载这淘宝双十一万亿级消息的处理。</p>\n<h2 id=\"rocket特性\"><a class=\"markdownIt-Anchor\" href=\"#rocket特性\">#</a> Rocket 特性</h2>\n<p><code>RocketMQ</code>  具有下面的功能特性:</p>\n<ul>\n<li>订阅发布：这个是消息队里产品的基础功能。</li>\n<li>支持事务型消息：指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。</li>\n<li>支持延时消息：指消息发送到 <code>broker</code>  后，不会立即被消费，等待特定时间投递给真正的 <code>topic</code></li>\n<li>支持消息重试:  <code>Consumer</code>  消费消息失败后，要提供一种重试机制，令消息再消费一次</li>\n<li>支持消息过滤:  <code>RocketMQ</code>  的消费者可以根据 <code>Tag</code>  进行消息过滤，也支持自定义属性过滤。</li>\n<li>支持消息重放：生产者在发送消息时，同步消息失败会重投，异步消息有重试， <code>oneway</code>  没有任何保证。</li>\n<li>支持流量控制： 分为生产者流控和消费者流控。生产者流控因为 <code>broker</code>  处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈。</li>\n<li>支持死信队列：死信队列用于处理无法被正常消费的消息.</li>\n</ul>\n<p>在后面的学习中，我们也会着重的学习这几种特性。</p>\n<h2 id=\"rocketmq的组成部分\"><a class=\"markdownIt-Anchor\" href=\"#rocketmq的组成部分\">#</a> RocketMQ 的组成部分</h2>\n<p><code>Apache RocketMQ</code>  是一个分布式消息和流媒体平台，具有低延迟、高性能和可靠性、万亿级容量和灵活的可伸缩性。它由四部分组成:  <code>NameServer</code> 、 <code>Broker</code> 、 <code>Producer</code>  和 <code>Consumer</code> 。它们中的每一个都是可以集群方式部署，都可以水平地扩展，而不需要单个故障点。如下图。</p>\n<p><img data-src=\"/images/rocketmq/1-01-rmq-basic-arc.png\" alt=\"\"></p>\n<h3 id=\"nameserver-cluster\"><a class=\"markdownIt-Anchor\" href=\"#nameserver-cluster\">#</a> NameServer cluster</h3>\n<p><code>NameServer</code>  提供轻量级服务发现功能和消息路由功能。 每个  <code>Name Server</code>  记录完整的路由信息​​，提供相应的读写服务，并支持快速存储扩展。</p>\n<h3 id=\"broker-cluster\"><a class=\"markdownIt-Anchor\" href=\"#broker-cluster\">#</a> Broker Cluster</h3>\n<p><code>Broker</code>  通过提供轻量级的 <code>TOPIC</code>  和 <code>QUEUE</code>  机制来处理消息存储。它们支持 <code>Push</code>  和 <code>Pull</code>  模型，包含容错机制 ( <code>2</code>  个或 <code>3</code>  个副本)，并提供强大的峰值填充和以原始时间顺序积累数千亿条消息的能力。此外， <code>broker</code>  还提供了灾难恢复、丰富的指标统计信息和警报机制，这些都是传统消息传递系统所缺乏的。</p>\n<h3 id=\"producer-cluster\"><a class=\"markdownIt-Anchor\" href=\"#producer-cluster\">#</a> Producer Cluster</h3>\n<p>生产者支持分布式部署。分布式生产者通过多种负载平衡模式向 <code>Broker</code>  集群发送消息。发送进程支持快速故障和低延迟。</p>\n<h3 id=\"consumer-cluster\"><a class=\"markdownIt-Anchor\" href=\"#consumer-cluster\">#</a> Consumer Cluster</h3>\n<p>消费者也支持 <code>Push</code>  和 <code>Pull</code>  模型中的分布式部署。它还支持集群消费和消息广播。它提供了实时消息订阅机制，可以满足大多数用户的需求。</p>\n<p>下一篇文章我们一起学习一下 关于 <code>RocketMQ</code>  的相关概念。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/README/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/README/",
            "title": "RocketMQ系列-开篇",
            "date_published": "2021-09-01T09:16:00.000Z",
            "content_html": "<h2 id=\"开篇\"><a class=\"markdownIt-Anchor\" href=\"#开篇\">#</a> 开篇</h2>\n<p>写这篇文章的时间是 <code>2021</code>  年 <code>9</code>  月 <code>1</code>  日，不知道是否有勇气写完全部系列之后再发布给大家，这只能算是自己学习 <code>RocketMQ</code>  的笔记吧。希望在 2021 年的年底能够将整个系列完整的发布到方家小白公众号和 <a href=\"https://fangjiaxiaobai.github.io/\">fangjiaxiaobai.github.io</a> 博客中。想写的文章也还有很多，同时在写的有 《Java 的 Stream 并行流设计》 和  《聊聊面试那点事》。</p>\n<p>2021 年国家发布了很多政策，尤其是互联网行业，特别是 在线教育，我前些日子里也是一名在线教育从业者。</p>\n<p>而写这个系列的最根本的原因，也是因为被人常问的就是  <code>RocketMQ</code>  的底层原理，可想而知，我并答不上来。所以，欠自己的债，总是需要还的。</p>\n<p>趁着空档期，所以从零到一的去聊聊这 <code>RocketMQ</code> .</p>\n<p>相信很多同学都是或多或少的使用过 <code>RocketMQ</code> , 这里呢，我们还是从零到一的去学习。第一篇，第二篇都是比较枯燥的内容，本着理论先行的原则，我们会去了解  <code>RoctMQ</code>  的发展历程，和  <code>RocketMQ</code>  中使用的概念。 第三篇我们就会 自己搭建 <code>RocketMQ</code>  集群，为我们后面的案例和原理学习迈出具有里程碑意义的一步。</p>\n<h2 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h2>\n<h3 id=\"入门\"><a class=\"markdownIt-Anchor\" href=\"#入门\">#</a> 入门</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/\">Rocket 系列 - 入门</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> <a href=\"/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/\">概念</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> <a href=\"/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/\">安装</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> <a href=\"/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/\">使用</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> <a href=\"/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/\">基本样例</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/\">顺序消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> <a href=\"/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/\">延时消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\"><label for=\"cbx_7\"> <a href=\"/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/\">批量消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\"><label for=\"cbx_8\"> <a href=\"/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/\">过滤消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\"><label for=\"cbx_9\"> <a href=\"/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/\">事务消息</a></label></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进阶架构设计\"><a class=\"markdownIt-Anchor\" href=\"#进阶架构设计\">#</a> 进阶 (架构设计)</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\"><label for=\"cbx_10\"> <a href=\"/2021/09/28/rocketMQ/2-01-RocketMQ-Arch-Start/\">架构设计之启动过程详解</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" checked=\"true\" disabled=\"true\"><label for=\"cbx_11\"> <a href=\"/2021/09/28/rocketMQ/2-02-RocketMQ-Arch-Message/\">架构设计之消息的收发过程详解</a></label></li>\n</ul>\n<h3 id=\"高手细节设计-解读源码\"><a class=\"markdownIt-Anchor\" href=\"#高手细节设计-解读源码\">#</a> 高手 (细节设计，解读源码)</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\"><label for=\"cbx_12\"> <a href=\"/2022/01/02/rocketMQ/3-01-RocketMQ-Transaction-msg/\">事务消息实现原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" disabled=\"true\"><label for=\"cbx_13\"> 延时消息实现原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\"><label for=\"cbx_14\"> <a href=\"/2022/05/16/rocketMQ/3-02-reliabllity-msg/\">消息可靠性实现原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" disabled=\"true\"><label for=\"cbx_15\"> 消息可靠性实现原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" disabled=\"true\"><label for=\"cbx_16\"> 负载均衡原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" disabled=\"true\"><label for=\"cbx_17\"> 消息过滤原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" disabled=\"true\"><label for=\"cbx_18\"> 消息重放原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" disabled=\"true\"><label for=\"cbx_19\"> 延时消息实现原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" disabled=\"true\"><label for=\"cbx_20\"> 消费者的 <code>Rebalance</code>  机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\"><label for=\"cbx_21\"> <a href=\"/2022/07/09/rocketMQ/3-08-save-msg-detail/\">消息刷盘过程详解</a></label></li>\n</ul>\n<h3 id=\"宗师\"><a class=\"markdownIt-Anchor\" href=\"#宗师\">#</a> 宗师</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" disabled=\"true\"><label for=\"cbx_22\"> 容灾</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" disabled=\"true\"><label for=\"cbx_23\"> 运维工具 <code>mqadmin</code>  的使用</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" disabled=\"true\"><label for=\"cbx_24\"> 最佳实践（ <code>Best Practice</code> ）</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" disabled=\"true\"><label for=\"cbx_25\"> 如何处理消息丢失保证消息的可靠性</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" disabled=\"true\"><label for=\"cbx_26\"> 如何避免消息重复消费</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" disabled=\"true\"><label for=\"cbx_27\"> 如何实现事务消息，保证数据一致性</label></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/rocketmq/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "RocketMQ",
                "消息队列"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/",
            "title": "冒泡排序",
            "date_published": "2021-09-01T04:47:55.000Z",
            "content_html": "<h2 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\">#</a> 基本思想</h2>\n<p>每次都操作两个相邻的数据。每次冒泡操作都对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足，就进行互换。每次冒泡都会冒出一个最小 / 大值，并移动到它应该在的位置。重复 n 次，就完成了对 n 个数据的排序工作.</p>\n<h2 id=\"排序逻辑图\"><a class=\"markdownIt-Anchor\" href=\"#排序逻辑图\">#</a> 排序逻辑图</h2>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F01-%E5%86%92%E6%B3%A1%E6%B3%95%E6%8E%92%E5%BA%8F01.png\" alt=\"算法01-排序01-冒泡法排序01\"></p>\n<p>这里在详细的写一下第一次排序的过程：</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F01-%E5%86%92%E6%B3%A1%E6%B3%95%E6%8E%92%E5%BA%8F02.png\" alt=\"算法01-排序01-冒泡法排序02.png\"></p>\n<p>按照以上逻辑的代码实现</p>\n<h2 id=\"算法实现\"><a class=\"markdownIt-Anchor\" href=\"#算法实现\">#</a> 算法实现</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; length-i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j - <span class=\"number\">1</span>] &gt; a[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j - <span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">                a[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// print(a, length);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种实现，在这种情景下，就会浪费时间。</p>\n<p>如果原始数组为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[5,0,1,2,3,4]</span><br></pre></td></tr></table></figure>\n<p>排序过程如下:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F01-%E5%86%92%E6%B3%A1%E6%B3%95%E6%8E%92%E5%BA%8F03.png\" alt=\"算法01-排序01-冒泡法排序03.png\"></p>\n<p>可以发现，在完成第一趟排序的时候，实际上已经是正确的排序结果了。我们可以采用下面的方式进行优化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j - <span class=\"number\">1</span>] &gt; a[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j - <span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">                a[j] = temp;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//print(a, length);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出:</p>\n<ul>\n<li>冒泡排序是基于比较，交换的排序算法。</li>\n<li>冒泡排序使用的空间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, 是一个原地排序算法。</li>\n<li>以上代码实现的冒泡算法是稳定的排序算法.  <code>if(a[i]&lt;=a[j])</code>  就是一个不稳定的排序算法了.</li>\n<li>冒泡算法最好情况下的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, 最坏情况下的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. 那平均情况下的时间复杂度怎么计算呢？</li>\n</ul>\n<h2 id=\"计算平均情况下的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#计算平均情况下的时间复杂度\">#</a> 计算平均情况下的时间复杂度</h2>\n<p>这里，我们引入三个概念</p>\n<ul>\n<li>有序元素对：如果  <code>i&lt;j</code>  , 并且  <code>a[i]&lt;a[j]</code> , 那么这个一对儿数就是有序的。</li>\n<li>逆序元素对：如果  <code>i&lt;j</code>  , 并且  <code>a[i]&gt;a[j]</code> , 那么这个一对儿数就是逆序的。</li>\n<li>有序度：数组中具有有序关系的元素对的个数.</li>\n<li>满有序度：完全有序的数列。</li>\n</ul>\n<p>其中  <code>满有序度</code>  =  <code>有序度</code>  +  <code>逆序度</code> 。</p>\n<p>举个例子:</p>\n<p><strong> <code>[4,5,6,3,2,1]</code> </strong></p>\n<p>有序度为 3, 也称为 <em>原始有序度</em>, 分别为:  <code>(4,5)</code>   <code>(4,6)</code>   <code>(5,6)</code></p>\n<p>满有序度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">\\frac {n*(n-1)}{2}=15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">∗</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span></p>\n<p>冒泡排序中包含两个操作原子，比较和交换。没交换一次，有序度就会加 1. 所以，交换次数，就是逆有序度。 那么， <code>逆有序度 = 满有序度 - 初始有序度</code> 。也就是: 15 - 3 = 12. 需要进行 12 次操作。</p>\n<p>平均情况下，要进行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac {n*(n-1)}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">∗</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 次操作。比较操作肯定要比交换操作多，而最坏情况下的时间复杂度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, 所以平均情况下的时间复杂度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序",
                "冒泡排序",
                "交换排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%A1%B6%E6%8E%92%E5%BA%8F/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%A1%B6%E6%8E%92%E5%BA%8F/",
            "title": "桶排序",
            "date_published": "2021-09-01T04:42:55.000Z",
            "content_html": "<h2 id=\"排序思想\"><a class=\"markdownIt-Anchor\" href=\"#排序思想\">#</a> 排序思想</h2>\n<p>把将要排序的数据分到几个有序的桶里，每个同理的数据再单独进行排序，桶内拍完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了.</p>\n<h2 id=\"排序实现逻辑\"><a class=\"markdownIt-Anchor\" href=\"#排序实现逻辑\">#</a> 排序实现逻辑</h2>\n<p><span class=\"label danger\">💔内容太饿了，离家出走了…</span></p>\n<h2 id=\"桶排序算法实现\"><a class=\"markdownIt-Anchor\" href=\"#桶排序算法实现\">#</a> 桶排序算法实现</h2>\n<p><span class=\"label danger\">💔内容太饿了，离家出走了…</span></p>\n<h2 id=\"算法评估\"><a class=\"markdownIt-Anchor\" href=\"#算法评估\">#</a> 算法评估</h2>\n<ul>\n<li>桶排序的时间复杂度为: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>桶排序不是稳定的排序算法</li>\n</ul>\n<h2 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h2>\n<p>如果要排序的数据有 n 个，我们把它们均匀的分到 m 个桶内，每个桶里就有 k=n/m 个元素，每个桶内部使用快速排序，时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k*logk)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>。 m 个桶排序的时间复杂度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>∗</mo><mi>k</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m*k*logk)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>. 因为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">k = n / m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span></span></span></span>, 所以整个桶排序的时间复杂度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><mi>n</mi><mi>m</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">O(n*log{\\frac{n}{m}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>). 当桶的个数 m 接近数据个数 n 时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><mi>n</mi><mi>m</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">log\\frac{n}{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 就是一个非常小的常量，这个时候，桶排序的时间复杂度接近 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>桶排序的对排序数据的要求非常苛刻。</p>\n<ul>\n<li>要排序的数据要很容易就能划分为 m 个桶，并且 桶与桶 之间要有着天然的大小顺序.</li>\n<li>数据要在各个同之间的分布时比较均匀的。 如果经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是一个常量级了。在极端的情况下，所有的数据都被划分到一个桶里，那就退化为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的排序算法了.</li>\n</ul>\n<p>桶排序比较适合永载外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限， 无法把数据全部加载到内存中。 下面说一个例子</p>\n<h2 id=\"桶排序的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#桶排序的应用场景\">#</a> 桶排序的应用场景</h2>\n<p>假如我们有 10GB 的订单数据，我们希望 按照订单的金额进行排序，可是内存有限，只有几百 MB, 怎么进行排序呢？</p>\n<p>我们可以先扫描一遍文件，看订单金额所在的数据范围。 假设扫描完毕之后，我们最小的金额是 1 元，最大的时 10 万元，我们将其分为 100 个桶，第一个存 1-1000 元，第二个存 1000-2000，并且，每个桶要按照金额大小命名 (00,01,02…)，依次对每个桶，进行排序就好了.</p>\n<p>如果，这个 10GB 的数据是分布不均匀的，就会造成某些文件特大。我们还可以对大的文件进行拆分。继续讲这个区间的文件拆成 100 个，如果还不能，再进行拆分。知道这个文件都可以读入内存为止。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序",
                "桶排序",
                "线性思想排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/",
            "title": "快速排序",
            "date_published": "2021-09-01T04:39:55.000Z",
            "content_html": "<h2 id=\"快速排序思想\"><a class=\"markdownIt-Anchor\" href=\"#快速排序思想\">#</a> 快速排序思想</h2>\n<p>快速排序的核心思想也是 分治思想。</p>\n<p>快速排序主要要以待排数组中的某个数字为基准。将整个数组中的数据分为小于基准的一组和大于等于基于的一组.(或者是小于等于基准的一组和大于基于的一组), 分别对每组进行拆分，直到每组中只有一个数据。</p>\n<p>递推公式如下:</p>\n<p>假设 <code>low</code>  为待排数组中的起始索引. <code>high</code>  为待排数组中的终止索引.  <code>std</code>  为基准的索引.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>q</mi><mi>u</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>S</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo separator=\"true\">,</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mi>u</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>S</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>t</mi><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>q</mi><mi>u</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>S</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">quickSort(low,high) = quickSort(low,std-1)+quickSort(std+1,high)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>终止条件为:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>&gt;</mo><mo>=</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">low&gt;=high\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span></span></span></span></span></p>\n<h2 id=\"排序过程图\"><a class=\"markdownIt-Anchor\" href=\"#排序过程图\">#</a> 排序过程图</h2>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F04-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F01.png\" alt=\"算法01-排序04-快速排序01.png\"></p>\n<p>简单解释下:</p>\n<p>我们首先选定基准，假设以本次递归的第一个数为基准，进行排序.<br>\n 如图：第一次递归的基准为 5, 我把大于 5 的数，放在右侧，小于 5 的数放在左侧，(例子中没有大约 5 的数)，第二次以 0 为基准，把大于 0 的数，放在右侧，小于 0 的数，放在左侧。重复这样的逻辑，直到最后一次递归。</p>\n<h2 id=\"排序代码实现\"><a class=\"markdownIt-Anchor\" href=\"#排序代码实现\">#</a> 排序代码实现</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = high;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">std</span> = a[low];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j&amp;&amp;a[j] &gt;= <span class=\"built_in\">std</span>) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[j] &lt; <span class=\"built_in\">std</span>) &#123;</span><br><span class=\"line\">            a[i++] = a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j&amp;&amp;a[i] &lt;= <span class=\"built_in\">std</span>) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt; <span class=\"built_in\">std</span>) &#123;</span><br><span class=\"line\">            a[j--] = a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[i] = <span class=\"built_in\">std</span>;</span><br><span class=\"line\">    quick_sort(a, low, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quick_sort(a, i + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序的优化\"><a class=\"markdownIt-Anchor\" href=\"#快速排序的优化\">#</a> 快速排序的优化</h2>\n<p>之前说， 快速排序的时间复杂度退化到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的主要原因是：分区点选的不够合理.</p>\n<p>最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多.</p>\n<p>为了提高排序算法的性能，我们也要尽可能的让每次分区都比较均匀.</p>\n<p>比较常用，比较简单的选择分区点的方法有:</p>\n<ul>\n<li>三数取中法</li>\n</ul>\n<p>我们从某个区间的首，尾，中间， 分别取出一个数，然后对比大小，取这三个数据的中间值作为分区点。 也可以多取几个区间，取出中间值，然后在这些中间值，取出中间值。比如三数取中，五数取中，十数取中等等。</p>\n<ul>\n<li>随机法</li>\n</ul>\n<p>每次都从排序的区间中随机选择一个元素作为分区点。</p>\n<p>这种方式，并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能出现每次分区点都选的很差的情况。所以时间复杂度退化为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的情况，可能性也不大。</p>\n<h2 id=\"快排算法评估\"><a class=\"markdownIt-Anchor\" href=\"#快排算法评估\">#</a> 快排算法评估</h2>\n<ul>\n<li>时间复杂度为 最好情况下为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, 最坏情况下为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, 平均情况下的时间复杂度为:</li>\n<li>空间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, 是一种原地排序算法</li>\n<li>是一种不稳定的排序算法.</li>\n</ul>\n<p>注意：快排算法虽然在最坏情况下的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> , 但是在平均情况下，时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，不尽如此，快排的时间复杂度退化到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的概率非常小，我们也可以通过合理选择基准的方式来避免这总情况.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序",
                "快速排序",
                "分支思想排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "一致性哈希算法的实现",
            "date_published": "2021-09-01T04:36:55.000Z",
            "content_html": "<p>上一篇介绍了 哈希算法和一致性哈希算法的原理，我们知道哈希算法在分布式场景应用中存在着定位问题。所有有一致性哈希算法。<br>\n今天我们就动手实现以下哈希算法。</p>\n<p>可选性 回顾一下 <b><a href=\"/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/\">哈希算法和一致性哈希算法</a></b></p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>以下多次出现服务端节点，客户端节点这两个名字，含义如下：</p>\n<p>服务端节点： 在实际场景中，比如分布式缓存，上一篇文章中的例子，服务端节点就是多个 Redis 机器。</p>\n<p>客户端节点： 就是要缓存的数据，这里使用这两个名词来代表不同的两个部分。</p>\n<h1 id=\"实现功能\"><a class=\"markdownIt-Anchor\" href=\"#实现功能\">#</a> 实现功能</h1>\n<p>以上篇中提及的分布式缓存的例子为背景实现一致性哈希算法，主要实现两个功能：</p>\n<ul>\n<li>\n<p>新增服务节点</p>\n<p>创建一个哈希环，然后可以存放服务端节点信息。后续新增节点也能正常存储。</p>\n</li>\n<li>\n<p>根据客户端节点找到对应的服务节点</p>\n<p>传入客户端的信息，我们可以根据 client 的信息或者其他的信息进行哈希运算，然后确定存储的服务端节点。</p>\n</li>\n<li>\n<p>实现根据服务端节点进行删除</p>\n<p>模拟实现部分服务端不可用。即例子中的缓存节点挂掉。</p>\n</li>\n</ul>\n<h1 id=\"实现方案\"><a class=\"markdownIt-Anchor\" href=\"#实现方案\">#</a> 实现方案</h1>\n<p>首先我们需要定义一个接口规范，规定好要实现的内容，比如，保存服务端节点信息，即新增操作，根据客户端节点找到服务节点的功能，即查询操作。</p>\n<h2 id=\"排序list的实现方式\"><a class=\"markdownIt-Anchor\" href=\"#排序list的实现方式\">#</a> 排序 + List 的实现方式</h2>\n<p>主要思路如下： 将所有的节点保存到一个 List 中。然后对 List 进行<b>排序</b>，当获取服务端节点的时候，只需要找到第一个 哈希值比他大的服务端节点的就可以了。</p>\n<p>不考虑排序的时间复杂度： 最优时间复杂度：O (1)，第一个节点就是目标节点。最坏情况下：O (n+1), 招了一圈都没有找到。所以平均的时间复杂度是 O (N)。<br>\n那排序的时间复杂度呢？最快的就是 O (NlogN);</p>\n<p>综合下来，这种实现方案的时间复杂度就是： O (NlogN)。</p>\n<p>主要实现代码如下 (文末完整代码，注释颇多)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortListConsistentHash</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConsistentHash</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash环容器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;NodeBucket&gt; hashCircle = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认使用 &#123;<span class=\"doctag\">@link</span> ConsistentHash#hash &#125;算法实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashHandle&lt;Node&gt; hashHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortListConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">        virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortListConsistentHash</span><span class=\"params\">(HashHandle&lt;Node&gt; hashHandle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = hashHandle;</span><br><span class=\"line\">        virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortListConsistentHash</span><span class=\"params\">(HashHandle&lt;Node&gt; hashHandle, Integer virtualNumber)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = hashHandle;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = virtualNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortListConsistentHash</span><span class=\"params\">(Integer virtualNumber)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = virtualNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 虚拟节点的数目,默认为1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer virtualNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增服务节点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 服务节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ServerNode value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashCircle == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            hashCircle = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; virtualNumber; i++) &#123;</span><br><span class=\"line\">            value.setVirtualNodeId(i);</span><br><span class=\"line\">            hashCircle.add(DefaultNodeBucket.of(value, (node) -&gt; hashHandle.hash(value)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        hashCircle.sort(Comparator.comparingInt(NodeBucket::getHash));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找不到符合条件的第一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clientNode 根据 客户端节点的Hash值获取到目标服务端节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServerNode <span class=\"title\">getFirstNode</span><span class=\"params\">(ClientNode clientNode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer hash = hash(clientNode);</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;NodeBucket&gt; first = hashCircle.stream().filter(item -&gt; item.getHash() &gt; hash).findFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> first.map(NodeBucket::getNode).orElse(hashCircle.get(<span class=\"number\">0</span>).getNode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有服务节点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 所有服务端节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ServerNode&gt; <span class=\"title\">getAllServerNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hashCircle.stream().map(NodeBucket::getNode).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node 节点的信息,可能是客户端，也可能是服务端</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 哈希值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">hash</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> ServerNode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier() + <span class=\"string\">&quot;#&quot;</span> + ((ServerNode) node).getVirtualNodeId());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> ServerNode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle.remove(DefaultNodeBucket.of((ServerNode) node, hashHandle));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线性表遍历的实现方式\"><a class=\"markdownIt-Anchor\" href=\"#线性表遍历的实现方式\">#</a> 线性表遍历的实现方式</h2>\n<p>首先说明一下，这里使用的是线性表遍历的方式，并没有指定说使用的数组还是链表，根据具体场景来选择吧，实现方式略有不同。我用数组的形式来实现。</p>\n<p>上一种实现方式，使用了排序导致了时间复杂度为 O (NlogN)。那么我不用排序行不行？</p>\n<p>可以的！我们首先将服务端节点保存到数组中，然后根据客户端哈希值和服务端节点哈希值的差，找出最小的那个节点就可以了。每次遍历实现的话，遍历一次就可以了，时间复杂度为 O (N).</p>\n<p>主要实现逻辑代码如下（文末有完整实现代码，注释颇多）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraverseArrayConsistentHash</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConsistentHash</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用数组实现的哈希环</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NodeBucket[] hashCircle = <span class=\"keyword\">new</span> NodeBucket[]&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashHandle&lt;Node&gt; hashHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> defaultSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MaxSize = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 虚拟节点的数目,默认为1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer virtualNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraverseArrayConsistentHash</span><span class=\"params\">(Integer initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = initialCapacity;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle = <span class=\"keyword\">new</span> NodeBucket[initialCapacity];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;initialCapacity must &gt; 0 &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">        virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraverseArrayConsistentHash</span><span class=\"params\">(Integer initialCapacity, Integer virtualNumber)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = initialCapacity;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle = <span class=\"keyword\">new</span> NodeBucket[initialCapacity];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;initialCapacity must &gt; 0 &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = virtualNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraverseArrayConsistentHash</span><span class=\"params\">(Integer initialCapacity, Integer virtualNumber, HashHandle&lt;Node&gt; hashHandle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = initialCapacity;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle = <span class=\"keyword\">new</span> NodeBucket[initialCapacity];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;initialCapacity must &gt; 0 &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = virtualNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = hashHandle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraverseArrayConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ServerNode serverNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查大小是否需要扩容</span></span><br><span class=\"line\">        checkSize();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; virtualNumber; i++) &#123;</span><br><span class=\"line\">            serverNode.setVirtualNodeId(i);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle[length++] = DefaultNodeBucket.of(serverNode, hashHandle);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查数组大小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = defaultSize;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle = <span class=\"keyword\">new</span> NodeBucket[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &gt;= MaxSize) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length + <span class=\"number\">1</span> &gt; size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = size &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hashCircle = Arrays.copyOf(<span class=\"keyword\">this</span>.hashCircle, size, NodeBucket[].class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">hash</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> ServerNode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier() + <span class=\"string\">&quot;#&quot;</span> + ((ServerNode) node).getVirtualNodeId());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.equals(hashCircle[index].getNode())) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(hashCircle, index+<span class=\"number\">1</span>, hashCircle, index,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        hashCircle[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServerNode <span class=\"title\">getFirstNode</span><span class=\"params\">(ClientNode clientNode)</span> </span>&#123;</span><br><span class=\"line\">        Integer hash = <span class=\"keyword\">this</span>.hashHandle.hash(clientNode);</span><br><span class=\"line\">        ServerNode findNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// 查找符合条件的服务端节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            NodeBucket nodeBucket = <span class=\"keyword\">this</span>.hashCircle[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> difference;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((difference = Math.abs(nodeBucket.getHash() - hash)) &lt; min) &#123;</span><br><span class=\"line\">                min = difference;</span><br><span class=\"line\">                findNode = nodeBucket.getNode();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ServerNode&gt; <span class=\"title\">getAllServerNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Stream.of(<span class=\"keyword\">this</span>.hashCircle).map(NodeBucket::getNode).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sortedmap实现方案\"><a class=\"markdownIt-Anchor\" href=\"#sortedmap实现方案\">#</a> SortedMap 实现方案</h2>\n<p>上面两种的实现方案，并非是最优的。根本原因就是<b>数据结构</b>的限制。 线性表决定了这一切。我们考虑换一种数据结构呢？</p>\n<p>考虑下使用<b>树</b>形结构</p>\n<p>最快的树形数据结构，就是二叉平衡树了。二叉平衡树有两种 AVL 树和红黑树。</p>\n<p>我们使用红黑树，因为红黑树的主要功能就是存储<b>有序的数据</b>，并且查询地效率是 O (logN)。</p>\n<p>考虑到手写实现一个红黑树，着实有点复杂，这种我们使用 JDK 中的 TreeMap 来实现。</p>\n<p>将所有的服务节点放到 TreeMap 中，这种结构天然支持排序的，所以我们只需要主要的实现找到服务节点的这个过程就好了。</p>\n<p>首先计算出客户端的哈希值，查询出大于该哈希值的服务节点的子序列，如果子序列为空返回原来哈希环的第一个元素，否则，返回子序列的第一个元素即可。</p>\n<p>主要实现代码如下 (文末有完整代码，注释真的多！)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortedMapConsistentHash</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConsistentHash</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SortedMap&lt;Integer, ServerNode&gt; hashCircle = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashHandle&lt;Node&gt; hashHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 虚拟节点的数目,默认为1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer virtualNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortedMapConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">        hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortedMapConsistentHash</span><span class=\"params\">(<span class=\"keyword\">int</span> virtualNumber, HashHandle&lt;Node&gt; hashHandle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = hashHandle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SortedMapConsistentHash</span><span class=\"params\">(<span class=\"keyword\">int</span> virtualNumber)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.virtualNumber = virtualNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashHandle = <span class=\"keyword\">this</span>::hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ServerNode serverNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实现虚拟节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; virtualNumber; i++) &#123;</span><br><span class=\"line\">            serverNode.setVirtualNodeId(i);</span><br><span class=\"line\">            hashCircle.put(<span class=\"keyword\">this</span>.hashHandle.hash(serverNode), serverNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">hash</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> ServerNode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier() + <span class=\"string\">&quot;#&quot;</span> + ((ServerNode) node).getVirtualNodeId());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defaultStringHash(node.getIdentifier());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hashCircle.remove(hashHandle.hash(node));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServerNode <span class=\"title\">getFirstNode</span><span class=\"params\">(ClientNode clientNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = hash(clientNode);</span><br><span class=\"line\">        <span class=\"comment\">// 获取大于客户端哈希值的子序列</span></span><br><span class=\"line\">        SortedMap&lt;Integer, ServerNode&gt; subMap = hashCircle.tailMap(hash);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subMap.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子序列为空，获取哈希环的第一个节点</span></span><br><span class=\"line\">            Integer key = hashCircle.firstKey();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hashCircle.get(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子序列不为空，获取子序列的第一个节点</span></span><br><span class=\"line\">            Integer key = subMap.firstKey();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> subMap.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ServerNode&gt; <span class=\"title\">getAllServerNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.hashCircle.values());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServerNode <span class=\"title\">process</span><span class=\"params\">(ClientNode clientNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstNode(clientNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">````</span><br><span class=\"line\">最后，我们测试一下,一致性哈希算法的结果:</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        testSortListConsistentHash();</span><br><span class=\"line\">        testSortedMapConsistentHash();</span><br><span class=\"line\">        testTraverseArrayConsistentHash();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试，使用遍历的方式来实现一致性hash算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testTraverseArrayConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ConsistentHash sortedMapConsistentHash = <span class=\"keyword\">new</span> TraverseArrayConsistentHash();</span><br><span class=\"line\">        testConsistentHashCommonPart(sortedMapConsistentHash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试，使用SortMap实现的一致性哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSortedMapConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ConsistentHash sortedMapConsistentHash = <span class=\"keyword\">new</span> SortedMapConsistentHash(<span class=\"number\">3</span>);</span><br><span class=\"line\">        testConsistentHashCommonPart(sortedMapConsistentHash);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试，使用数组和排序方式实现的 一致性哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSortListConsistentHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SortListConsistentHash sortListConsistentHashMap = <span class=\"keyword\">new</span> SortListConsistentHash();</span><br><span class=\"line\">        testConsistentHashCommonPart(sortListConsistentHashMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试 consistentHash 算法，公共代码部分</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> consistentHash 一致性哈希实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testConsistentHashCommonPart</span><span class=\"params\">(ConsistentHash consistentHash)</span> </span>&#123;</span><br><span class=\"line\">        Stream.of(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.1&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain1.com&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.2&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain2.com&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.3&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain3.com&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.4&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain4.com&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.5&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain5.com&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ServerNode(<span class=\"string\">&quot;192.168.0.6&quot;</span>, UUID.randomUUID().toString(), <span class=\"string\">&quot;domain6.com&quot;</span>)</span><br><span class=\"line\">        ).forEach(consistentHash::add);</span><br><span class=\"line\">        String s1 = UUID.randomUUID().toString();</span><br><span class=\"line\">        ServerNode serverNode1 = consistentHash.process(<span class=\"keyword\">new</span> ClientNode(s1));</span><br><span class=\"line\">        out.println(serverNode1);</span><br><span class=\"line\">        ServerNode serverNode1_1 = consistentHash.process(<span class=\"keyword\">new</span> ClientNode(s1));</span><br><span class=\"line\">        out.println(serverNode1_1);</span><br><span class=\"line\">        ServerNode serverNode1_2 = consistentHash.process(<span class=\"keyword\">new</span> ClientNode(UUID.randomUUID().toString()));</span><br><span class=\"line\">        out.println(serverNode1_2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在测试完成之后，我还对各种方案就进行了性能相关的简单测试，硬件: windows 8 核 16G,i7.<br>\n 测试代码就不贴出来了，查看原文去看吧。</p>\n<p>总结如下：</p>\n<p>在节点数 小于 10000 的场景下： 数组遍历 &gt; SortedMap &gt; 排序。 即：方案 2 &gt; 方案 3 &gt; 方案 1。<br>\n在服务端节点数 大于 10000 的场景下： SortedMap &gt; 数组变量 &gt; 排序。即： 方案 3 &gt; 方案 2 &gt; 方案 1.</p>\n<h1 id=\"附录\"><a class=\"markdownIt-Anchor\" href=\"#附录\">#</a> 附录</h1>\n<div class=\"links\"><div class=\"item\" title=\"fangxiaobai\" style=\"--block-color:#e0b971;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdqaWF4aWFvYmFpL2NvZGVfcmVwby90cmVlL21hc3Rlci8wM18lRTUlODglODYlRTUlQjglODMlRTUlQkMlOEYlRTclOUIlQjglRTUlODUlQjMvJUU0JUI4JTgwJUU4JTg3JUI0JUU2JTgwJUE3JUU1JTkzJTg4JUU1JUI4JThDJUU3JUFFJTk3JUU2JUIzJTk1L2NvbnNpc3RlbnRfaGFzaC9zcmM=\" data-background-image=\"https://avatars.githubusercontent.com/u/22616214?v=4\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdqaWF4aWFvYmFpL2NvZGVfcmVwby90cmVlL21hc3Rlci8wM18lRTUlODglODYlRTUlQjglODMlRTUlQkMlOEYlRTclOUIlQjglRTUlODUlQjMvJUU0JUI4JTgwJUU4JTg3JUI0JUU2JTgwJUE3JUU1JTkzJTg4JUU1JUI4JThDJUU3JUFFJTk3JUU2JUIzJTk1L2NvbnNpc3RlbnRfaGFzaC9zcmM=\">代码仓库 - 一致性Hash算法的实现</span>\n          <p class=\"desc\">欢迎star!! 期待你的加入~</p>\n          </div></div></div>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "哈希算法"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/recursion/%E7%AE%97%E6%B3%9501-%E9%80%92%E5%BD%92/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/recursion/%E7%AE%97%E6%B3%9501-%E9%80%92%E5%BD%92/",
            "title": "递归",
            "date_published": "2021-09-01T04:33:55.000Z",
            "content_html": "<p>数据结构与算法 这一个模块 有两个最难的知识点，一个就是 递归，另一个就是 动态规划</p>\n<p>我们今天来学习下递归这种实现方式。</p>\n<p>个人认为，递归不是一种算法，就是一种语法。所以我就称它为一类问题的解决方法.</p>\n<h2 id=\"何为递归\"><a class=\"markdownIt-Anchor\" href=\"#何为递归\">#</a> 何为递归？</h2>\n<p>递归，去的过程叫递，回来的过程叫归。凡是递归类的问题，都能总结出一个递归公式.<br>\n 比如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(n+1) = f(n) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, 我们用代码实现就是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>?<span class=\"number\">1</span>:f(n-<span class=\"number\">1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是否可用递归\"><a class=\"markdownIt-Anchor\" href=\"#判断是否可用递归\">#</a> 判断是否可用递归</h2>\n<p>要想使用递归来解决问题，要满足三个条件:</p>\n<ul>\n<li>一个问题的解可以分解为几个问题的解。</li>\n<li>这个问题和分解之后的问题，除了树据规模不一样，求解思路一模一样.</li>\n<li>存在递归终止条件。比如上例子中的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(n)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h2 id=\"如何编写递归\"><a class=\"markdownIt-Anchor\" href=\"#如何编写递归\">#</a> 如何编写递归</h2>\n<h3 id=\"找出递推公式\"><a class=\"markdownIt-Anchor\" href=\"#找出递推公式\">#</a> 找出递推公式！</h3>\n<p>递归写法的话，最重要的就是写出递推公式，其次就是，找到终止条件.</p>\n<p>举个例子:</p>\n<p>人民币的组合方式.</p>\n<p>假设我有人民币 100 元，50 元，20 元，10 元，5 元，1 元的币种若干张，我想用这些花掉 70 元，我可以怎么花？</p>\n<p>这个问题就可以转换成了，70 元有多少中组合方式 (A) -&gt; 69 元有多少中组合方式 (B) + 65 元有几种组合方式 © + 60 元有几种组合方式 (D) + 50 元有几种组合方式 (E) + 20 元有几种组合方式 (F)。</p>\n<p>也就是说，我们把一个问题 A 分解成了若干子问题 B,C,D,E,F. 我们解决了子问题 B,C,D,E,F。 那么对应的 A 问题，也就解决了。而且，在这问题里，我们只要关心 A 与其子问题的关系即可，不用关系其他的子问题与子问题的关系。屏蔽掉递归细节。</p>\n<h2 id=\"递归实现方案的注意点\"><a class=\"markdownIt-Anchor\" href=\"#递归实现方案的注意点\">#</a> 递归实现方案的注意点</h2>\n<ul>\n<li>如果递归深度比较大的话，就会出现堆栈溢出的异常。</li>\n<li>递归的时候，要避免重复计算.<br>\n 这个的话，举个例子，就会很清晰了。斐波那契数列的计算.</li>\n</ul>\n<p>斐波那契数列就是 当前项等于前两项之和.</p>\n<p>以 fib (6) 为例，即求第 6 个数的数值。</p>\n<p>如下图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib.png\" alt=\"算法01-动态规划01-fib.png\"></p>\n<p>我们会发现: fib (4),fib (3),fib (2) 都是重复计算的。</p>\n<p>具体的解决方式呢，在 算法【动态规划】文章里，也有说过。</p>\n<p>加入一个数据，来记录就行了.<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib02.png\" alt=\"算法01-动态规划01-fib02.png\"> 其中虚线边框的就不用再计算了。</p>\n<ul>\n<li>一定要明确终止条件。不然就是死循环！</li>\n</ul>\n<p>好了，以上就是递归的介绍。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "递归"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2021-09-01T04:33:55.000Z",
            "content_html": "<h2 id=\"排序算法开篇\"><a class=\"markdownIt-Anchor\" href=\"#排序算法开篇\">#</a> 排序算法开篇</h2>\n<p>排序算法有很多，比如常见的 冒泡排序，插入排序，选择排序，归并排序，快速排序，计数排序，基数排序，桶排序，还有不常见的猴子排序，睡眠排序，面条排序等。</p>\n<p>其中，冒泡排序，插入排序，选择排序 的时间复杂度都是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>快排，归并排序 的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>桶排序，计数排序，基数排序的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"排序算法好坏的评估\"><a class=\"markdownIt-Anchor\" href=\"#排序算法好坏的评估\">#</a> 排序算法好坏的评估</h2>\n<ul>\n<li>\n<p>最好情况，最坏情况，平均情况的时间复杂度<br>\n我们要知道排序算法在不同数据下的性能表现。</p>\n</li>\n<li>\n<p>时间复杂度的系数，常数，低阶<br>\n时间复杂度反应的是数据规模 n 很大的时候的一个增长趋势，所以它表示的时候，会忽略系数，常数，低阶。但是我排序的时候，涉及到的数据是很小规模的，所以我们需要考虑下系数，常数，低阶。</p>\n</li>\n<li>\n<p>比较次数和交换 (移动) 次数<br>\n在基于比较的排序算法的执行过程中，最多的会涉及两种操作，元素比较大小和元素交换或移动.</p>\n</li>\n<li>\n<p>内存消耗<br>\n即空间复杂度。</p>\n</li>\n<li>\n<p>排序算法的稳定性<br>\n稳定性是指：如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。<br>\n这样的排序算法有什么好处呢？</p>\n<p>假设有这样一个需求，对一些学生的成绩进行排序。按照总成绩从大到小的顺序进行排列。总成绩相等的按照数学成绩从大到小的顺序进行排列。这时，我们就可以使用稳定的排序算法。先按照数学成绩从大到小的顺序进行排列，这样保证了数学成绩是有序的，然后我们再对总成绩进行排序，这样就满足了整体需求了.</p>\n</li>\n</ul>\n<h2 id=\"排序算法实现\"><a class=\"markdownIt-Anchor\" href=\"#排序算法实现\">#</a> 排序算法实现</h2>\n<h3 id=\"交换思想排序\"><a class=\"markdownIt-Anchor\" href=\"#交换思想排序\">#</a> 交换思想排序</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/\">冒泡排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/\">选择排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> 插入排序</label></li>\n</ul>\n<h3 id=\"分治思想排序\"><a class=\"markdownIt-Anchor\" href=\"#分治思想排序\">#</a> 分治思想排序</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/\">归并排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/\">快速排序</a></label></li>\n</ul>\n<h3 id=\"线性排序\"><a class=\"markdownIt-Anchor\" href=\"#线性排序\">#</a> 线性排序</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%A1%B6%E6%8E%92%E5%BA%8F/\">桶排序 (Bubble Sort)</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> 计数排序 (Counting Sort)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 基数排序 (Radix Sort)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> 堆排序</label></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
            "title": "归并排序",
            "date_published": "2021-09-01T04:33:55.000Z",
            "content_html": "<p>将数组从中间分成前后两部分，然后对前后两部分分别进行排序，再将排好序的两部分合并在一起，这样整个数组就是有序的了。</p>\n<p>归并体现的思想就是 <strong>分治思想</strong> 分而治之，将一个大问题分解成小的问题来解决。小问题解决了，大问题也就解决了.</p>\n<p>这种分治的算法，一般都是递归的方式来求解。我们也尝试着写一个递归方式的归并排序。</p>\n<p>写递归的程序，最重要的就是写 <strong>递推表达式</strong>和<strong>查找临界条件</strong></p>\n<p>根据归并排序的思想我们可写出这样的递推公式:</p>\n<p>假设:  <code>low</code>  为待排序数组的最小的索引.  <code>high</code>  为待排序数组的最大索引.  <code>mid</code>  为  <code>(high+low)/2</code> <br>\n 那么:  <code>merge_sort(low,high) = merge(merge_sort(low,mid),merge_sort(mid+1,high))</code></p>\n<p>对某个数组 从下标  <code>low</code>  到  <code>high</code>  的排序，转换成了子问题 从 <code>low</code>  到  <code>mid</code>  的排序 和 从 <code>mid+1</code>  到 <code>high</code>  的排序。当这两个子问题排好序之后，再将两个有序的子数组合并在一起，这样下标从  <code>low</code>  到  <code>high</code>  之间的数据也就都是排好序的了。</p>\n<p>还有一个问题：终止条件是什么？终止条件就是 子问题中的  <code>low &gt;= high</code> , 这个时候，我们就可以终止递归了。</p>\n<h5 id=\"归并排序逻辑图\"><a class=\"markdownIt-Anchor\" href=\"#归并排序逻辑图\">#</a> 归并排序逻辑图</h5>\n<p>来一张归并排序过程的示意图吧</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F03-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F01.png\" alt=\"算法01-排序03-归并排序01\"></p>\n<h5 id=\"归并排序算法实现\"><a class=\"markdownIt-Anchor\" href=\"#归并排序算法实现\">#</a> 归并排序算法实现</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> mid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp_arr_length = high - low + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t[temp_arr_length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断大小</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt;= mid &amp;&amp; j &lt;= high;) &#123;</span><br><span class=\"line\">        t[m++] = a[i] &lt; a[j] ? a[i++] : a[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断分组数量不相等时的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= high) &#123;</span><br><span class=\"line\">        t[m++] = a[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断分组数量不相等时的情况   </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid) &#123;</span><br><span class=\"line\">        t[m++] = a[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将中间表的数据赋值给原始的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        a[low + i] = t[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (low + high) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 归</span></span><br><span class=\"line\">    merge_sort(a, low, mid);</span><br><span class=\"line\">    merge_sort(a, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">    <span class=\"comment\">// 并</span></span><br><span class=\"line\">    merge(a, low, high, mid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"归并排序性能评估\"><a class=\"markdownIt-Anchor\" href=\"#归并排序性能评估\">#</a> 归并排序性能评估</h5>\n<ul>\n<li>归并排序是一个稳定的排序算法</li>\n<li>归并排序的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>归并排序的空间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h5 id=\"归并排序时间复杂度的推算\"><a class=\"markdownIt-Anchor\" href=\"#归并排序时间复杂度的推算\">#</a> 归并排序时间复杂度的推算</h5>\n<p>归并排序这种实现方式的时间复杂度的推算，也就是对递归的时间复杂度的推算。</p>\n<p><strong>不仅递归求解的问题可以写成递推公式，递归代码的时间复杂度也可以写成递推公式</strong></p>\n<p>递归的主要特征就是:<br>\n 一个问题 a, 可以拆分为多个子问题 b,c, 那么求解 a 问题就转换成了求解子问题 b,c。b 和 c 解决之后，我们就把 b,c 的结果合并成 a 的结果.</p>\n<p>那 我们假设 求解 a 问题的时间是 T (a), 求解问题 b,c 的时间为 T (b),T©, 那么我就可以得到这样的递推公式:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">T(a) = T(b) + T(c) + K\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span></p>\n<p>其中， <code>K</code>  是解决完子问题 <code>b</code> , <code>c</code>  之后，合并为 a 问题所需要的时间。 对于归并排序来讲， <code>K</code>  就是  <code>merge</code>  所需要的时间了.</p>\n<h5 id=\"那我们来详细的分析下归并排序时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#那我们来详细的分析下归并排序时间复杂度\">#</a> 那我们来详细的分析下归并排序时间复杂度:</h5>\n<p>假设:<br>\n 对 n 个元素，进行归并排序的时间为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><br>\n 那么:<br>\n 分解成两个子数组排序的时间都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><br>\n merge 函数合并两个有序子数组的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>套用前面的公式:</p>\n<p>当 <code>n=1</code>  时: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, 常量级的执行时间.<br>\n 当 <code>n&gt;1</code>  时: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n)=2*T(n/2)+n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>2</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>2</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mo>=</mo><mn>4</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>2</mn><mo>∗</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>4</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mo>=</mo><mn>8</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>3</mn><mo>∗</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>8</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>16</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mo>=</mo><mn>16</mn><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>16</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>4</mn><mo>∗</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>k</mi><mo>∗</mo><mi>n</mi><mo separator=\"true\">;</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nT(n) &amp;= 2*T(n/2)+n\\\\\n    &amp;= 2 * (2 * T(n/4) + n/2) + n = 4 * T(n/4) + 2 * n \\\\\n    &amp;= 4 * (2 * T(n/8) + n/4) + n = 8 * T(n/8) + 3 * n \\\\\n    &amp;= 8 * (2 * T(n/16) + n/8) + n = 16 * T(n/16) = 4 * n \\\\\n    &amp;= ....\\\\\n    &amp;= 2^k * T(\\frac{n}{2^k}) + k * n;\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:9.593560000000004em;vertical-align:-4.546780000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.046780000000001em;\"><span style=\"top:-7.314340000000001em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span><span style=\"top:-5.8143400000000005em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.31434em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.8143399999999996em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.3143399999999996em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:0.4532200000000014em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.546780000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.046780000000001em;\"><span style=\"top:-7.314340000000001em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-5.8143400000000005em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-4.31434em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.8143399999999996em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-1.3143399999999996em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span><span style=\"top:0.4532200000000014em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">;</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.546780000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 就是分裂的次数。拆分子问题的次数.</p>\n<p>当 n=1, 则 k=0. , 即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(1) = T(\\frac{n}{2^k})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1074199999999998em;vertical-align:-0.3574199999999999em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.64258em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7820285714285713em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3574199999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span>, ==&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2^k}=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0528119999999999em;vertical-align:-0.3574199999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.64258em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7820285714285713em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3574199999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, 那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k=log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span></p>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 代入公式</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><msup><mn>2</mn><mi>k</mi></msup><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>k</mi><mo>∗</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></msup><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>n</mi><msup><mn>2</mn><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></msup></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>∗</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>C</mi><mo separator=\"true\">⋅</mo><mi>n</mi><mo>+</mo><mi>n</mi><mo separator=\"true\">⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp; 2^k * T(\\frac{n}{2^k}) + k * n \\\\\n&amp;= 2^{log_2n} * T(\\frac{n}{2^{log_2n}}) + log_2n * n \\\\\n&amp;= C·n + n·log_2n\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.68712em;vertical-align:-2.5935599999999996em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.09356em;\"><span style=\"top:-5.09356em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.0000000000000004em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.1740000000000008em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5935599999999996em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.09356em;\"><span style=\"top:-5.09356em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.0000000000000004em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-1.1740000000000008em;\"><span class=\"pstrut\" style=\"height:3.1075600000000003em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5935599999999996em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>使用大<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span> 表示法: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>归并排序的执行效率和要排序的原始数据的有序程度无关，所以不管最好情况和最坏情况下都是，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序",
                "冒泡排序",
                "分治思想排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/",
            "title": "选择排序",
            "date_published": "2021-09-01T04:33:55.000Z",
            "content_html": "<h2 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\">#</a> 基本思想</h2>\n<p>以第一个元素为基准，与后面的元素进行对比。选择最值 (最大值 / 最小值) 与当前位置进行交换。对每个元素都为基准比较，这就是排序过程了.</p>\n<h2 id=\"实现过程\"><a class=\"markdownIt-Anchor\" href=\"#实现过程\">#</a> 实现过程</h2>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E6%8E%92%E5%BA%8F01-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F01.png\" alt=\"算法01-排序01-选择排序01.png\"></p>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">select_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_value_index = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// select the min value index and record it</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[min_value_index] &gt; a[j]) &#123;</span><br><span class=\"line\">                min_value_index = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min_value_index != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a[min_value_index];</span><br><span class=\"line\">            a[min_value_index] = a[i];</span><br><span class=\"line\">            a[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"comment\">// print(a, length);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排序算法的评估\"><a class=\"markdownIt-Anchor\" href=\"#排序算法的评估\">#</a> 排序算法的评估</h2>\n<ul>\n<li>基于比较，交换的排序算法.</li>\n<li>空间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, 是一种原地排序算法.</li>\n<li>最好情况，最坏情况，平均情况，的时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>是不是</strong>稳定的排序算法？<br>\n 主要取决于:   <code>if (a[min_value_index] &gt; a[j]) &#123;min_value_index = j;&#125;</code> <br>\n 如果是   <code>a[min_value_index] &gt;= a[j]</code>  就是不稳定的排序算法.</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "排序",
                "交换排序",
                "选择排序"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/",
            "title": "哈希算法",
            "date_published": "2021-09-01T04:17:55.000Z",
            "content_html": "<h2 id=\"哈希算法\"><a class=\"markdownIt-Anchor\" href=\"#哈希算法\">#</a> 哈希算法</h2>\n<p>哈希算法，又称为：散列函数，散列算法。</p>\n<p>哈希算法是指将任意长度的二进制值串映射为固定长度的二进制串的这一规则。</p>\n<p>举个例子:  <code>Jdk</code>  的 <code>HashMap</code>  中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看似实现非常简单，但是设计一个优秀的哈希算法却不是简单的事情。优秀的 Hash 算法有什么要求？</p>\n<ul>\n<li>从 Hash 值不能反向推导出原始数据，所以哈希算法也叫单向哈希算法。</li>\n<li>对输入数据敏感，修改了原始数据中的一个 bit，最后得到的哈希值也大不相同。</li>\n<li>哈希冲突 (也叫哈希碰撞) 的概率要很小，对于不同的原始数据，哈希值相同的概率非常小。</li>\n<li>哈希算法的执行效率要尽量高效，针对较长的文本，也能快速地计算出哈希值。</li>\n</ul>\n<p>我们再来看一个哈希算法的例子: MD5 () 函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MD5Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class=\"line\">        System.out.println(md5(<span class=\"string\">&quot;123456789&quot;</span>)); <span class=\"comment\">// 25f9e794323b453885f5181f1b624d0b</span></span><br><span class=\"line\">        System.out.println(md5(<span class=\"string\">&quot;123456788&quot;</span>)); <span class=\"comment\">// f5f091a697cd91c4170cda38e81f4b1a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">md5</span><span class=\"params\">(String input)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class=\"line\">        MessageDigest md5 = MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">        md5.update(input.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] digest = md5.digest();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"number\">1</span>, digest).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先从哈希后的串反推出原始字符串是非常困难的。在第二个字符串仅仅是将 9 改成了 8，但是 Hash 后的值是完全不一样的。<br>\n对于任何一种哈希算法我们都只能尽量的减少其冲突的概率，理论上是不可能做到完全不冲突的。在组合数学中有一个著名的理论就是：<span class=\"label success\">抽屉原理，也叫鸽巢原理。如果有 10 个鸽巢，但是有 11 只鸽子，那么肯定会有一个鸽巢中的鸽子数量多于一个。也就是肯定会有一个鸽巢里有两只鸽子</span>。同理而言，不管我们对什么样的数据进行哈希运算，得出的哈希值的长度是固定的，但是要哈希运算的原始数据确实无穷无尽的。以 MD5 算法为例。我们生成了 32 位的 16 进制数的字符串，那么我们生成串的可能性为 16^32 种。如果我们是第 16^32 + 1 个数据进行哈希运算肯定就会产生 哈希冲突。</p>\n<p>但是：我们可以轻易的得出这样一个结论:</p>\n<p><b>哈希值越长的哈希算法，散列冲突的概率越低</b></p>\n<p>那么哈希算法，主要应用在哪些方面呢？</p>\n<h2 id=\"哈希算法的应用\"><a class=\"markdownIt-Anchor\" href=\"#哈希算法的应用\">#</a> 哈希算法的应用</h2>\n<h3 id=\"安全加密\"><a class=\"markdownIt-Anchor\" href=\"#安全加密\">#</a> 安全加密</h3>\n<p>上面我们提到了 MD5 算法，这个是老生常谈的加密算法了，据说已经被破解了。</p>\n<ul>\n<li>MD5 算法 : message digest Algorithm MD5 消息摘要算法。</li>\n<li>SHA 算法 : Secure Hash Algorithm 安全散列算法</li>\n<li>DES 算法 : data Encryption Standard 数据加密标准</li>\n<li>AES 算法 : Advanced Encryption Standard 高级加密标准。</li>\n</ul>\n<p>对用于加密的哈希算法，有两个特别重要的要求: 1. 很难通过 Hash 值推导出原始的字符串。2. 散列冲突的概率要很小。</p>\n<h3 id=\"唯一标识\"><a class=\"markdownIt-Anchor\" href=\"#唯一标识\">#</a> 唯一标识</h3>\n<ul>\n<li>md5: 例如：我们可以把每个图片的唯一标识，图片的路径都存储到散列表中，要查看什么图片的时候可以根据唯一标识去查到对应的图片。</li>\n</ul>\n<h3 id=\"数据校验\"><a class=\"markdownIt-Anchor\" href=\"#数据校验\">#</a> 数据校验</h3>\n<ul>\n<li>我们常说的，检验一个文件是否被修改过，要检验下 md5 值。我们可以通过对比，来校验数据的完整性和正确性。</li>\n</ul>\n<h3 id=\"散列函数\"><a class=\"markdownIt-Anchor\" href=\"#散列函数\">#</a> 散列函数</h3>\n<ul>\n<li>Java 中 HashMap 等用来计算哈希值。对散列的平均性和哈希算法的执行效率要求较高。</li>\n</ul>\n<h3 id=\"负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#负载均衡\">#</a> 负载均衡</h3>\n<ul>\n<li>负载均衡算法，有很多，比如轮询算法，随机算法，加权轮询算法。</li>\n</ul>\n<h3 id=\"数据分片\"><a class=\"markdownIt-Anchor\" href=\"#数据分片\">#</a> 数据分片</h3>\n<ul>\n<li>典型的数据库的分库分表等海量数据的查询场景</li>\n</ul>\n<h3 id=\"分布式存储\"><a class=\"markdownIt-Anchor\" href=\"#分布式存储\">#</a> 分布式存储</h3>\n<ul>\n<li>这种的就是对海量数据的存储场景。比如分布式缓存 (Redis)，如何判断该条数据分配在哪台 Redis 中。</li>\n</ul>\n<p><b>哈希算法的几种使用场景，介绍完毕，我们重新来看看这种 Hash 算法在应用中有什么缺陷</b></p>\n<h2 id=\"一致性哈希算法\"><a class=\"markdownIt-Anchor\" href=\"#一致性哈希算法\">#</a> 一致性哈希算法</h2>\n<p>在负载均衡，数据分片，分布式存储三种场景中，都有一个明显的特点就是，通过分布式集群的方式来对海量数据进行处理。</p>\n<p>这时，假设在集群中突然一台机器宕机，被迫下线。这时会出现什么问题呢？</p>\n<p>我再来详细的描述下这个场景。</p>\n<p>以分布式缓存为例：</p>\n<p>假设我们使用 Redis 集群做图片资源的缓存，Redis 的 key 是图片的名称，value 是对应服务器的路径。如果数据是 1000w，那么我们用 5 台服务器进行缓存，每台服务器大于 200w 数据，并且是都是主从的架构。<br>\n如下图：</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E4%B8%80%E8%87%B4%E6%80%A7Hash1.png\" alt=\"\"></p>\n<p>很简单的存储方式： 我们对没他图片的名称进行哈希运算，并对得出的哈希值和 5 进行取模运算，得到这个图片资源所在的服务器，去获取数据。<br>\n比如： hash (2020053000001.png) % 5 = 3，表示位于第 4 台服务器上。</p>\n<p><b>很不幸！！！，突然有台机器宕机了，并且这台机器被踢下线了，集群中机器由 5 台 变成了 4 台 (减)</b></p>\n<p>那么这时会有什么问题呢？ 我们会发现所有的图片资源都无法命中缓存资源了。这时就出现所谓的 “缓存雪崩”。</p>\n<p>为什么呢？本来 hash (2020053000001.png) % 5 = 3，由于集群中只有 4 台机器了，那么 hash (2020053000001.png) % 4 = 3 就一定不会是 3 了吧！</p>\n<p>这时候你就说了，我们还是对 5 取模不就行了？这样至少其他 4 台缓存服务器还可以正常提供服务。但是这样所有命中宕机服务器的缓存都会打到数据库，这样还是有可能直接导致数据库宕机的！</p>\n<p>怎么办呢？</p>\n<p><b>一波不平，一波又起！随着访问量的增大，缓存服务器不堪重负！缓存服务器要从 5 台增加到 8 台！(增)</b></p>\n<p>同样的问题： hash (2020053000001.png) % 5 = 3 ，但是 hash (2020053000001.png) % 8 = ?? , 有一次 “雪崩！”</p>\n<p>怎么办呢？</p>\n<p><b>第三波！经过长时间的监控，发现缓存服务器的压力主要集中在晚上的 7:00 - 10:00 之间，其他时间段的压力就很小！(假)</b></p>\n<p>要求实现可以动态的扩张和缩小集群的数量。</p>\n<p>怎么办呢？</p>\n<p><b>重要嘉宾： 一致性哈希算法</b></p>\n<p>什么是一致性哈希算法呢？</p>\n<p>刚才在第一波的时候，说过我们可以对 5 取模啊。这个思路是可以的，但是不能根据集群中服务器数量来进行取模运算，而是要对一个固定大的数来取模运算（2^32=4294947297（最大的非符号整形数））。 那哈希值对应的位置上没有机器怎么办？我来解释下，一致性哈希算法的整体逻辑：</p>\n<p>一致性哈希算法是将整个哈希值空间组织成一个虚拟的圆环。而且这个哈希值空间的大小为  <code>[0, 2^32-1]</code> , 如下图。</p>\n<p>从 0 开始，顺时针计数，直到 2^32-1, 这 2^32 个点组成的圆环称为 Hash 环。</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E4%B8%80%E8%87%B4%E6%80%A7Hash2.png\" alt=\"哈希图\"></p>\n<p>还是以上面的场景， 5 台服务器随机分布在环上，如下图，</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E4%B8%80%E8%87%B4%E6%80%A7Hash3.png\" alt=\"哈希图\"></p>\n<p>常量 MAX_VALUE = 2 ^ 32;</p>\n<ul>\n<li>假设图片资源: hash (20200530004562.png) = 4；如果第 4 个位置上正好有一台服务器，就直接将这个条数据缓存到该台服务器上。</li>\n<li>假设图片资源：hash (20200530015456.png) = 46581；在第 46581 上并没有服务器，那么以顺时针的方向，进行遍历，直到遇到第一台服务器 58941，缓存到该台服务器 58941 上。</li>\n</ul>\n<p>如下图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E4%B8%80%E8%87%B4%E6%80%A7Hash4.png\" alt=\"哈希图\"></p>\n<p>我们再来看看我们的三波:</p>\n<ul>\n<li><b>突然有一台机器宕机！</b></li>\n</ul>\n<p>假设 65594 这台机器宕机，那么就无法查询缓存在 65594 这台机器上的数据，程序会顺时针方向进行查找，找到 73214 这台机器，获取缓存为空，查询数据库后将数据缓存到 73214 这台机器上。</p>\n<ul>\n<li><b>新增机器到集群中</b></li>\n</ul>\n<p>假设 在集群节点号 73214 和 138956 之间插入一台机器 100354 。那么原来 hash 在 (73214,100354] 之前的数据，就不会缓存到 138956 节点了，</p>\n<ul>\n<li><b>动态</b></li>\n</ul>\n<p>在新增和删除完成之后，动态，理论上也是 OK 的。具体实现的话，就是监控访问流量，根据流量阈值设置动态的扩展和 “踢下线机器”(将机器给其他业务用)。</p>\n<h3 id=\"一致性哈希缺点\"><a class=\"markdownIt-Anchor\" href=\"#一致性哈希缺点\">#</a> 一致性哈希缺点</h3>\n<h4 id=\"数据倾斜\"><a class=\"markdownIt-Anchor\" href=\"#数据倾斜\">#</a> 数据倾斜</h4>\n<p>一致性哈希算法，当在服务器节点数量太少的时候，容易出现分配不均而导致数据倾斜。比如，我们有三台服务器，如下图分布:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E4%B8%80%E8%87%B4%E6%80%A7Hash5.png\" alt=\"哈希图\"></p>\n<p>假设大量数据哈希后的值在 [C,MaxValue] 之间，那么所有的数据都会散列到第 1 个节点上。</p>\n<p>这种问题，怎么解决呢？</p>\n<p><b>虚拟节点</b></p>\n<p>假设我们有 5 台服务器节点，防止各节点分布不均匀的问题，我们可以一台服务其进行多次哈希运算，从而虚拟出个节点。</p>\n<p>假设我们原来对服务器 1 的 IP (192.168.0.1) 进行哈希，我们使用虚拟节点的方式进行哈希的时候，我们可以对（192.168.0.1#1），（192.168.0.1#2），（192.168.0.1#3），（192.168.0.1#4）。这样 5 台机器，就可以有 20 个节点。从而加大了哈希后分布的随机性。解决了服务节点少时数据倾斜的问题。实际应用中，至少要大于 32 。</p>\n<p>好了，关于一致性哈希的相关内容，本篇文章就介绍到这里。</p>\n<p><b>下一篇文章《一致性 Hash 算法的实现》请期待 </b></p>\n<p>如果有什么问题，欢迎你私信我，我们一起交流哇。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "哈希算法"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "title": "动态规划",
            "date_published": "2021-09-01T04:13:55.000Z",
            "content_html": "<p>👉 <span class=\"label success\">动态规划其实就是动态递推</span>👈</p>\n<h2 id=\"要点\"><a class=\"markdownIt-Anchor\" href=\"#要点\">#</a> 要点</h2>\n<ul>\n<li>递归 + 记忆化 -&gt; 递推 (自下而上的递推)</li>\n<li>状态的定义，opt [n],dp [n],fib [n]</li>\n<li>状态转移方程 (dp 方程)， opt [n]=best_of (opt [n-1],opt [n-2])</li>\n<li>最优子结构</li>\n</ul>\n<h2 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h2>\n<h3 id=\"斐波那契数列\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h3>\n<p>我们先使用递归的方式，我们实现斐波那契数列.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib1(6)=%d\\n&quot;</span>, fib1(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib2(6)=%d\\n&quot;</span>, fib2(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案一</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案二</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib2</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// return n&lt;=1?1:fib1(n - 1) + fib1(n - 2);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib.png\" alt=\"算法01-动态规划01-fib.png\"><br>\n 此时的时间复杂度为 O (2^n). 如上图，最后的结果是每个节点是累加起来，那么有多少个节点呢？2^n 个节点。<br>\n根据这张图，我们可以发现，个别 &quot;节点&quot; 出现了重复的情况，这个时候我们就用到了记忆化的方式进行优化。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib3(6)=%d\\n&quot;</span>, fib3(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案三</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n  第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mem[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mem[n]) &#123;</span><br><span class=\"line\">        mem[n] = fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mem[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就省去了个别节点的计算过程了。如下图<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib02.png\" alt=\"算法01-动态规划01-fib02.png\"> 其中虚线边框的就不用再计算了。</p>\n<p>这样的话，我们把时间复杂度优化到了 O (n).</p>\n<p>然后我们就可以发现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fib(n) = fib(n-1) + fib(n-2);</span><br></pre></td></tr></table></figure>\n<p>这个就是我们的状态转移方程 (dp 方程)。<br>\n比较的简单的 fib，一般我们就成为这个为递推公式。</p>\n<h3 id=\"计算路线\"><a class=\"markdownIt-Anchor\" href=\"#计算路线\">#</a> 计算路线</h3>\n<h4 id=\"例题描述\"><a class=\"markdownIt-Anchor\" href=\"#例题描述\">#</a> 例题描述</h4>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%84.png\" alt=\"算法01-动态规划02-计算路径.png\"></p>\n<p>只能横着走或者竖着走，假设有一个人总 start 处，走到 end 处，一共有多少条路线？</p>\n<h4 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h4>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8402.png\" alt=\"算法02-动态规划03-计算路径02.png\"></p>\n<p>从 start 到 end 的所有路线，等于 B 到 end 路线加上 A 到 end 的路线。因为 start 要到 end，要么到 A, 从 A 走到 end, 要么到 B，从 B 走到 end。那么同理 B 到 end 就等于 C 到 end 的路线到 E 到 end 的路线。D 到 end 等于 C 到 end 的路线加上 D 到 end 的路线.<br>\n 这是我们可以得出如下的推导公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">path(start,end)=path(A,end) + path(B,end)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>同理:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">path(A,end)=path(D,end) + path(C,end) \\\\ path(B,end) = path(E,end) + path(C,end)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>一直到最下面的一行，最下面的这一行的每个点到 end 的路线只有一条，所以每个都是 1, 同样的最右侧的一列，每个都是 1. 如下图.<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8403.png\" alt=\"算法01-动态规划02-计算路径03.png\"><br>\n 经过上面的分析，F 到 end 有几条路线呢？两条。由于 G 右侧是黑色的不能通过，所以 G 只有 1 条，H 就有 2 条，就有 3 条，K 有 3 条，L 有 1 条。所以有了下面的这张图，图中的数字就是路线数.<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8404.png\" alt=\"算法01-动态规划02-计算路径04.png\"></p>\n<p>根据以上的推论我们尝试写出这样的代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countPaths</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!validSquare(grid,row,col))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isEnd(grid,row,col))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> countPaths(grid,row+<span class=\"number\">1</span>,col) + countPaths(grid,row,col+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我根据推论可以得出状态转移方程:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a[i,j] == <span class=\"string\">&#x27;白色&#x27;</span>:</span><br><span class=\"line\">   opt[i,j] = opt[i+<span class=\"number\">1</span>,j] + opt[i,j+<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   opt[i,j] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"程序实现\"><a class=\"markdownIt-Anchor\" href=\"#程序实现\">#</a> 程序实现</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paths[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=m;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        paths[i][n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j =n; j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">        paths[m][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span> ; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            paths[i][j] = paths[i+<span class=\"number\">1</span>][j] + paths[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paths[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dp-vs-回溯-vs-贪心\"><a class=\"markdownIt-Anchor\" href=\"#dp-vs-回溯-vs-贪心\">#</a> DP vs 回溯 vs 贪心</h2>\n<ul>\n<li>回溯 (递归) - 重复计算</li>\n<li>贪心 - 永远局部最优</li>\n<li>DP - 记录局部最优子结构 / 多种记录值。(集两者之大成)</li>\n</ul>\n<p>三者并没有明显的界限。贪心不是局部最优的时候，回溯避免了重复计算之后，就是了动态规划了。</p>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h2>\n<h3 id=\"爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#爬楼梯\">#</a> 爬楼梯</h3>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>\n注意：给定 n 是一个正整数</p>\n<h4 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h4>\n<p>如下面的图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9203-%E7%88%AC%E6%A5%BC%E6%A2%AF01.png\" alt=\"算法01-动态规划03-爬楼梯01.png\"></p>\n<p>因为我们只有两种走法，要么跨一个台阶，要么跨两个台阶。那么如图中我们爬到第 10 层台阶的走法就等于第 9 (10-1) 层台阶的走法和第 8 (10-2) 层台阶的走法的和。即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>10</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">stairs(10)=stairs(9)+stairs(8)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span>, 那么我们爬第一层台阶是 1 种走法，第二层台阶就是 2 种走法。所以我们就可以得出我们的递推公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">stairs(n) = stairs(n-1) + stairs(n-2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>我们可以得出，这就是斐波那契数列。</p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "动态规划",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/04.ES%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/04.ES%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "title": "Elastic Search基本概念",
            "date_published": "2021-08-31T08:28:55.000Z",
            "content_html": "<h1 id=\"文档\"><a class=\"markdownIt-Anchor\" href=\"#文档\">#</a> 文档</h1>\n<p><code>es</code>  是面向文档的，文档是 <code>es</code>  中可搜索的最小单位， <code>es</code>  的文档由一个或多个字段组成，类似于关系型数据库中的一行记录，但 <code>es</code>  的文档是以 <code>JSON</code>  进行序列化并保存的，每个 <code>JSON</code>  对象由一个或多个字段组成，字段类型可以是布尔，数值，字符串、二进制、日期等数据类型。<br>\n <code>es</code>  每个文档都有唯一的 <code>id</code> , 这个 <code>id</code>  可以由我们自己指定，也可以由 <code>es</code>  自动生成。</p>\n<p><code>es</code>  每一个文档，除了保存我们写入进行的文档原始数据外，也有文档自己的元数据，这些元数据，用于标识文档的相关信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;_index&quot;</span> : <span class=\"string\">&quot;fxb_test&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_type&quot;</span> : <span class=\"string\">&quot;_doc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_id&quot;</span> : <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_version&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_seq_no&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_primary_term&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;found&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_source&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;username&quot;</span> : <span class=\"string\">&quot;fxb&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的文档中，我们可以看文档的元数据字段如下：</p>\n<p><code>_index</code> ：文档所在索引名称<br>\n <code>_source</code> ：原始 <code>json</code>  数据<br>\n <code>_type</code> ：文档所属类型， <code>es7.0</code>  以后只有为  <code>_doc</code> <br>\n <code>_version</code> ：文档版本，如果对文档进行修改，则该字段会增加<br>\n <code>_score</code> ：相关性打分<br>\n <code>id</code> ：文档唯一 id</p>\n<h1 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h1>\n<p><code>es</code>  索引，是 <code>es</code>  组织文档的方式，是拥有相结构文档的集合，可以把 <code>es</code>  的索引类比为关系型数据库的一张数据表。<br>\n索引是 <code>ES</code>  中非常重要的一种数据结构。后面我们会着重的学习其原理。</p>\n<p>比如，我们想创建一个索引，可以在 kibana 使用下面的命令:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建索引</span></span><br><span class=\"line\">PUT /fxb_test</span><br></pre></td></tr></table></figure>\n<p>右侧就会输出：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;acknowledged&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;shards_acknowledged&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;index&quot;</span> : <span class=\"string\">&quot;fxb_test&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如图:</p>\n<p><img data-src=\"/images/es-series/create-index.png\" alt=\"\"></p>\n<h2 id=\"mapping\"><a class=\"markdownIt-Anchor\" href=\"#mapping\">#</a> Mapping</h2>\n<p><code>Mapping</code>  是对 索引的定义。 类似的 <code>MySQL</code>  中表结构定义， ES 中支持手动定义 <code>Mapping</code>  ， 动态映射这两种方式。</p>\n<p>比如，我们上面创建的  <code>fxb_test</code>  索引，就可以使用动态映射方式生成的 Mapping。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加一个文档到 fxb_test 索引中</span></span><br><span class=\"line\">POST /fxb_test/_create/1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;黄岛主&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;age&quot;</span>:57,</span><br><span class=\"line\">  <span class=\"string\">&quot;sex&quot;</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;_index&quot;</span> : <span class=\"string\">&quot;fxb_test&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_type&quot;</span> : <span class=\"string\">&quot;_doc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_id&quot;</span> : <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_version&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span> : <span class=\"string\">&quot;created&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_shards&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;total&quot;</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;successful&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;failed&quot;</span> : <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_seq_no&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_primary_term&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后，我们看下自动映射出来的 Mapping</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看索引的Mapping</span></span><br><span class=\"line\">GET /fxb_test</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;fxb_test&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;mappings&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;properties&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;age&quot;</span> : &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;sex&quot;</span> : &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;text&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;fields&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;keyword&quot;</span> : &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;keyword&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;ignore_above&quot;</span> : <span class=\"number\">256</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;username&quot;</span> : &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;text&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;fields&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;keyword&quot;</span> : &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;keyword&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;ignore_above&quot;</span> : <span class=\"number\">256</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就先简单了解一下，相关的命令。 至于上面每个字段的含义以及作用，我们后面详细介绍。</p>\n<h1 id=\"集群\"><a class=\"markdownIt-Anchor\" href=\"#集群\">#</a> 集群</h1>\n<p>ES 的集群搭建很简单，不需要依赖第三方协调管理组件，自身内部就实现了集群的管理功能。 <code>ES</code>  集群由一个或多个 <code>Elasticsearch</code>  节点组成，每个节点配置相同的  <code>cluster.name</code>  即可加入集群，默认值为 “ <code>elasticsearch</code> ”。确保不同的环境中使用不同的集群名称，否则最终会导致节点加入错误的集群。</p>\n<p>一个 <code>Elasticsearch</code>  服务启动实例就是一个节点（ <code>Node</code> ）。节点通过  <code>node.name</code>  来设置节点名称，如果不设置则在启动时给节点分配一个随机通用唯一标识符作为名称。</p>\n<h1 id=\"分片\"><a class=\"markdownIt-Anchor\" href=\"#分片\">#</a> 分片</h1>\n<p><code>ES</code>  支持 <code>PB</code>  级全文搜索，当索引上的数据量太大的时候， <code>ES</code>  通过水平拆分的方式将一个索引上的数据拆分出来分配到不同的数据块上，拆分出来的数据库块称之为一个分片。</p>\n<p>这类似于 <code>MySQL</code>  的分库分表，只不过 <code>MySQL</code>  分库分表需要借助第三方组件而 ES 内部自身实现了此功能。</p>\n<p>在一个多分片的索引中写入数据时，通过路由来确定具体写入哪一个分片中，所以在创建索引的时候需要指定分片的数量，并且分片的数量一旦确定就不能修改。</p>\n<p>分片的数量和下面介绍的副本数量都是可以通过创建索引时的 <code>settings</code>  来配置， <code>ES</code>  默认为一个索引创建 <code>1</code>  个主分片 ( <code>ES 7.x</code> ), 并分别为每个分片创建一个副本。</p>\n<p><code>ES</code>  通过分片的功能使得索引在规模上和性能上都得到提升，每个分片都是 <code>Lucene</code>  中的一个索引文件，每个分片必须有一个主分片和零到多个副本。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建2个副本，5个分片的索引</span></span><br><span class=\"line\">PUT /fxb_test2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;settings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;number_of_replicas&quot;</span>: 2,</span><br><span class=\"line\">    <span class=\"string\">&quot;number_of_shards&quot;</span>: 5</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回结果:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;acknowledged&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;shards_acknowledged&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;index&quot;</span> : <span class=\"string\">&quot;fxb_test2&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"副本\"><a class=\"markdownIt-Anchor\" href=\"#副本\">#</a> 副本</h1>\n<p>副本就是对分片的 <code>Copy</code> ，每个主分片都有一个或多个副本分片，当主分片异常时，副本可以提供数据的查询等操作。主分片和对应的副本分片是不会在同一个节点上的，所以副本分片数的最大值是  <code>n-1</code> （其中 n 为节点数）。</p>\n<p>对文档的新建、索引和删除请求都是写操作，必须在主分片上面完成之后才能被复制到相关的副本分片， <code>ES</code>  为了提高写入的能力这个过程是并发写的，同时为了解决并发写的过程中数据冲突的问题， <code>ES</code>  通过乐观锁的方式控制，每个文档都有一个  <code>_version</code>  （版本）号，当文档被修改时版本号递增。一旦所有的副本分片都报告写成功才会向协调节点报告成功，协调节点向客户端报告成功。</p>\n<p>关于， <code>ES</code>  的基本概念，就介绍到这里。<br>\n下一篇: 《 <code>ES</code>  索引管理》</p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Elastic Search",
                "搜索"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/03.ES%E9%85%8D%E7%BD%AE/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/03.ES%E9%85%8D%E7%BD%AE/",
            "title": "Elastic Search配置",
            "date_published": "2021-08-31T07:28:55.000Z",
            "content_html": "<h1 id=\"elastic-search配置\"><a class=\"markdownIt-Anchor\" href=\"#elastic-search配置\">#</a> Elastic Search 配置</h1>\n<p><code>ES</code>  提供了很多默认的参数设置，使我们不用添加任何参数就可以成功的启动 <code>ES</code> 。 作为一个认真的学习者。我们还是来一起看看 如何更好的自定义  <code>ES</code>  配置。 详细的配置内容，可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS9jdXJyZW50L3NldHRpbmdzLmh0bWw=\">https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html</span>.</p>\n<p><code>ES</code>  的属性，分为 静态属性 和 动态属性。<br>\n所有的静态属性，都必须重启后才能生效。<br>\n对于动态属性可以通过调用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _nodes/reload_secure_settings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;secure_settings_password&quot;</span>: <span class=\"string\">&quot;s3cr3t&quot;</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>”s3cr3t“</code> , 是 <code>ES-keystore</code>  生成的秘钥。调用时需要替换为自己设置的秘钥.</p>\n<p>支持热加载的属性有:  <code> Azure repository plugin</code> , <code> EC2 discovery plugin</code> , <code>GCS repository plugin</code> , <code>S3 repository plugin</code> ,  <code>Monitoring settings</code> , <code>Watcher settings</code> 。如果想了解更多，可以在  <code>https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html</code>  查询。</p>\n<p>在 ES 的安装目录，很明显的有一个  <code>config</code>  目录。进入之后，可以看到</p>\n<p><img data-src=\"./images/es-series/ES-config%E7%9B%AE%E5%BD%95.png\" alt=\"\"></p>\n<ul>\n<li><code>elasticsearch.keystore</code> :  <code>Elasticsearch</code>  提供了密钥库和 <code>elasticsearch-keystore</code>  用于管理密钥库设置的工具。</li>\n</ul>\n<p>接下来，我们重点来看下和配置相关的三个文件</p>\n<ul>\n<li><code>elasticsearch.yml</code> :</li>\n<li><code>jvm.options</code> :</li>\n<li><code>log4j2.properties</code> :</li>\n</ul>\n<p>和权限相关的。</p>\n<ul>\n<li><code>role_mapping.yml</code></li>\n<li><code>roles.yml</code></li>\n<li><code>users</code></li>\n<li><code>users_roles</code></li>\n</ul>\n<p>这里我们先不深入了解。</p>\n<h1 id=\"elasticsearch-设置介绍\"><a class=\"markdownIt-Anchor\" href=\"#elasticsearch-设置介绍\">#</a> elasticsearch 设置介绍</h1>\n<p>有些设置是非常敏感的，仅依靠文件系统权限来保护它们的值是不够的。对于这个用例， <code>Elasticsearch</code>  提供了一个密钥存储库和 <code>Elasticsearch-keystore</code>  工具来管理密钥存储库中的设置。设计仅从密钥库中读取某些设置。 但是，密钥库没有验证来阻止不支持的设置。 将不支持的设置添加到密钥库中会导致 <code>Elasticsearch</code>  无法启动。</p>\n<p><b>对密钥库的所有修改仅在重新启动 <code>Elasticsearch</code>  之后生效。</b><br>\n这些设置与  <code>elasticsearch.yml</code>  配置文件中的常规设置一样，需要在集群的每个节点上指定。 当前，所有安全设置都是特定于节点的设置，在每个节点上必须具有相同的值。</p>\n<h2 id=\"elasticserche-keystore-使用\"><a class=\"markdownIt-Anchor\" href=\"#elasticserche-keystore-使用\">#</a> elasticserche-keystore 使用</h2>\n<p>来看一下  <code>elasticsearch-keystore</code>  命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-keystore</span><br><span class=\"line\">* [add &lt;settings&gt;] [-f] [--stdin] :添加一个String的配置到keystore中</span><br><span class=\"line\">* [add-file (&lt;setting&gt; &lt;path&gt;)+] : 添加一个文件配置到keystore中</span><br><span class=\"line\">* [create] [-p]: 创建一个新的Es keyStore</span><br><span class=\"line\">* [list] : 展示keystore的项</span><br><span class=\"line\">* [passwd] : 修改 keystore的密码</span><br><span class=\"line\">* [remove &lt;setting&gt;] : 移除某些配置</span><br><span class=\"line\">* [upgrade] : 升级密钥库的内部格式。</span><br><span class=\"line\">* [has-passwd] - 验证是否有keystore并且有密码保护</span><br></pre></td></tr></table></figure>\n<p>简单使用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个keystore</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore create -p</span><br><span class=\"line\"><span class=\"comment\">## //输入密码</span></span><br><span class=\"line\">Enter new password <span class=\"keyword\">for</span> the elasticsearch keystore (empty <span class=\"keyword\">for</span> no password):</span><br><span class=\"line\"><span class=\"comment\">## // 确认密码</span></span><br><span class=\"line\">Enter same password again:</span><br><span class=\"line\"><span class=\"comment\">## // 已经有keystore文件了，是否要覆盖</span></span><br><span class=\"line\">An elasticsearch keystore already exists. Overwrite? [y/N]y</span><br><span class=\"line\">Created elasticsearch keystore <span class=\"keyword\">in</span> /Users/bjhl/fxb_applicaton/fxb_program/elasticsearch-7.10.1/config/elasticsearch.keystore</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看秘钥库</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore list</span><br><span class=\"line\"><span class=\"comment\">## // 输入密码</span></span><br><span class=\"line\">Enter password <span class=\"keyword\">for</span> the elasticsearch keystore :</span><br><span class=\"line\">keystore.seed <span class=\"comment\"># 秘钥库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加设置到秘钥库中</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore add settings.name</span><br><span class=\"line\"><span class=\"comment\">## // 输入密码</span></span><br><span class=\"line\">Enter password <span class=\"keyword\">for</span> the elasticsearch keystore :</span><br><span class=\"line\"><span class=\"comment\">## 输入添加的设置的value</span></span><br><span class=\"line\">Enter value <span class=\"keyword\">for</span> settings.name:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到秘钥库</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore add-file file.name xxx.xx</span><br><span class=\"line\">Enter password <span class=\"keyword\">for</span> the elasticsearch keystore :</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除配置</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore remove settings.name</span><br><span class=\"line\">Enter password <span class=\"keyword\">for</span> the elasticsearch keystore :</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新keystore</span></span><br><span class=\"line\">&gt; ./elasticsearch-keystore upgrade</span><br><span class=\"line\">Enter password <span class=\"keyword\">for</span> the elasticsearch keystore :</span><br></pre></td></tr></table></figure>\n<h2 id=\"elasticsearchyml\"><a class=\"markdownIt-Anchor\" href=\"#elasticsearchyml\">#</a>  <code>elasticsearch.yml</code></h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 集群相关配置 -</span></span><br><span class=\"line\"><span class=\"comment\"># 集群的名称</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">my-application</span></span><br><span class=\"line\"><span class=\"comment\"># 更多关于集群的配置，参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html</span></span><br><span class=\"line\"><span class=\"comment\"># 跨集群配置:参考:https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 节点的名称</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">fxb-cluster-node-1</span></span><br><span class=\"line\"><span class=\"comment\"># 可以为集群添加一些自定义的属性配置</span></span><br><span class=\"line\"><span class=\"attr\">node.attr.zhName:</span> <span class=\"string\">方小白</span></span><br><span class=\"line\"><span class=\"comment\"># 更多节点相关的配置,参考</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 路径相关配置 -</span></span><br><span class=\"line\"><span class=\"comment\"># 指定存储数据的位置,多个路径的话，使用`,`分割 (separate multiple locations by comma)</span></span><br><span class=\"line\"><span class=\"attr\">path.data:</span> <span class=\"string\">/path/to/data</span></span><br><span class=\"line\"><span class=\"comment\"># 日志文件存储地址</span></span><br><span class=\"line\"><span class=\"attr\">path.logs:</span> <span class=\"string\">/path/to/logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 内存相关 -</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"attr\">bootstrap.memory_lock:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 确保将堆大小设置为系统上可用内存的一半左右，并确保进程的所有者可以使用此限制。系统交换内存时，Elasticsearch的性能较差。</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"comment\"># 启动端口</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"comment\"># 更多可以参考: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># 提供群集中符合主机资格的节点的地址列表。</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;host1&quot;</span>, <span class=\"string\">&quot;host2&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 设置初始的符合主机资格的节点集,【静态属性】</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;node-1&quot;</span>, <span class=\"string\">&quot;node-2&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 更多关于发现相关的配置,参考:https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"attr\">gateway.recover_after_nodes:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 更多内容，参考https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"jvm-参数-jvmoptions\"><a class=\"markdownIt-Anchor\" href=\"#jvm-参数-jvmoptions\">#</a> JVM 参数 =&gt; jvm.options</h2>\n<p><code>jvm.options</code>  包含使用特殊语法的以行分隔的 <code>JVM</code>  参数列表：</p>\n<ul>\n<li><code>#</code>  表示注释</li>\n<li>以 <code>-</code>  开头的行被视为独立于 <code>JVM</code>  版本而应用的 JVM 选项</li>\n<li>以 <code>&lt;数字&gt;:-</code>  开头的行被视为 <code>JVM</code>  选项，只有当 <code>JVM</code>  的版本与该数字匹配时才适用，比如: <code>8:-Xmx2g</code></li>\n<li>以  <code>&lt;数字&gt;-：</code> 开头 的行被视为 <code>JVM</code>  选项，仅在 <code>JVM</code>  版本大于或等于该数字时才适用。比如: <code>8-:-Xmx2g</code></li>\n<li>以 <code>&lt;数字&gt;-&lt;数字&gt;：</code> 开头的行被视为仅在 <code>JVM</code>  版本落在两个数字范围内时才适用的 <code>JVM</code>  选项。比如： <code>8-9:-Xmx2g</code></li>\n</ul>\n<p>Elasticsearch 默认配置 JVM 使用最小和最大大小为 1 GB 的堆。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## JVM configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################################################</span></span><br><span class=\"line\"><span class=\"comment\">## IMPORTANT: JVM heap size</span></span><br><span class=\"line\"><span class=\"comment\">################################################################</span></span><br><span class=\"line\"><span class=\"comment\">## 参考 https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#heap-size-settings</span></span><br><span class=\"line\"><span class=\"comment\"># Xms represents the initial size of total heap space</span></span><br><span class=\"line\"><span class=\"comment\"># Xmx represents the maximum size of total heap space</span></span><br><span class=\"line\"><span class=\"string\">-Xms1g</span></span><br><span class=\"line\"><span class=\"string\">-Xmx1g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################################################</span></span><br><span class=\"line\"><span class=\"comment\">## Expert settings: 高级设置</span></span><br><span class=\"line\"><span class=\"comment\">################################################################</span></span><br><span class=\"line\"><span class=\"comment\">## 不理解下面的属性，不建议修改</span></span><br><span class=\"line\"><span class=\"comment\">################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## GC configuration</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"number\">-13</span><span class=\"string\">:-XX:+UseConcMarkSweepGC</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"number\">-13</span><span class=\"string\">:-XX:CMSInitiatingOccupancyFraction=75</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"number\">-13</span><span class=\"string\">:-XX:+UseCMSInitiatingOccupancyOnly</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## G1GC Configuration</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> G1 GC is only supported on JDK version 10 or later</span></span><br><span class=\"line\"><span class=\"comment\"># to use G1GC, uncomment the next two lines and update the version on the</span></span><br><span class=\"line\"><span class=\"comment\"># following three lines to your version of the JDK</span></span><br><span class=\"line\"><span class=\"comment\"># 10-13:-XX:-UseConcMarkSweepGC</span></span><br><span class=\"line\"><span class=\"comment\"># 10-13:-XX:-UseCMSInitiatingOccupancyOnly</span></span><br><span class=\"line\"><span class=\"number\">14</span><span class=\"string\">-:-XX:+UseG1GC</span></span><br><span class=\"line\"><span class=\"number\">14</span><span class=\"string\">-:-XX:G1ReservePercent=25</span></span><br><span class=\"line\"><span class=\"number\">14</span><span class=\"string\">-:-XX:InitiatingHeapOccupancyPercent=30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## JVM temporary directory</span></span><br><span class=\"line\"><span class=\"string\">-Djava.io.tmpdir=$&#123;ES_TMPDIR&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## heap dumps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># generate a heap dump when an allocation from the Java heap fails</span></span><br><span class=\"line\"><span class=\"comment\"># heap dumps are created in the working directory of the JVM</span></span><br><span class=\"line\"><span class=\"string\">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># specify an alternative path for heap dumps; ensure the directory exists and</span></span><br><span class=\"line\"><span class=\"comment\"># has sufficient space</span></span><br><span class=\"line\"><span class=\"string\">-XX:HeapDumpPath=data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># specify an alternative path for JVM fatal error logs</span></span><br><span class=\"line\"><span class=\"string\">-XX:ErrorFile=logs/hs_err_pid%p.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## JDK 8 GC logging</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:+PrintGCDetails</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:+PrintGCDateStamps</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:+PrintTenuringDistribution</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:+PrintGCApplicationStoppedTime</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-Xloggc:logs/gc.log</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:+UseGCLogFileRotation</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:NumberOfGCLogFiles=32</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">:-XX:GCLogFileSize=64m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JDK 9+ GC logging</span></span><br><span class=\"line\"><span class=\"number\">9</span><span class=\"string\">-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"日志参数\"><a class=\"markdownIt-Anchor\" href=\"#日志参数\">#</a> 日志参数</h1>\n<p>可以看到  <code>ElasticSearch</code>  使用 <code>log4j2</code>  日志，关于此日志的配置，这里就不多赘述了。</p>\n<h1 id=\"系统配置\"><a class=\"markdownIt-Anchor\" href=\"#系统配置\">#</a> 系统配置</h1>\n<p>除了对  <code>ES</code>  的配置之外，如果想要更好的提升 ES 性能，还需对  <code>ES</code>  所依赖的宿主机进行一些属性配置。<br>\n比如：比如禁止 <code>swap</code>  等。更多内容，参考:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS9jdXJyZW50L3N5c3RlbS1jb25maWcuaHRtbA==\">https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html</span>.</p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Elastic Search",
                "搜索"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/02.ES%E5%AE%89%E8%A3%85/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/02.ES%E5%AE%89%E8%A3%85/",
            "title": "ES栈安装",
            "date_published": "2021-08-31T07:20:55.000Z",
            "content_html": "<h2 id=\"安装-elasticsearch-7101\"><a class=\"markdownIt-Anchor\" href=\"#安装-elasticsearch-7101\">#</a> 安装 ElasticSearch 7.10.1</h2>\n<h3 id=\"下载安装包\"><a class=\"markdownIt-Anchor\" href=\"#下载安装包\">#</a> 下载安装包</h3>\n<p>我们在 <code>es</code>  的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83LjEwL2dldHRpbmctc3RhcnRlZC1pbnN0YWxsLmh0bWw=\">官网</span>上可以找到 ES 软件的下载地址，我放到下面:</p>\n<p><code>LINUX</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMvZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLTcuMTAuMS1saW51eC14ODZfNjQudGFyLmd6\">elasticsearch-7.10.1-linux-x86_64.tar.gz</span><br>\n <code>MACOS</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMvZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLTcuMTAuMS1kYXJ3aW4teDg2XzY0LnRhci5neg==\">elasticsearch-7.10.1-darwin-x86_64.tar.gz</span><br>\n <code>Windows</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMvZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLTcuMTAuMS13aW5kb3dzLXg4Nl82NC56aXA=\">elasticsearch-7.10.1-windows-x86_64.zip</span></p>\n<p><code>ps</code> : 我试了下好像需要 科学上网 。 你可以可以通过公众号中 回复  <code>es-系统名称</code>  就可以获取到对应的下载连接了。下拉到底哦～</p>\n<h3 id=\"解压安装包\"><a class=\"markdownIt-Anchor\" href=\"#解压安装包\">#</a> 解压安装包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Linux:</span></span></span><br><span class=\"line\">tar -xvf elasticsearch-7.10.1-linux-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># macOS:</span></span></span><br><span class=\"line\">tar -xvf elasticsearch-7.10.1-darwin-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Windows PowerShell:</span></span></span><br><span class=\"line\">Expand-Archive elasticsearch-7.10.1-windows-x86_64.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-elasticsearch\"><a class=\"markdownIt-Anchor\" href=\"#启动-elasticsearch\">#</a> 启动  <code>ElasticSearch</code></h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Linux and macOS:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> elasticsearch-7.10.1/bin</span><br><span class=\"line\">./elasticsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Windows:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> elasticsearch-7.10.1\\bin</span><br><span class=\"line\">.\\elasticsearch.bat</span><br></pre></td></tr></table></figure>\n<p>这样就启动了单实例的 <code>ElasticSearch</code>  了。默认端口是 9200。</p>\n<p>我们可以在浏览器上访问 :  <code>http://localhost:9200</code>  查看  <code>ES</code>  情况。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">name: <span class=\"string\">&quot;bjhldeMacBook-Pro.local&quot;</span>,</span><br><span class=\"line\">cluster_name: <span class=\"string\">&quot;elasticsearch&quot;</span>,</span><br><span class=\"line\">cluster_uuid: <span class=\"string\">&quot;nAay2-T3STS8BVc3-OkOaw&quot;</span>,</span><br><span class=\"line\">version: &#123;</span><br><span class=\"line\">number: <span class=\"string\">&quot;7.10.1&quot;</span>,</span><br><span class=\"line\">build_flavor: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">build_type: <span class=\"string\">&quot;tar&quot;</span>,</span><br><span class=\"line\">build_hash: <span class=\"string\">&quot;1c34507e66d7db1211f66f3513706fdf548736aa&quot;</span>,</span><br><span class=\"line\">build_date: <span class=\"string\">&quot;2020-12-05T01:00:33.671820Z&quot;</span>,</span><br><span class=\"line\">build_snapshot: <span class=\"literal\">false</span>,</span><br><span class=\"line\">lucene_version: <span class=\"string\">&quot;8.7.0&quot;</span>,</span><br><span class=\"line\">minimum_wire_compatibility_version: <span class=\"string\">&quot;6.8.0&quot;</span>,</span><br><span class=\"line\">minimum_index_compatibility_version: <span class=\"string\">&quot;6.0.0-beta1&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">tagline: <span class=\"string\">&quot;You Know, for Search&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以通过  <code>http://localhost:9200/_cat/health?v</code>  查看集群运行情况。</p>\n<p>如果想启动多个 <code>ElasticSearch</code>  实例，搭建起 ES 集群，就需要每个实例指定单独的数据文件地址和日志文件地址。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Linux and macOS:</span></span><br><span class=\"line\">./elasticsearch -Epath.data=data2 -Epath.logs=log2</span><br><span class=\"line\">./elasticsearch -Epath.data=data3 -Epath.logs=log3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Windows:</span></span><br><span class=\"line\">.\\elasticsearch.bat -E path.data=data2 -E path.logs=log2</span><br><span class=\"line\">.\\elasticsearch.bat -E path.data=data3 -E path.logs=log3</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-kibana\"><a class=\"markdownIt-Anchor\" href=\"#安装-kibana\">#</a> 安装  <code>Kibana</code></h2>\n<p><code>Kibana</code>  是一个开源的分析和可视化平台。使用 <code>Kibana</code>  来探索你的 <code>Elasticsearch</code>  数据，然后建立漂亮的可视化和仪表板。<br>\n <code>Kibana</code>  具有管理弹性栈的 UI。管理您的安全设置，分配用户角色，拍摄快照，卷起您的数据，以及更多，都从一个 <code>Kibana UI</code>  的便利。<br>\n <code>Elastic</code>  栈解决方案的集中式中心。从日志分析到文档发现.</p>\n<h3 id=\"mac-or-linux\"><a class=\"markdownIt-Anchor\" href=\"#mac-or-linux\">#</a>  <code>Mac or linux</code></h3>\n<h4 id=\"下载-kibana-安装包\"><a class=\"markdownIt-Anchor\" href=\"#下载-kibana-安装包\">#</a> 下载  <code>kibana</code>  安装包</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://artifacts.elastic.co/downloads/kibana/kibana-7.10.1-darwin-x86_64.tar.gz</span><br><span class=\"line\">curl https://artifacts.elastic.co/downloads/kibana/kibana-7.10.1-darwin-x86_64.tar.gz.sha512 | shasum -a 512 -c - </span><br><span class=\"line\">tar -xzf kibana-7.10.1-darwin-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> kibana-7.10.1-darwin-x86_64/ </span><br></pre></td></tr></table></figure>\n<h4 id=\"启动-kibana\"><a class=\"markdownIt-Anchor\" href=\"#启动-kibana\">#</a> 启动  <code>kibana</code></h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kibana</span><br></pre></td></tr></table></figure>\n<h3 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a>  <code>Windows</code></h3>\n<h4 id=\"下载\"><a class=\"markdownIt-Anchor\" href=\"#下载\">#</a> 下载</h4>\n<p>点击链接 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMva2liYW5hL2tpYmFuYS03LjEwLjEtd2luZG93cy14ODZfNjQuemlw\">https://artifacts.elastic.co/downloads/kibana/kibana-7.10.1-windows-x86_64.zip</span>  下载 kibana 后，解压文件。</p>\n<h4 id=\"启动\"><a class=\"markdownIt-Anchor\" href=\"#启动\">#</a> 启动</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\bin\\kibana.bat</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a class=\"markdownIt-Anchor\" href=\"#验证\">#</a> 验证</h3>\n<p>访问  <code>localhost:5601</code>  页面，就可以访问 kibana 的页面了.</p>\n<p><img data-src=\"/images/es-series/WX20210108-190528.png\" alt=\"WX20210108-190528.png\"></p>\n<p>我们接下来的学习，主要是依赖 kibana 的 devTool 功能。因为 devTools 给我们提供建非常方便的 Rest API 调用方式。</p>\n<p><img data-src=\"/images/es-series/kibana-devTool.png\" alt=\"kibana-devTool\"></p>\n<h2 id=\"安装-logstash\"><a class=\"markdownIt-Anchor\" href=\"#安装-logstash\">#</a> 安装  <code>logstash</code></h2>\n<p><code>Logstash</code>  是一个具有实时管道功能的开源数据收集引擎。 <code>Logstash</code>  可以动态地统一来自不同数据源的数据，并将数据规范化到您选择的目的地。为各种高级下游分析和可视化用例清理和民主化所有数据。虽然 <code>Logstash</code>  最初推动了日志收集方面的创新，但它的功能远远超出了这个用例。任何类型的事件都可以通过大量的输入、过滤和输出插件来丰富和转换，并且使用许多本地编解码器进一步简化了吸收过程。</p>\n<h3 id=\"下载-2\"><a class=\"markdownIt-Anchor\" href=\"#下载-2\">#</a> 下载</h3>\n<p>可以在  <code>https://www.elastic.co/cn/downloads/logstash</code>  页面上下载所需的 安装包。进行解压。</p>\n<p>后面我们会专门介绍 logStash 的使用。 这里就不过多介绍了。</p>\n<p>至此，我们了解了著名的  <code>ELK</code>  日志收集处理套装。</p>\n<h2 id=\"beats\"><a class=\"markdownIt-Anchor\" href=\"#beats\">#</a> Beats</h2>\n<p><code>Beats</code>  是您作为代理安装在服务器上的开源数据发送者，用于将运营数据发送到 <code>Elasticsearch</code> 。其提供了数据审核，日志文件，云数据，可用性，系统日志，指标，网络流量， <code>Windows</code>  事件记录等功能。 <code>Beats</code>  可以将数据直接发送到 <code>Elasticsearch</code>  或通过 <code>Logstash</code>  发送，您可以在此处进一步处理和增强数据，然后再在 <code>Kibana</code>  中进行可视化。<br>\n <code>beats</code>  为不同的功能，提供了不同的组件，可以根据自己的需求，安装特定的产品，这里不多介绍。</p>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h2>\n<p>除了  <code>ElasticSearch</code> ,  <code>logStash</code> ,  <code>kibana</code> ,  <code>Beats</code>  之外， <code>Elastic</code>  还提供了其他的产品，比如： <code>APM Server</code> ,  <code>ElasticSearch Hoop</code> 。 可以根据自己的兴趣进行学习。</p>\n<p>在后面的一段时间里，我们常用到的是  <code>ElasticSearch</code>  和  <code>Kibana</code>  . 所以将这两个软件安装好就可以啦。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Elastic Search",
                "搜索"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/01.ES%E7%AE%80%E4%BB%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/01.ES%E7%AE%80%E4%BB%8B/",
            "title": "Elastic Search简介",
            "date_published": "2021-08-31T06:28:55.000Z",
            "content_html": "<h1 id=\"elasticsearch简介\"><a class=\"markdownIt-Anchor\" href=\"#elasticsearch简介\">#</a> Elasticsearch 简介</h1>\n<p><code>Elasticsearch</code>  是一个开源的分布式  <code>RESTful</code>  <b>搜索</b>和<b>分析</b>引擎，能够解决越来越多不同的应用场景。<br>\n <code>Elasticsearch</code>  是一个高度可扩展的开源分布式全文本搜索和分析引擎。 它使您可以快速，近乎实时地存储，搜索和分析大量数据。 它通常用作支持具有复杂搜索功能和要求的应用程序的基础引擎 / 技术。提供了丰富的  <code>RESTful</code>  API.</p>\n<p>这里 特别记住 <b>搜索</b>  和 <b>分析</b> 这两个词，后面我们花大量篇幅去学习  <code>ES</code>  的这两个功能，体验  <code>ES</code>  的强大之处。</p>\n<h1 id=\"es发展历史\"><a class=\"markdownIt-Anchor\" href=\"#es发展历史\">#</a> ES 发展历史</h1>\n<h2 id=\"2010年2月-第一次发布\"><a class=\"markdownIt-Anchor\" href=\"#2010年2月-第一次发布\">#</a> 2010 年 2 月 第一次发布</h2>\n<h2 id=\"2014年1月-发布了10版本\"><a class=\"markdownIt-Anchor\" href=\"#2014年1月-发布了10版本\">#</a> 2014 年 1 月 发布了 1.0 版本</h2>\n<h2 id=\"2015年10月发布20版本\"><a class=\"markdownIt-Anchor\" href=\"#2015年10月发布20版本\">#</a> 2015 年 10 月，发布 2.0 版本</h2>\n<h2 id=\"2016年10月发布50版本\"><a class=\"markdownIt-Anchor\" href=\"#2016年10月发布50版本\">#</a> 2016 年 10 月，发布 5.0 版本</h2>\n<ul>\n<li>支持 lucene 6.x. 性能提升。默认打分机制从 TF-IDF 改为 BM25</li>\n<li>支持 Ingest 节点 / Painless Scripting / Completion Suggested 支持 / 原生的 Java Rest 客户端</li>\n<li>Type 标记为 deprecated , 支持 keyword 的类型</li>\n<li>性能优化\n<ul>\n<li>内部引擎移除了避免同一文档并发更新的竞争锁，带来了 15%-20% 的性能提升</li>\n<li>Instant Aggregation ，支持分片上聚合的缓存</li>\n<li>新增了 Profile API</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2017年10月-发布60版本\"><a class=\"markdownIt-Anchor\" href=\"#2017年10月-发布60版本\">#</a> 2017 年 10 月， 发布 6.0 版本</h2>\n<ul>\n<li>支持 Lucence 7.x 版本</li>\n<li>新增功能：跨集群复制，索引生命周期管理，SQL 的支持</li>\n<li>更友好的升级和数据迁移：在主要版本之间的迁移更为简化，体验升级。 全新的基于操作的数据复制框架，可以加快数据恢复。</li>\n<li>性能优化：有效存储稀疏字段的新方法，降低了存储成本。 在索引时进行排序，可以加快排序的查询性能。</li>\n</ul>\n<h2 id=\"2019年4月发布70版本\"><a class=\"markdownIt-Anchor\" href=\"#2019年4月发布70版本\">#</a> 2019 年 4 月，发布 7.0 版本</h2>\n<ul>\n<li>支持  <code>Lucene 8.0</code>  版本</li>\n<li>重大改进 - 正式废除单个索引下多个 Type 的支持</li>\n<li><code>7.1</code>  开始， <code>Security</code>  功能免费使用</li>\n<li><code>ECK</code>  - 支持 <code>Elasticsearch operator on kubernetes</code></li>\n<li>新功能:  <code>New Cluster Coordination</code> ,  <code>Feature-Complete High Level Rest Client</code> ,  <code>Script Score Query</code></li>\n<li>性能优化：默认的 <code>Primary Shard</code>  数从 <code>5</code>  改为 <code>1</code> ，避免 <code>Over Sharding</code> . 性能优化，更快的 <code>Top K</code></li>\n</ul>\n<h2 id=\"2020年12月-发布了710版本\"><a class=\"markdownIt-Anchor\" href=\"#2020年12月-发布了710版本\">#</a> 2020 年 12 月 发布了 7.10 版本</h2>\n<ol>\n<li><code>ES</code>  的索引速度提升了 <code>20%</code> 。</li>\n<li>我们重新引入了时间点 ( <code>pit</code> )，这是一种保存搜索索引状态的轻量级方法。凹坑通过使 ui 更具反应性来改善最终用户体验。</li>\n<li>默认情况下，我们使大多数 EQL 运算符和函数区分大小写。 我们还添加了：，一个新的不区分大小写的 <code>equal</code>  运算符。 专为安全用例而设计</li>\n<li><code>REST API</code>  对系统索引的访问已弃用</li>\n<li>系统索引的新线程池。添加了两个新的线程池： <code>system_read和system_write</code> 。 这些线程池可确保对 <code>Elastic Stack</code>  至关重要的系统索引（例如安全性或 Kibana 所使用的系统索引）在集群承受沉重的查询或索引负载时保持响应能力。 <code>system_read</code>  是固定线程池，用于管理针对系统索引的读取操作的资源。 同样， <code>system_write</code>  是一个固定线程池，用于管理用于针对系统索引的写操作的资源。 两者的最大线程数等于可用处理器的 5 或一半，以较小者为准。</li>\n</ol>\n<h1 id=\"es的生态圈\"><a class=\"markdownIt-Anchor\" href=\"#es的生态圈\">#</a> ES 的生态圈</h1>\n<h2 id=\"elastic-search\"><a class=\"markdownIt-Anchor\" href=\"#elastic-search\">#</a> elastic search</h2>\n<p><code>Elasticsearch</code>  是 <code>Elastic Stack</code>  核心的分布式搜索和分析引擎。  <code>Logstash</code>  和   有助于收集，聚合和丰富您的数据并将其存储在 <code>Elasticsearch</code>  中。 使用  ，您可以交互式地探索，可视化和共享对数据的见解，并管理和监视堆栈。  <code>Elasticsearch</code>  是发生索引，搜索和分析 魔力的地方。</p>\n<p><code>Elasticsearch</code>  为所有类型的数据提供近乎实时的搜索和分析。 无论您是结构化文本还是非结构化文本，数字数据或地理空间数据， <code>Elasticsearch</code>  都能以支持快速搜索的方式有效地对其进行存储和索引。 您不仅可以进行简单的数据检索，还可以聚合信息来发现数据中的趋势和模式。 随着数据和查询量的增长， <code>Elasticsearch</code>  的分布式特性使您的部署可以随之无缝地增长。</p>\n<h2 id=\"kibana\"><a class=\"markdownIt-Anchor\" href=\"#kibana\">#</a> kibana</h2>\n<p><code>Kibana</code>  是一个开源的分析和可视化平台。使用 <code>Kibana</code>  来探索你的 <code>Elasticsearch</code>  数据，然后建立漂亮的可视化和仪表板。<br>\n <code>Kibana</code>  具有管理弹性栈的 UI。管理您的安全设置，分配用户角色，拍摄快照，卷起您的数据，以及更多，都从一个 <code>Kibana UI</code>  的便利。<br>\n <code>Elastic</code>  栈解决方案的集中式中心。从日志分析到文档发现.</p>\n<h2 id=\"beats\"><a class=\"markdownIt-Anchor\" href=\"#beats\">#</a> beats</h2>\n<p><code>Beats</code>  是您作为代理安装在服务器上的开源数据发送者，用于将运营数据发送到 <code>Elasticsearch</code> 。其提供了数据审核，日志文件，云数据，可用性，系统日志，指标，网络流量， <code>Windows</code>  事件记录等功能。 <code>Beats</code>  可以将数据直接发送到 <code>Elasticsearch</code>  或通过 <code>Logstash</code>  发送，您可以在此处进一步处理和增强数据，然后再在 Kibana 中进行可视化。<br>\n <code>beats</code>  为不同的功能，提供了不同的组件，可以根据自己的需求，安装特定的产品.</p>\n<h2 id=\"logstash\"><a class=\"markdownIt-Anchor\" href=\"#logstash\">#</a> logstash</h2>\n<p><code>Logstash</code>  是一个具有实时管道功能的开源数据收集引擎。 <code>Logstash</code>  可以动态地统一来自不同数据源的数据，并将数据规范化到您选择的目的地。为各种高级下游分析和可视化用例清理和民主化所有数据。虽然 <code>Logstash</code>  最初推动了日志收集方面的创新，但它的功能远远超出了这个用例。任何类型的事件都可以通过大量的输入、过滤和输出插件来丰富和转换，并且使用许多本地编解码器进一步简化了吸收过程。</p>\n<h2 id=\"x-pack\"><a class=\"markdownIt-Anchor\" href=\"#x-pack\">#</a> x-pack</h2>\n<p><code>x-pack</code>  是 <code>elasticsearch</code>  的一个扩展包，将安全，警告，监视，图形和报告功能捆绑在一个易于安装的软件包中，可以轻松的启用或者关闭一些功能</p>\n<h1 id=\"es的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#es的应用场景\">#</a> ES 的应用场景</h1>\n<ul>\n<li>将搜索框添加到应用或网站</li>\n<li>存储和分析日志，指标和安全事件数据</li>\n<li>使用机器学习来实时自动建模数据行为</li>\n<li>使用 <code>Elasticsearch</code>  作为存储引擎自动化业务工作流程</li>\n<li>使用 <code>Elasticsearch</code>  作为地理信息系统（ <code>GIS</code> ）管理，集成和分析空间信息</li>\n<li>使用 <code>Elasticsearch</code>  作为生物信息学研究工具来存储和处理遗传数据<br>\n…</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Elastic Search",
                "搜索"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/README/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/31/es-series/README/",
            "title": "Elastic Search 目录",
            "date_published": "2021-08-31T06:20:55.000Z",
            "content_html": "<h2 id=\"搜索之es系列\"><a class=\"markdownIt-Anchor\" href=\"#搜索之es系列\">#</a> 搜索之 ES 系列</h2>\n<p>本系列基于版本 7.10</p>\n<h2 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"/2021/08/31/es-series/01.ES%E7%AE%80%E4%BB%8B/\">ES 简介</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> ES 发展历史</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> ES 的生态圈</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> ES 的应用场景</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> 使用架构</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"/2021/08/31/es-series/02.ES%E5%AE%89%E8%A3%85/\">ES 栈安装</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> ElasticSearch 安装</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\"><label for=\"cbx_7\"> 下载</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\"><label for=\"cbx_8\"> 文件目录结构，JVM 配置，</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\"><label for=\"cbx_9\"> 多实例运行</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\"><label for=\"cbx_10\"> 常用命令</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" checked=\"true\" disabled=\"true\"><label for=\"cbx_11\"> kibana 安装</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\"><label for=\"cbx_12\"> 安装</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" checked=\"true\" disabled=\"true\"><label for=\"cbx_13\"> 页面浏览 devTool</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\"><label for=\"cbx_14\"> logstash 安装</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" checked=\"true\" disabled=\"true\"><label for=\"cbx_15\"> <a href=\"/2021/08/31/es-series/03.ES%E9%85%8D%E7%BD%AE/\">ElasticSearch 配置</a></label></li>\n</ul>\n<h3 id=\"入门\"><a class=\"markdownIt-Anchor\" href=\"#入门\">#</a> 入门</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" checked=\"true\" disabled=\"true\"><label for=\"cbx_16\"> <a href=\"/2021/08/31/es-series/04.ES%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/\">基本概念</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" checked=\"true\" disabled=\"true\"><label for=\"cbx_17\"> 文档</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" checked=\"true\" disabled=\"true\"><label for=\"cbx_18\"> 元数据 (mapping)</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" checked=\"true\" disabled=\"true\"><label for=\"cbx_19\"> 索引</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" checked=\"true\" disabled=\"true\"><label for=\"cbx_20\"> 概念</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\"><label for=\"cbx_21\"> 语意</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" checked=\"true\" disabled=\"true\"><label for=\"cbx_22\"> <del>Type</del></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" disabled=\"true\"><label for=\"cbx_23\"> 节点</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" disabled=\"true\"><label for=\"cbx_24\"> master 节点</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" disabled=\"true\"><label for=\"cbx_25\"> data 节点</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" disabled=\"true\"><label for=\"cbx_26\"> ingist 节点</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" disabled=\"true\"><label for=\"cbx_27\"> coordinating 节点</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_28\" disabled=\"true\"><label for=\"cbx_28\"> 其他类型节点: hot&amp;warm 节点，Machine Learning Node , Tribe 节点 (未来版本会被移除)</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_29\" checked=\"true\" disabled=\"true\"><label for=\"cbx_29\"> 分片</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_30\" checked=\"true\" disabled=\"true\"><label for=\"cbx_30\"> 集群</label></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\">#</a> 进阶</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_31\" disabled=\"true\"><label for=\"cbx_31\"> 索引</label></p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_32\" disabled=\"true\"><label for=\"cbx_32\"> 常用 api (索引管理)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_33\" disabled=\"true\"><label for=\"cbx_33\"> 基本原理</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_34\" disabled=\"true\"><label for=\"cbx_34\"> 文档</label></p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_35\" disabled=\"true\"><label for=\"cbx_35\"> 文档管理</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_36\" disabled=\"true\"><label for=\"cbx_36\"> 简单 CURD</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_37\" disabled=\"true\"><label for=\"cbx_37\"> bulk api</label></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>分词器</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_38\" disabled=\"true\"><label for=\"cbx_38\"> 分词器类型</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_39\" disabled=\"true\"><label for=\"cbx_39\"> 其他 api</label></p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_40\" disabled=\"true\"><label for=\"cbx_40\"> 查看集群，分片，索引</label></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高手\"><a class=\"markdownIt-Anchor\" href=\"#高手\">#</a> 高手</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_41\" disabled=\"true\"><label for=\"cbx_41\"> 聚合分析搜索</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_42\" disabled=\"true\"><label for=\"cbx_42\"> cat API</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_43\" disabled=\"true\"><label for=\"cbx_43\"> cluster API</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_44\" disabled=\"true\"><label for=\"cbx_44\"> ccr API</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_45\" disabled=\"true\"><label for=\"cbx_45\"> data Stream API</label></li>\n</ul>\n<h3 id=\"宗师\"><a class=\"markdownIt-Anchor\" href=\"#宗师\">#</a> 宗师</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_46\" disabled=\"true\"><label for=\"cbx_46\"> 补货中…</label></li>\n</ul>\n<h3 id=\"运维\"><a class=\"markdownIt-Anchor\" href=\"#运维\">#</a> 运维</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_47\" disabled=\"true\"><label for=\"cbx_47\"> 补货中…</label></li>\n</ul>\n",
            "tags": [
                "Elastic Search",
                "搜索"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "LC:反转链表I",
            "date_published": "2021-08-29T09:25:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<blockquote>\n<p>示例一</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase1.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2,3,4,5]<br>\n 输出：[5,4,3,2,1]</p>\n<blockquote>\n<p>示例二</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase2.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2]<br>\n 输出：[2,1]</p>\n<blockquote>\n<p>示例三</p>\n</blockquote>\n<p>输入：head = []<br>\n 输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>\n-5000 &lt;= Node.val &lt;= 5000</p>\n<p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）206.反转链表\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\">力扣（LeetCode）206.反转链表</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一道非常简单的题目。也是很容易出现<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlQkUlRTUlODUlOEIlRTYlOTUlODglRTUlQkElOTQvNTYzOTE3OA==\">达克效应</span>的一道题目。 为什么呢？应为这道题太简单了啊。 <b>思路</b> 太简单了啊。 但是真正去写的话，可不见得真有那么简单。</p>\n<p>简单的题目，我们还是 以图的形式来展示。</p>\n<h3 id=\"思路一-迭代链表-创建新节点重组成新链表\"><a class=\"markdownIt-Anchor\" href=\"#思路一-迭代链表-创建新节点重组成新链表\">#</a> 思路一：迭代链表，创建新节点，重组成新链表</h3>\n<h4 id=\"思路解析\"><a class=\"markdownIt-Anchor\" href=\"#思路解析\">#</a> 思路解析</h4>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution1.png\" alt=\"一图胜千言\"></p>\n<p>核心思路如标题。 首先将遍历的原链表中的节点值复制到新建的节点中 (a 步骤), 节点 next 指针指向是上一个节点，没有则为 null (b 步骤). 遍历链表的所有节点。</p>\n<p>这样其实会生成一个新的链表。也就说会同时存在两条链表。</p>\n<p><span class=\"label success\">✊时间复杂度为 O (n)， 空间复杂度为 O (n)</span></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历旧链表,新建节点，并且拼接成新链表。</span></span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != head) &#123;</span><br><span class=\"line\">            ListNode curr = <span class=\"keyword\">new</span> ListNode(head.val);</span><br><span class=\"line\">            curr.next = pre;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二-迭代变更链表的指针指向\"><a class=\"markdownIt-Anchor\" href=\"#思路二-迭代变更链表的指针指向\">#</a> 思路二：迭代变更链表的指针指向</h3>\n<h4 id=\"思路解析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-2\">#</a> 思路解析</h4>\n<p>这种思路也是比较简单的，但是一定要想好喽之后，再看开始编码，要不然很容易思绪错乱。</p>\n<p>图解:</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution2.png\" alt=\"一图胜千言\"></p>\n<p>这种解法需要两个指针， pre 代表其前一个节点， cur 代表后一个节点。进行遍历，从而实现 指针指向的变更。 当然，还需要一个临时节点去帮忙 pre 和 cur 指针，向后移动。</p>\n<p><span class=\"label success\">✊时间复杂度是 O (n); 空间复杂度是 O (3);</span></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = head, cur = head.next;</span><br><span class=\"line\">        <span class=\"comment\">// !!注意:断开头节点的next指针，避免产生环型链表。</span></span><br><span class=\"line\">        pre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != cur) &#123;</span><br><span class=\"line\">            ListNode tempNode = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tempNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路三-递归方式-变更指针\"><a class=\"markdownIt-Anchor\" href=\"#思路三-递归方式-变更指针\">#</a> 思路三：递归方式， 变更指针</h3>\n<h4 id=\"思路解析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-3\">#</a> 思路解析</h4>\n<p>这思路三，其实是思路二的不同写法。 这种实现方法首先就需要将 链表 “递” 到底，然后在归的时候，把 节点链接到一起。如下图</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution3.png\" alt=\"一图胜千言\"></p>\n<p>这样说起来，递归这种方式来解决反转类的问题好像会有一种与生俱来的优势。  <code>首先递进去，然后归出来</code> 。</p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归入口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(head, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode currNode, ListNode preNode)</span> </span>&#123;</span><br><span class=\"line\">        ListNode headNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == currNode) &#123;</span><br><span class=\"line\">            headNode = preNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            headNode = reverse(currNode.next, currNode);</span><br><span class=\"line\">            currNode.next = preNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> headNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这一道题考的是简单的逻辑问题，实属简单至极的题目。要注意 陷入 “达克效应”。</p>\n<p>勿以题小而不做。</p>\n<p>使用头递归来做反转类似的题目，好像是一种天然支持的特性。但是在实际的开发过程中，不建议过多的使用递归的方式，一方面不具备可读性。另一方面，递归方式对性能不太优化，还有重要的是要考虑栈溢出的风险。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）189.反转数组\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）189.反转数组</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）92.反转链表II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\">力扣（LeetCode）92.反转链表II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）7.整数反转\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\">力扣（LeetCode）7.整数反转</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）344.反转字符串\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\">力扣（LeetCode）344.反转字符串</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "面经之算法题",
                "链表"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/23/java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/23/java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/",
            "title": "JDK的Stream之系列一 初窥流原理",
            "date_published": "2021-08-23T15:13:55.000Z",
            "content_html": "<p>学东西的时候最好是理论先行，为什么？没有理论，想当然的去干，干好了是 瞎猫碰上死耗子，干不好就瞎干，浪费时间，只会弄得身心俱疲。<br>\n可是在真正的工作中，很少工作会允许你先弄清原理再去实操。但是不管怎么说，欠下的债终究是需要还的。</p>\n<p>今天咱们的主题是  <code>stream</code> . 咱们就从 <code>Stream</code>  的 &quot;道，术，法，器&quot; 四个阶段来聊好好的聊聊这个  <code>Stream</code> .</p>\n<h2 id=\"以器始从使用开始\"><a class=\"markdownIt-Anchor\" href=\"#以器始从使用开始\">#</a> 以 &quot;器&quot; 始：从使用开始</h2>\n<blockquote>\n<p>你平时是怎么使用  <code>Stream</code>  的？</p>\n</blockquote>\n<p>比如我会使用 <code>Stream</code>  创建一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; integerStream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// do somethings ..</span></span><br></pre></td></tr></table></figure>\n<p>或者把一种集合类型转成 <code>stream</code> ，然后做一些聚合操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; collect = list.stream()</span><br><span class=\"line\">        .map(item -&gt; item + <span class=\"number\">5</span>)</span><br><span class=\"line\">        .filter(item -&gt; item &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        .sorted()</span><br><span class=\"line\">        .limit(<span class=\"number\">10</span>)</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>那在 <code>jdk1.7</code>  及以前的时候，我们是怎么处理的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历list，所有元素+5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">    Integer integer = list.get(i);</span><br><span class=\"line\">    integer += <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正序排序</span></span><br><span class=\"line\">sort(list);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建新List.存储10个元素</span></span><br><span class=\"line\">List&lt;Integer&gt; newList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (list.size() &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    System.arraycopy(list, list.size() - <span class=\"number\">11</span>, newList, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.arraycopy(list, <span class=\"number\">0</span>, newList, <span class=\"number\">0</span>, list.size());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的对比，我们很明显的就能对比出来：<br>\n <code>stream</code>  的编码方式，使代码更加简洁，可读性也比较强。而且 <code>Stream</code>  提供了集合的常用操作，比如 <code>sort</code> , <code>过滤</code> ， <code>去重</code> ， <code>计数</code> ， <code>limit</code> , <code>skip</code>  等等，直接可以用，可以大大的提高开发效率。</p>\n<p>那  <code>Stream</code>  为我们提供了多少功能呢？</p>\n<p>从全局来看，所有和  <code>stream</code>  相关的类，都在  <code>java.lang.stream</code>  这包下。</p>\n<p>这个包下有很多的类。总体来说，</p>\n<p>流处理相关的操作分为两类:</p>\n<ul>\n<li>中间操作 ( <code>Intermediate Operations</code> )\n<ul>\n<li>无状态的中间操作 ( <code>Stateless</code> ): 使用  <code>StatelessOp</code>  表示。每个操作都是互不影响，不依赖的。这类的操作有:  <code>filter()</code> 、 <code>flatMap()</code> 、 <code>flatMapToDouble()</code> 、 <code>flatMapToInt()</code> 、 <code>flatMapToLong()</code> 、 <code>map()</code> 、 <code>mapToDouble()</code> 、 <code>mapToInt()</code> 、 <code>mapToLong()</code> 、 <code>peek()</code> 、 <code>unordered()</code>  等</li>\n<li>有状态操作（ <code>Stateful</code> ）：使用  <code>StatefulOp</code>  表示。处理时会记录状态，比如处理了几个。后面元素的处理会依赖前面记录的状态，或者拿到所有元素才能继续下去。如 <code>distinct()</code> 、 <code>sorted()</code> 、 <code>sorted(comparator)</code> 、 <code>limit()</code> 、 <code>skip()</code>  等</li>\n</ul>\n</li>\n<li>终止操作 ( <code>Terminal Operations</code> )：使用  <code>TerminalOp</code>  表示。\n<ul>\n<li>非短路操作：处理完所有数据才能得到结果。如 <code>collect()</code> 、 <code>count()</code> 、 <code>forEach()</code> 、 <code>forEachOrdered()</code> 、 <code>max()</code> 、 <code>min()</code> 、 <code>reduce()</code> 、 <code>toArray()</code>  等。</li>\n<li>短路（ <code>short-circuiting</code> ）操作：拿到符合预期的结果就会停下来，不一定会处理完所有数据。如 <code>anyMatch()</code> 、 <code>allMatch()</code> 、 <code>noneMatch()</code> 、 <code>findFirst()</code> 、 <code>findAny()</code>  等。</li>\n</ul>\n</li>\n</ul>\n<p>在深入探讨 <code>stream</code>  之前，我们需要储备些知识点。</p>\n<ul>\n<li>\n<p>函数式接口  <code>FunctionInterface</code></p>\n<p><code>JDK</code>  提供了很多的函数式接口，包路径是： <code>java.util.function</code> . 函数式接口的作用是 Java8 对一类特定类型接口的称呼。这类接口只有一个抽象方法，并且使用  <code>@FunctionInterface</code>  注解进行注明。在 <code>Java Lambda</code>  的实现中， 开发组不想再为 <code>Lambda</code>  表达式单独定义一种特殊的 <code>Structural</code>  函数类型，称之为箭头类型（ <code>arrow type</code> ）， 依然想采用 Java 既有的类型系统 ( <code>class</code> ,  <code>interface</code> ,  <code>method</code>  等)， 原因是增加一个结构化的函数类型会增加函数类型的复杂性，破坏既有的 <code>Java</code>  类型，并对成千上万的 <code>Java</code>  类库造成严重的影响。 权衡利弊， 因此最终还是利用 <code>SAM</code>  接口 ( <code>Single Abstract Method</code> ) 作为  <code>Lambda</code>  表达式的目标类型。</p>\n<p>函数式接口其实在 <code>Jdk8</code>  之前就已存在了，比如 <code>java.lang.Runnable</code> , <code>java.util.concurrent.Callable</code> , <code>java.util.Comparator</code>  等等。只是没有使用  <code>@FunctionInterface</code>  注解而已。在 <code>JDK1.8</code>  之后加上了这个注解，并且在 <code>java.util.function</code>  包下新增很多个函数式接口。 其中，我们需要知道的只有六个:</p>\n<ul>\n<li><code>Predicate</code> : 传入一个参数，返回一个 <code>bool</code>  结果， 方法为 <code>boolean test(T t)</code></li>\n<li><code>Consumer</code> : 传入一个参数，无返回值，纯消费。 方法为 <code>void accept(T t)</code></li>\n<li><code>Function&lt;T,R&gt;</code> : 传入一个参数，返回一个结果，方法为 <code>R apply(T t)</code></li>\n<li><code>Supplier</code> : 无参数传入，返回一个结果，方法为 <code>T get()</code></li>\n<li><code>UnaryOperator</code> : 一元操作符， 继承 <code>Function&lt;T,T&gt;</code> , 传入参数的类型和返回类型相同。</li>\n<li><code>BinaryOperator</code> : 二元操作符， 传入的两个参数的类型和返回类型相同， 继承 <code>BiFunction&lt;T,T,T&gt;</code></li>\n</ul>\n</li>\n</ul>\n<p>为什么要了解这个 函数式接口呢？</p>\n<p>因为 在 <code>Stream</code>  的方法中，大部分的参数都是使用 函数式接口 接受参数的。所以，如果要探究其实现原理和设计原则的话，这个是必须要知道的。</p>\n<blockquote>\n<p>注意:<br>\n <code>lambda</code>  表达式，是一种语法的表现形式，使代码表现更加整洁  <code>lambda</code>  和  <code>stream</code>  是两个不相关的概念。</p>\n</blockquote>\n<h2 id=\"查术理-查看源码明晰基本的类结构\"><a class=\"markdownIt-Anchor\" href=\"#查术理-查看源码明晰基本的类结构\">#</a> 查 &quot;术&quot; 理: (查看源码，明晰基本的类结构)</h2>\n<p>先来看下 和  <code>Stream</code>  直接相关的类。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream%E7%B1%BB%E5%9B%BE%E8%B0%B1.png\" alt=\"\"></p>\n<p><code>Stream</code>  接口继承了 <code>BaseStream</code>  接口.</p>\n<p><span class=\"label success\">✔️ BaseStream 接口表示流的基本接口，而流是支持顺序和并行聚合操作的元素序列。</span><br>\n <code>Stream</code>  接口有很多实现类。其主要的一个实现类是  <code>ReferencePipeline</code>  类。除此之外 <code>ReferencePipeline</code>  类还继承了 <code>AbstractPipeline</code>  抽象类. <span class=\"label success\">✔️ AbstractPipeline 表示 “管道” 类的抽象基类，它们是 Stream 接口及其原始特化的核心实现。</span>再看 <code>AbstractPipeline</code>  类的父类 <code>PipelineHelper</code> ,<span class=\"label success\">✔️ AbstractPipeline 的作用是：用于执行流管道的辅助类，将有关流管道的所有信息（输出形状、中间操作、流标志、并行度等）集中在一个地方。</span></p>\n<p><code>ReferencePipeline</code>  类有三个子类:  <code>StatefulOp</code>  表示有状态的操作， <code>StatelessOp</code>  表示无状态的操作，  <code>Head</code>  表示  <code>ReferencePipeline</code>  的起始阶段。 当然了，这三个子类也是 流。</p>\n<h3 id=\"从创建流开始\"><a class=\"markdownIt-Anchor\" href=\"#从创建流开始\">#</a> 从创建流开始</h3>\n<p>不管是使用  <code>Stream.of(T t)</code>  还是  <code>Collection.stream()</code> ，还是 <code>Arrays.stream()</code> , 底层的实现都是通过  <code>StreamSupport.stream()</code>  来实现的。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream.of%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png\" alt=\"\"></p>\n<p><span class=\"label success\">✔️ StreamSupport 类的作用是：用于创建和操作流的底层实用方法。</span></p>\n<p><img data-src=\"/images/java/jdk/stream/StreamSupport.stream%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png\" alt=\"\"></p>\n<p>可以看到 直接返回的是  <code>ReferencePipeline.Head</code>  对象。 首先  <code>Head</code>  是一种 <code>Stream</code>  的实现。 接着去看  <code>Head</code>  的构造方法，可以看到其实调用的是： <code>AbstractPipeline</code>  的构造方法.</p>\n<h3 id=\"流的中间操作\"><a class=\"markdownIt-Anchor\" href=\"#流的中间操作\">#</a> 流的中间操作</h3>\n<p>文中已经谈及了 中间操作分为有状态的中间操作和无状态的中间操作。那我们以一个案例来说明操作与操作之间执行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">          .map(item -&gt; item + <span class=\"number\">5</span>)</span><br><span class=\"line\">          .sorted((n1, n2) -&gt; n2 - n1)</span><br><span class=\"line\">          .limit(<span class=\"number\">3</span>)</span><br><span class=\"line\">          .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p><code>Stream.of()</code>  方法上文已经简单的说明了，接下来我们来看  <code>map()</code>  方法。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream.map%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png\" alt=\"\"></p>\n<p>可以看到， <code>map()</code>  返回了一个 <code>StatelessOp</code>  对象，并且重写了 <code>AbstractPipeline</code>  的 <code>opWrapSink</code>  方法。 之前也说过：它表示流的无状态中间阶段的基类。 还有一个 <code>Sink</code>  类型.  <code>Sink</code>  类表示  <code>Consumer</code>  接口的扩展，用于在流管道的各个阶段传递值，以及管理大小信息、控制流等的附加方法。</p>\n<p>我们再仔细看一下这个方法。首先这个方法并没有进行任何的计算，只是将  <code>item -&gt; item + 5</code>  这个操作进行三层的封装， 1. 将 <code>map</code>  方法的返回值重新封装成了流对象，2. 把我们的 <code>item -&gt; item + 5</code>  这个操作封装成了  <code>StatelessOp</code> ， 并重写了 <code>opWrapSink</code>  这个方法，并在终止操作时进行调用。 3. 使用 <code>sink</code> ( <code>Sink.ChainedReference)</code>  将管道的各个阶段连接起来。即赋值 <code>downStream</code> . 使用 <code>downstream</code>  这个 <code>Consumer</code>  完成 <code>accept</code>  调用。</p>\n<p>这里需要注意一下:  <code>StatelessOp</code>  类的构造方法的实体参传输了一个  <code>this</code>  字段。仔细翻看源码就会返现它一直调用到  <code>AbstractPipeline</code>  的构造方法中。</p>\n<p><img data-src=\"/images/java/jdk/stream/AbstractPipeline.png\" alt=\"\"></p>\n<p>可以看到  <code>AbstractPipeline</code>  中有两个字段  <code>nextStage</code>  和  <code>previousStage</code>  字段，分别表示的是上一阶段和下一阶段。其中  <code>nextStage</code>  是 当前阶段。  <code>previousStage</code>  则应该 当前阶段的上一个阶段，其实就是调用当前方法的对象。</p>\n<p>不知道你是否发现 通过这种方法， <code>stream</code>  组成了一个 流各个阶段的双向链表。节点就是流操作的各个阶段。</p>\n<p>ps: 这样一次流操作会创建两个链表:  <code>Stream</code>  阶段的双向链表，和 在终止操作时，根据双向链表生成的  <code>Sink</code>  链表。</p>\n<p>再次说明：到目前为止， <code>map()</code>  方法里只是进行了封装，没有进行任何计算！</p>\n<p>接着来看  <code>sorted()</code>  方法。</p>\n<p><img data-src=\"/images/java/jdk/stream/stream.sorted%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p><code>sorted</code>  方法比较简单，通过调用 <code>SortedOps</code>  类的 <code>makeRef</code>  方法，创建了 <code>OfRef</code>  对象。  <code>OfRef</code>  类的作用是：用于对流进行排序的专用子类型。  <code>OfRef</code>  类继承了  <code>ReferencePipeline.StatefulOp</code>  ，所以 <code>OfRef</code>  是一个有状态操作。那自然它也会有  <code>opWrapSink</code>  方法。也就是说它也会返回一个 Sink 对象，只是这个 <code>Sink</code>  对象的实现类不一样的。</p>\n<blockquote>\n<p>说明：到目前为止， <code>sorted()</code>  方法里只是进行了封装，没有进行任何计算！</p>\n</blockquote>\n<p>同理去看 <code>limit</code>  方法。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream.limit%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p>这个方法的内部是直接创建了一个  <code>ReferencePipeline.StatefulOp</code>  对象，也是重写了其中的方法:  <code>opWrapSink</code> .</p>\n<p>不知道你是否有好奇，我为什么每次都会提到  <code>opWrapSink</code>  这个方法呢？因为这个方法非常的重要！其重要性我们在 <a href=\"#%E6%8E%A2%E2%80%9D%E6%B3%95%E2%80%9C%E6%8B%A9\">探” 法 “择</a> 这部分会完整的说明。</p>\n<blockquote>\n<p>再三说明：到目前为止， <code>limit()</code>  方法里只是进行了封装，没有进行任何计算！</p>\n</blockquote>\n<p>书行至此，案例中的中间操作都已经简单的分析完成了。我们就知道这里  <code>jdk</code>  为了完成 流操作为每个中间操作都封装了很多的对象，而这些对象只是散列在了内存中。接下来，就要看  <code>jdk</code>  是如何把他们组装到一起的。</p>\n<h3 id=\"终止操作\"><a class=\"markdownIt-Anchor\" href=\"#终止操作\">#</a> 终止操作</h3>\n<p>以 <code>Collect</code>  方法为例，去探究一下终止操作的流程。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream.collect%E6%96%B9%E6%B3%95.png\" alt=\"\"><br>\n可以看到在 <code>collect</code>  方法中，分为并行执行方式和串行执行方法，我们看串行执行时，会创建  <code>ReduceOps</code>  终止操作对象。<br>\n<img data-src=\"/images/java/jdk/stream/AbstractPipeline.evaluate%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p>将 终止操作 传递给 evaluate 方法，然后调用终止操作的 evaluate 方法，当然这个方法也分成了串行执行和并行执行两种。</p>\n<p><img data-src=\"/images/java/jdk/stream/ReduceOps.evaluateSequential%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p><code>helper</code>  其实是  <code>limit(3)</code>  中间操作返回的对象。这其实中间操作的最后一个 <code>Stage</code>  (阶段)。返回的对象是 <code>AbstractPipeline</code>  和  <code>Stream</code>  的子类实例。</p>\n<p><img data-src=\"/images/java/jdk/stream/AbstractPipeline.wrapAndCopyInfo%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p>这里包含两个方法:  <code>wrapSink()</code>  和  <code>copyInfo()</code> .</p>\n<p>这是两个非常重要的方法.  <code>wrapSink()</code>  是将中间的操作组成  <code>SinkChain</code>  。  <code>copyInfo()</code>  这是执行真正的计算逻辑。</p>\n<p><img data-src=\"/images/java/jdk/stream/AbstractPipeline.wrapSink%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p>方法中的形参  <code>sink</code>  就是最后的阶段的终止操作。方法通过循环将  <code>sink</code>  分装到 <code>Sink</code>  中。  <code>Sink</code>  接口 的一个实现类是  <code>ChainedReference</code>  ， 类中定义了一个  <code>downStream</code>  字段。 会将 <code>sink = p.opWrapSink(p.previousStage.combinedFlags, sink);</code>   中的  <code>sink</code>  赋值给  <code>downStream</code> . 这样就形成了 <b>套娃</b>。 最后返回一个  <code>wrapSink</code>  , 即整个流操作中所有的操作的 封装 <code>Sink</code> .</p>\n<p><img data-src=\"/images/java/jdk/stream/AbstractPipeline.copyInfo%E6%96%B9%E6%B3%95.png\" alt=\"\"></p>\n<p>图中所示的即为上面提及的 封装 <code>Sink</code> . 可中断和不可中断的区别是：可中断如果获取值，就不必再取所有的结果了。反之，就需要计算出所有阶段的结果。</p>\n<p>非可中断的终止操作时，会执行  <code>begin()</code> , <code>forEachRemaining()</code> , <code>end()</code> , 三个方法。  这个三个方法对应的是： <code>Sink</code>  接口中提供的三个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每个Sink开始之前调用该方法，通知sink做好准备</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历元素时使用，接受一个待处理元素，并对元素进行处理。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Double i)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 通知sink没有元素进行处理了。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>begin()</code>  方法，会调用每个 <code>Sink</code>  子类的 <code>begin</code>  方法。</li>\n<li><code>forEachRemaining()</code>  方法对应的执行内容如下图:<br>\n<img data-src=\"/images/java/jdk/stream/forEachRemaining%E6%96%B9%E6%B3%95.png\" alt=\"\"></li>\n<li><code>end()</code>  方法，会调用每个 <code>Sink</code>  字段的 <code>end</code>  方法。</li>\n</ul>\n<p>书行至此。或许你会对  <code>forEachRemaining</code>  方法感到好奇。后面我会写一篇文章来专门分享: 《 <code>Stream</code>  的高级迭代器》, 希望你能继续关注支持我～</p>\n<h2 id=\"探法择\"><a class=\"markdownIt-Anchor\" href=\"#探法择\">#</a> 探” 法 “择</h2>\n<p>我们从一个案例出发，在细节之处分析了一个 <code>Stream</code>  的执行过程。现在我们需要从全局来看一下  <code>Stream</code>  的执行过程是什么样子的.</p>\n<p>上文中我们知道了  <code>Stream</code>  的 所有计算都是在 终止操作时 触发的。 所有的中间操作都是封装了一些对象。我们用一张图来描述下 <code>Stream</code>  的执行过程。</p>\n<p><img data-src=\"/images/java/jdk/stream/Stream%E9%80%BB%E8%BE%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"\"></p>\n<ul>\n<li><code>stream</code>  将创建的流做为第一个  <code>Stage</code>  , 用来代表流的开始， 每个 <code>Stage</code>  都是 <code>AbstractPipeline</code>  的子类。 第一个 <code>Stage</code>  是 <code>AbstractPipeline.Head</code>  对象。</li>\n<li>然后将中间操作封装成后面的 n 个  <code>stage</code> . 并组成 双向链表的形式，并且存储了 <code>stage0</code> . 每个 <code>Stage</code>  都是 <code>StatelessOp</code>  或者  <code>statefulOp</code> .</li>\n<li>终止操作通过 <code>wrapSink()</code>  方法 会触发将 每个阶段的操作封装成  <code>Sink</code> . 并且 <code>sink</code>  都会做为参数传递到上一个阶段的 <code>opWrapSink()</code>  方法中，从而组成一个  <code>sink</code>  链表。</li>\n<li>然后，通过  <code>copyInfo()</code>  方法将，交于 <code>Spilterator</code>  进行迭代。计算的结果可以分为四种\n<ul>\n<li>返回 <code>boolean</code>  类型的结果：比如 <code>anyMatch()</code>   <code>allMatch()</code>   <code>noneMatch()</code>  方法。</li>\n<li>返回 <code>Optional</code>  类型的结果： 比如 <code>findFirst()</code>   <code>findAny()</code>  方法</li>\n<li>还有归约操作:\t <code>reduce()</code>   <code>collect()</code></li>\n<li>返回数组的： <code>toArray()</code> <br>\n 对于表中返回 <code>boolean</code>  或者 <code>Optional</code>  的操作（ <code>Optional</code>  是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的 <code>Sink</code>  中记录这个值，等到执行结束时返回就可以了。<br>\n对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过收集器指定）。 <code>collect()</code> ,  <code>reduce()</code> ,  <code>max()</code> ,  <code>min()</code>  都是归约操作，虽然 <code>max()</code>  和 <code>min()</code>  也是返回一个 <code>Optional</code> ，但事实上底层是通过调用 <code>reduce()</code>  方法实现的。<br>\n对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做 <code>Node</code>  的数据结构中的。 <code>Node</code>  是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。关于  <code>Stream</code>  的并行计算，我后面会继续分享。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"明道义\"><a class=\"markdownIt-Anchor\" href=\"#明道义\">#</a> 明 &quot;道&quot; 义</h2>\n<p><code>JDK</code>  提供的  <code>Stream</code>  具有如下特点:</p>\n<ul>\n<li>无存储。 <code>stream</code>  不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组， <code>Java</code>  容器或 <code>I/O channel</code>  等。</li>\n<li>为函数式编程而生。对 <code>stream</code>  的任何修改都不会修改背后的数据源，比如对 <code>stream</code>  执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新 <code>stream</code> 。</li>\n<li>惰式执行。 <code>stream</code>  上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li>\n<li>可消费性。 <code>stream</code>  只能被 “消费” 一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li>\n</ul>\n<blockquote>\n<p>在这一趴，我就围绕两个点来简单的聊聊。</p>\n</blockquote>\n<ul>\n<li><code>JDK8</code>  为什么要加入  <code>Stream</code> .</li>\n</ul>\n<p>除了上面四个特点之外， <code>Java8</code>  中的 <code>Stream</code>  是对集合对象的增强，当然不仅仅是集合对象。 <code>Stream</code>  为开发者提供了简洁的编码方式和编码风格，极大的提高了开发的效率。</p>\n<p>另外一个更重要的点在于  <code>Stream</code>  为我们下篇文章要分享的 <b> <code>Stream</code>  并行计算流</b> 提供了实现，请期待。</p>\n<ul>\n<li><code>Stream</code>  为什么要这么设计？</li>\n</ul>\n<p>我这里给一份我的回答，这个问题也留给看文章的你，也希望能看到你的回答。</p>\n<p>根据上文所说的内容， <code>Stream</code>  体系是一组接口家族， <code>AbstractPipeline </code> 是接口的实现， <code>PipelineHelper</code>  是管道的辅助类， <code>StreamSupport</code>  是流的底层工具类</p>\n<p><code>Stream</code>  使用 <code>stage</code>  来抽象流水线上的每个操作，其实每个 <code>stage</code>  就是一个 <code>stream</code>  子类的实例， 也就是 <code>AbstractPipeline</code>  几个子类的内部子类即 <code>Head</code>   <code>StatelessOp</code>   <code>statefulOp</code> ;</p>\n<p><code>StreamSupport</code>  用于创建生成 <code>Stream</code>  对应的是 <code>Head</code>  类，其他的中间操作分为有状态和无状态的，中间操作通过方法比如  <code>filter</code>   <code>map</code>  等返回的是 <code>StatelessOp</code>  或者  <code>statefulOp</code> .  多个 <code>stage</code>  组合称为双向链表的形式 从而成了整个流水线</p>\n<p>有了流水线，相邻两个操作阶段之间如何协调运算？</p>\n<p>于是又有了 <code>Sink</code>  的概念，又来协调相邻的 <code>stage</code>  之间计算运行</p>\n<p>他的模式是 <code>begin</code>    <code>accept</code>   <code>end</code>  还有短路标记</p>\n<p>他的 <code>accept</code>  就是封装了回调方法，所以说每个操作 <code>stage</code> ,  <code>StatelessOp</code>   或者  <code>statefulOp</code>  中又封装了 <code>Sink</code> . 通过 <code>AbstractPipeline</code>  提供的 <code>opWrapSink</code>  方法可以获取这个 <code>Sink</code></p>\n<p>调用这个 <code>sink</code>  的 <code>accept</code>  方法就可以调用当前操作的方法</p>\n<p>那么如何串联起来呢？</p>\n<p>关键点在于 <code>opWrapSink</code>  方法，他接收一个 <code>Sink</code>  作为参数，在调用 <code>accept</code>  方法中。可以调用这个入参 <code>Sink</code>  的 <code>accept</code>  方法</p>\n<p>这样子从当前就能调用下一个，也就是说有了推动的动作。那么只需要找到开始，每个处理了之后都推动下一个，就顺序完成了所欲的操作了。</p>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>通过看  <code>Stream</code>  相关的知识点，发现一篇文章是没法讲清楚的。</p>\n<p>这一次，我又果不其然的留下了两篇文章</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\">  <code>Stream</code>  并行计算流</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\"><label for=\"cbx_1\">  <code>Stream</code>  的高级迭代器</label></li>\n</ul>\n<p>请给我记代办～</p>\n<p>在分享 <code>并行计算流</code> 的时候，我们需要以  <code>JDK1.7</code>  中的  <code>forkJoin</code>  框架为前提，来分析  <code>Stream</code>  的  <code>parallelStream</code> .</p>\n<p>在分享 <code>迭代器</code> 的时候，我们也会分析一下 <code>JDK</code>  中提供的 普通迭代器，比如  <code>ForEach</code> ,  <code>iterator</code> , 以及 <code>Stream</code>  的高级迭代器  <code>spliterator</code> . 也会由浅入深的分析一下，各种迭代器的优缺点。 也会自定义实现一个迭代器。</p>\n<p>敬请期待，防止走丢见文末。关注我，期望和你一起遇见更好的自己.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/java/jdk/stream/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "JDK",
                "Java",
                "Stream"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/19/java%E7%B3%BB%E5%88%97/JVM/OOM/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/19/java%E7%B3%BB%E5%88%97/JVM/OOM/",
            "title": "JVM之你没见过的OOM",
            "date_published": "2021-08-19T09:13:55.000Z",
            "content_html": "<p>一文搞懂内存溢出，保内存平安，防止你被祭天:[手动滑稽]:</p>\n<h2 id=\"释义\"><a class=\"markdownIt-Anchor\" href=\"#释义\">#</a> 释义</h2>\n<p><code>OOM</code>  的含义，到底是什么意思？<br>\n 是 JVM 独有的吗？  <code>linux</code>  是否也会存在，那又是怎么肥事？</p>\n<p><code>OOM</code>  :  <code>Out Of Memory</code>  .  内存溢出。内存溢出来了，也就是说内存不够用了，就会发生这个问题了。</p>\n<h3 id=\"内存又是什么呢\"><a class=\"markdownIt-Anchor\" href=\"#内存又是什么呢\">#</a> 内存又是什么呢？</h3>\n<p>1、 内存 是计算机的重要部件之一。它用于暂时存放 CPU 中的运算数据，与硬盘等外部存储交换数据。是外存与 <code>CPU</code>  进行沟通的桥梁。</p>\n<p>2、 <code>Java</code>  内存。说到这里我们就不得说一下 java 的内存模型 (JMM) 了。如下图。</p>\n<p><img data-src=\"/images/java/jvm/JMM.png\" alt=\"JMM\"></p>\n<p>就这个一个图就很不下几十个面试考点：比如 <code>votitle</code>  关键字，内存栅栏，指令重排，5 项 <code>Happen-Before</code>  原则，内存原子操作，数据 <code>IO</code>  操作等等。</p>\n<p>闲话少扯，抛个问题， <code>OOM</code>  发生区域会上图中那个部分发生呢？</p>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><code>java</code>  运行时内存区域  <code>JAVA RUNTIME MEMEORY AREA</code> , 注意区分 <code>JMM</code> .</p>\n<p>大家都知道的， <code>java</code>  运行时内存区域，分为程序计数器 (PC 寄存器)，java 虚拟机栈，本地方法栈，堆，方法区，运行时常量池，堆外内存 (直接内存)</p>\n<p>1、程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 <code>Undefined</code> 。</p>\n<p>2、 <code>Java</code>  虚拟机栈是描述  <code>Java</code>  方法运行过程的内存模型。 <code>Java</code>  虚拟机栈会为每一个即将运行的  <code>Java</code>  方法创建一块叫做 “栈帧” 的区域，用于存放该方法运行过程中的一些信息，比如：局部变量表，操作数栈，动态链接，方法出口信息等，方法执行的过程即为栈帧压栈出栈的过程。</p>\n<p>3、本地方法栈是为  <code>JVM</code>  运行  <code>Native</code>  方法准备的空间，由于很多  <code>Native</code>  方法都是用  <code>C</code>  语言实现的，所以它通常又叫  <code>C</code>  栈。它与  <code>Java</code>  虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<p>4、堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。这一区域是线程共享，整个  <code>Java</code>  虚拟机只有一个堆，所有的线程都访问同一个堆。堆又可划分为年轻代和老年代，年轻代内存又可以分为 <code>Eden</code> ,  <code>from Surivor</code> , <code>to Surivor</code> , 并且默认以 8:1:1 的比例进行分配。</p>\n<p>5、方法区： <code>Java</code>  虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：已经被虚拟机加载的类信息，常亮，静态变量，即时编译编译器编译后的代码。线程共享的区域。为了与堆区分，方法还有一个别名： <code>Non-Heap</code>  (非堆)。</p>\n<p>5.1 、运行时常量池：存放常量的区域。 在运行期间，可以向常量池中添加新的变量，如  <code>String</code>  类的 <code>intern()</code>  方法。</p>\n<p>6、堆外内存是 <code>java</code>  虚拟机之外的内容，但也可能被 <code>java</code>  使用。需要注意的是，这部分内容也会因内存不足而抛出  <code>OutOfMemoryError</code> 、</p>\n<p>知道了 <code>Java</code>  运行内存区域，那么可能发生  <code>OOM</code>  的区域有哪些呢？</p>\n<p>我们都知道 <code>OOM</code>  只的是内存溢出，所以 堆，非堆即方法区，本地方法栈，以及堆外内存 都是会发生  <code>OOM</code>  的。</p>\n<p>那 <code>java</code>  虚拟机栈呢？不会发生内容溢出吗？   会！但是 栈发生内容溢出的时候，报的错误是  <code>StackOverflowError</code> .</p>\n<p>那程序计数器呢？  程序计数器，是不会发送内容溢出的。 因为 存储的是：当前线程正在执行的那条字节码指令的地址啊。</p>\n<p>如下图：</p>\n<p><img data-src=\"/images/java/jvm/OOM%E5%8C%BA%E5%9F%9F%E5%9B%BE.png\" alt=\"OOM区域图\"></p>\n<p>在上图中还指定了各区域大小的参数配置：</p>\n<ul>\n<li>\n<p><code>-Xms</code>  设置堆的最小空间大小。</p>\n</li>\n<li>\n<p><code>-Xmx</code>  设置堆的最大空间大小。</p>\n</li>\n<li>\n<p><code>-XX:NewSize</code>  设置新生代最小空间大小。</p>\n</li>\n<li>\n<p><code>-XX:MaxNewSize</code>  设置新生代最大空间大小。</p>\n</li>\n<li>\n<p><code>-XX:PermSize</code>  设置永久代最小空间大小。</p>\n</li>\n<li>\n<p><code>-XX:MaxPermSize</code>  设置永久代最大空间大小。</p>\n</li>\n<li>\n<p><code>-Xss</code>  设置每个线程的堆栈大小。</p>\n</li>\n</ul>\n<p>没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。  <code>老年代空间大小=堆空间大小-年轻代大空间大小</code></p>\n<h2 id=\"场景分析\"><a class=\"markdownIt-Anchor\" href=\"#场景分析\">#</a> 场景分析</h2>\n<p>我们挨个分析下发生 <code>OOM</code>  的 9 种场景</p>\n<p>什么时候会发生 <code>OOM</code>  呢？  当内存严重不够用的时候就会发生   <code>java.lang.OutOfMemoryError</code>  。</p>\n<p>我们来看下每个区域都有可能出现内存溢出问题.</p>\n<h3 id=\"javaheap-space\"><a class=\"markdownIt-Anchor\" href=\"#javaheap-space\">#</a>  <code>JavaHeap space</code></h3>\n<p>当堆内存（ <code>Heap Space</code> ）没有足够空间存放新创建的对象时，就会抛出  <code>java.lang.OutOfMemoryError:Javaheap space</code>  错误。</p>\n<p><code>Javaheap space</code>  错误产生的常见原因可以分为以下几类：</p>\n<p>1. 请求创建一个超大对象，通常是一个大数组。<br>\n2. 超出预期的访问量 / 数据量，通常是上游系统请求流量飙升，常见于各类促销 / 秒杀活动，可以结合业务流量指标排查是否有尖状峰值。<br>\n3. 过度使用终结器（ <code>Finalizer</code> ），该对象没有立即被  <code>GC</code> 。<br>\n4. 内存泄漏（ <code>Memory Leak</code> ），大量对象引用没有释放， <code>JVM</code>  无法对其自动回收，常见于使用了  <code>File</code>  等资源没有回收。</p>\n<h4 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<p>针对大部分情况，通常只需要通过  <code>-Xmx</code>  参数调高  <code>JVM</code>  堆内存空间即可。如果仍然没有解决，可以参考以下情况做进一步处理：</p>\n<p>1、如果是超大对象，可以检查其合理性，比如是否一次性查询了数据库全部结果，而没有做结果数限制。<br>\n2、如果是业务峰值压力，可以考虑添加机器资源，或者做限流降级。<br>\n3、如果是内存泄漏，需要找到持有的对象，修改代码设计，比如关闭没有释放的连接。</p>\n<h4 id=\"代码案例\"><a class=\"markdownIt-Anchor\" href=\"#代码案例\">#</a> 代码案例</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示大对象</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xms128M -Xmx128M</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bigObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 21 可以，22就会OOM</span></span><br><span class=\"line\">    <span class=\"comment\">// 4* 1024 * 1024 = 4M * 32 = 128M</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">32</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容<br>\n<img data-src=\"/images/java/jvm/heapSpaceError.png\" alt=\"\"></p>\n<h3 id=\"gc-overhead-limit-exceeded\"><a class=\"markdownIt-Anchor\" href=\"#gc-overhead-limit-exceeded\">#</a>  <code>GC overhead limit exceeded</code></h3>\n<p>当  <code>Java</code>  进程花费  <code>98%</code>  以上的时间执行  <code>GC</code> ，但只恢复了不到  <code>2%</code>  的内存，且该动作连续重复了  <code>5</code>  次，就会抛出  <code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code>  错误。简单地说，就是应用程序已经基本耗尽了所有可用内存，  <code>GC</code>  也无法回收。</p>\n<h4 id=\"解决方案-2\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-2\">#</a> 解决方案</h4>\n<p>同  <code>JavaHeap space</code>  部分的异常解决方案。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 频繁GC</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xms128M -Xmx128M</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">overHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Map map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        map.put(r.nextInt(), <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容:<br>\n<img data-src=\"/images/java/jvm/gcOverHead.png\" alt=\"\"></p>\n<h3 id=\"permgen-spacejdk8-已废弃-see-元空间\"><a class=\"markdownIt-Anchor\" href=\"#permgen-spacejdk8-已废弃-see-元空间\">#</a>  <code>Permgen space</code> ( <code>JDK8</code>  已废弃， <code>see</code>  元空间。)</h3>\n<div class=\"note info\">\n<p>为什么会废弃 永久代？     <code>see</code> ： <span class=\"exturl\" data-url=\"aHR0cDovL29wZW5qZGsuamF2YS5uZXQvamVwcy8xMjI=\">http://openjdk.java.net/jeps/122</span></p>\n</div>\n<p>该错误表示永久代（ <code>Permanent Generation</code> ）已用满，通常是因为加载的  <code>class</code>  数目太多或体积太大。</p>\n<p>永久代存储对象主要包括以下几类：</p>\n<p>加载 / 缓存到内存中的  <code>class</code>  定义，包括类的名称，字段，方法和字节码；<br>\n常量池；<br>\n对象数组 / 类型数组所关联的  <code>class</code> ；<br>\n <code>JIT</code>  编译器优化后的  <code>class</code>  信息。<br>\n <code>PermGen</code>  的使用量与加载到内存的  <code>class</code>  的数量 / 大小正相关。</p>\n<h4 id=\"解决方案-3\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-3\">#</a> 解决方案</h4>\n<p>根据  <code>Permgen space</code>  报错的时机，可以采用不同的解决方案，如下所示：</p>\n<ul>\n<li>程序启动报错，修改  <code>-XX:MaxPermSize</code>  启动参数，调大永久代空间。</li>\n<li>应用重新部署时报错，很可能是没有应用没有重启，导致加载了多份  <code>class</code>  信息，只需重启 JVM 即可解决。</li>\n<li>运行时报错，应用程序可能会动态创建大量  <code>class</code> ，而这些  <code>class</code>  的生命周期很短暂，但是 JVM 默认不会卸载  <code>class</code> ，可以设置  <code>-XX:+CMSClassUnloadingEnabled</code>  和  <code>-XX:+UseConcMarkSweepGC</code>  这两个参数允许  <code>JVM</code>  卸载  <code>class</code> 。</li>\n<li>如果上述方法无法解决，可以通过  <code>jmap</code>  命令  <code>dump</code>  内存对象  <code>jmap-dump:format=b,file=dump.hprof</code>  ，然后利用  <code>Eclipse MAT https://www.eclipse.org/mat</code>  功能逐一分析开销最大的  <code>classloader</code>  和重复  <code>class</code> 。</li>\n</ul>\n<h3 id=\"metaspace\"><a class=\"markdownIt-Anchor\" href=\"#metaspace\">#</a>  <code>Metaspace</code></h3>\n<p><code>JDK 1.8</code>  使用  <code>Metaspace</code>  替换了永久代（ <code>Permanent Generation</code> ）</p>\n<p>该错误表示  <code>Metaspace</code>  已被用满，通常是因为加载的  <code>class</code>  数目太多或体积太大。</p>\n<p>此类问题的原因与解决方法跟  <code>PermGenspace</code>  非常类似，可以参考上文。</p>\n<p>需要特别注意的是调整  <code>Metaspace</code>  空间大小的启动参数为  <code>-XX:MaxMetaspaceSize</code> 。</p>\n<h4 id=\"代码案例-2\"><a class=\"markdownIt-Anchor\" href=\"#代码案例-2\">#</a> 代码案例</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示  元数据区</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 在 `for` 循环中, 动态生成很多class, 最终将这些class加载到 Metaspace 中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意配置: -XX:MaxMetaspaceSize=64m</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">metaSpace</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">        Class c = cp.makeClass(<span class=\"string\">&quot;eu.plumbr.demo.Generated&quot;</span> + i).toClass();</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容:</p>\n<p><img data-src=\"/images/java/jvm/metaSpace.png\" alt=\"\"></p>\n<h3 id=\"unable-to-create-new-native-thread\"><a class=\"markdownIt-Anchor\" href=\"#unable-to-create-new-native-thread\">#</a>  <code>Unable to create new native thread</code></h3>\n<p>每个  <code>Java</code>  线程都需要占用一定的内存空间，当  <code>JVM</code>  向底层操作系统请求创建一个新的  <code>native</code>  线程时，如果没有足够的资源分配就会报此类错误。</p>\n<h4 id=\"原因分析\"><a class=\"markdownIt-Anchor\" href=\"#原因分析\">#</a> 原因分析</h4>\n<p><code>JVM</code>  向  <code>OS</code>  请求创建  <code>native</code>  线程失败，就会抛出  <code>Unable to create new native thread</code> ，常见的原因包括以下几类：</p>\n<p>线程数超过操作系统最大线程数  <code>ulimit</code>  限制；<br>\n线程数超过  <code>kernel.pid_max</code> （只能重启）；<br>\n <code>native</code>  内存不足；</p>\n<p>该问题发生的常见过程主要包括以下几步：</p>\n<p><code>JVM</code>  内部的应用程序请求创建一个新的  <code>Java</code>  线程；<br>\n <code>JVM native</code>  方法代理了该次请求，并向操作系统请求创建一个  <code>native</code>  线程；<br>\n操作系统尝试创建一个新的  <code>native</code>  线程，并为其分配内存；<br>\n如果操作系统的虚拟内存已耗尽，或是受到 32 位进程的地址空间限制，操作系统就会拒绝本次  <code>native</code>  内存分配；<br>\n <code>JVM</code>  将抛出  <code>java.lang.OutOfMemoryError:Unableto createnewnativethread</code>  错误。</p>\n<h4 id=\"解决方案-4\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-4\">#</a> 解决方案</h4>\n<ul>\n<li>升级配置，为机器提供更多的内存；</li>\n<li>降低  <code>Java Heap Space</code>  大小；</li>\n<li>修复应用程序的线程泄漏问题；</li>\n<li>限制线程池大小；</li>\n<li>使用  <code>-Xss</code>  参数减少线程栈的大小；</li>\n<li>调高  <code>OS</code>  层面的线程最大数：执行  <code>ulimit -a</code>  查看最大线程数限制，使用  <code>ulimit -u xxx</code>  调整最大线程数限制。</li>\n</ul>\n<h4 id=\"代码案例-3\"><a class=\"markdownIt-Anchor\" href=\"#代码案例-3\">#</a> 代码案例</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示: Unable to create new native thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">nativeThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容:</p>\n<p><img data-src=\"/images/java/jvm/unableCreateNative.png\" alt=\"\"></p>\n<h3 id=\"out-of-swap-space\"><a class=\"markdownIt-Anchor\" href=\"#out-of-swap-space\">#</a>  <code>Out of swap space</code></h3>\n<p>该错误表示所有可用的虚拟内存已被耗尽。虚拟内存（ <code>Virtual Memory</code> ）由物理内存（ <code>Physical Memory</code> ）和交换空间（ <code>Swap Space</code> ）两部分组成。当运行时程序请求的虚拟内存溢出时就会报  <code>Outof swap space</code>  错误。</p>\n<p>这个错误通常是操作系统层面的原因。</p>\n<h4 id=\"原因分析-2\"><a class=\"markdownIt-Anchor\" href=\"#原因分析-2\">#</a> 原因分析</h4>\n<p>该错误出现的常见原因包括以下几类：</p>\n<ul>\n<li>\n<ol>\n<li>地址空间不足；</li>\n</ol>\n</li>\n<li>2. 物理内存已耗光；</li>\n<li>3. 应用程序的本地内存泄漏（ <code>native leak</code> ），例如不断申请本地内存，却不释放。</li>\n<li>4. 执行  <code>jmap-histo:live</code>  命令，强制执行  <code>Full GC</code> ；如果几次执行后内存明显下降，则基本确认为  <code>Direct ByteBuffer</code>  问题。</li>\n</ul>\n<h4 id=\"解决方案-5\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-5\">#</a> 解决方案</h4>\n<p>根据错误原因可以采取如下解决方案：</p>\n<ul>\n<li>\n<ol>\n<li>升级地址空间为  <code>64 bit</code> ；</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>使用  <code>Arthas</code>  检查是否为  <code>Inflater/Deflater</code>  解压缩问题，如果是，则显式调用  <code>end</code>  方法。</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li><code>Direct ByteBuffer</code>  问题可以通过启动参数  <code>-XX:MaxDirectMemorySize</code>  调低阈值。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>升级服务器配置 / 隔离部署，避免争用。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"kill-process-or-sacrifice-child\"><a class=\"markdownIt-Anchor\" href=\"#kill-process-or-sacrifice-child\">#</a>  <code>Kill process or sacrifice child</code></h3>\n<p>有一种内核作业（ <code>Kernel Job</code> ）名为  <code>Out of Memory Killer</code> ，它会在可用内存极低的情况下 “杀死”（ <code>kill</code> ）某些进程。 <code>OOM Killer</code>  会对所有进程进行打分，然后将评分较低的进程 “杀死”，具体的评分规则可以参考  <code>Surviving the Linux OOM Killer</code> 。</p>\n<p>不同于其他的  <code>OOM</code>  错误，  <code>Killprocessorsacrifice child</code>  错误不是由  <code>JVM</code>  层面触发的，而是由操作系统层面触发的。</p>\n<h4 id=\"原因分析-3\"><a class=\"markdownIt-Anchor\" href=\"#原因分析-3\">#</a> 原因分析</h4>\n<p>默认情况下， <code>Linux</code>  内核允许进程申请的内存总量大于系统可用内存，通过这种 “错峰复用” 的方式可以更有效的利用系统资源。</p>\n<p>然而，这种方式也会无可避免地带来一定的 “超卖” 风险。例如某些进程持续占用系统内存，然后导致其他进程没有可用内存。此时，系统将自动激活  <code>OOM Killer</code> ，寻找评分低的进程，并将其 “杀死”，释放内存资源。</p>\n<h4 id=\"解决方案-6\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-6\">#</a> 解决方案</h4>\n<ul>\n<li>升级服务器配置 / 隔离部署，避免争用。</li>\n<li><code>OOM Killer</code>  调优。</li>\n</ul>\n<h4 id=\"代码案例-4\"><a class=\"markdownIt-Anchor\" href=\"#代码案例-4\">#</a> 代码案例</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示:Kill process or sacrifice child</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    java.util.List&lt;<span class=\"keyword\">int</span>[]&gt; l = <span class=\"keyword\">new</span> java.util.ArrayList();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">10000</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            l.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100000000</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            t.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容<br>\n<img data-src=\"/images/java/jvm/killprocess.png\" alt=\"\"></p>\n<h3 id=\"requested-array-size-exceeds-vm-limit\"><a class=\"markdownIt-Anchor\" href=\"#requested-array-size-exceeds-vm-limit\">#</a>  <code>Requested array size exceeds VM limit</code></h3>\n<p>JVM 限制了数组的最大长度，该错误表示程序请求创建的数组超过最大长度限制。</p>\n<p>JVM 在为数组分配内存前，会检查要分配的数据结构在系统中是否可寻址，通常为  <code>Integer.MAX_VALUE-2</code> 。</p>\n<p>此类问题比较罕见，通常需要检查代码，确认业务是否需要创建如此大的数组，是否可以拆分为多个块，分批执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[Integer.MAX_VALUE-i];</span><br><span class=\"line\">            System.out.format(<span class=\"string\">&quot;Successfully initialized an array with %,d elements.\\n&quot;</span>, Integer.MAX_VALUE-i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            t.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容</p>\n<p><img data-src=\"/images/java/jvm/requestArraySize.png\" alt=\"\"></p>\n<h3 id=\"direct-buffer-memory\"><a class=\"markdownIt-Anchor\" href=\"#direct-buffer-memory\">#</a>  <code>Direct buffer memory</code></h3>\n<p><code>java</code>  允许应用程序通过  <code>Direct ByteBuffer</code>  直接访问堆外内存，许多高性能程序通过  <code>Direct ByteBuffer</code>  结合内存映射文件（ <code>Memory Mapped File</code> ）实现高速  <code>IO</code> 。</p>\n<h4 id=\"原因分析-4\"><a class=\"markdownIt-Anchor\" href=\"#原因分析-4\">#</a> 原因分析</h4>\n<p><code>Direct ByteBuffer</code>  的默认大小为  <code>64 MB</code> ，一旦使用超出限制，就会抛出  <code>Directbuffer memory</code>  错误。</p>\n<h4 id=\"解决方案-7\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-7\">#</a> 解决方案</h4>\n<ul>\n<li><code>Java</code>  只能通过  <code>ByteBuffer</code> . <code>allocateDirect</code>  方法使用  <code>Direct ByteBuffer</code> ，因此，可以通过  <code>Arthas</code>  等在线诊断工具拦截该方法进行排查。</li>\n<li>检查是否直接或间接使用了  <code>NIO</code> ，如  <code>netty</code> ， <code>jetty</code>  等。</li>\n<li>通过启动参数  <code>-XX:MaxDirectMemorySize</code>  调整  <code>Direct ByteBuffer</code>  的上限值。</li>\n<li>检查  <code>JVM</code>  参数是否有  <code>-XX:+DisableExplicitGC</code>  选项，如果有就去掉，因为该参数会使  <code>System.gc()</code>  失效。</li>\n<li>检查堆外内存使用代码，确认是否存在内存泄漏；或者通过反射调用  <code>sun.misc.Cleaner</code>  的  <code>clean()</code>  方法来主动释放被  <code>Direct ByteBuffer</code>  持有的内存空间。</li>\n<li>内存容量确实不足，升级配置。</li>\n</ul>\n<h4 id=\"代码案例-5\"><a class=\"markdownIt-Anchor\" href=\"#代码案例-5\">#</a> 代码案例</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示对外内存溢出</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;maxDirectMemory : &quot;</span> + (sun.misc.VM.maxDirectMemory() / (<span class=\"keyword\">double</span>) (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>)) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">    ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class=\"number\">6</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">    System.out.println(byteBuffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错内容<br>\n<img data-src=\"/images/java/jvm/directBuffer.png\" alt=\"\"></p>\n<h2 id=\"排查思路\"><a class=\"markdownIt-Anchor\" href=\"#排查思路\">#</a> 排查思路</h2>\n<p>分享遇到 <code>OOM</code>  类问题如何快速定位问题，具体哪行代码发生了问题</p>\n<p>什么表现会发生 <code>OOM</code>  呢？</p>\n<p>最直接的～，有报错， <code>outOfMemoryError</code> 。 就是发生了。<br>\n有频繁 <code>GC</code>  的事件发生的时候，也要注意下，可能是在  <code>OOM</code>  的边缘疯狂试探。 比如  <code>FullGC</code> ，  <code>Young GC</code> , 等。<br>\n <code>CPU</code>  占用率较高。<br>\n先说一个思路哈～</p>\n<h3 id=\"止损\"><a class=\"markdownIt-Anchor\" href=\"#止损\">#</a> 止损。</h3>\n<p>如果你在线上遇到了这个问题， 请，务必！ 先将服务重启！立刻，马上。 及时止损。  <code>ps</code> : 可以留一台机器做案发现场，记得下掉该机器，不对外提供服务。</p>\n<h3 id=\"问题排查\"><a class=\"markdownIt-Anchor\" href=\"#问题排查\">#</a> 问题排查</h3>\n<p>注意观察线上服务情况，如果再次出现 <code>OOM</code> , 影响业务，再问题没有解决完成之前，还是采用重启的方式解决。<br>\n可以通过  <code>glowroot</code>  等可视化的监控工具，观察。<br>\n也可以通过在机器上 使用   <code>jstat -gc pid</code>  来查看 <code>GC</code>  情况。<br>\n分析造成 <code>OOM</code>  的问题。(具体如何排查，可参考案例模块)</p>\n<p>查到对应 <code>JVM</code>  进程 =&gt;  排查到占用内存打的 <code>jvm</code>  线程 =&gt; 查看对应线程栈信息 =&gt; 使用 <code>Jmap</code>  来生成线程堆栈信息文件 =&gt; 分析大对象 <code>or</code>  占用内存大的原因 =&gt;  基本上改代码或者 <code>jvm</code>  配置。</p>\n<p>其他排查问题思路和这个也是大差不差，使用的命令不同而已。</p>\n<h3 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\">#</a> 案例</h3>\n<details class=\"warning\"><summary>举个栗子🌰吧</summary><div>\n<p>比较常见的应该是：  <code>java.lang. outOfMemoryError: Java heap Space</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示OOM 排查过程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSpaceError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> Thread(() -&gt; bigObject());</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示大对象</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xms128M -Xmx128M</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bigObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 21 可以，22就会OOM</span></span><br><span class=\"line\">    <span class=\"comment\">// 4* 1024 * 1024 = 4M * 32 = 128M</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">22</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行后发现控制台打印出了 <code>OOM</code>  :  <code>java heap space</code> .  好吧，就装作看不见吧</p>\n<p>1、使用  <code>jps</code>  命令获取到  <code>jvm</code>  进程号</p>\n<p><img data-src=\"/images/java/jvm/oom%E6%A1%88%E4%BE%8Bjps.png\" alt=\"\"></p>\n<p>2、使用  <code>jmap</code>  命令 <code>dump</code>  出 堆栈信息。<br>\n<img data-src=\"/images/java/jvm/jdump.png\" alt=\"\"></p>\n<p>3、使用  <code>mat</code>  工具，分析 <code>dump</code>  文件内容。  (下载地址:  <code>https://www.eclipse.org/mat/downloads.php</code>    下载是真特🐴的慢啊，<span class=\"label success\">❤️一般人我不告诉他：公众号回复 <code>MAT</code>  就能直接获取</span>)</p>\n<blockquote>\n<p>如果下载之后无法启动的话，提示 无法创建虚拟机。需要简单配置下：<br>\n <code>-vm /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/bin</code></p>\n</blockquote>\n<p>3.1、下载下 <code>dump</code>  文件，使用本地分析 <code>mat</code>  工具进行分析。</p>\n<p>启动 <code>mat</code> .<br>\n<img data-src=\"/images/java/jvm/mat.png\" alt=\"\"></p>\n<p><code>Open a  heap Dump</code>  之后，就可以愉快的分析了。</p>\n<p>具体分析方法请自行百度吧。</p>\n<p>3.2、如果 <code>dump</code>  文件较小，也可以 <code>java</code>  自带的工具 jhat 命令进行分析。<br>\n<img data-src=\"/images/java/jvm/jmap.png\" alt=\"\"></p>\n<p>然后访问本机的  <code>7000</code>  端口，就可以到看到分析的内容了。<br>\n<img data-src=\"/images/java/jvm/image2021-4-15_19-8-56.png\" alt=\"\"><br>\n进入之后，就可以看到堆内存占用情况的柱状图了。<br>\n<img data-src=\"/images/java/jvm/heapHistogram.png\" alt=\"\"><br>\n发现有  <code>Class[I</code>  占用最多，     <code>Class[I</code>  表示的是  <code>int</code>  数组。 那我们就查下代码里用到 <code>Class[I</code>  中的地方，</p>\n<p>哇，果然是在  <code>new</code>  了一个大的数据，撑爆了内存。</p>\n<p>补充下：</p>\n<p>先查看 jvm 进程号 <br>\n <code> jps </code>   注意：只能查看属于当前用户 <code>java</code>  进程<br>\n  <code>ps -ef| grep java</code>  找到对应服务的进程编号<br>\n <code>ps -ef| grep 服务名</code></p>\n<p>如下图:<br>\n<img data-src=\"/images/java/jvm/%E8%A1%A5%E5%85%85.png\" alt=\"\"><br>\n 需要注意下:</p>\n<p>1) 查看当前应用运行情况信息，查看是否配置了 <code>gc log：-Xloggc:/apps/srv/instance/damai.gaotu100.com/logs/damai.gaotu100.com-gc.log</code>   , 可以从 <code>gc</code>  日志中查到很多信息。</p>\n<p>2）查看是否有 <code>oom</code>  自动打印二进制 <code>dump</code>  文件：  <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/apps/srv/instance/damai.gaotu100.com/logs/heapdump.hprof</code>   。</p>\n<blockquote>\n<p>如果没有配置，可以通过命令自行打印:   <code>jmap -dump:format=b,file=/apps/srv/instance/test-kefu-web.baijiahulian.com/logs/22316.1.hprof pid</code></p>\n</blockquote>\n<p>这里推荐下，阿里开源的 jvm 排查工具  arthas（阿尔萨斯）  <code>https://arthas.aliyun.com/doc/</code> 。文档很全，需要的自行阅读吧～～</p>\n</div></details>\n<h2 id=\"解决方案-8\"><a class=\"markdownIt-Anchor\" href=\"#解决方案-8\">#</a> 解决方案</h2>\n<p>分享遇到 <code>OOM</code>  问题时怎样解决？</p>\n<blockquote>\n<p>长兄于病视神，未有形而除之，故名不出于家。中兄治病，其在毫毛，故名不出于闾。若扁鹊者，镵血脉，投毒药，副肌肤，闲而名出闻于诸侯。 所以才有凡此者不病病，治之无名，使之无形，至功之成，其下谓之自然。<br>\n这句话，用在我们这里就是  系统的整个生命周期中，不出现任何 <code>OOM</code> , 其 谓之自然。</p>\n</blockquote>\n<p>根据上述的排查过程，找到了问题根源之后，那就<br>\n 1. 改代码<br>\n 2. 调整内存配置</p>\n<p>大刀阔斧的干吧！</p>\n<div class=\"note success no-icon\">\n<p>大家有什么建议呢？</p>\n</div>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>我们看待 <code>OOM</code>  应该从全面来看，有可能是  <code>jvm</code>  内存确实盛不下要分配的对象，也有可能是 频繁 <code>GC</code> ，且收效甚低导致的，还有可能是宿主机上内存不够杀死 <code>jvm</code>  导致的，加载的类过大过多造成的，虚拟内存不够用等等。最后也不要忽略 堆外内存的内存溢出。</p>\n<p>线上遇到这类问题，第一要及时止损，方式很简单，重启就能解决。   保证线上可用之后，再去查问题，根治问题。  同时不用忘了监控线上服务是否有内存要溢出的情况，及时重启，为处理 <code>OOM</code>  问题争取时间。</p>\n<p>排查问题时，首先找到对应 <code>jvm</code>  进程，然后使用 <code>jmap</code>  打印出 内存映射文件，然后使用 <code>jhat</code>  或者  <code>mat</code>  工具进行分析，定位原因。解决问题。</p>\n<p>最后，我们在 <code>coding</code>  的时候，要注意下，不要编写导致 <code>OOM</code>  代码。“未有形而除之～”</p>\n<h2 id=\"抛个问题~\"><a class=\"markdownIt-Anchor\" href=\"#抛个问题~\">#</a> 抛个问题～</h2>\n<p>发生 OOM，程序会退出吗？</p>\n<blockquote>\n<p>下期见</p>\n</blockquote>\n<h4 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h4>\n<p>希望和你一起遇见更好的自己<br>\n<img data-src=\"/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "Java",
                "OOM",
                "JVM"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "title": "LC:反转数组",
            "date_published": "2021-08-19T06:48:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<blockquote>\n<p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>\n</blockquote>\n<p>进阶：</p>\n<p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>\n你可以使用空间复杂度为 O (1) 的 原地 算法解决这个问题吗？</p>\n<p>示例 1:</p>\n<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>\n 输出: [5,6,7,1,2,3,4]<br>\n 解释:<br>\n 向右旋转 1 步: [7,1,2,3,4,5,6]<br>\n 向右旋转 2 步: [6,7,1,2,3,4,5]<br>\n 向右旋转 3 步: [5,6,7,1,2,3,4]</p>\n<p>示例 2:</p>\n<p>输入：nums = [-1,-100,3,99], k = 2<br>\n 输出：[3,99,-1,-100]<br>\n 解释:<br>\n 向右旋转 1 步: [99,-1,-100,3]<br>\n 向右旋转 2 步: [3,99,-1,-100]</p>\n<div class=\"note warning\">\n<p>提示</p>\n</div>\n<p>1 &lt;= nums.length &lt;= 2 * 104<br>\n-231 &lt;= nums[i] &lt;= 231 - 1<br>\n0 &lt;= k &lt;= 105</p>\n<hr>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<h3 id=\"解法1顺序后移法\"><a class=\"markdownIt-Anchor\" href=\"#解法1顺序后移法\">#</a> 解法 1: 顺序后移法</h3>\n<p>将最后一个元素赋值给临时变量，然后将其他元素顺序后移一个位置。重复此操作 k 次。</p>\n<p>但是需要注意的是:</p>\n<ul>\n<li>时间复杂度。这种算法在最优时时间复杂度是 O (n). 最差情况下是 O (n^2). 在 LeetCode 上是没法 AC 的。</li>\n<li>k 是会大于数组长度的。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解决k&gt;nums.length问题</span></span><br><span class=\"line\">        k = k % nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = length - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            nums[j] = nums[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种解决方法在数据量较大的情况下就会报错 <code>超出时间限制了</code> 。<br>\n即使 你在循环修改使用  <code>System.arraycopy(nums, 0, nums, 1, length - 1);</code>  来替换掉内层循环，也是不可以 <code>AC</code>  的。</p>\n<h3 id=\"解法2-优化解法1空间换时间\"><a class=\"markdownIt-Anchor\" href=\"#解法2-优化解法1空间换时间\">#</a> 解法 2: 优化解法 1, 空间换时间</h3>\n<p>按照规律将 nums 数组中的值，赋值到新数组中。然后使用新数组覆盖原数组。<br>\n那规律是什么呢？<br>\n 设：<br>\n <code>i</code>  为数组的的下标。  <code>newArr</code>  为新的数组， <code>n</code>  为数组总长度，<br>\n 那么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newArr[(i+k)%n] = nums[i]</span><br></pre></td></tr></table></figure>\n<p><code>AC</code>  代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        newArr[(i + k) % n] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.arraycopy(newArr, <span class=\"number\">0</span>, nums, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC 之后显示：<br>\n执行用时  <code>1 ms</code> <br>\n 内存消耗： <code>55.1 MB</code></p>\n<p>这种方式，时间复杂度得到显著的提升，但是带来了额外的空间消耗。而且这种空间消耗是等于原来占用的数据大小。</p>\n<p>那是否还有其他方式呢？</p>\n<h3 id=\"解法3-反转\"><a class=\"markdownIt-Anchor\" href=\"#解法3-反转\">#</a> 解法 3: 反转</h3>\n<p>这种方式是一种比较简单的方式，有点类似于脑筋急转弯的意思。抛开之前的环装思路。将这个数组看成具有方向的一组数据。将这组数据分成三组： <code>[0,k-1]</code> , <code>k</code> , <code>[k+1,length]</code> . 先将  <code>[0,k-1]</code>  反转，再把  <code>[k+1,length]</code>  反转，最后把这个数组反转。这样操作之后，就是最后结果了。</p>\n<p>比如，数组： <code>[1,2,3,4,5,6,7]</code> ,  <code>k=3</code></p>\n<p>第一步：把整体数组进行反转:  <code>[1,2,3,4,5,6,7]</code>  =&gt;  <code>[7,6,5,4,3,2,1]</code> <br>\n 第二步：把 <code>[0,k-1=2]</code>  的元素进行反转:  <code>[7,6,5,4,3,2,1]</code>  =&gt; <code>[5,6,7,4,3,2,1]</code> <br>\n 第三步：把 <code>[k,n-1]</code>  的元素进行反转:  <code>[5,6,7,4,3,2,1]</code>  =&gt; <code>[5,6,7,1,2,3,4]</code></p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start += <span class=\"number\">1</span>;</span><br><span class=\"line\">        end -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>关于这道题目的一点小思考:</p>\n<ul>\n<li>这道题其实还有另外一种解法，就是通过公式去推导出元素应该最终所在的位置，直接进行位置交换。这种思路也是可行的。具体解决可以参照下官网的解题方法。</li>\n<li>这是一道很简单的题目，最后出奇的解法也是颇感意外的，总有一种豁然开朗的感觉。我一直在想此法的解题人是怎么想到的呢。<span class=\"label warning\">这里面一定是蕴含一定的逻辑的。这种多次反转的逻辑，或许是一种规律？</span> 我一直没有想通。</li>\n<li>当你想到这个可以用一个环去解决问题的时候，可能永远就想不出 &quot;利用方向&quot; 去解决这个问题了。反观题目来讲，一直都是说的数组，而 “环” 是我们自己强加的一个思维方式。确实，当我们从环的角度出发，看到的就不是题目本身了，看到的是你的题目。<span class=\"label success\">✔️ 反观现实，你理解的现实就真正的是现实吗？你有没有陷入自己的 “环” 中去呢？不妨，重新看看你身边的人和事吧，尝试发现他们最真实的样子.</span></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "面经之算法题",
                "数组"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/18/git%E7%B3%BB%E5%88%97/%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/18/git%E7%B3%BB%E5%88%97/%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87/",
            "title": "git系列开篇",
            "date_published": "2021-08-18T06:48:55.000Z",
            "content_html": "<p>这个是继  <code>Redis</code>  ,  <code>MySQL</code>  之后的第三个系列了。<br>\n然而，前两个系列还都没有写完。<br>\n <code>so</code> ,  <code>Redis</code>  和  <code>MySQL</code>  pause.</p>\n<p>只是暂停～，我会在未来的三年内，将它们全部完成。</p>\n<p>叮～</p>\n<p><code>git</code> ！</p>\n<p>说到 <code>git</code> ，我们先了解一个人， <code>linus Torvalds</code>  （林纳斯・托瓦兹）</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/LinusTorvalds01.jpg\" alt=\"linus·Torvalds\"></p>\n<p>林纳斯・托瓦兹 是当今世界最著名的电脑程序员、黑客之一。他是 linux 内核的最早作者，随后发起了这个开源项目，担任 linux 内核的首要架构师和项目协调者。并于 2005 年 7 月 11 日，发布了仅用 10 天时间开发出的最早版本的 git 0.99。到今天 (2020 年 7 月 13 日)，最新的版本号是 2.27. 这个系列就以该版本进行分享。</p>\n<p>关于更多内容，查看这里 -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlFJTk3JUU3JUJBJUIzJUU2JTk2JUFGJUMyJUI3JUU2JTg5JTk4JUU3JTkzJUE2JUU1JTg1JUI5\">林纳斯・托瓦兹</span></p>\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\">#</a> git</h2>\n<p><code>2002</code>  年开始，林纳斯・托瓦斯 决定使用  <code>BitKeeper</code>  作为主要的版本控制系统来维护代码。但是社区中很多人认为，应该使用开源的版本控制软件来维护代码 林纳斯・托瓦斯也考虑使用 <code>monotone</code> ，但是 林纳斯・托瓦斯 嫌弃其性能不佳。在 <code>2005</code>  年，林纳斯决定自行开发一套版本控制系统。</p>\n<p>为什么称为 <code>git</code>  呢？</p>\n<p><code>git</code>  在英氏俚语中表示 不愉快的人。</p>\n<p>下面是 林纳斯・托瓦兹 对 <code>git</code>  的描述</p>\n<blockquote>\n<p>The name “git” was given by Linus Torvalds when he wrote the very first version. He described the tool as “the stupid content tracker” and the name as (depending on your way):<br>\nrandom three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of “get” may or may not be relevant.<br>\n“global information tracker”: you’re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.<br>\nstupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.</p>\n</blockquote>\n<p>林纳斯・托瓦兹在编写第一个版本时就使用了 <code>“git”</code>  这个名称。 他将工具描述为 “愚蠢的内容跟踪器”，并将其描述为（取决于您的方式）：</p>\n<ul>\n<li>可以发音念出的随机三个字母组合，而且并未被实际用在任何  <code>UNIX</code>  指令上。它是 <code>“get”</code>  的错误发音，这点可能相关也可能无关。</li>\n<li>“全局的信息跟踪器”：您的心情不错，对你而言它也确实说得通。天使唱歌，房间突然充满光明。( <code>Global Information tracker</code> )</li>\n<li>愚蠢的。鄙视和卑鄙的。简单。从俚语字典中选择。</li>\n</ul>\n<h3 id=\"git的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#git的实现原理\">#</a> git 的实现原理</h3>\n<p><code>git</code>  更像是一个文件系统，直接从本机上获取数据，不用连接服务端，每个开发者都可有全部开发历史的本地副本， <code>changes</code>  从这种本地 <code>repository</code>  复制给其他开发者。这些 <code>changes</code>  作为新增的开发分支被导入，可以与本地开发分支合并。</p>\n<p>而且，分支是轻量的，一个分支是对一个 <code>commit</code>  的引用。</p>\n<p><code>git</code>  使用 C 语言进行开发的，以追求更高的性能。 <code>git</code>  自动完成了垃圾回收，也可以通过  <code>git gc --prune</code></p>\n<p><code>git</code>  存储每个新创建的 <code>object</code>  作为一个单独文件。为了压缩存储空间占用，  <code>packs</code>  操作把很多文件（启发式类似名字的文件往往具有类似内容）使用差分压缩入一个文件中（ <code>packfile</code> ），并创建一个对应的索引文件，指明 <code>object</code>  在 <code>packfile</code>  中的偏移值。新创建的对象仍然作为单独文件存在。 <code>repacks</code>  操作非常费时间， <code>git</code>  会在空闲时间自动做此操作。也可用命令 <code>git gc</code>  来直接启动 <code>repack</code> 。 <code>packfile</code>  与索引文件都用 SHA-1 作为校验和并作为文件名。 <code>git fsck</code>  命令做校验和的完整性验证。</p>\n<p>Git 服务器典型的 TCP 监听端口为 <code>9418</code> 。</p>\n<p><code>git</code>  和其他版本控制系统（如 <code>CVS</code> ）有不小的差别， <code>git</code>  本身关心文件的整体性是否有改变，但多数的版本控制系统如 <code>CVS</code>  或 <code>Subversion</code>  系统则在乎文件内容的差异。 <code>git</code>  拒绝保持每个文件的版本修订关系。因此查看一个文件的历史需要遍历各个 <code>history</code>  快照； <code>git</code>  隐式处理文件更名，即同名文件默认为其前身，如果没有同名文件则在前一个版本中搜索具有类似内容的文件.</p>\n<p>以上简要介绍，先到这里，我们来看下， <code>git</code>  这一系列文章的目录。</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> git 介绍</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> git 安装</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> git 简单使用<br>\n介绍 git add、commit、merge、checkout、reset… 等基础命令的使用。</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> git 使用进阶<br>\n介绍：git diff、log、reflog，cherry-pick 等命令的使用</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> git 高级命令</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> git 底层命令</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> git 分支</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> git 远程仓库</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> git 工作流</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> git 搜索</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> git 再谈重置</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> git 安全性验证</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\"><label for=\"cbx_12\"> git 钩子</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" disabled=\"true\"><label for=\"cbx_13\"> git 传输协议</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" disabled=\"true\"><label for=\"cbx_14\"> git 数据维护和修复</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" disabled=\"true\"><label for=\"cbx_15\"> git 工作原理</label></li>\n</ul>\n<h3 id=\"推荐书籍\"><a class=\"markdownIt-Anchor\" href=\"#推荐书籍\">#</a> 推荐书籍</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy\">git-doc</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvODk2MDQzNDg4MDI5NjAw\"> 廖雪峰 Git 教程</span></p>\n<p><b>一个不错的 Github 仓库：</b> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bjb3R0bGUvbGVhcm5HaXRCcmFuY2hpbmc=\">游戏中学 git</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "目录",
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/04/%E9%9D%A2%E7%BB%8F/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/04/%E9%9D%A2%E7%BB%8F/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "title": "JDK的内置线程池",
            "date_published": "2021-08-04T06:14:00.000Z",
            "content_html": "<h1 id=\"线程池是什么\"><a class=\"markdownIt-Anchor\" href=\"#线程池是什么\">#</a> 线程池是什么？</h1>\n<p>线程池可以控制线程运行的数量，处理过程中将任务放到队列中，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，那么超出数量的线程就会排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p>\n<p>主要特点为：<br>\n1、降低资源消耗，通过重复利用已创建的线程创建和销毁造成的消耗。<br>\n2、提供响应速度。当任务到达时，任务可以不需要等待线程创建，能够立即执行。<br>\n3、提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性。使用线程池可以进行统一的分配，调优和监控。</p>\n<h1 id=\"线程池参数\"><a class=\"markdownIt-Anchor\" href=\"#线程池参数\">#</a> 线程池参数：</h1>\n<ul>\n<li><code>corePoolSize</code> : 线程池中常驻的线程数。</li>\n<li><code>maximumPoolSize</code> : 线程池中能够容纳同时执行的最大线程数，此值必须大于 1.</li>\n<li><code>keepAliveTime</code> : 多余的空闲线程的存活时间。当前线程池数量超过 <code>corePoolSize</code>  时，当空闲时间达 <code>keepAliveTime</code>  值时，多余的空闲线程会被销毁直到剩下 <code>corePoolSize</code>  个线程为止。</li>\n<li><code>unit</code> :  <code>keepAliveTime</code>  的单位.</li>\n<li><code>workQueue</code> : 任务队列，被提交但尚未执行的任务.</li>\n<li><code>threadFactory</code> : 表示生成线程池中工作线程的线程工厂，用于创建线程。</li>\n<li><code>headler</code> : 拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数 ( <code>maximumPoolSize</code> ) 时采取的措施。</li>\n</ul>\n<h1 id=\"线程池运行原理\"><a class=\"markdownIt-Anchor\" href=\"#线程池运行原理\">#</a> 线程池运行原理：</h1>\n<ul>\n<li><code>1</code> . 在创建线程之后，等待提交过来的任务请求。</li>\n<li><code>2</code> . 当调用 <code>execute()</code>  方法添加一个请求任务时，线程池会做如下判断：\n<ul>\n<li><code>2.1</code> 、如果正在运行的线程数量小于 <code>corePoolSize</code> ，那么马上创建线程执行这个任务。</li>\n<li><code>2.2</code> 、如果正在运行的线程数量大于或等于 <code>corePoolSize</code> ，那么将这个任务放入队列。</li>\n<li><code>2.3</code> 、如果这时候队列满了且正在运行的线程数量还小于 <code>maximumPoolSize</code> , 那么创建非核心线程 l 立刻执行这个任务。</li>\n<li><code>2.4</code> 、如果队列满了且正在运行的线程数量大于或者等于这个 <code>maximumPoolSize</code> , 那么线程池会启动饱和拒绝策略来执行。</li>\n</ul>\n</li>\n<li><code>3</code> 、当线程执行完成任务时，它会从队列中取下一个任务来执行。</li>\n<li><code>4</code> 、当线程无事可做超过一定的时间 ( <code>keepAliveTime</code> ) 时，线程池会判断：<br>\n如果当前运行的线程数大于 <code>corePoolSize</code> ，那么这个线程就会被停掉。<br>\n所以线程池的所有任务完成后它最终会收缩到 <code>corePoolSize</code>  的大小。</li>\n</ul>\n<h1 id=\"线程池拒绝策略\"><a class=\"markdownIt-Anchor\" href=\"#线程池拒绝策略\">#</a> 线程池拒绝策略</h1>\n<p>拒绝策略实现了  <code>RejectedExecutionHandler</code>  接口。</p>\n<h2 id=\"jdk内置的四种\"><a class=\"markdownIt-Anchor\" href=\"#jdk内置的四种\">#</a> JDK 内置的四种:</h2>\n<ul>\n<li><code>AbortPolicy</code>  (默认): 直接抛出 <code>RejectedExecutionException</code>  异常阻止系统正常运行。</li>\n<li><code>CallerRunsPolicy</code> : “调用者运行” 一种运行机制，该策略既不会 抛弃任务，也不会抛出异常，而是返回给调用者，从而减轻新任务流量。</li>\n<li><code>DiscardOldestPolicy</code> : 抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</li>\n<li><code>DiscardPolicy</code> : 直接丢弃任务，不予任何处理也不会抛出异常。如果允许任务丢失，这是最好的</li>\n</ul>\n<h1 id=\"如何配置线程池参数\"><a class=\"markdownIt-Anchor\" href=\"#如何配置线程池参数\">#</a> 如何配置线程池参数</h1>\n<ul>\n<li>\n<p>CPU 密集型:<br>\n 需要大量的运算，没有阻塞。CPU 一直在全速运行。<br>\nCPU 密集型任务只有在真正的多核 CPU 上才可以得到加速</p>\n<p><b>参考公式： CPU 核心数 + 1 个线程</b></p>\n</li>\n<li>\n<p>IO 密集型：<br>\n即该任务需要大量的 IO，即大量的阻塞。<br>\n在单线程上运行 IO 密集型的任务会导致浪费大量的 CPU 运算能力浪费等待。所以在 IO 秘籍型任务重使用多线程可以大大的加速程序运行，即使在单核 CPU 上，这种加速主要就是利用了被浪费掉的阻塞时间。<br>\nIO 密集型，大部分线程都会阻塞。所以需要多配置线程。配置方案有两种：</p>\n<p><b>1、参考公式: CPU 核数 / 1 - 阻塞系数。 阻塞系数在 0.8-0.9 之间。</b><br>\n比如 8 核 CPU:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>8</mn><mrow><mn>1</mn><mo>−</mo><mn>0.9</mn></mrow></mfrac><mo>=</mo><mn>80</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{8}{1-0.9}=80</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span></p>\n<p>个线程<br>\n<b>2、参考公式: CPU 核数 * 2</b></p>\n</li>\n</ul>\n",
            "tags": [
                "线程池",
                "面经"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bziplist/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bziplist/",
            "title": "Redis数据结构之详解 ziplist",
            "date_published": "2021-08-02T10:18:55.000Z",
            "content_html": "<h2 id=\"解密-ziplist\"><a class=\"markdownIt-Anchor\" href=\"#解密-ziplist\">#</a> 解密 ziplist.</h2>\n<p>为什么叫解密  <code>ziplist</code>  呢？因为从 ziplist 中取到我们预期的值，真的和解密一样！烧脑，但是极其有趣！！</p>\n<h3 id=\"引题\"><a class=\"markdownIt-Anchor\" href=\"#引题\">#</a> 引题</h3>\n<p>在介绍  <code>Redis</code>  的数据类型  <code>list</code>  的时候，是我们第一次接触  <code>ziplist</code>  这一数据结构。</p>\n<p>不知道是否还记得  <code>ziplist</code>  这种数据结构的特性。如果不记得也没有关系，今天我们来详细的看下这个数据结构。</p>\n<h3 id=\"重读-ziplist-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#重读-ziplist-数据结构\">#</a> 重读 ziplist 数据结构</h3>\n<p><code>ziplist</code>  是经过特殊编码的双向链接列表，旨在提高内存效率。 它同时存储字符串和整数值，其中整数被编码为实际整数，而不是一系列字符。它允许在  <code>O(1)</code>  时间在列表的任一侧进行推和弹出操作。</p>\n<p>但是，由于每个操作都需要重新分配 <code>ziplist</code>  使用的内存，因此实际的复杂性与 <code>ziplist</code>  使用的内存量有关。</p>\n<p><code>ziplist</code>  的数据结构总览。如下图</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-01-Ziplist%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<p>我来依次解释下这  <code>5</code>  个部分.</p>\n<ul>\n<li>\n<p><code>&lt;uint32_t zlbytes&gt;</code>  : 存储的  <code>ziplist</code>  占用的字节数 (包含  <code>zlbytes</code>  字段本身的  <code>4</code>  个字节)。因此：无需遍历就能直接知道这个数据结构的大小。</p>\n</li>\n<li>\n<p><code>&lt;uint32_t zltail&gt;</code>  是列表中最后一个条目的偏移量。 这允许在列表的另一端进行弹出操作，而无需完全遍历。在任意一端进行  <code>pop</code>  和  <code>push</code>  操作的时间复杂度都是  <code>O(1)</code>  .</p>\n</li>\n<li>\n<p><code>&lt;uint16_t zllen&gt;</code>  是条目数。当条目数超过 <code>2 ^ 16-2</code>  时，此值将设置为 <code>2 ^ 16-1</code> ，这时，我们需要遍历整个列表以了解其包含多少项了。</p>\n</li>\n<li>\n<p><code>&lt;uint8_t zlend&gt;</code>  是代表 <code>ziplist</code>  末尾的特殊条目。编码为等于 <code>255</code>  的单个字节。</p>\n</li>\n<li>\n<p><code>&lt;entry&gt;</code>  : 往下看.</p>\n</li>\n</ul>\n<h4 id=\"entry\"><a class=\"markdownIt-Anchor\" href=\"#entry\">#</a>  <code>Entry</code></h4>\n<p><code>ziplist</code>  中的每个条目都以包含两个信息的元数据作为前缀。首先，存储前一个  <code>entry</code>  的长度，以便能够从后到前遍历列表。第二，提供  <code>entry</code>  编码。 它表示条目类型，整数或字符串，对于字符串，还表示字符串有效负载的长度。因此，能够像下面这样存储一个完整的  <code>entry</code> .</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-01-entry%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<p>有时， <code>encoding</code>  也可以代表 <code>entry</code>  本身，就像后面将要看到的小整数一样。在这种情况下， <code>&lt;entry-data&gt;</code>  部分丢失了，我们的 <code>Entry</code>  结构是这样的：</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-01-entry%E7%9A%84%E7%BB%93%E6%9E%842.png\" alt=\"\"></p>\n<p>我们来具体看下  <code>Entry</code>  的编码方式.</p>\n<h5 id=\"prevlen\"><a class=\"markdownIt-Anchor\" href=\"#prevlen\">#</a>  <code>prevlen</code></h5>\n<p><code>&lt;prevlen&gt;</code>  表示 前一个  <code>entry</code>  的长度。</p>\n<ul>\n<li>\n<p>如果 前一个  <code>entry</code>  的长度小于 254 个字节，那么这个  <code>Entry</code>  只会消耗一个字节来表示该长度。一个无符号的  <code>8</code>  位整数。</p>\n</li>\n<li>\n<p>如果前一个  <code>entry</code>  长度大于或等于 <code>254</code>  字节的时候，它将占用 5 个字节。第一个字节设置为  <code>254</code> ( <code>FE</code> ), 以指示随后的值更大。 其他的四个字节将作为前一个 entry 的长度的值。</p>\n</li>\n</ul>\n<p>所以，我们就能知道了 下面这种编码方式.</p>\n<p><code>&lt;prevlen form 9 to 253&gt; &lt;encoding&gt; &lt;entry-data&gt;</code></p>\n<p>或者</p>\n<p><code>&lt;prevlen 4 bytes unsigned little endian prevlen&gt; &lt;encoding&gt; &lt;entry-data&gt;</code></p>\n<h5 id=\"encoding\"><a class=\"markdownIt-Anchor\" href=\"#encoding\">#</a>  <code>encoding</code></h5>\n<p><code>entry</code>  中的  <code>encoding</code>  字段取决于  <code>entry-data</code>  的内容。</p>\n<ul>\n<li>\n<p>如果  <code>entry-data</code>  是字符串的时候， <code>encoding</code>  第一个字节的前两位用于存储字符串长度的编码类型。然后是字符串的实际长度。</p>\n</li>\n<li>\n<p>如果  <code>entry</code>  是整数时，前 <code>2</code>  位都是 <code>1</code> ,。 接下来的两位用于指定在此标头之后将存储哪种类型.</p>\n</li>\n</ul>\n<p>由上面的两点，就足以确定  <code>entry-data</code>  的类型.</p>\n<p>不同的类型和编码的概述如下:</p>\n<h6 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h6>\n<ul>\n<li>\n<p><code>a</code> .  <code>| 00pppppp |</code>  : 含义是占用 <code>1</code>  个字节来表示长度小于或等于 <code>63</code>  个字节（ <code>6</code>  位）的字符串值。   <code>pppppp</code>  表示无符号的 6 位长度。</p>\n</li>\n<li>\n<p><code>b</code> . <code>|01pppppp|qqqqqqqq|</code>  含义是用 <code>2</code>  个字节来表示小于等于  <code>16383(2^14)</code>  个字节的字符串的长度. (<b>这里使用大端法计数</b>)</p>\n</li>\n<li>\n<p><code>c</code> . <code>|10000000|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt|</code>  含义是 使用 5 个字节来表示大于等于 16384 个字节长度的字符串，只有 4 个字节表示其最大长度为  <code>2^32-1</code> . 低位的 6 位被设置成  <code>0</code> .(<b>这里使用大端法计数</b>)</p>\n</li>\n</ul>\n<h6 id=\"整数类型\"><a class=\"markdownIt-Anchor\" href=\"#整数类型\">#</a> 整数类型</h6>\n<ul>\n<li><code>d</code> . <code>|11000000|</code> : 含义是用 <code>3</code>  个字节表示一个 <code>16</code>  位的有符号的短整形数 ( <code>short</code> )。</li>\n<li><code>e</code> . <code>|11010000|</code>  : 含义是用 <code>5</code>  个字节 表示一个 <code>32</code>  位的有符合整数型 ( <code>int</code> ).</li>\n<li><code>f</code> . <code>|11100000|</code>  : 含义是用 <code>9</code>  个字节，表示一个 <code>64</code>  位的有符合长整数 ( <code>long</code> )</li>\n<li><code>g</code> . <code>|11110000|</code>  : 含义是用 <code>4</code>  个字节表示 <code>24</code>  位有符号整数 (只占用 3 个字节)。PS: 有什么作用呢？前面说的小整形数。节约空间。即如图</li>\n<li><code>h</code> . <code>|11111110|</code>  :  含义是用 <code>2</code>  个字节表示一个 <code>8</code>  位的有符号小整形数。 <code>1</code>  个字节。</li>\n<li><code>i</code> . <code>|1111xxxx|</code>  :<br>\n 除去上面列举的几类编码标识，还有 <code>|1111xxxx|</code>  的类别。<br>\n( <code>xxxx</code>  在 <code>0000</code>  和 <code>1101</code>  之间) 立即 <code>4</code>  位整数。  <code>0</code>  到 <code>12</code>  之间的无符号整数。编码值实际上是 <code>1</code>  到 <code>13</code> ，因为不能使用 <code>0000</code>  和 <code>1111</code> ，因此应从编码的 <code>4</code>  位值中减去 <code>1</code>  以获得正确的值。</li>\n<li><code>j</code> . <code>|11111111| </code> - 表示  <code>ziplist</code>  的特殊  <code>entry</code></li>\n</ul>\n<p>这样，整个 <code>Entry</code>  的编码方式我们就搞明白了。<br>\n这些都是  <code>Redis</code>  中定义的规定， 所以我们记住就行了。如果让我们自己去设计一套编码方案的时候，我们就可以参考这种思路去设计。</p>\n<h3 id=\"那我们来举两个例子来试试身手吧\"><a class=\"markdownIt-Anchor\" href=\"#那我们来举两个例子来试试身手吧\">#</a> 那我们来举两个例子来试试身手吧。</h3>\n<h4 id=\"例子1-25\"><a class=\"markdownIt-Anchor\" href=\"#例子1-25\">#</a> 例子 1:  <code>25</code></h4>\n<h5 id=\"编码方式\"><a class=\"markdownIt-Anchor\" href=\"#编码方式\">#</a> 编码方式</h5>\n<p><code>[0f 00 00 00] [0c 00 00 00] [02 00] [00 f3] [02 f6] [ff]</code></p>\n<h5 id=\"解析过程\"><a class=\"markdownIt-Anchor\" href=\"#解析过程\">#</a> 解析过程</h5>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-01-Ziplist%E4%BE%8B%E5%AD%90%E7%9A%84%E7%BB%93%E6%9E%841.png\" alt=\"ziplist-01-Ziplist例子的结构1.png\"></p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE.png\" alt=\"\"></p>\n<h4 id=\"例子2-hello-world\"><a class=\"markdownIt-Anchor\" href=\"#例子2-hello-world\">#</a> 例子 2:  <code>Hello World</code></h4>\n<p>这里我们还是接着上面例子来讲，我们再设置一个 字符串  <code>Hello World</code>  。</p>\n<h5 id=\"编码格式\"><a class=\"markdownIt-Anchor\" href=\"#编码格式\">#</a> 编码格式</h5>\n<p><code>[02] [0b] [48 65 6c 6c 6f 20 57 6f 72 6c 64]</code></p>\n<h5 id=\"解析过程-2\"><a class=\"markdownIt-Anchor\" href=\"#解析过程-2\">#</a> 解析过程</h5>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-01-Ziplist%E4%BE%8B%E5%AD%90%E7%9A%84%E7%BB%93%E6%9E%842.png\" alt=\"ziplist-01-Ziplist例子的结构2.png\"></p>\n<h5 id=\"附录-ascii码表可展示字符\"><a class=\"markdownIt-Anchor\" href=\"#附录-ascii码表可展示字符\">#</a> 附录，ASCII 码表 (可展示字符)</h5>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/ziplist-ASCII%E7%A0%81%E5%AD%97%E7%AC%A6%E8%A1%A8.png\" alt=\"\"></p>\n<p>以上内容，就是 <code>Redis</code>  的 <code>ziplist</code>  结构的内容了。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>本篇文章的内容主要是更加详细的分享了 <code>ziplist</code>  的这种数据结构的内部结构以及编码方式.</p>\n<ul>\n<li><code>ziplist</code>  由 <code>5</code>  部分组成。存储了相关信息:  <code>&lt;整个ziplist的长度&gt;&lt;最后一个entry的偏移量&gt;&lt;entry的总数&gt;&lt;entries&gt;&lt;表示结束的特殊entry&gt;</code></li>\n<li>一个 <code>entry</code>  由 <code>3</code>  部分组成， <code>&lt;前一个entry的长度&gt;&lt;编码方式&gt;&lt;entry的内容&gt;</code></li>\n<li>其中 编码方式 是由 entry 的内容 决定的。有 10 条标准 (规定 / 协议)</li>\n<li>引用了两个示例 ( <code>25</code>  和 <code>Hello World</code> )，根据 <code>Redis</code>  的方式来解码.</li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期待您的关注，希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/qrcode.jpg\" alt=\"二维码\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/",
            "title": "Redis中的数据结构之跳表及其原理",
            "date_published": "2021-08-01T16:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>文中附代码实现. <a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">电梯直达</a></p>\n<p>在公众号回复 【跳表】 也可以获取哦。</p>\n<h3 id=\"什么是跳表\"><a class=\"markdownIt-Anchor\" href=\"#什么是跳表\">#</a> 什么是跳表</h3>\n<blockquote>\n<p>跳表是一种数据结构。它允许快速查询一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是 O (log n)，优于普通队列的 O (n)。</p>\n</blockquote>\n <p align=right> from. 维基百科</p>\n<h3 id=\"引题\"><a class=\"markdownIt-Anchor\" href=\"#引题\">#</a> 引题</h3>\n<p>线性表这种数据有两种具体实现，数组和链表。具体的内容之前的文章里也有说过，可以翻翻看哇～。在这里两种数据结构中，数组的优点是查找速度快，而链表的优点是增删的效率高，这也是我们常说的。其实，非也。</p>\n<p>数组是一种内存连续的数据结构，其优点是可以通过 <code>首地址+N*(sizeOf(Node))</code>  来快速获取指定位置上的元素。假如我们不知道指定元素的位置呢？</p>\n<p>链表是一种非内存连续的数据，其优点是通过改变指针地址来快速增减元素。很明显的问题，你首先要知道你要增加 / 删除的目标元素是哪个！所以会浪费  <code>O(n)</code>  的查询时间。</p>\n<p>要论效率，那就要说平衡树 ( <code>AVL</code> ) 了。增删查的效率都是  <code>O(logN)</code> 。 但是这种数据结构，原理比较复杂，实现起来那不是比较复杂了，那是相当复杂。增删操作，都需要其依靠平衡操作引发子树的调整。</p>\n<p>那么，掌声有请我们今天的主角: <b>跳表</b>。</p>\n<h2 id=\"跳表\"><a class=\"markdownIt-Anchor\" href=\"#跳表\">#</a> 跳表</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>跳表 ( <code>skip list</code> ) 全称 跳跃链表。 是一种类链表的数据结构。</p>\n<p>跳表的性能和平衡树的性能是一样的，在插入，删除，搜索的时间复杂度都是  <code>O(n)</code> , 是一种利用空间换时间的数据结构。</p>\n<p>跳表是一种随机化的数据结构，目前开源软件 Redis 和 LevelDB 都有用到它。</p>\n<p>这里，先给大家看一个<b>可能</b>的跳表结构。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-02-%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%B3%E8%A1%A8%E7%BB%93%E6%9E%841.png\" alt=\"跳表-02-可能的跳表结构1.png\"></p>\n<p>现在我要告诉你，上面的跳表是由下面的跳表经过层层优化得来的。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-01-%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8.png\" alt=\"跳表-01-有序的链表\"></p>\n<p>下面我们针对上面的跳表结构来分析一下。</p>\n<p>刚才说过了，链表增删性能罪魁祸首就是查找操作！对于查找操作，效率最高的莫过于二分查找了。但是对于第一个有序链表中是无法使用二分查找的。但是呢，我们可以随机抽选中其中的几个元素，组成一个新的链表。就像下面这样。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-03-%E6%8A%BD%E8%B1%A1%E5%87%BA%E6%96%B0%E7%9A%84%E4%B8%80%E5%B1%82.png\" alt=\"跳表-03-抽象出新的一层.png\"></p>\n<p>假设我们要找 <code>5</code>  这个元素，在单独的有序链表中，我们必须从头结点依次遍历到  <code>5</code>  这个节点。路径为 <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code> , 下图中黄色线路径。, 现在，我们只需要从  <code>1-&gt;2-&gt;4-&gt;5</code> . 下图中紫色线路径。既然我们可以原来的链表抽象出一个新的链表，那我们还可以从新的链表中再抽象出一个新的链表。这样的话，就直接可以  <code>1-&gt;4-&gt;5</code> , 就可以查到一个我们的目标节点了。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-04-%E5%86%8D%E6%8A%BD%E8%B1%A1%E5%87%BA%E6%96%B0%E7%9A%84%E4%B8%80%E5%B1%82.png\" alt=\"跳表-04-再抽象出新的一层.png\"></p>\n<p>如果你看到这里，我要告诉你一个重要的概念了。</p>\n<p><strong>层：就是我们假设的抽象出来的新链表。</strong></p>\n<p>可能你很好奇，层我们应该怎么存储呢？很简单啊！</p>\n<p>以后我们每个链表的元素是怎么定义的？？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span> &#123;</span></span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    Node *next;</span><br><span class=\"line\">&#125; node;</span><br></pre></td></tr></table></figure>\n<p>我们只需要将 指向下一个元素的指针改成一个指针数组就可以了！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span> &#123;</span></span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    <span class=\"comment\">/// 指向后继元素的指针数组</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>[<span class=\"title\">i</span>];</span></span><br><span class=\"line\">&#125; node;</span><br></pre></td></tr></table></figure>\n<p>了解了怎么存储之后，那怎样确定某个节点有几层呢？这里我告诉你吧，随机的！怎么随机的呢？就是通过随机数来确定的，也就是我们常说的 抛硬币的形式。 比如下面的这段代码.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成一个随机数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 一个随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">random_level</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">rand</span>() % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        level++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    level = (level &lt; MAX_LEVEL) ? level : MAX_LEVEL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我们就尝试着实现一个跳表。</p>\n<h3 id=\"跳表的实现\"><a class=\"markdownIt-Anchor\" href=\"#跳表的实现\">#</a> 跳表的实现</h3>\n<ul>\n<li>定义跳表的结构</li>\n</ul>\n<p>经过上面的分析，每个节点指向下一个节点的指针是一个数组，所以我们得出下面的结构。(当然也有其他方式的实现，欢迎交流～)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 节点</span></span><br><span class=\"line\">NODE &#123;</span><br><span class=\"line\">    T data,</span><br><span class=\"line\">    <span class=\"comment\">/// 指向下一个节点的数组，从1开始。</span></span><br><span class=\"line\">    <span class=\"comment\">/// 数组中的每个元素对应该层的下一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">/// next[1],是第一层的下一个节点的地址。</span></span><br><span class=\"line\">    <span class=\"comment\">/// next[2] 是第二层的下一个节点的地址。</span></span><br><span class=\"line\">    NODE []next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 跳表</span></span><br><span class=\"line\">SKIP_LIST&#123;</span><br><span class=\"line\">    NODE head;</span><br><span class=\"line\">    <span class=\"comment\">/// 该跳表的层数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查找指定的元素</li>\n</ul>\n<p>上面说过了 查找过程，我这里就直接给出伪代码了。</p>\n<p>主要逻辑是：从高层开始查找直到找到等于指定元素的节点 E 或者第一个大于指定元素的节点 G。如果是节点 E，那么直接返回就好了。如果是 G 节点，那么就以 G 节点的前一个节点 L, 在下一层进行查找，重复上面的逻辑，直到找到节点 E，或者到达跳表的结尾。</p>\n<p>比如下图中查找  <code>5</code>  的过程为:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-08-%E6%9F%A5%E6%89%BE.png\" alt=\"跳表-08-查找\"></p>\n<ul>\n<li><code>head-&gt;8</code> ,  <code>8&gt;5</code> , 从 <code>head</code>  开始，去下一层查找。</li>\n<li><code>head-&gt;4-&gt;8</code> ,  <code>8&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找</li>\n<li><code>head-&gt;4-&gt;8</code> ,  <code>8&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找.</li>\n<li><code>head-&gt;4-&gt;6</code> ,  <code>6&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找.</li>\n<li><code>head-&gt;4-&gt;5</code> ,  <code>5==5</code> , 返回节点 <code>5</code> .</li>\n</ul>\n<p>如下面的伪代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">search</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// i 表示层数，从最高层开始查找 。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q &amp;&amp; k == q-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &amp;(q-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>构建一个跳表。</li>\n</ul>\n<p>上面分析可以得出来，跳表是一个多层的有序链表。所以我们对于每一层都像操作普通链表一样就可以了。就像下面的这样:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-06-%E6%8F%92%E5%85%A5.png\" alt=\"跳表-06-插入\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">insert</span> () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到要插入的节点位置。</span></span><br><span class=\"line\">    <span class=\"comment\">// level是本跳表的层数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = level<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">///遍历该层小于指定值的前一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/// 新节点的前一个节点的层指针。</span></span><br><span class=\"line\">        update[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随机生成该节点的层数,如果生成的层数大于当前层，需要更新跳表中记录的level值。</span></span><br><span class=\"line\">    new_level = <span class=\"built_in\">rand_level</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(new_level &gt; level) &#123;</span><br><span class=\"line\">        level = new_level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 生成新的节点，并针对每一层执行普通链表的插入操作。</span></span><br><span class=\"line\">    new_node = <span class=\"built_in\">create_new_node</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = level - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 下面两行代码就是普通连接的增加方法。</span></span><br><span class=\"line\">        <span class=\"comment\">/// 新节点的前一个节点的第i层的节点。</span></span><br><span class=\"line\">        new_node-&gt;next[i] = update[i]-&gt;next[i];</span><br><span class=\"line\">        update[i]-&gt;next[i] = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除跳表的元素</li>\n</ul>\n<p>主要逻辑是该节点的每一层都要删除.</p>\n<p>即对每一层，都要 要删除节点的上一个节点指向要删除节点的下一个节点。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-07-%E5%88%A0%E9%99%A4.png\" alt=\"跳表-07-删除.png\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">del</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 找到要删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        update[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<p>👉 <a href=\"https://github.com/fangjiaxiaobai/data_structures_and_algorithms/tree/master/01_data_structures/skiplist/c/01_fangjiaxiaobai\">跳表 <code>C</code>  语言版本</a><br>\n👉 <a href=\"https://github.com/fangjiaxiaobai/data_structures_and_algorithms/tree/master/01_data_structures/skiplist/java/fangjiaxiaobai\">跳表 <code>JAVA</code>  版本</a></p>\n<p>其他语言，比如  <code>python</code> ,  <code>golang</code> ,  <code>c++</code> ,  <code>js</code> ,  <code>php</code> ,  <code>kotlin</code>  版本的代码，你有没有兴趣搞一波呢？👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdqaWF4aWFvYmFpL2RhdGFfc3RydWN0dXJlc19hbmRfYWxnb3JpdGhtcw==\">赐教地址</span></p>\n<p>各位看官可以选择自己熟悉的语言查看。实现代码仅供参考。如有高见，欢迎交流哇～，还请不吝赐教！</p>\n<p>也欢迎大侠提交自己擅长语言的代码到仓库～，集思广益，一起交流！期待～～</p>\n<p>(仓库中的数据结构与算法持续更新哦，欢迎 <code>star</code> )</p>\n<h3 id=\"时间复杂度的分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度的分析\">#</a> 时间复杂度的分析</h3>\n<p>因为跳表的时间复杂度和跳表的层数以及该层上的节点数和节点分布的位置有关，而这些因素都是随机的。 此中涉及了很多复杂的概率统计学知识。所以我就摘自维基百科中的说明，如下:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-05-%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png\" alt=\"跳表-05-的时间复杂度png\"></p>\n<p>如果看的不是很清晰，也可以这么想：</p>\n<p>如果每两个节点抽出一个节点作为上一级索引的节点，那第一级索引的节点个数大约就是  <code>n/2</code>  , 第二级索引是  <code>n/4</code> , 第三级就是  <code>n/8</code> 。 也就是说 第  <code>k</code>  级索引节点个数是  <code>n/(2^k)</code> ;</p>\n<p>假设，我们有  <code>h</code>  层，最高层索引有 <code>2</code>  个节点，那么， 就是  <code>n/(2^k)=2</code> , 那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k=log_2N-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，这个链表的高度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">log_2N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>. 如果每一层要遍历  <code>m</code>  个节点，那么在跳表中查询一个数据的时间复杂度就是 <code>O(m*logN)</code> .</p>\n<p>由于随机分布的存在，我们可以把 m 当做一个常数，所以，时间复杂度大致可以认为是  <code>O(logN)</code></p>\n<h3 id=\"空间复杂度的分析\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度的分析\">#</a> 空间复杂度的分析</h3>\n<p>根据整体代码实现来看，我们使用了链表的形式来实现。其中， <code>next</code>  改成了数组用来存储下一节点的指针，并没有真正的存储对象，. 也就是说，其实我们并没有使用很多的内存，当然，比一般的链表还是要多一些的。对于我们存储的对象来讲，用于存储指针的内存直接就可以忽略了。时间复杂度为  <code>O(N+m)</code> , 其中  <code>N&gt;&gt;m</code> ( <code>N</code>  远远大于 <code>m</code> ).</p>\n<h3 id=\"比较\"><a class=\"markdownIt-Anchor\" href=\"#比较\">#</a> 比较</h3>\n<h4 id=\"跳表-与平衡树-哈希表的比较\"><a class=\"markdownIt-Anchor\" href=\"#跳表-与平衡树-哈希表的比较\">#</a> 跳表 与平衡树、哈希表的比较</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">跳表</th>\n<th style=\"text-align:center\">平衡树</th>\n<th style=\"text-align:center\">哈希表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">有序性</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查找性能</td>\n<td style=\"text-align:center\">O(logN)</td>\n<td style=\"text-align:center\">O(logN)</td>\n<td style=\"text-align:center\">O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">实现逻辑</td>\n<td style=\"text-align:center\">简单</td>\n<td style=\"text-align:center\">复杂</td>\n<td style=\"text-align:center\">简单</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否支持范围查找</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持 (无序)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时间复杂度</td>\n<td style=\"text-align:center\">较少，取决 p 参数</td>\n<td style=\"text-align:center\">较大 (和跳表比，占用左右子树的两个指针)</td>\n<td style=\"text-align:center\">一般</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释如下\"><a class=\"markdownIt-Anchor\" href=\"#解释如下\">#</a> 解释如下:</h4>\n<ul>\n<li>在做范围查找的时候，平衡树比跳表操作要复杂。在平衡树上，我们找到指定范围的小值之后，还需要以中序遍历的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在跳表上进行范围查找就非常简单，只需要在找到小值之后，对第 <code>1</code>  层链表进行若干步的遍历就可以实现。</li>\n<li>平衡树的增删操作可能引发子树的平衡调整，而跳表的插入和删除只需要修改相邻节点的指针，操作简单又快速。</li>\n<li>从内存占用上来说，跳表比平衡树更灵活一些。一般来说，平衡树每个节点包含 <code>2</code>  个指针（分别指向左右子树），而跳表每个节点包含的指针数目平均为 <code>1/(1-p)</code> ，具体取决于参数 <code>p</code>  的大小。如果像 <code>Redis</code>  里的实现一样，取 <code>p=1/4</code> ，那么平均每个节点包含 <code>1.33</code>  个指针，比平衡树更有优势。</li>\n<li>查找单个 <code>key</code> ，跳表和平衡树的时间复杂度都为 <code>O(log n)</code> ，大体相当；而哈希表在保持较低的哈希值冲突概率的前提下，查找时间复杂度接近 <code>O(1)</code> ，性能更高一些。</li>\n</ul>\n<p>我还从网上看到了 <code>Redis</code>  的作者选择 跳表做为 <code>zset</code>  底层数据结构的原因，贴在下面。</p>\n<h4 id=\"redis中作者选择skiplist的原因\"><a class=\"markdownIt-Anchor\" href=\"#redis中作者选择skiplist的原因\">#</a>  <code>Redis</code>  中作者选择 SkipList 的原因:</h4>\n<blockquote>\n<p>There are a few reasons:</p>\n<ol>\n<li>They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</li>\n<li>A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</li>\n<li>They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>简单的从性能角度分析了数组和链表在性能方面的障碍，引出了我们今天的主角： 跳表。</li>\n<li>画了一个可能出现的跳表结构。这是与跳表的初次见面。并介绍了二分查找的变相应用。当前，这都是基于有序链表为前提的。</li>\n<li>介绍了链表的层的概念，这是跳表相对于链表最重要且唯一的概念，有了它才有了时间复杂度为 <code>O(logN)</code>  的查询效率，从而实现了增删操作的时间复杂度也是 <code>O(logN)</code> 。</li>\n<li>接下来，我们一起完成了跳表的实现逻辑。并且提供了多种语言的跳表实现版本。希望你也提交代码到仓库中，大家一起交流，期待。</li>\n<li>跳表在发展的过程中也出现几个变种，我们的这个只是一个最简答的实现。甚至我们都没有考虑过元素个数与层数的最优解等等问题。后面会有一篇文章分享的是 <code>Redis</code>  中 <code>skiplist</code>  的实现。敬请期待吧～</li>\n</ul>\n<h2 id=\"推荐\"><a class=\"markdownIt-Anchor\" href=\"#推荐\">#</a> 推荐</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0yZzlPU1JLSnV6TQ==\">某高校跳表公开课 (需科学上网)</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis",
                "数据结构"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-7-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BHyperLogLogs/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-7-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BHyperLogLogs/",
            "title": "Redis数据结构之 `HyperLogLogs`",
            "date_published": "2021-08-01T10:58:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>上一篇我们学习的  <code>bitmap</code>  这一 <code>“数据类型”</code> 。其内部是由 <code>sds</code>  这种种数据结构编码的。<br>\n如果不记得了，那就来坐穿梭机回去看看吧。 <a href=\"./010-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BD%8D%E5%9B%BEbitmap.md\">开始穿梭</a></p>\n<p>接下来，我们继续学习一个新的 <code>&quot;数据类型&quot;</code> , 位图， <code>HyperLogLogs</code> .（注意啦，数据类型，我又加了引号！！）</p>\n<h2 id=\"hyperloglogs简介\"><a class=\"markdownIt-Anchor\" href=\"#hyperloglogs简介\">#</a>  <code>HyperLogLogs</code>  简介</h2>\n<p><code>HyperLogLog</code>  是一种<b>概率数据结构</b>，用于对唯一事物进行计数（从技术上讲，这是指估计集合的基数）。</p>\n<p>注意哦，  <code>HyperlogLog</code>  其实是一种基数计数算法，并非 <code>Redis</code>  独有的。</p>\n<p>通常，对唯一项目进行计数需要使用与要计数的项目数量成比例的内存量，因为您需要记住过去已经看到的元素，以避免多次对其进行计数。但是，有一组算法会以内存换取精度：以 <code>Redis</code>  实施为例，您得出的带有标准误差的估计度量最终会小于 <code>1％</code> 。</p>\n<p>该算法的神奇之处在于，您不再需要使用与所计数项目数量成比例的内存量，而可以使用恒定数量的内存！在最坏的情况下为 <code>12k</code>  字节，如果您的 <code>HyperLogLogs</code>  看到的元素很少，而且少得多。</p>\n<p><code>Redis</code>  中的 <code>HyperLogLog</code>  尽管在技术上是不同的数据结构，但被编码为 <code>Redis字符串</code>  ( <code>sds</code> )，因此您可以调用 <code>GET</code>  来序列化 <code>HyperLogLogs</code> ，然后调用 <code>SET</code>  来将其反序列化回服务器。这里我们在文末会大体翻一下源码。</p>\n<p>接下来我们先看一下 HyperLogLog 有什么应用场景。</p>\n<h3 id=\"hyperloglog-的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#hyperloglog-的应用场景\">#</a>  <code>HyperLogLog</code>  的应用场景</h3>\n<p>根据 <code>HyperLogLog</code>  的特性来看，使用了一种概率性计数的功能，这样的功能有一个特点就是当数据特别大的时候，其统计的值是不准确的。什么意思呢？</p>\n<p>就是比如统计一个网站的 <code>PV</code> ， <code>PV</code>  数值是  <code>123456789</code>  或者  <code>123456000</code>  这两者的值对于管理者来讲是一样的。对于一些<b>对精度要求不准确而且数据量很大</b>的场景是非常适合的。</p>\n<p>比如以下场景：计算网站的 PV，UV，统计日活，月活，统计用户每天搜索的词条数等等。</p>\n<h3 id=\"hyperloglog-的常用命令\"><a class=\"markdownIt-Anchor\" href=\"#hyperloglog-的常用命令\">#</a>  <code>HyperLogLog</code>  的常用命令</h3>\n<p><code>HyperLogLog</code>  应该是 <code>Redis</code>  所有结构中命令最少的了，只有三个命令。</p>\n<ul>\n<li><code>PFADD key element [element ...]</code></li>\n</ul>\n<p>添加元素。<br>\n如果一个 <code>HyperLogLog</code>  的估计的近似基数在执行命令过程中发了变化，  <code>PFADD</code>  返回 <code>1</code> ，否则返回 <code>0</code> ，如果指定的 <code>key</code>  不存在，这个命令会自动创建一个空的 <code>HyperLogLog</code>  结构（指定长度和编码的字符串）.</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; pfadd k96 v1 v2 v3</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfadd k96 v4</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfadd k96 v1</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfadd k96 v2 v3 v4</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>PFCOUNT key [key ...]</code></li>\n</ul>\n<p>当参数为一个 <code>key</code>  时，返回存储在 <code>HyperLogLog</code>  结构体的该变量的近似基数，如果该变量不存在，则返回 <code>0</code> .</p>\n<p>当参数为多个 <code>key</code>  时，返回这些 <code>HyperLogLog</code>  并集的近似基数，这个值是将所给定的所有 <code>key</code>  的 <code>HyperLoglog</code>  结构合并到一个临时的 <code>HyperLogLog</code>  结构中计算而得到的.</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; pfadd k97 v1 v2 v3 v4</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; PFCOUNT k97</span><br><span class=\"line\">(integer) <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 测试多个key</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; PFCOUNT k97 k96</span><br><span class=\"line\">(integer) <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; PFADD k97 v5 v6</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; PFCOUNT k97 k96</span><br><span class=\"line\">(integer) <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>刚才说了， <code>HyperLogLog</code>  只是存储总数的一种结构，而且其值也会和实际值有偏差。我们一起来验证一下这个结果</p>\n<p>我们往 <code>Redis</code>  中插入 <code>10000</code>  条数据，查看其  <code>pfcount</code>  的值是多少。</p>\n<p>使用下面这个脚本去插入 ( <code>java</code>  实现)。公众号回复  <code>RedisClient</code>  可以获取完整源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String host = <span class=\"string\">&quot;10.1.14.159&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> port = <span class=\"number\">6379</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">SocketRedisClient client = <span class=\"keyword\">new</span> SocketRedisClient(host, port);</span><br><span class=\"line\">String authCmd = client.exec(<span class=\"string\">&quot;auth moyang&quot;</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;登录验证结果:&quot;</span> + authCmd);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;删除已经存在的key :&quot;</span> + client.exec(<span class=\"string\">&quot;del k97&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">    String cmd = <span class=\"string\">&quot;pfadd k97 &quot;</span> + i;</span><br><span class=\"line\">    client.exec(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">    String cmd2 = <span class=\"string\">&quot;pfcount k97 &quot;</span>;</span><br><span class=\"line\">    String exec = client.exec(cmd2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;执行命令:&quot;</span> + cmd + <span class=\"string\">&quot; 返回结果:&quot;</span> + exec); <span class=\"comment\">// 返回的结果是未解析Redis协议的。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">client.releases();</span><br></pre></td></tr></table></figure>\n<p>插入完成之后，如下图，我们可以看到  <code>pfCount</code>  的结果是  <code>9988</code> .</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/pf-%E6%89%A7%E8%A1%8C10000%E6%AC%A1%E6%8F%92%E5%85%A5%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<p>如果不相信我们可以 在 <code>shell</code>  里看看。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; pfcount k97</span><br><span class=\"line\">(integer) <span class=\"number\">9988</span></span><br></pre></td></tr></table></figure>\n<p>我这次测试正好相等，其实由于脚本的问题呢，从程序里获取的值和 <code>shell</code>  里获取的值，可能不一样，这种怎么解决呢？ 使用脚本单独再执行一次，就会一样了。具体原因，不赘述了。</p>\n<p>好了，我们插入了 <code>10000</code>  次，但是得出的值却是  <code>9988</code> ， 这也就验证了其不精确性。</p>\n<ul>\n<li><code>PFMERGE destkey sourcekey [sourcekey ...]</code></li>\n</ul>\n<p>将多个  <code>HyperLogLog</code>  合并（ <code>merge</code> ）为一个  <code>HyperLogLog</code>  ， 合并后的  <code>HyperLogLog</code>  的基数接近于所有输入  <code>HyperLogLog</code>  的可见集合（ <code>observed set</code> ）的并集.</p>\n<p>合并得出的  <code>HyperLogLog</code>  会被储存在目标变量（第一个参数）里面， 如果该键并不存在， 那么命令在执行之前， 会先为该键创建一个空的  <code>HyperLogLog</code> .</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; pfadd k98 v1 v2 v3</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfadd k98_1 v2 v3 v4</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfadd k98_2 v3 v4 v5</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfmerge k98 k98_1 k98_2</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfcount k98</span><br><span class=\"line\">(integer) <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfcount k98_1</span><br><span class=\"line\">(integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; pfcount k98_2</span><br><span class=\"line\">(integer) <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>以上就是  <code>HyperLogLog</code>  的命令，老规矩我们下一步来看看  <code>HyperLogLog</code>  在 Redis 中是怎么实现的。</p>\n<h3 id=\"hyperloglog的结构\"><a class=\"markdownIt-Anchor\" href=\"#hyperloglog的结构\">#</a>  <code>HyperLogLog</code>  的结构</h3>\n<p>在  <code>Clion</code>  中直接查找 <code>hyperloglog</code>  ，就是  <code>hyperloglog</code>  的实现了。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/hyperloglog-%E6%9F%A5%E6%89%BE%E7%9B%AE%E5%BD%95.png\" alt=\"hyperloglog-查找目录.png\"></p>\n<p>我们可以看到有一个  <code>struct</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hllhdr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> magic[<span class=\"number\">4</span>];      <span class=\"comment\">/* 魔数: &quot;HYLL&quot; */</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> encoding;   <span class=\"comment\">/* HLL_DENSE或HLL_SPARSE */</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> notused[<span class=\"number\">3</span>]; <span class=\"comment\">/* 保留以供将来使用，必须为零。 */</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> card[<span class=\"number\">8</span>];    <span class=\"comment\">/* 缓存基数，小端。 */</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> registers[]; <span class=\"comment\">/* 数据字节。 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个就是  <code>HyperLogLog</code>  的存储结构了。这里大家大体有个印象就可以了。HyperLogLog 是一种基数估算算法的实现。后面我们会介绍这种<b>基数估算法</b>。</p>\n<h2 id=\"预告\"><a class=\"markdownIt-Anchor\" href=\"#预告\">#</a> 预告</h2>\n<p>最后一个 数据类型  <code>geohash</code>  (多维空间点索引算法)！！！</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/qrcode.jpg\" alt=\"微信二维码\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-6-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E4%BD%8D%E5%9B%BEbitmap/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-6-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E4%BD%8D%E5%9B%BEbitmap/",
            "title": "Redis数据结构之位图 BitMap",
            "date_published": "2021-08-01T10:48:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>上一篇我们学习的  <code>zset</code>  集合这一数据类型。其内部是由 <code>skiplist</code>  和 <code>hashtable</code>  这种两种数据结构编码的。<br>\n如果不记得了，那就来坐穿梭机回去看看吧。 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-5-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset/\">开始穿梭</a></p>\n<p>接下来，我们继续学习一个新的 <code>&quot;数据类型&quot;</code> , 位图， <code>bitmap</code> .（注意啦，数据类型，我加了引号！！）</p>\n<h2 id=\"bitmap简介\"><a class=\"markdownIt-Anchor\" href=\"#bitmap简介\">#</a>  <code>bitmap</code>  简介</h2>\n<p>那么什么是 <code>bitmap</code> , 我们先从名字上来说， <code>bit</code> ，计算机中最小的单位，一个 <code>bit</code>  表示一个二进制位。 <code>map</code> ，映射，图。所以， <code>bitmap</code>  就是表示对二进制位的映射。那具体是怎么回事呢？ <code>bitmap</code>  其实就是以字符串的形式对二进制位进行操作，从而达到节约空间占用的作用。</p>\n<p>而且， <code>bitmap</code> ，中文的意思就是位图。 不知道你用没用过 <code>C</code>  语言的位图结构，他们的目的都是一样。</p>\n<p>可能你还是不理解，别急，往下看。</p>\n<p><code>bitmap</code>  怎么用呢？</p>\n<p>恰巧，前几天小编在面试中被问到过这个问题。</p>\n<p>面试官说： <b>有个业务场景：我们这边有 10000 家线下门店，我们要对部分门店进行广告投放，怎么记录某条广告投放给哪家门店里了呢？我们的门店 <code>id</code>  是递增的。</b></p>\n<p>首先我们可以有三张表，广告表 ( <code>G</code>  表)，门店表（ <code>M</code>  表），广告门店关联表（ <code>GM</code>  表）。</p>\n<p>如果我们投放广告的时候，把每条广告和每个门店的关联作为一条数据插入到 <code>GM</code>  表中，那么这个表中的数据量增长还是非常快的。如果有 <code>10</code>  万家门店呢？广告的投放和撤销比较频繁。也就是说数据的修改也是比较频繁的。那怎么搞呢？</p>\n<p>门店的 <code>id</code>  是递增的，那么我们可以这么搞，用 <code>10001</code>  个二进制位表示 <code>10000</code>  家门店的 id，如果该门店投放了该广告，就把该位置上的数字置为 <code>1</code> 。并且每四个字节转换成一个整数型数，将（ <code>10000/8/4</code> ） <code>313</code>  个整形数按照一定的规则转换成字符串存储到 <code>GM</code>  表中。表示一条广告已经投放的门店。这样我们就使用了 <code>0.1kb</code>  左右的空间记录了某条广告投放门店的情况。</p>\n<p>其实呢，这就是使用 <code>bitmap</code>  进行存储的。</p>\n<p>接下来，我们看下如何使用 位图。</p>\n<h2 id=\"bitmap的基本命令\"><a class=\"markdownIt-Anchor\" href=\"#bitmap的基本命令\">#</a>  <code>bitmap</code>  的基本命令</h2>\n<ul>\n<li><code>SETBIT</code></li>\n</ul>\n<p><code>setbit key offset value</code></p>\n<p>对  <code>key</code>  所储存的字符串值，设置或清除指定偏移量上的位 ( <code>bit</code> )。<br>\n位的设置或清除取决于  <code>value</code>  参数，可以是  <code>0</code>  也可以是  <code>1</code>  。<br>\n当  <code>key</code>  不存在时，自动生成一个新的字符串值。<br>\n字符串会进行伸展 ( <code>grown</code> ) 以确保它可以将  <code>value</code>  保存在指定的偏移量上。当字符串值进行伸展时，空白位置以  <code>0</code>  填充。<br>\n <code>offset</code>  参数必须大于或等于  <code>0</code>  ，小于  <code>2^32</code>  ( <code>bit</code>  映射被限制在  <code>512 MB</code>  之内)。</p>\n<p>假设我们使用 位图来存储 <code>Redis</code>  这个字符串。</p>\n<p>在演示这个命令之前，我们首先来看下 如何使用二进制来表示字符串。</p>\n<p><code>Redis</code>  中的  <code>R</code>  对应  <code>ASCII</code>  码是:  <code>82</code> . 转化成二进制就是:  <code>0b01010010</code> , 其他字符依次如下所示：<br>\n <code>Redis</code>  中的  <code>e</code>  对应  <code>ASCII</code>  码是:  <code>101</code> . 转化成二进制就是:  <code>0b01100101</code> ，<br>\n <code>Redis</code>  中的  <code>d</code>  对应  <code>ASCII</code>  码是:  <code>100</code> . 转化成二进制就是:  <code>0b01100100</code> ，<br>\n <code>Redis</code>  中的  <code>i</code>  对应  <code>ASCII</code>  码是:  <code>105</code> . 转化成二进制就是:  <code>0b01101001</code> ，<br>\n <code>Redis</code>  中的  <code>s</code>  对应  <code>ASCII</code>  码是:  <code>115</code> . 转化成二进制就是:  <code>0b01110011</code> 。</p>\n<p>看到这里，我要告诉你一个知识点：对于位图的操作，我们可以实现 <b>  <code>零存整取</code>  </b>。 什么意思呢？</p>\n<p>我来给你演示一下</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/bitmap-R%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.png\" alt=\"R对应的位图\"></p>\n<p>如上图， <code>R</code>  这个字符，对应的每个二进制上的数。由于位图会自动填充空位为 0，所以我们只需要设置二进制位上为 <code>1</code>  的就可以了。具体命令如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit k87 1 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 3 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 6 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k87</span><br><span class=\"line\">&quot;R&quot;</span><br></pre></td></tr></table></figure>\n<p>解释一下，我们根据  <code>R</code>  每个二进制位上数值设置到 k87 中，然后通过 <code>get k87</code>  这个命令，返回了  <code>R</code> 。 这就是所谓的  <code>零存整取</code> 。如果我继续设置剩下的  <code>edis</code>  字符串呢？</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/bitmap-Redis%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.png\" alt=\"Redis完整的位图\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit k87 9 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 10 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 13 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 15 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 17 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 18 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 21 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 25 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 26 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 28 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 31 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 33 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 34 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 35 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 38 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k87 39 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k87</span><br><span class=\"line\">&quot;Redis&quot;</span><br></pre></td></tr></table></figure>\n<p>这里你就可能说，有谁会这样使用，自己计算出每个位，然后去获取完整的？ 是啊，不过这里只是一个例子，来说明 位图  <code>零存整取</code>  功能，接下来，我们接着看 位图  <code>整存零取</code> 的功能。</p>\n<p>这里呢，就要介绍  <code>gitbit</code>  这个命令。</p>\n<ul>\n<li><code>GETBIT</code></li>\n</ul>\n<p><code>GETBIT key offset</code></p>\n<p>对  <code>key</code>  所储存的字符串值，获取指定 <code>offset</code>  上的位 ( <code>bit</code> ).</p>\n<p>如果 <code>key</code>  不存在，获取 <code>offset</code>  超出范围，返回 <code>0</code> .</p>\n<p>首先我们设置 一个  <code>string</code>  类型的字符串到 <code>Redis</code>  中，然后依次获取每一位上的值。</p>\n<p>可以和下图进行比对。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/bitmap-Redis%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.png\" alt=\"Redis完整的位图\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set k88 Redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 0</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 2</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 4</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 5</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 6</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 7</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 8</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 9</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 10</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ....</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 38</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 39</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 演示超出范围</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 40</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 41</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit k88 42</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n<p>这个就是 位图提供的   <code>整存零取</code> 的功能了。综合上面的两项功能，我们轻而易举的就可以得出 Redis 的位图是可以  <code>零存零取</code> 的。就是使用  <code>setbit</code>  和  <code>gitbit</code>  命令了。这里就不演示了。</p>\n<ul>\n<li><code>BITCOUNT</code></li>\n</ul>\n<p><code>bitCount key [start] [end]</code></p>\n<p>计算指定 <code>key</code>  的对应字符串，被设置为 <code>1</code>  的比特位的数量。</p>\n<p>还是以上面的 <code>Redis</code>  为例，一共是 <code>19</code>  位 <code>1</code> . 我们来演示一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 不存在的时候，返回0</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; bitcount k89</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; set k89 Redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bitcount k89 </span><br><span class=\"line\">(integer) 19</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意这里start end 都是表示字节。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bitcount k89 0 1 </span><br><span class=\"line\">(integer) 7</span><br></pre></td></tr></table></figure>\n<p>这个适合什么场景下使用呢？ 比如，我们要计算某个用户登录天数。第一天登录的时候，我们 可以设置  <code>setbit user1 1 1</code> , 第二天设置  <code>setbit use1 2 1</code> , 那么使用  <code>bitcount user1</code>  就能知道该用户总共的登录天数了，也能够计算出该用户在哪天登录了。</p>\n<ul>\n<li><code>BITPOS</code></li>\n</ul>\n<p><code>bitpos key  bit [start] [end]</code></p>\n<p>返回 key 的指定区段内容，第一个 bit 的位置。</p>\n<p>比如我们以  <code>Redis</code>  为例，如下图</p>\n<p><img data-src=\"./images/bitmap-Redis%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.png\" alt=\"\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set key90 Redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bitops key90 1</span><br><span class=\"line\">(error) ERR unknown command `bitops`, with args beginning with: `key90`, `1`, </span><br><span class=\"line\">127.0.0.1:6379&gt; bitpos key90 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bitpos key90 0</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里的start和end也指的是字节</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bitpos key90 0 2 10</span><br><span class=\"line\">(integer) 16</span><br><span class=\"line\">127.0.0.1:6379&gt; bitpos key90 1 2 10</span><br><span class=\"line\">(integer) 17</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>BITOP</code></li>\n</ul>\n<p><code>BITOP operation destkey key [key …]</code></p>\n<p>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</p>\n<p><code>operation</code>  可以是  <code>AND</code>  、  <code>OR</code>  、  <code>NOT</code>  、  <code>XOR</code>  这四种操作中的任意一种：</p>\n<p><code>BITOP AND destkey key [key ...]</code>  ，对一个或多个  <code>key</code>  求逻辑并，并将结果保存到  <code>destkey</code>  。</p>\n<p><code>BITOP OR destkey key [key ...]</code>  ，对一个或多个  <code>key</code>  求逻辑或，并将结果保存到  <code>destkey</code>  。</p>\n<p><code>BITOP XOR destkey key [key ...]</code>  ，对一个或多个  <code>key</code>  求逻辑异或，并将结果保存到  <code>destkey</code>  。</p>\n<p><code>BITOP NOT destkey key</code>  ，对给定  <code>key</code>  求逻辑非，并将结果保存到  <code>destkey</code>  。</p>\n<p>除了  <code>NOT</code>  操作之外，其他操作都可以接受一个或多个  <code>key</code>  作为输入。</p>\n<p>这里我们做一个简单例子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; setbit k91_1 <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_1 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_1 <span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_1 <span class=\"number\">3</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_1 <span class=\"comment\"># 1111 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\xf0&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_2 <span class=\"number\">3</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_2 <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; setbit k91_2 <span class=\"number\">5</span> <span class=\"number\">1</span></span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_2 <span class=\"comment\"># 000111 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\x1c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## and 操作</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitop AND k91_d_1 k91_1 k91_2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_d_1 <span class=\"comment\"># 000100 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\x10&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## OR 操作</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitop OR k91_d_2 k91_1 k91_2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_d_2 <span class=\"comment\"># 111111 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\xfc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## XOR 亦或操作</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitop XOR k91_d_3 k91_1 k92_2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_d_3 <span class=\"comment\"># 111011 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\xf0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## NOT 操作</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitop NOT k91_d_4 k91_1</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_d_4 <span class=\"comment\"># 00001111 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\x0f&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitop NOT k91_d_5 k91_2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k91_d_5 <span class=\"comment\"># 111011 (低位-&gt;高位)</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\xe3&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>BITFIELD</code></li>\n</ul>\n<p><code>BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]</code></p>\n<p><code>BITFIELD</code>  命令可以将一个  <code>Redis</code>  字符串看作是一个由二进制位组成的数组， 并对这个数组中储存的长度不同的整数进行访问 （被储存的整数无需进行对齐）。 换句话说， 通过这个命令， 用户可以执行诸如 “对偏移量  <code>1234</code>  上的  <code>5</code>  位长有符号整数进行设置”、 “获取偏移量  <code>4567</code>  上的  <code>31</code>  位长无符号整数” 等操作。 此外，  <code>BITFIELD</code>  命令还可以对指定的整数执行加法操作和减法操作， 并且这些操作可以通过设置妥善地处理计算时出现的溢出情况。<br>\n这是一个比较复杂的命令了。我们依次来看看。</p>\n<ul>\n<li><code>GET type offset</code></li>\n</ul>\n<p><code>type</code>  是什么呢？  <code>type</code>  是返回的数值类型。可选值有： <code>i8</code> （有符号 <code>8</code>  个 <code>bit</code>  位）, <code>i16</code> （有符号 <code>16</code>  个 <code>bi</code> t 位）, <code>u8</code> （无符号 <code>8</code>  个 <code>bit</code>  位）, <code>u16</code> （无符号 <code>16</code>  个 <code>bit</code>  位）,…</p>\n<p>这个的命令的功能就是返回执行的二进制的范围，<b>offset 是指第几个二进制位</b>。<br>\n注意：<br>\n <code>BITFIELD</code>  命令最大支持 <code>64</code>  位长的有符号整数以及  <code>63</code>  位长的无符号整数， 其中无符号整数的  <code>63</code>  位长度限制是由于  <code>Redis</code>  协议目前还无法返回  <code>64</code>  位长的无符号整数而导致的。</p>\n<p>用下面这个例子来演示一下。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; set k92 Redis</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k92 get i8 <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k92 get u8 <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k92 get i16 <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">21093</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k92 get u16 <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">21093</span></span><br></pre></td></tr></table></figure>\n<p>结合上面的那张图，我们看下</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/bitmap-Redis%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.png\" alt=\"Redis的bitmap图\"></p>\n<p>我们手动的将前 <code>8</code>  个 <code>bit</code>  位装换成 <code>10</code>  进制，就是 <code>82</code> 。高位为 <code>0</code> ，所以此时， <code>u8</code>  和 <code>i8</code>  的值是一样的。同样的  <code>u16</code> , <code>i16</code> , <code>u24</code> , <code>u48</code> , 大家可以自行验证一下。</p>\n<ul>\n<li><code>SET type offset value</code></li>\n</ul>\n<p>这个命令是和 <code>GET</code>  命令相反的一个命令。</p>\n<p>直接用一个例子来演示一下。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; bitfield k93 SET u8 <span class=\"number\">0</span> <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k93</span><br><span class=\"line\"><span class=\"string\">&quot;R&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k93 SET u8 <span class=\"number\">8</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k93</span><br><span class=\"line\"><span class=\"string\">&quot;Re&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k93 SET u8 <span class=\"number\">16</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k93</span><br><span class=\"line\"><span class=\"string\">&quot;Red&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># ... </span></span><br><span class=\"line\"><span class=\"comment\"># 剩下的i和s，大家自己试一下吧</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>INCRBY type offset increment</code></li>\n</ul>\n<p>从制定的偏移位开始，增加 <code>increment</code> 。</p>\n<p>什么意思呢？</p>\n<p>来演示一下:</p>\n<p>字符 <code>A</code>  的 <code>ASCII</code>  码是 <code>65</code> ， <code>R</code>  是 <code>82</code> ，如果从 <code>A</code>  变成 <code>R</code> ，需要增加 <code>17</code> 。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:<span class=\"number\">6379</span>&gt; set k94 A</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k94 INCRBY u8 <span class=\"number\">0</span> <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k94</span><br><span class=\"line\"><span class=\"string\">&quot;R&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k94 INCRBY u8 <span class=\"number\">8</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">101</span>get</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; get k94</span><br><span class=\"line\"><span class=\"string\">&quot;Re&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>OVERFLOW WRAP|SAT|FAIL</code></li>\n</ul>\n<p>这是 <code>bitmap</code>  对  <code>INCRBY</code>  命令执行时，发生异常行为的控制。</p>\n<p>用户可以通过  <code>OVERFLOW</code>  命令以及以下展示的三个参数， 指定  <code>BITFIELD</code>  命令在执行自增或者自减操作时， 碰上向上溢出（ <code>overflow</code> ）或者向下溢出（ <code>underflow</code> ）情况时的行为：</p>\n<p><code>WRAP</code>  ： 使用回绕（ <code>wrap around</code> ）方法处理有符号整数和无符号整数的溢出情况。 对于无符号整数来说， 回绕就像使用数值本身与能够被储存的最大无符号整数执行取模计算， 这也是  <code>C</code>  语言的标准行为。 对于有符号整数来说， 上溢将导致数字重新从最小的负数开始计算， 而下溢将导致数字重新从最大的正数开始计算。 比如说， 如果我们对一个值为  <code>127</code>  的  <code>i8</code>  整数执行加一操作， 那么将得到结果  <code>-128</code>  。</p>\n<p><code>SAT</code>  ： 使用饱和计算（ <code>saturation arithmetic</code> ）方法处理溢出， 也即是说， 下溢计算的结果为最小的整数值， 而上溢计算的结果为最大的整数值。 举个例子， 如果我们对一个值为  <code>120</code>  的  <code>i8</code>  整数执行加  <code>10</code>  计算， 那么命令的结果将为  <code>i8</code>  类型所能储存的最大整数值  <code>127</code>  。 与此相反， 如果一个针对  <code>i8</code>  值的计算造成了下溢， 那么这个 i8 值将被设置为  <code>-127</code>  。</p>\n<p><code>FAIL</code>  ： 在这一模式下， 命令将拒绝执行那些会导致上溢或者下溢情况出现的计算， 并向用户返回空值表示计算未被执行。</p>\n<p>我们演示一下这几种情况</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 WRAP 方式，重复执行相同的命令，在一个2bit上，从 0,1,2,3 来回折返。</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_1 OVERFLOW WRAP incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 SAT 方式，当要发生溢出的时候，不再执行。</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95_2 OVERFLOW SAT incrby u2 <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (integer) <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用FAIL模式，则返回(nil)，不执行且返回nil</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1:<span class=\"number\">6379</span>&gt; bitfield k95 OVERFLOW FAIL incrby u2 <span class=\"number\">102</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) (nil)</span><br></pre></td></tr></table></figure>\n<p><code>BITFIELD</code>  命令的作用在于它能够将很多小的整数储存到一个长度较大的位图中， 又或者将一个非常庞大的键分割为多个较小的键来进行储存， 从而非常高效地使用内存， 使得 Redis 能够得到更多不同的应用 —— 特别是在实时分析领域：  <code>BITFIELD</code>  能够以指定的方式对计算溢出进行控制的能力， 使得它可以被应用于这一领域。</p>\n<p>以上就是 <code>Redis</code>  中 <code>bitmap</code>  相关的命令了。下面我简单的来看下 bitmap 这种 <code>&quot;数据结构&quot;</code>  是如何实现的。</p>\n<p>注意，这里的数据结构我还是加上了引号。具体为什么呢？</p>\n<h3 id=\"bitmap-的实现\"><a class=\"markdownIt-Anchor\" href=\"#bitmap-的实现\">#</a>  <code>bitmap</code>  的实现</h3>\n<p>话不多说，我们直接去看看源码中是怎么实现的。直接搜文件  <code>bit</code></p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/bitmap-%E6%9F%A5%E6%89%BE%E7%9B%AE%E5%BD%95.png\" alt=\"bitmap-查找目录\"></p>\n<p>我们要看 <code>src</code>  目录下的，所以，直接看 <code>bitops.c</code></p>\n<p>这里我们就是以一个命令 <code>setbit</code>  为例简单的来看看 <code>bitmap</code>  的运行过程。</p>\n<figure class=\"highlight c\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SETBIT 命令的实现</span></span><br><span class=\"line\"><span class=\"comment\"> * @param c 客户端对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setbitCommand</span><span class=\"params\">(client *c)</span> </span>&#123;</span><br><span class=\"line\">    robj *o; <span class=\"comment\">///  setbit key offset value 中的 key对应的Redis Object。</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *err = <span class=\"string\">&quot;bit is not an integer or out of range&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> bitoffset; <span class=\"comment\">/// 指定要修改的位的偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> byte, bit;  <span class=\"comment\">/// byte: 要修改的位 所占的字节。第byte个字节上。 bit，在所占字节中的第bit位上。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> byteval, bitval; <span class=\"comment\">/// byteval: 要修改的位所占的字节的值。十进制数。  bitVal 是原来的指定bit上的值</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> on; <span class=\"comment\">/// 修改的值。就是 setbit key offset value 中的value。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 解析 offset 参数，是否符合规范(是否位负数，是否超过512M)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getBitOffsetFromArgument(c, c-&gt;argv[<span class=\"number\">2</span>], &amp;bitoffset, <span class=\"number\">0</span>, <span class=\"number\">0</span>) != C_OK)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">/// 解析 value 参数 =&gt; 赋值给on变量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getLongFromObjectOrReply(c, c-&gt;argv[<span class=\"number\">3</span>], &amp;on, err) != C_OK)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 验证on(value)只能是0或者1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (on &amp; ~<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        addReplyError(c, err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 返回key对应的对象</span></span><br><span class=\"line\">    <span class=\"comment\">/// 该对象是一个OBJ_STRING类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((o = lookupStringForBitCommand(c, bitoffset)) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 获取当前位置上的值</span></span><br><span class=\"line\">    byte = bitoffset &gt;&gt; <span class=\"number\">3</span>; <span class=\"comment\">/// 计算出字节，确定offset所在的字节。</span></span><br><span class=\"line\">    byteval = ((<span class=\"keyword\">uint8_t</span> *) o-&gt;ptr)[byte]; <span class=\"comment\">/// 将指定字节上的数转换成无符号整型数。</span></span><br><span class=\"line\">    bit = <span class=\"number\">7</span> - (bitoffset &amp; <span class=\"number\">0x7</span>); <span class=\"comment\">/// 计算要修改的位，是当前字节中的第几位。</span></span><br><span class=\"line\">    bitval = byteval &amp; (<span class=\"number\">1</span> &lt;&lt; bit); <span class=\"comment\">/// 计算出修改后的值。(bitVal是修改后的整个字节上值)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Update byte with new bit value and return original value */</span></span><br><span class=\"line\">    <span class=\"comment\">/// 更新 String 的值为 bitVal，并且返回原来的值。</span></span><br><span class=\"line\">    byteval &amp;= ~(<span class=\"number\">1</span> &lt;&lt; bit); <span class=\"comment\">/// 将字节上原来的值，指定位上置为0.(即要赋值的位，bit为当前字节中的位。)</span></span><br><span class=\"line\">    byteval |= ((on &amp; <span class=\"number\">0x1</span>) &lt;&lt; bit); <span class=\"comment\">/// 将on的值复制给byteVal,取或运算，如果on为1，则1，若on为0，则0，上一行代码已经将指定位置置为了0.</span></span><br><span class=\"line\">    ((<span class=\"keyword\">uint8_t</span> *) o-&gt;ptr)[byte] = byteval; <span class=\"comment\">/// 修改对象中指定字节的值。</span></span><br><span class=\"line\">    signalModifiedKey(c-&gt;db, c-&gt;argv[<span class=\"number\">1</span>]); <span class=\"comment\">/// 通知修改了key。</span></span><br><span class=\"line\">    notifyKeyspaceEvent(NOTIFY_STRING, <span class=\"string\">&quot;setbit&quot;</span>, c-&gt;argv[<span class=\"number\">1</span>], c-&gt;db-&gt;id);</span><br><span class=\"line\">    server.dirty++; <span class=\"comment\">// 从上次保存到数据库的更改次数</span></span><br><span class=\"line\">    addReply(c, bitval ? shared.cone : shared.czero); <span class=\"comment\">/// 返回原来的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码就是  <code>setBit</code>  命令的实现过程了，这篇文章中我们不做研究<b>我们只看第 <code>27</code>  行</b>. 这一行中有一个  <code>lookupStringForBitCommand</code>  方法。在这里我们猜测一下，<b> <code>bitmap</code>  其实就是一个  <code>OBJ_STRING</code>  类型的结构</b>。</p>\n<p>到底是不是呢？</p>\n<p>看一下源码。</p>\n<figure class=\"highlight c\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是用于需要将位写入字符串对象的命令实现的辅助函数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，如果密钥持有错误的类型，则返回NULL，并且*向客户端发送错误。</span></span><br><span class=\"line\"><span class=\"comment\"> * 该命令创建或填充字符串零，以便可以寻址“ maxbit”位。</span></span><br><span class=\"line\"><span class=\"comment\"> * 该对象最终返回。</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，如果密钥持有错误的类型，则返回NULL并将错误发送给客户端。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">lookupStringForBitCommand</span><span class=\"params\">(client *c, <span class=\"keyword\">size_t</span> maxbit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> byte = maxbit &gt;&gt; <span class=\"number\">3</span>; <span class=\"comment\">// 计算字节</span></span><br><span class=\"line\">    <span class=\"comment\">/// 为写操作找出一个key。 【setbit key offset value】中argv[1] 即为key</span></span><br><span class=\"line\">    robj *o = lookupKeyWrite(c-&gt;db, c-&gt;argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 是否找到了key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 没有找到。 创建一个对象写入。对象为OBJ_STRING类型。</span></span><br><span class=\"line\">        o = createObject(OBJ_STRING, sdsnewlen(<span class=\"literal\">NULL</span>, byte + <span class=\"number\">1</span>));</span><br><span class=\"line\">        dbAdd(c-&gt;db, c-&gt;argv[<span class=\"number\">1</span>], o);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 找到了key对象，如果不是 OBJ_STRING 类型直接返回。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkType(c, o, OBJ_STRING)) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"comment\">/// 获取要修改的对象。上一行代码已经进行了判断，确定其为 OBJ_STRING 类型。</span></span><br><span class=\"line\">        o = dbUnshareStringValue(c-&gt;db, c-&gt;argv[<span class=\"number\">1</span>], o);</span><br><span class=\"line\">        <span class=\"comment\">/// 增加 STRING类型的长度</span></span><br><span class=\"line\">        o-&gt;ptr = sdsgrowzero(o-&gt;ptr, byte + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在第 <code>17</code>  行和第 <code>23</code>  行。就很清楚了。</p>\n<p>所以，在文章一开始加上引号的 数据结构 ，谜题就解开了。</p>\n<p><b> <code>bitmap</code>  并不是一个新的数据结构，本质上是用  <code>STRING</code>  这个数据结构来实现的。</b></p>\n<p>如果你想看 <code>bitmap</code>  的全部源码，那么满足你！！👉👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvcmVkaXMuZ2l0\">点击这里</span>👈👈</p>\n<p><b>公众号里回复  <code>redis源码</code> ，即可获取完整路径哦</b></p>\n<p>虽然 redis 源码不是我写的，但是我看过的都加上注释啦～</p>\n<p>除此之外，小白还自己实现了一个  <code>bitmap</code> 。感兴趣的朋友欢迎  <code>star</code> .👉👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdqaWF4aWFvYmFpL2NvZGVfcmVwby9ibG9iL21hc3Rlci8wMV9kYXRhX3N0cnVjdHVyZXMvYml0bWFwL2JpdG1hcC9CaXRNYXAuamF2YQ==\">bitMap 源码，点击这里</span> 👈👈</p>\n<p><b>公众号里回复  <code>bitmap</code> , 即可获取完整路径哦</b></p>\n<p>当然: JDK 也提供了一个 <code>BitMap</code>  的实现，叫 <code>BitSet</code> ，位于 <code>java.util</code>  包下。其底层使用的是一个 <code>long</code>  类型的数组，一个 <code>long</code>  代表一个 <code>word</code> 。但 <code>BitSet</code>  没有解决上面提到的输入稀疏的问题。谷歌开源的 <code>EWAHCompressedBitMap</code>  解决了输入稀疏的问题。</p>\n<p>这里我们总结一下。</p>\n<table>\n<thead>\n<tr>\n<th><code>Redis</code>  的数据类型</th>\n<th style=\"text-align:center\">底层实现结构</th>\n<th style=\"text-align:center\">文章参考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>STRING</code></td>\n<td style=\"text-align:center\"><code>sds</code></td>\n<td style=\"text-align:center\"><a href=\"https://mp.weixin.qq.com/s/0sGGSYe5zYNiLUrK5XTsWQ\">数据类型之 <code>String</code> </a></td>\n</tr>\n<tr>\n<td><code>list</code></td>\n<td style=\"text-align:center\"><code>quicklist</code> ,  <code>ziplist</code></td>\n<td style=\"text-align:center\"><a href=\"https://mp.weixin.qq.com/s/n9fzELpKXR1d02yn0usyvg\">数据类型之 <code>list</code> </a></td>\n</tr>\n<tr>\n<td><code>hash</code></td>\n<td style=\"text-align:center\"><code>ziplist</code> ,  <code>dict</code></td>\n<td style=\"text-align:center\"><a href=\"https://mp.weixin.qq.com/s/bQ-jnUuHKLC8-M4G8HpZ9w\">数据类型之 <code>hash</code> </a></td>\n</tr>\n<tr>\n<td><code>set</code></td>\n<td style=\"text-align:center\"><code>dict</code>  , <code>intset</code></td>\n<td style=\"text-align:center\"><a href=\"https://mp.weixin.qq.com/s/qK-CujsG43kAjGpgXYhQWg\">数据类型之 <code>set</code> </a></td>\n</tr>\n<tr>\n<td><code>zset</code></td>\n<td style=\"text-align:center\"><code>dict</code> ,  <code>skipList</code></td>\n<td style=\"text-align:center\"><a href=\"https://mp.weixin.qq.com/s/4fyT9XCLv2MYCtB1WH0Jvg\">数据类型之 <code>zset</code> </a></td>\n</tr>\n<tr>\n<td><code>bitmap</code></td>\n<td style=\"text-align:center\"><code>sds</code></td>\n<td style=\"text-align:center\"><a href=\"#\">数据类型之 <code>bitmap</code> </a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/qrcode.jpg\" alt=\"微信二维码\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-5-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-5-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset/",
            "title": "Redis数据结构之有序集合 zset",
            "date_published": "2021-08-01T10:38:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>上一篇我们学习的  <code>set</code>  集合这一数据类型。其内部是由 <code>inset</code>  和 <code>hashtable</code>  这种两种数据结构编码的。<br>\n如果不记得了，那就来坐穿梭机回去看看吧。 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-4-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88set/\">开始穿梭</a></p>\n<p>接下来，我们继续学习一个新的数据类型，有序集合.  <code>zset</code> .</p>\n<h2 id=\"zset简介\"><a class=\"markdownIt-Anchor\" href=\"#zset简介\">#</a>  <code>zset</code>  简介</h2>\n<p><code>zset</code>  , 中文名字叫 有序集合。序这个字，在 <code>Redis</code>  的实现是  <code>score</code>  字段。我们先不急这个字段，后面会介绍。</p>\n<p>在 <code>Redis</code>  中有序的数据类型，还有一个就是我们前面学习的  <code>list</code>  了。 它们还都可以获得某一定范围内的元素。</p>\n<p>而  <code>zset</code>  的优点是：  <code>list</code>  通过链表实现，在两端操作数据都很方便。但是操作中间的数据就比较慢了。  <code>zset</code>  是用  <code>hashtable</code>  和  <code>skiplist</code>  来实现的。即使是操作中间数据，速度也很快。时间复杂度为:  <code>O(logN)</code></p>\n<p><code>zset</code>  的缺点就是：就是比较耗费内存。</p>\n<h2 id=\"zset类型的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#zset类型的应用场景\">#</a>  <code>zset</code>  类型的应用场景</h2>\n<ul>\n<li>存储学生成绩快速做成绩排名功能。</li>\n<li>排行榜，比如：列出某用户当前的全球排名，比赛中胜场数排名。</li>\n<li>带权重的消息队列功能</li>\n</ul>\n<h2 id=\"zset的基本命令\"><a class=\"markdownIt-Anchor\" href=\"#zset的基本命令\">#</a>  <code>zset</code>  的基本命令</h2>\n<h3 id=\"zadd\"><a class=\"markdownIt-Anchor\" href=\"#zadd\">#</a>  <code>zadd</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将 <code>member</code>  添加有序集合中.</p>\n<p>如果 <code>member</code>  存在，会更新 <code>member</code>  的 <code>score</code>  值。</p>\n<ul>\n<li>\n<p><code>NX</code>  表示存在相同的 <code>member</code>  就会设置失败，NX 的作用就是 新增 <code>member</code> ，不会修改 <code>Member</code></p>\n</li>\n<li>\n<p><code>XX</code>  表示不存在相同的 <code>member</code>  就会设置失败。所以:  <code>XX</code>  总是更新元素。不会新增元素</p>\n</li>\n<li>\n<p><code>CH</code> ( <code>change</code> ): 返回修改的元素个数。更改的元素是添加的新元素以及已为其更新分数的现有元素。因此，命令行中指定的具有与过去相同分数的元素将不计算在内。注意：通常， <code>ZADD</code>  的返回值仅计算添加的新元素的数量。</p>\n</li>\n<li>\n<p><code>INCR</code> : 指定此选项后， <code>ZADD</code>  的行为类似于<a href=\"#ZINCRBY\"> <code>ZINCRBY</code> </a>。在此模式下只能指定一对得分元素。</p>\n</li>\n<li>\n<p>演示</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 设置一个元素</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 1 m1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 设置多个元素</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 2 m2 3 m3 4 m4 5 m5</span><br><span class=\"line\">(integer) 4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 演示 NX 语义,只能新增.</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 NX 5 m5</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 NX 6 m6</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 NX 6 m6</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 演示 XX 语言,只能修改</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 XX 7 m7</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 7 m7</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 进行修改，注意返回值. 如果要返回个数，则加 CH</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 XX 7 m7</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 XX 77 m7</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 演示CH, 返回修改的个数</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 CH 8 m8 9 m9 10 m10</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 CH 8 m8 999 m9 10 m10</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 演示INCR, 增长</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 11 m11</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 此时 score 表示的是步长</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k67 INCR 10 m11</span><br><span class=\"line\">&quot;21&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看设置的值。</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k67 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) &quot;m1&quot;</span><br><span class=\"line\"> 2) &quot;1&quot;</span><br><span class=\"line\"> 3) &quot;m2&quot;</span><br><span class=\"line\"> 4) &quot;2&quot;</span><br><span class=\"line\"> 5) &quot;m3&quot;</span><br><span class=\"line\"> 6) &quot;3&quot;</span><br><span class=\"line\"> 7) &quot;m4&quot;</span><br><span class=\"line\"> 8) &quot;4&quot;</span><br><span class=\"line\"> 9) &quot;m5&quot;</span><br><span class=\"line\">10) &quot;5&quot;</span><br><span class=\"line\">11) &quot;m6&quot;</span><br><span class=\"line\">12) &quot;6&quot;</span><br><span class=\"line\">13) &quot;m8&quot;</span><br><span class=\"line\">14) &quot;8&quot;</span><br><span class=\"line\">15) &quot;m10&quot;</span><br><span class=\"line\">16) &quot;10&quot;</span><br><span class=\"line\">17) &quot;m11&quot;</span><br><span class=\"line\">18) &quot;21&quot;</span><br><span class=\"line\">19) &quot;m7&quot;</span><br><span class=\"line\">20) &quot;77&quot;</span><br><span class=\"line\">21) &quot;m9&quot;</span><br><span class=\"line\">22) &quot;999&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"zscore\"><a class=\"markdownIt-Anchor\" href=\"#zscore\">#</a>  <code>zscore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZSCORE key member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>zset score</code></p>\n<p>查看对应元素的 <code>score</code>  值</p>\n<pre><code>* 当`key`不存在或者`member`不存在的时候,返回`(nil)`\n</code></pre>\n<p>返回 <code>score</code>  的值。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证k68不存在的时候，返回nil</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZSCORE k68 m1</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k68 1 m1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 返回元素的score值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZSCORE k68 m1</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 验证 member 不存在的时候，返回</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZSCORE k68 m2</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"zincrby\"><a class=\"markdownIt-Anchor\" href=\"#zincrby\">#</a>  <code>zincrby</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZINCRBY key increment member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>zset increment by</code> <br>\n*  <code>increment</code> : 步长。<br>\n*  <code>member</code> : 指定的成员</p>\n<p>为有序集合 <code>key</code>  的成员 <code>member</code>  的 <code>score</code>  值加上  <code>increment</code> 。</p>\n<p>如果 <code>key</code>  或者 <code>member</code>  不存在，则新增一个元素。相当于  <code>zadd</code> .</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入一个不存在的key。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINCRBY k69 10 m1</span><br><span class=\"line\"><span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k69 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#累加</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINCRBY k69 10 m1</span><br><span class=\"line\"><span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k69 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 累加一个负数</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINCRBY k69 -30 m1</span><br><span class=\"line\"><span class=\"string\">&quot;-10&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k69 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;-10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zcard\"><a class=\"markdownIt-Anchor\" href=\"#zcard\">#</a>  <code>zcard</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZCARD key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回 有序集合的 <code>key</code>  中的元素个数。即 <code>member</code>  的个数。<br>\n不存在的时候，返回 <code>0</code> .</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回member的个数</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k70 1 m1 2 m2 3 m3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZCARD k70</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k70 4 m4 5 m5</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZCARD k70</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 不存在的时候，返回0</span></span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS k70_1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; ZCARD k70_1</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"zcount\"><a class=\"markdownIt-Anchor\" href=\"#zcount\">#</a>  <code>zcount</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZCOUNT key min max</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回  <code>score</code>  值在 <code>min</code>  和  <code>max</code>  之间的元素的个数。包括等于  <code>min</code>  和  <code>max</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k71 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; ZCOUNT k71 2 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\">#不存在的key或者不在区间内时，返回0</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcount k71_1 0 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount k71 11 12</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount k71 12 11</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n<h3 id=\"zrange\"><a class=\"markdownIt-Anchor\" href=\"#zrange\">#</a>  <code>zrange</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZRANGE key start stop [WITHSCORES]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>这个命令我们已经用过，就是返回指定开始结束位置上的元素。从  <code>0</code>  开始。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k72 1 3</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k72 1 3 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zrevrange\"><a class=\"markdownIt-Anchor\" href=\"#zrevrange\">#</a>  <code>zrevrange</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREVRANGE key start stop [WITHSCORES]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回有序集合中指定区间的成员。<br>\n其中成员的位置按  <code>score</code>  值递减 (从大到小) 来排列。 具有相同  <code>score</code>  值的成员按字典序的逆序 ( <code>reverse lexicographical order</code> ) 排列。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k73 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 使用 zrange 正序返回数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k73 0 3 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 zrevrange 倒序返回数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE k73 0 3 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m10\\x11&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;9&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;8&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;7&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zrangebyscore\"><a class=\"markdownIt-Anchor\" href=\"#zrangebyscore\">#</a>  <code>zrangebyscore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>zset range by score</code></p>\n<p>类似  <code>zrange</code> , 不过是按照  <code>score</code>  的值进行排序的。</p>\n<p><code>[LIMIT offset count]</code> , 是从 offset 开始，返回 <code>count</code>  个。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回 score值在 [9,10]之间的member。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k74 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE k74 9 10 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;9&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m10\\x11&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从第2个(区间内索引为1)开始，返回1个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE k74 9 10 WITHSCORES LIMIT 1 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m10\\x11&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zrevrangebyscore\"><a class=\"markdownIt-Anchor\" href=\"#zrevrangebyscore\">#</a>  <code>zrevrangebyscore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回有序集  <code>key</code>  中，  <code>score</code>  值介于  <code>max</code>  和  <code>min</code>  之间 (默认包括等于  <code>max</code>  或  <code>min</code>  ) 的所有的成员。有序集成员按  <code>score</code>  值递减 (从大到小) 的次序排列。</p>\n<p>注意各个参数的位置哦。这里和  <code>zrevrange</code>  的参数不一样。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k75 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGEBYSCORE k75 8 6 WITHSCORES </span><br><span class=\"line\">1) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;8&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;7&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGEBYSCORE k75 8 6 WITHSCORES  LIMIT 1  1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;7&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zrank\"><a class=\"markdownIt-Anchor\" href=\"#zrank\">#</a>  <code>zrank</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZRANK key member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回有序集  <code>key</code>  中成员  <code>member</code>  的排名。其中有序集成员按  <code>score</code>  值递增 (从小到大) 顺序排列</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k76 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; zrank k76 m4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zrank k76 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"zrevrank\"><a class=\"markdownIt-Anchor\" href=\"#zrevrank\">#</a>  <code>zrevrank</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREVRANK key member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回有序集  <code>key</code>  中成员  <code>member</code>  的排名。其中有序集成员按  <code>score</code>  值递减 (从大到小) 排序。</p>\n<p>排名以  <code>0</code>  为底，也就是说，  <code>score</code>  值最大的成员排名为  <code>0</code>  。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k77 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANK k77 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANK k77 m4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"zrem\"><a class=\"markdownIt-Anchor\" href=\"#zrem\">#</a>  <code>zrem</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREM key member [member ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>zset remove</code></p>\n<p>移除有序集  <code>key</code>  中的一个或多个成员，不存在的成员将被忽略。</p>\n<p>当  <code>key</code>  存在但不是有序集类型时，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k78 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 删除m2,m3,m4</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREM k78 m2 m3 m4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k78 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;7&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;8&quot;</span></span><br><span class=\"line\">11) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">12) <span class=\"string\">&quot;9&quot;</span></span><br><span class=\"line\">13) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">14) <span class=\"string\">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zremrangebyrank\"><a class=\"markdownIt-Anchor\" href=\"#zremrangebyrank\">#</a>  <code>zremrangebyrank</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREMRANGEBYRANK key start stop</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>移除有序集  <code>key</code>  中，指定排名 ( <code>rank</code> ) 区间内的所有成员。</p>\n<p>区间分别以下标参数  <code>start</code>  和  <code>stop</code>  指出，包含  <code>start</code>  和  <code>stop</code>  在内。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k79 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 删除排名第2到排名第4的member</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREMRANGEBYRANK k79 1 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k79 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;7&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;8&quot;</span></span><br><span class=\"line\">11) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">12) <span class=\"string\">&quot;9&quot;</span></span><br><span class=\"line\">13) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">14) <span class=\"string\">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zremrangebyscore\"><a class=\"markdownIt-Anchor\" href=\"#zremrangebyscore\">#</a> zremrangebyscore</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREMRANGEBYSCORE key min max</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>移除有序集  <code>key</code>  中，所有  <code>score</code>  值介于  <code>min</code>  和  <code>max</code>  之间 (包括等于  <code>min</code>  或  <code>max</code>  ) 的成员。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k80 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 删除 score&gt;=1 and score &lt;=9 的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREMRANGEBYSCORE k80 1 9</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange k80 0 -1  WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zrangebylex\"><a class=\"markdownIt-Anchor\" href=\"#zrangebylex\">#</a> zrangebylex</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZRANGEBYLEX key min max [LIMIT offset count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>当有序集合的所有成员都具有相同的分值时， 有序集合的元素会根据成员的字典序（ <code>lexicographical ordering</code> ）来进行排序， 而这个命令则可以返回给定的有序集合键  <code>key</code>  中， 值介于  <code>min</code>  和  <code>max</code>  之间的成员。</p>\n<p>注意:</p>\n<p>合法的  <code>min</code>  和  <code>max</code>  参数必须包含 ( 或者  <code>[</code>  ， 其中  <code>(</code>  表示开区间（指定的值不会被包含在范围之内）， 而  <code>[</code>  则表示闭区间（指定的值会被包含在范围之内）。</p>\n<p>特殊值  <code>+</code>  和  <code>-</code>  在  <code>min</code>  参数以及  <code>max</code>  参数中具有特殊的意义， 其中  <code>+</code>  表示正无限， 而  <code>-</code>  表示负无限。 因此， 向一个所有成员的分值都相同的有序集合发送命令  <code>ZRANGEBYLEX &lt;zset&gt; - + </code> ， 命令将返回有序集合中的所有元素</p>\n<blockquote>\n<p><code>lex</code> :<br>\n 表示如果 <code>score</code>  相等，则按照 <code>member</code>  的字典顺序排序。<br>\n此外这个命令，比如 <code>ZRANGBYSCORE</code>  稍微强大一点儿。可以指定区间范围，当只知道 <code>member</code> ，不知道 score 的时候，可以是使用带有  <code>lex</code>  的命令。</p>\n</blockquote>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd k81 1 a 2 b 3 c 4 d 5 f 6 g</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\"><span class=\"comment\"># 返回 score值在a的score值和c的score值之间的member</span></span><br><span class=\"line\"><span class=\"comment\"># 即: score&gt; Score(a) &amp;&amp; score &lt;= Score(c)</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYLEX k81 (a  [c </span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回 小于等于c的Score值的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYLEX k81 -  [c </span><br><span class=\"line\">1) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYLEX k81 - + </span><br><span class=\"line\">1) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;f&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;g&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zlexcount\"><a class=\"markdownIt-Anchor\" href=\"#zlexcount\">#</a>  <code>zlexcount</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZLEXCOUNT key min max</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>对于一个所有成员的分值都相同的有序集合键  <code>key</code>  来说， 这个命令会返回该集合中， 成员介于  <code>min</code>  和  <code>max</code>  范围内的元素数量。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd k82 1 a 2 b 3 c 4 d 5 f 6 g</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; ZLEXCOUNT k82 2 5</span><br><span class=\"line\">(error) ERR min or max not valid string range item</span><br><span class=\"line\">127.0.0.1:6379&gt; ZLEXCOUNT k82 a b</span><br><span class=\"line\"><span class=\"comment\"># 大于Score(a),小于等于Score(b)的member,只有b.</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZLEXCOUNT k82 (a [b</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 大于Score(a),小于等于Score(d)的member,有b.c.d，三个</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZLEXCOUNT k82 (a [d</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"zremrangebylex\"><a class=\"markdownIt-Anchor\" href=\"#zremrangebylex\">#</a>  <code>zremrangebylex</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZREMRANGEBYLEX key min max</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>对于一个所有成员的分值都相同的有序集合键  <code>key</code>  来说， 这个命令会移除该集合中， 成员介于  <code>min</code>  和  <code>max</code>  范围内的所有元素。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd k83 1 a 2 b 3 c 4 d 5 f 6 g</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\"><span class=\"comment\"># 删除 score值在 (Score(a),Score(c)] 之间的member</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREMRANGEBYLEX k83 (a [c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\"># 删除了，b,c</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange k83 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;g&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zscan\"><a class=\"markdownIt-Anchor\" href=\"#zscan\">#</a> zscan</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>这是一个查询命令。 同  <code>SCAN</code>  命令。可以参考这篇文章 <a href=\"./010-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4.md\">010 - 其他命令</a></p>\n<p><code>SCAN</code>  命令是一个基于游标的迭代器（ <code>cursor based iterator</code> ）：  <code>SCAN</code>  命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为  <code>SCAN</code>  命令的游标参数， 以此来延续之前的迭代过程。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k84 1 m1 2 m2 3 m3 4 m4 5 m5 6 m6 7 m7 8 m8 9 m9 10 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; zscan k84 0 MATCH m* COUNT 3</span><br><span class=\"line\">1) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">2)  1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">    2) <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">    4) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">    6) <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    7) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">    8) <span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\">    9) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">   10) <span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\">   11) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">   12) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\">   13) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">   14) <span class=\"string\">&quot;7&quot;</span></span><br><span class=\"line\">   15) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">   16) <span class=\"string\">&quot;8&quot;</span></span><br><span class=\"line\">   17) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">   18) <span class=\"string\">&quot;9&quot;</span></span><br><span class=\"line\">   19) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">   20) <span class=\"string\">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zunionstore\"><a class=\"markdownIt-Anchor\" href=\"#zunionstore\">#</a>  <code>zunionstore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</code></p>\n<ul>\n<li>\n<p>解释<br>\n计算给定的一个或多个有序集合的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集 (结果集) 储存到 destination 。<br>\n如果 key 相同的时候，对应的 score 值会相加。</p>\n<ul>\n<li><code>WEIGHTS</code> : 使用  <code>WEIGHTS</code>  选项，你可以为 每个 给定有序集 分别 指定一个乘法因子 ( <code>multiplication factor</code> )，每个给定有序集的所有成员的  <code>score</code>  值在传递给聚合函数 ( <code>aggregation function</code> ) 之前都要先乘以该有序集的因子。</li>\n<li><code>AGGREGATE</code> : 使用  <code>AGGREGATE</code>  选项，你可以指定并集的结果集的聚合方式。<br>\n默认使用的参数  <code>SUM</code>  ，可以将所有集合中某个成员的  <code>score</code>  值之 和 作为结果集中该成员的  <code>score</code>  值；使用参数  <code>MIN</code>  ，可以将所有集合中某个成员的 最小  <code>score</code>  值作为结果集中该成员的  <code>score</code>  值；而参数  <code>MAX</code>  则是将所有集合中某个成员的 最大  <code>score</code>  值作为结果集中该成员的  <code>score</code>  值。</li>\n</ul>\n</li>\n<li>\n<p>演示</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZADD k85_1 1 m1 2 m2 3 m3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k85_2 1 m1 4 m4 5 m5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE k85 2 k85_1 k85_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange k85 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 演示 Weights参数： WEIGHTS 2 3</span></span><br><span class=\"line\"><span class=\"comment\"># 指: 第一个zset的所有元素 *2 ，第二个有序集合中的元素 *3</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE k85 2 k85_1 k85_2 WEIGHTS 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k85 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;12&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;15&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 演示 Weights参数： WEIGHTS 2 4</span></span><br><span class=\"line\"><span class=\"comment\"># 指: 第一个zset的所有元素 *2 ，第二个有序集合中的元素 *3</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE k85 2 k85_1 k85_2 WEIGHTS 2 4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k85 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;16&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;20&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"zinterstore\"><a class=\"markdownIt-Anchor\" href=\"#zinterstore\">#</a> zinterstore</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>计算给定的一个或多个有序集的交集，其中给定  <code>key</code>  的数量必须以  <code>numkeys</code>  参数指定，并将该交集 (结果集) 储存到  <code>destination</code>  。</p>\n<p>默认情况下，结果集中某个成员的  <code>score</code>  值是所有给定集下该成员  <code>score</code>  值之和.</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd k86_1 1 m1 2 m2 3 m3 4 m4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; ZADD k86_2 20 m2 30 m3 50 m5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZINTERSTORE k86 2 k86_1 k86_2 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\"># 取交集(默认相加)</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange k86 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;22&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;33&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WEIGTHS 参数和上面的 ZUNIONSTORE命令一样.</span></span><br><span class=\"line\"><span class=\"comment\"># 这里演示一下, AGGREGATE参数</span></span><br><span class=\"line\"><span class=\"comment\"># 默认使用的是SUM. 就是本命令中上面的例子了.</span></span><br><span class=\"line\"><span class=\"comment\"># 下面演示MIN 和 MAX</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINTERSTORE k86 2 k86_1 k86_2 AGGREGATE MIN</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k86 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINTERSTORE k86 2 k86_1 k86_2 AGGREGATE MAX</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE k86 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;30&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"zset的内部结构\"><a class=\"markdownIt-Anchor\" href=\"#zset的内部结构\">#</a>  <code>zset</code>  的内部结构</h2>\n<p>这里我们主要看 <code>skiplist</code> ，如果忘记了 <code>hashtable</code> ，就看着<a href=\"2021/08/01/Redis%E7%B3%BB%E5%88%97/C-8-Redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%97%E5%85%B8Dict/\">这篇文章</a></p>\n<p>我们从命令 <code>zadd</code>  入手，找到 <code>zset</code>  的 <code>add</code>  通用方法 <code>zaddGenericCommand(c,ZADD_NONE);</code>  来看一下。省略了部分代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (server.zset_max_ziplist_entries == <span class=\"number\">0</span> ||</span><br><span class=\"line\">            server.zset_max_ziplist_value &lt; <span class=\"built_in\">sdslen</span>(c-&gt;argv[scoreidx+<span class=\"number\">1</span>]-&gt;ptr))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 创建 OBJ_ENCODING_SKIPLIST 编码的结构</span></span><br><span class=\"line\">    zobj = <span class=\"built_in\">createZsetObject</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 创建 OBJ_ZSET 编码的结构</span></span><br><span class=\"line\">    zobj = <span class=\"built_in\">createZsetZiplistObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>来看一下  <code>createZsetObject()</code>  方法的实现，就再清晰不过了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 创建 Zset 对象。</span></span><br><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">createZsetObject</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    zset *zs = <span class=\"built_in\">zmalloc</span>(<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(*zs));</span><br><span class=\"line\">    robj *o;</span><br><span class=\"line\"></span><br><span class=\"line\">    zs-&gt;dict = <span class=\"built_in\">dictCreate</span>(&amp;zsetDictType, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    zs-&gt;zsl = <span class=\"built_in\">zslCreate</span>();</span><br><span class=\"line\">    o = <span class=\"built_in\">createObject</span>(OBJ_ZSET, zs);</span><br><span class=\"line\">    o-&gt;encoding = OBJ_ENCODING_SKIPLIST;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，就是我们和  <code>zset</code>  这种数据类型的初次深入见面了。 我们先看下  <code>zset</code>  这种结构体的定义。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 有序集合的结构定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zset</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 字典，键为成员,值为score</span></span><br><span class=\"line\">    <span class=\"comment\">/// 用于支持 O(1) 复杂度的按成员分值操作。</span></span><br><span class=\"line\">    dict *dict;</span><br><span class=\"line\">    <span class=\"comment\">/// 跳跃表,按分值排序成员</span></span><br><span class=\"line\">    <span class=\"comment\">/// 用于支持平均复杂度为 O(logN)的按分值定位成员以及范围的操作。</span></span><br><span class=\"line\">    zskiplist *zsl;</span><br><span class=\"line\">&#125; zset;</span><br></pre></td></tr></table></figure>\n<p><code>dict</code>  前面已经看过了，这里来看下 <code>zskiplist</code> 。</p>\n<h3 id=\"skiplist\"><a class=\"markdownIt-Anchor\" href=\"#skiplist\">#</a>  <code>skiplist</code></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 跳跃表</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplist</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 表头，表尾</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">header</span>, *<span class=\"title\">tail</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 表中节点的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> length;</span><br><span class=\"line\">    <span class=\"comment\">/// 表中层数最大的节点的层数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> level;</span><br><span class=\"line\">&#125; zskiplist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> &#123;</span></span><br><span class=\"line\">    sds ele;</span><br><span class=\"line\">    <span class=\"comment\">/// 分数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> score;</span><br><span class=\"line\">    <span class=\"comment\">/// 后退的指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">backward</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 层</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistLevel</span> &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">/// 前进指针</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">forward</span>;</span></span><br><span class=\"line\">        <span class=\"comment\">/// 跨度</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> span;</span><br><span class=\"line\">    &#125; level[];</span><br><span class=\"line\">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>本章是一个新的常用数据类型， <code>ZSET</code>  有序集合。底层的数据结构是使用的是  <code>skipList</code>  和  <code>hashtable</code>  . 关于 <code>Skiplist</code>  的初步了解文章<a href=\"#\">穿梭机</a> 和  <code>Redis</code>  中  <code>skiplist</code>  的实现源码解读<a href=\"\">穿梭机</a></li>\n<li>然后简单介绍了  <code>Redis ZSET</code>  数据类型的基础使用场景。关键字有  <code>有序</code> ， <code>排名</code> ， <code>权重</code> 等.</li>\n<li><code>ZSET</code>  的  <code>20</code>  个常有命令。 后面我会针对这  <code>20</code>  个命令的实现进行简单的分享.</li>\n<li>然后简单的看了一下 <code>Redis</code>  中的数据结构的实现，还是那句话， <code>Redis</code>  的数据结构是动态编码的，  <code>ZSET</code>  是有 <code>hashtable</code>  和  <code>skiplist</code>  实现的。 skiplist 是一个非常高效的数据结构，增删查的效率都是  <code>O(logN)</code> . 实现原理可以参考这篇文章<a href=\"#\">直通车</a>，里面有几种流行的语言的实现，可以针对自己擅长的语言进行查看。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-4-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88set/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-4-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88set/",
            "title": "Redis数据结构之集合 Set",
            "date_published": "2021-08-01T10:28:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>前一篇文章，我们学习的是 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">Redis 的数据结构之 hash</a>， 学习了其基本的操作和使用内部数据结构是 <code>hashtable</code>  和 <code>ziplist</code> ，其中 <code>Redis</code>  中的 <code>hashtable</code>  是用  <code>dict</code>  表示的。如果不记得了其内部构成，就再看看看着<a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">上篇文章</a>吧。现在我们继续学习下一个数据类型  <code>set</code> 。</p>\n<h2 id=\"set简介\"><a class=\"markdownIt-Anchor\" href=\"#set简介\">#</a>  <code>set</code>  简介</h2>\n<p><code>Redis</code>  的  <code>set</code>  数据类型表示 一堆不重复值的集合。</p>\n<p><code>Redis</code>  的 <code>set</code>  数据类型有两种编码方式.  <code>OBJ_ENCODING_INTSET</code>  和  <code>OBJ_ENCODING_HT</code> .</p>\n<ul>\n<li>\n<p><code>OBJ_ENCODING_HT</code>  这种编码方式在上一篇文章 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">07-Redis 的数据类型之 hash</a> 中已经简单的介绍过了。其实现的数据结构为  <code>dict</code> 。</p>\n</li>\n<li>\n<p><code>OBJ_ENCODING_INTSET</code> , 这种编码方式是我们要新学习的编码方式。 <a href=\"#intset\">电梯直达</a></p>\n</li>\n</ul>\n<p>如果你看到这句话，那就说明你是一个特别认真的人。哈哈哈，我们还是先遵循惯例。先学习 <code>set</code>  类型相关的命令。</p>\n<h2 id=\"set类型的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#set类型的应用场景\">#</a>  <code>set</code>  类型的应用场景</h2>\n<ul>\n<li>社交系统中存储关注信息，点赞信息，利用交并差运算，计算共同好友等业务中。比如 <code>qq</code>  的好友推荐逻辑，就可以使用差集运算。</li>\n<li>需要去重的业务逻辑中。某一时间端内系统的增长人数。</li>\n<li>统计访问网站的独立 <code>IP</code> 。</li>\n</ul>\n<h2 id=\"set的基本命令\"><a class=\"markdownIt-Anchor\" href=\"#set的基本命令\">#</a>  <code>set</code>  的基本命令</h2>\n<h3 id=\"sadd\"><a class=\"markdownIt-Anchor\" href=\"#sadd\">#</a>  <code>sadd</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SADD key member [member ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set add</code></p>\n<p>将一个或多个  <code>member</code>  元素加入到集合  <code>key</code>  当中，已经存在于集合的  <code>member</code>  元素将被忽略。</p>\n<p>假如  <code>key</code>  不存在，则创建一个只包含  <code>member</code>  元素作成员的集合。</p>\n<p>当  <code>key</code>  不是集合类型时，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd k52 mem1 mem2 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd k52 mem1 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd k52 mem1 mem3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"smembers\"><a class=\"markdownIt-Anchor\" href=\"#smembers\">#</a>  <code>smembers</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SMEMBERS key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set members</code></p>\n<p>返回集合  <code>key</code>  中的所有成员。</p>\n<p>不存在的  <code>key</code>  被视为空集合</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询元素， 注意保存是无序的.</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k53 m1 m2 m3 m4 m5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k53</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m5&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sismember\"><a class=\"markdownIt-Anchor\" href=\"#sismember\">#</a>  <code>sismember</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SISMEMBER key member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set is members</code></p>\n<p>判断  <code>member</code>  元素是否集合  <code>key</code>  的成员。</p>\n<p>如果  <code>member</code>  元素是集合的成员，返回  <code>1</code>  。 如果  <code>member</code>  元素不是集合的成员，或  <code>key</code>  不存在，返回  <code>0</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k54 m1 m2 m3 m4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER k54 m2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER k54 m5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"spop\"><a class=\"markdownIt-Anchor\" href=\"#spop\">#</a>  <code>spop</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SPOP key [count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set pop</code></p>\n<p>移除并返回集合中的 <b>随机一个</b> 元素。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k55 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 随机移除一个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop k55</span><br><span class=\"line\"><span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop k55</span><br><span class=\"line\"><span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop k55</span><br><span class=\"line\"><span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 随机移除3个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop k55 3</span><br><span class=\"line\">1) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k55</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"srandmemeber\"><a class=\"markdownIt-Anchor\" href=\"#srandmemeber\">#</a>  <code>srandmemeber</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SRANDMEMBER key [count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set rand member</code></p>\n<p>返回集合中的 随机  <code>count</code>  个元素 (不会删除元素)</p>\n<p>如果  <code>count</code>  为正数，且小于集合基数，那么命令返回一个包含  <code>count</code>  个元素的数组，数组中的元素各不相同。如果  <code>count</code>  大于等于集合基数，那么返回整个集合。</p>\n<p>如果  <code>count</code>  为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为  <code>count</code>  的绝对值。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k56 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 随机返回一个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 </span><br><span class=\"line\"><span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 </span><br><span class=\"line\"><span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 </span><br><span class=\"line\"><span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># count是正数，小于集合的元素数,返回count个元素，无重复元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 5</span><br><span class=\"line\">1) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># count是正数，大于集合的元素数,返回整个集合</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 20</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># count为负数， 返回20个集合中的元素，元素会重复</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER k56 -20</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\"> 4) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\"> 5) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 6) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"> 7) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\"> 8) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\"> 9) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">10) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">11) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">12) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">13) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">14) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">15) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">16) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">17) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">18) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">19) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">20) <span class=\"string\">&quot;m6&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"srem\"><a class=\"markdownIt-Anchor\" href=\"#srem\">#</a>  <code>srem</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SREM key member [member ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set remove</code></p>\n<p>移除集合  <code>key</code>  中的一个或多个  <code>member</code>  元素，不存在的  <code>member</code>  元素会被忽略。</p>\n<p>当  <code>key</code>  不是集合类型，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k57 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; SREM k57 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k57</span><br><span class=\"line\">1) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SREM k57 m11 m12</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"smove\"><a class=\"markdownIt-Anchor\" href=\"#smove\">#</a>  <code>smove</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SMOVE source destination member</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set move</code></p>\n<p>将  <code>member</code>  元素从  <code>source</code>  集合移动到  <code>destination</code>  集合。</p>\n<p><b> <code>SMOVE</code>  是原子性操作</b>。</p>\n<p>如果  <code>source</code>  集合不存在或不包含指定的  <code>member</code>  元素，则  <code>SMOVE</code>  命令不执行任何操作，仅返回  <code>0</code>  。否则，  <code>member</code>  元素从  <code>source</code>  集合中被移除，并添加到  <code>destination</code>  集合中去。</p>\n<p>当  <code>destination</code>  集合已经包含  <code>member</code>  元素时，  <code>SMOVE</code>  命令只是简单地将  <code>source</code>  集合中的  <code>member</code>  元素删除。</p>\n<p>当  <code>source</code>  或  <code>destination</code>  不是集合类型时，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k58 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 移动两个元素到k58_dis</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMOVE k58 k58_dis m1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMOVE k58 k58_dis m2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMOVE k58 k58_dis m1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\"># k58中的m1，m2 已被移除。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k58</span><br><span class=\"line\">1) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;m10&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;m9&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># k58_dis中的m1,m2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k58_dis</span><br><span class=\"line\">1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m1&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"scard\"><a class=\"markdownIt-Anchor\" href=\"#scard\">#</a>  <code>scard</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SCARD key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回集合  <code>key</code>  的基数 (集合中元素的数量)。<br>\n集合的基数。 当  <code>key</code>  不存在时，返回  <code>0</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k59 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"><span class=\"comment\"># 获取元素个数</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SCARD k59</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br></pre></td></tr></table></figure>\n<h3 id=\"sinter\"><a class=\"markdownIt-Anchor\" href=\"#sinter\">#</a>  <code>sinter</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code> SINTER key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set intersection</code>  :  <code>set</code>  的交集</p>\n<p>返回一个集合的全部成员，该集合是所有给定集合的交集。</p>\n<p>不存在的  <code>key</code>  被视为空集。</p>\n<p>当给定集合当中有一个空集时，结果也为空集 (根据集合运算定律)。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k60_1 m1 m2 m3 m4 m5 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k60_2 m2 m3 m4 m5 m6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k60_3 m4 m5 m6 m7 m8</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"><span class=\"comment\"># 指定了一个key，返回集合的所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER k60_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 多个key的时候，返回集合的交集。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER k60_1 k60_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 多个key的时候，返回集合的交集。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER k60_1 k60_2 k60_3</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># k60_4不存在，为空集</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER k60_1 k60_4</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"sinterstore\"><a class=\"markdownIt-Anchor\" href=\"#sinterstore\">#</a>  <code>sinterstore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SINTERSTORE destination key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set intersection and store</code></p>\n<p>这个命令类似于 SINTER key [key …] 命令，返回集合的交集。但它将结果保存到 destination 集合，而不是简单地返回结果集。</p>\n<p>如果 destination 集合已经存在，则将其覆盖。</p>\n<p>destination 可以是 key 本身。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k61_1 m1 m2 m3 m4 m5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k61_2 m4 m5 m6 m7 m8</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"><span class=\"comment\"># 将k61_1 和 k61_2 集合的交集存储到k61_dis中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTERSTORE k61_dis k61_1 k61_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\"># 查看 k61_dis</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k61_dis</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># k61_1 和 k61_2 没有变化</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k61_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k61_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;m7&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m8&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果目标集合(k61_dis)存在，元素会被覆盖掉。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k61_3 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SINTERSTORE k61_dis k61_1 k61_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k61_dis</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sunion\"><a class=\"markdownIt-Anchor\" href=\"#sunion\">#</a>  <code>sunion</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SUNION key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set union</code></p>\n<p>返回一个集合的全部成员，如果是多个集合 (key), 返回所有给定集合的并集。</p>\n<p>不存在的 key 被视为空集。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k62_1 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k62_2 m2 m3 m4 m5 m6 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"><span class=\"comment\"># 一个key，返回整个集合。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUNION k62_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 多个key，返回并集</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUNION k62_1 k62_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;m4&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sunionstore\"><a class=\"markdownIt-Anchor\" href=\"#sunionstore\">#</a>  <code>sunionstore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SUNIONSTORE destination key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set union and store</code></p>\n<p>同 SINTERSTORE , 只不过存储的是并集的结果。 将多个集合的并集存储到 distination 中。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k63_1 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k63_2 m2 m3 m4 m5 m6 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SUNIONSTORE k63_dis k62_1 k62_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k63_dis</span><br><span class=\"line\">1) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;m4&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sdiff\"><a class=\"markdownIt-Anchor\" href=\"#sdiff\">#</a>  <code>sdiff</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SDIFF key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set difference</code></p>\n<p>如果指定一个集合， <code>key</code> ，返回一个集合的全部成员，</p>\n<p>如果指定了多个集合 ( <code>key</code> ), 则返回 所有给定集合之间的差集。</p>\n<p>不存在的  <code>key</code>  被视为空集。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k64_1 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k64_2 m2 m3 m4 m5 m6 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"><span class=\"comment\"># 返回 k64_1 - k64_2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF k64_1 k64_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 返回 k64_2 - k64_1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF k64_2 k64_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sdiffstore\"><a class=\"markdownIt-Anchor\" href=\"#sdiffstore\">#</a>  <code>sdiffstore</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SDIFFSTORE destination key [key ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将集合的差集存储到  <code>destination</code>  集合中.</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD k65_1 m1 m2 m3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD k65_2 m2 m3 m4 m5 m6 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFFSTORE k65_dis_1 k65_1 k65_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k65_dis_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFFSTORE k65_dis_2 k65_2 k65_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS k65_dis_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;m5&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sscan\"><a class=\"markdownIt-Anchor\" href=\"#sscan\">#</a>  <code>sscan</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>SSCAN key cursor [MATCH pattern] [COUNT count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>set scan</code></p>\n<p>这是一个查询命令。 同  <code>SCAN</code>  命令。可以参考这篇文章 <a href=\"./010-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4.md\">010 - 其他命令</a></p>\n<p><code>SCAN</code>  命令是一个基于游标的迭代器（ <code>cursor based iterator</code> ）：  <code>SCAN</code>  命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为  <code>SCAN</code>  命令的游标参数， 以此来延续之前的迭代过程。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SSCAN k66 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">   3) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">   4) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">   5) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SSCAN k66 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;m6&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;m1&quot;</span></span><br><span class=\"line\">   3) <span class=\"string\">&quot;m3&quot;</span></span><br><span class=\"line\">   4) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">   5) <span class=\"string\">&quot;m4&quot;</span></span><br><span class=\"line\">   6) <span class=\"string\">&quot;m5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SSCAN k66 1 MATCH m2 Count 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;m2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n<h2 id=\"set的内部结构\"><a class=\"markdownIt-Anchor\" href=\"#set的内部结构\">#</a>  <code>set</code>  的内部结构</h2>\n<p>在 t_set.c 这个文件中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">setTypeCreate</span><span class=\"params\">(sds value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isSdsRepresentableAsLongLong</span>(value,<span class=\"literal\">NULL</span>) == C_OK)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">createIntsetObject</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">createSetObject</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表明， <code>set</code>  数据类型是由两种数据结构来实现的。</p>\n<p>而在  <code>createSetObject()</code> ，指明了其编码方式是  <code>OBJ_ENCODING_HT</code> , 即哈希表的方式，也就是使用 dict 这种数据结构来存储的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">createSetObject</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    dict *d = <span class=\"built_in\">dictCreate</span>(&amp;setDictType, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    robj *o = <span class=\"built_in\">createObject</span>(OBJ_SET, d);</span><br><span class=\"line\">    o-&gt;encoding = OBJ_ENCODING_HT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hashtable\"><a class=\"markdownIt-Anchor\" href=\"#hashtable\">#</a>  <code>hashtable</code></h3>\n<p>这里就不赘述了。直接上<a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">穿梭机</a>吧。</p>\n<h3 id=\"intset\"><a class=\"markdownIt-Anchor\" href=\"#intset\">#</a> intset</h3>\n<p>在 <code>createIntsetObject()</code>  中指明了使用的编码方式是  <code>OBJ_ENCODING_INTSET</code> . 如下。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">createIntsetObject</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    intset *is = <span class=\"built_in\">intsetNew</span>();</span><br><span class=\"line\">    robj *o = <span class=\"built_in\">createObject</span>(OBJ_SET, is);</span><br><span class=\"line\">    o-&gt;encoding = OBJ_ENCODING_INTSET;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看看  <code>intset</code>  到底什么何方利器.</p>\n<p>我直接全项目搜索:  <code>intset</code>  ，就找到了  <code>intset.h</code> .</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> encoding; </span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int8_t</span> contents[];</span><br><span class=\"line\">&#125; intset;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字段解释\"><a class=\"markdownIt-Anchor\" href=\"#字段解释\">#</a> 字段解释:</h4>\n<ul>\n<li><code>encoding</code> : 数据编码，表示 <code>intset</code>  中的每个数据元素用几个字节来存储。它有三种可能的取值： <code>INTSET_ENC_INT16</code>  表示每个元素用 <code>2</code>  个字节存储， <code>INTSET_ENC_INT32</code>  表示每个元素用 <code>4</code>  个字节存储， <code>INTSET_ENC_INT64</code>  表示每个元素用 <code>8</code>  个字节存储。因此， <code>intset</code>  中存储的整数最多只能占用 <code>64bit</code> 。</li>\n<li><code>length</code> : 表示 <code>intset</code>  中的元素个数。 <code>encoding</code>  和 <code>length</code>  两个字段构成了 <code>intset</code>  的头部（ <code>header</code> ）。</li>\n<li><code>contents</code> : 是一个柔性数组（ <code>flexible array member</code> ），表示 <code>intset</code>  的 <code>header</code>  后面紧跟着数据元素。这个数组的总长度（即总字节数）等于 <code>encoding * length</code> 。柔性数组在 <code>Redis</code>  的很多数据结构的定义中都出现过（例如 <code>sds</code> ,  <code>quicklist</code> ,  <code>skiplist</code> ），用于表达一个偏移量。 <code>contents</code>  需要单独为其分配空间，这部分内存不包含在 <code>intset</code>  结构当中。</li>\n</ul>\n<p>这里有个问题.</p>\n<p>Redis 是如何决定一个 set 使用哪种编码方式的呢？</p>\n<p>set 的编码是由第一个元素决定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">setTypeCreate</span><span class=\"params\">(sds value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isSdsRepresentableAsLongLong</span>(value,<span class=\"literal\">NULL</span>) == C_OK)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">createIntsetObject</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">createSetObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isSdsRepresentableAsLongLong</span><span class=\"params\">(sds s, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *llval)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">string2ll</span>(s, <span class=\"built_in\">sdslen</span>(s), llval) ? C_OK : C_ERR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果  <code>value</code>  可以转换成  <code>long long</code>  类型的话，就使用  <code>inset</code>  编码方式。</p>\n<p>通过看源码发现:</p>\n<p>当 <code>intset</code>  的元素个数超过  <code>set_max_intset_entries</code>  这个配置的时候，就会从 <code>intset</code>  编码 ( <code>OBJ_ENCODING_INTSET</code> ) 转换成  <code>ht</code>  编码 ( <code>OBJ_ENCODING_HT</code> )。</p>\n<p>这个我们会在后续文章中说明这里的方案。</p>\n<p>好了，关于 set 类型的介绍就到这里了。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><code>set</code>  这种类型是一种无重复元素的集合。</li>\n<li><code>set</code>  的业务场景关键字：去重，交并差运算。但是一定是无序的。如果要求有序的话，那就 <a href=\"./09-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset.md\">下一篇文章  zset</a> ~</li>\n<li><code>set</code>  的  <code>15</code>  个命令，务必熟记！！！</li>\n<li><code>set</code>  的内部编码方式。哈希表编码和 <code>intset</code>  编码。后面会有 关于  <code>intset</code>  数据结构的详细介绍的文章～</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/",
            "title": "Redis数据结构之 Hash",
            "date_published": "2021-08-01T07:18:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>前一篇文章，我们学习的是 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/\">Redis 的数据结构 list</a>， 学习了其基本的操作和使用内部数据结构是 <code>quicklist</code>  和 <code>ziplist</code> ，这两种数据结构虽然起得名字是 <code>list</code> ，但是其内部结构却是链表。如果不记得了其内部构成，就再看看看着<a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/\">上篇文章</a>吧。现在我们继续学习下一个数据类型  <code>hash</code></p>\n<h2 id=\"hash简介\"><a class=\"markdownIt-Anchor\" href=\"#hash简介\">#</a>  <code>hash</code>  简介</h2>\n<p><code>hash</code>  是一个键值对集合。是  <code>string</code>  类型的  <code>key</code>  和  <code>value</code>  的映射表，hash 特别适合用于存储对象，每个 <code>hash</code>  类型可以存储  <code>2^32-1</code>  个键值对。</p>\n<p><code>hash</code>  实际上就是一个 哈希表。类似于  <code>Java</code>  里的 <code>HashTable</code> 。</p>\n<p>但是  <code>Redis</code>  的哈希是有两种数据结构 (内部编码) 来表示的。</p>\n<ul>\n<li>\n<p>一种是  <code>ziplist</code>  , 上篇文章中我们简单的介绍了 <code>ziplist</code>  的内部构成，见 <a href=\"./06-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist.md\">Redis 的数据结构 list</a>, 以及 <code>ziplist</code>  的编码方式，可以看这篇文章 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/C-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bziplist/\">10-Redis 的数据结构之 ziplist.md</a>. 那么  <code>Redis</code>  什么时候会使用 <code>ziplist</code>  这种编码方式呢？</p>\n<ul>\n<li>当  <code>hash</code>  类型的元素的个数小于  <code>hash-max-ziplist-enties</code>  配置，默认 <code>512</code> .</li>\n<li>所有的值都小于 <code>hash-max-ziplist-value</code>  的值，默认是 <code>64</code>  个字节的时候。<br>\n当同时满足以上两个条件的时候， 就会使用  <code>ziplist</code>  这种结构。</li>\n</ul>\n</li>\n</ul>\n<p>这种方式最大的优点就是节约空间。</p>\n<ul>\n<li>另一种就是使用  <code>hashtable</code>  来编码了。当不满足上面提及的两个条件时，就会使用  <code>hashtable</code>  来编码。实际上是  <code>dict</code>  这种数据结构。这里我们又可以学习到一个新的数据结构  <code>dict</code></li>\n</ul>\n<h2 id=\"hash的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#hash的应用场景\">#</a> hash 的应用场景</h2>\n<ul>\n<li>缓存对象信息：对象的每个属性对应着 <code>hash</code>  的一个键值对。改变的时候，只需要改变对应的某个 <code>filed-value</code>  即可。</li>\n<li>缓存购物车的信息：用户的 <code>id</code>  为 <code>key</code> ， 商品的 <code>id</code>  为  <code>field</code> . 商品的数量为 <code>value</code> 。 比如:  <code>hset userId productId productCount</code></li>\n</ul>\n<h2 id=\"hash的基本命令\"><a class=\"markdownIt-Anchor\" href=\"#hash的基本命令\">#</a>  <code>hash</code>  的基本命令</h2>\n<h3 id=\"hset\"><a class=\"markdownIt-Anchor\" href=\"#hset\">#</a>  <code>hset</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>hset key field value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将哈希表  <code>hash</code>  中域  <code>field</code>  的值设置为  <code>value</code>  。</p>\n<p>如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行  <code>HSET</code>  操作。</p>\n<p>如果域  <code>field</code>  已经存在于哈希表中， 那么它的旧值将被新值  <code>value</code>  覆盖。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置一个hash结构</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k38 f1 v38</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 获取一个字段</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGET k38 f1</span><br><span class=\"line\"><span class=\"string\">&quot;v38&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置一个已经存在的值, 注意返回的值。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k38 f1 v38v38</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET k38 f1</span><br><span class=\"line\"><span class=\"string\">&quot;v38v38&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hsetnx\"><a class=\"markdownIt-Anchor\" href=\"#hsetnx\">#</a>  <code>hsetnx</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HSETNX key field value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>当且仅当域  <code>field</code>  尚未存在于哈希表的情况下， 将它的值设置为  <code>value</code>  。</p>\n<p>如果给定域已经存在于哈希表当中， 那么命令将放弃执行设置操作。</p>\n<p>如果哈希表  <code>hash</code>  不存在， 那么一个新的哈希表将被创建并执行  <code>HSETNX</code>  命令。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置一个不存在的 key</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSETNX k39 f1 v39</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET k39 f1</span><br><span class=\"line\"><span class=\"string\">&quot;v39&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 再次设置</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSETNX k39 f1 v39v39</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET k39 f1</span><br><span class=\"line\"><span class=\"string\">&quot;v39&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hget\"><a class=\"markdownIt-Anchor\" href=\"#hget\">#</a>  <code>hget</code></h3>\n<p>这个命令上面已经用到了。这里就不浪费时间了。</p>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HGET key field</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>获取对应的  <code>key</code>  下的域  <code>field</code>  的值。不存在的时候，返回  <code>nil</code></p>\n<h3 id=\"hgetall\"><a class=\"markdownIt-Anchor\" href=\"#hgetall\">#</a>  <code>hgetall</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HGETALL key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回哈希表  <code>key</code>  中，所有的域和值。</p>\n<p>在返回值里，紧跟每个域名 ( <code>field name</code> ) 之后是域的值 ( <code>value</code> )，所以返回值的长度是哈希表大小的两倍。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HGETALL k39 </span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v39&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hset k39 f2 v39_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL k39 </span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v39&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v39_2&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hexists\"><a class=\"markdownIt-Anchor\" href=\"#hexists\">#</a>  <code>hexists</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code> HEXISTS key field</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>检查给定域  <code>field</code>  是否存在于哈希表  <code>hash</code>  当中。</p>\n<p>存在返回 <code>1</code> , 不存在返回 <code>0</code> 。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HEXISTS k40 f1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k40 f1 v40</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS k40 f1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"del\"><a class=\"markdownIt-Anchor\" href=\"#del\">#</a>  <code>del</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HDEL key field [field ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HSET k41 f1 v41_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k41 f2 v41_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k41 f3 v41_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL k41</span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v41_1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v41_2&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;f3&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;v41_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HDEL k41 f1 f3 f4 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL k41</span><br><span class=\"line\">1) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v41_2&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hlen\"><a class=\"markdownIt-Anchor\" href=\"#hlen\">#</a>  <code>hlen</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HLEN key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回哈希表  <code>key</code>  中域的数量。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HSET k42 f1 v42_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k42 f2 v42_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k42 f3 v42_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen k42</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"hstrlen\"><a class=\"markdownIt-Anchor\" href=\"#hstrlen\">#</a>  <code>hstrlen</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HSTRLEN key field</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回哈希表  <code>key</code>  中， 与给定域  <code>field</code>  相关联的值的字符串长度（ <code>string length</code> ）。</p>\n<p>如果给定的键或者域不存在， 那么命令返回  <code>0</code>  。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HSET k43 f1 <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HSTRLEN k43 f1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; HSTRLEN k43 f2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"hincrby\"><a class=\"markdownIt-Anchor\" href=\"#hincrby\">#</a> hincrby</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HINCRBY key field increment</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>为哈希表  <code>key</code>  中的域  <code>field</code>  的值加上增量  <code>increment</code>  。</p>\n<p>增量也可以为负数，相当于对给定域进行减法操作。</p>\n<p>如果  <code>key</code>  不存在，一个新的哈希表被创建并执行  <code>HINCRBY</code>  命令。</p>\n<p>如果域  <code>field</code>  不存在，那么在执行命令前，域的值被初始化为  <code>0</code>  。</p>\n<p>对一个储存字符串值的域  <code>field</code>  执行  <code>HINCRBY</code>  命令将造成一个错误。</p>\n<p>本操作的值被限制在  <code>64</code>  位 ( <code>bit</code> ) 有符号数字表示之内。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不存在的key与域 field</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY k45 f1 100</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY k45 f1 -200</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -100</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY k45 f1 200</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100</span><br><span class=\"line\"><span class=\"comment\"># 错误的类型</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k45 f2 v45</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY k45 f2 100</span><br><span class=\"line\">(error) ERR <span class=\"built_in\">hash</span> value is not an <span class=\"built_in\">integer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hincrbyfloat\"><a class=\"markdownIt-Anchor\" href=\"#hincrbyfloat\">#</a>  <code>hincrbyfloat</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HINCRBYFLOAT  key field increment</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>为哈希表  <code>key</code>  中的域  <code>field</code>  加上浮点数增量  <code>increment</code>  。</p>\n<p>如果哈希表中没有域  <code>field</code>  ，那么  <code>HINCRBYFLOAT</code>  会先将域  <code>field</code>  的值设为  <code>0</code>  ，然后再执行加法操作。</p>\n<p>如果键  <code>key</code>  不存在，那么  <code>HINCRBYFLOAT</code>  会先创建一个哈希表，再创建域  <code>field</code>  ，最后再执行加法操作。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HINCRBYFLOAT  k46 f1 100.5</span><br><span class=\"line\"><span class=\"string\">&quot;100.5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBYFLOAT  k46 f1 100.5</span><br><span class=\"line\"><span class=\"string\">&quot;201&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBYFLOAT  k46 f1 -100.5</span><br><span class=\"line\"><span class=\"string\">&quot;100.5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET k46 f2 v46_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"hmset\"><a class=\"markdownIt-Anchor\" href=\"#hmset\">#</a>  <code>hmset</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HMSET key field value [field value ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>同时将多个  <code>field-value</code>  (域 - 值) 对设置到哈希表  <code>key</code>  中。</p>\n<p>此命令会覆盖哈希表中已存在的域。</p>\n<p>如果  <code>key</code>  不存在，一个空哈希表被创建并执行  <code>HMSET</code>  操作。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET k47  f1 v47_1 f2 v47_2 f3 v47_3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL k47</span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v47_1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v47_2&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;f3&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;v47_3&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hmget\"><a class=\"markdownIt-Anchor\" href=\"#hmget\">#</a>  <code>hmget</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HMGET key field [field ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回哈希表  <code>key</code>  中，一个或多个给定域的值。</p>\n<p>如果给定的域不存在于哈希表，那么返回一个  <code>nil</code>  值。</p>\n<p>因为不存在的  <code>key</code>  被当作一个空哈希表来处理，所以对一个不存在的  <code>key</code>  进行  <code>HMGET</code>  操作将返回一个只带有  <code>nil</code>  值的表。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET k48 f1 v1 f2 v2 f3 v3 f4 v4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget k48 f1 f3 f4</span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v4&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n<h3 id=\"hkeys\"><a class=\"markdownIt-Anchor\" href=\"#hkeys\">#</a>  <code>hkeys</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HKEYS key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回哈希表  <code>key</code>  中的所有域。</p>\n<p>当  <code>key</code>  不存在时，返回一个空表。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET k49 f1 v1 f2 v2 f3 v3 f4 v4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HKEYS k49</span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;f4&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hvals\"><a class=\"markdownIt-Anchor\" href=\"#hvals\">#</a>  <code>hvals</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HVALS key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回  <code>key</code>  对应的所有的 <code>value</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET k50 f1 v1 f2 v2 f3 v3 f4 v4 </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HVALS k50</span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v4&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hscan\"><a class=\"markdownIt-Anchor\" href=\"#hscan\">#</a>  <code>hscan</code></h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>这是一个查询命令。 同 SCAN 命令。可以参考这篇文章 <a href=\"./010-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4.md\">010 - 其他命令</a></p>\n<p><code>SCAN</code>  命令是一个基于游标的迭代器（ <code>cursor based iterator</code> ）：  <code>SCAN</code>  命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为  <code>SCAN</code>  命令的游标参数， 以此来延续之前的迭代过程。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET k51  f1 v1 f2 v2 f3 v3 f4 v4 f5 v5 f6 v6 f7 v7 f8 v8</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hscan k51 0 </span><br><span class=\"line\">1) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">2)  1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">    2) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">    3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">    4) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">    5) <span class=\"string\">&quot;f3&quot;</span></span><br><span class=\"line\">    6) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">    7) <span class=\"string\">&quot;f4&quot;</span></span><br><span class=\"line\">    8) <span class=\"string\">&quot;v4&quot;</span></span><br><span class=\"line\">    9) <span class=\"string\">&quot;f5&quot;</span></span><br><span class=\"line\">   10) <span class=\"string\">&quot;v5&quot;</span></span><br><span class=\"line\">   11) <span class=\"string\">&quot;f6&quot;</span></span><br><span class=\"line\">   12) <span class=\"string\">&quot;v6&quot;</span></span><br><span class=\"line\">   13) <span class=\"string\">&quot;f7&quot;</span></span><br><span class=\"line\">   14) <span class=\"string\">&quot;v7&quot;</span></span><br><span class=\"line\">   15) <span class=\"string\">&quot;f8&quot;</span></span><br><span class=\"line\">   16) <span class=\"string\">&quot;v8&quot;</span></span><br></pre></td></tr></table></figure>\n<p>以上，就是  <code>Redis</code>  中 <code>hash</code>  类型相关的 <code>15</code>  个命令了。务必熟记～</p>\n<h2 id=\"hash的内部结构\"><a class=\"markdownIt-Anchor\" href=\"#hash的内部结构\">#</a>  <code>hash</code>  的内部结构</h2>\n<p>在  <code>hash</code>  类型简介的时候，我们就说过  <code>hash</code>  是用两种数据结构来编码的。</p>\n<ul>\n<li>\n<p><code>ziplist</code></p>\n</li>\n<li>\n<p><code>hashtable</code> ( <code>dict</code> )</p>\n</li>\n</ul>\n<p><code>ziplist</code>  之前已经分享过了。具体参考之前的文章吧。 <a href=\"./06-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist.md\">链接</a></p>\n<p>这里我们就简单的来看下  <code>hashtable</code> .</p>\n<p>我们直接搜索  <code>hash</code>  , 可以发现  <code>t_hash.c</code>  这个文件，引入了  <code>server.h</code>  . 大体看了一下，都是函数的实现。那我们看下  <code>server.h</code>  ，应该存在对  <code>hastable</code>  的定义吧。然而，并没有。</p>\n<p>那我们来看下 <code>t_hash.c</code>  中添加方法的实现吧.  <code>int hashTypeSet(robj *o, sds field, sds value, int flags)</code></p>\n<p>源码太长了，这里就不粘了， 可以看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvcmVkaXMvYmxvYi9yZWRpczUuMF9jaGluZXNlX3RyYW5zbGF0ZS9zcmMvdF9oYXNoLmM=\">源码</span></p>\n<p>通过查看源码可以得出:</p>\n<ul>\n<li><code>hash</code>  类型的默认编码是  <code>OBJ_ZIPLIST</code> . 即默认是使用  <code>ziplist</code>  这种数据结构进行编码存储的。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">robj *<span class=\"title\">createHashObject</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *zl = <span class=\"built_in\">ziplistNew</span>();</span><br><span class=\"line\">    robj *o = <span class=\"built_in\">createObject</span>(OBJ_HASH, zl);</span><br><span class=\"line\">    o-&gt;encoding = OBJ_ENCODING_ZIPLIST;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当 <code>hash</code>  元素的个数大于  <code>hash_max_ziplist_entries</code>  时会，转换成  <code>hashTable</code> ( <code>OBJ_ENCODING_HT</code> ),</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"built_in\">hashTypeLength</span>(o) &gt; server.hash_max_ziplist_entries)</span><br><span class=\"line\">            <span class=\"built_in\">hashTypeConvert</span>(o, OBJ_ENCODING_HT);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>但是在  <code>redis 5.0.7</code>  中暂时不支持这种方式，还没有实现。(<b>没有实现从 <code>ziplist</code>  编码转化成 <code>hash</code>  编码。</b>)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hashTypeConvert</span><span class=\"params\">(robj *o, <span class=\"keyword\">int</span> enc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;encoding == OBJ_ENCODING_ZIPLIST) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">hashTypeConvertZiplist</span>(o, enc);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">/// 这里！！！</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (o-&gt;encoding == OBJ_ENCODING_HT) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverPanic</span>(<span class=\"string\">&quot;Not implemented&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverPanic</span>(<span class=\"string\">&quot;Unknown hash encoding&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当创建的 <code>hash</code>  类型是  <code>hashtable</code>  编码 ( <code>OBJ_ENCODING_HT</code> ) 时，是使用 <code>dict</code>  这种类型存储的.</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// dict类型</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *privdata;</span><br><span class=\"line\">    <span class=\"comment\">/// 2个哈希表来实现</span></span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> rehashidx; <span class=\"comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> iterators; <span class=\"comment\">/* number of iterators currently running */</span></span><br><span class=\"line\">&#125; dict;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 哈希表实现</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\">    dictEntry **table; <span class=\"comment\">/// 哈希表节点指针数据(java源码中的桶的概念)</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size; <span class=\"comment\">/// 指针数组的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask; <span class=\"comment\">/// 指针数据的长度掩码,用于计算索引值</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used; <span class=\"comment\">/// 哈希表现有的节点数量</span></span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///哈希表的节点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 键</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"comment\">/// 值</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\">    <span class=\"comment\">/// 下一个节点: dictht 是使用链地址法来处理hash冲突。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p>整个  <code>dict</code>  结构就可以这么表示:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/Redis-01-dict%E7%BB%93%E6%9E%84%E5%AD%98%E5%82%A8.png\" alt=\"Redis-01-dict结构存储\"></p>\n<p>到这里，我们就知道了  <code>hash</code>  这种类型，是如何存储的了。 如果你还想了解<br>\n <code>dict</code>  是如何  <code>rehash</code> , 扩容，缩容。以及  <code>dict api</code>  相关实现的话，移驾这篇文章吧。 <a href=\"./Redis%E4%B8%AD%E7%9A%84dict%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md\">起驾～</a></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><code>hash</code>  结构，是一种哈希表结构。通过两种数据结构 <code>ziplist</code>  和  <code>hashtable</code> ( <code>dict</code> ) 实现。</li>\n<li>要熟练掌握的  <code>hash</code>  相关的 <code>15</code>  个命令。</li>\n<li><code>hashtable</code>  的编码格式，实际上就是使用的  <code>dict</code>  这种编码方式。我们简单的学习了 <code>Redis</code>  中 <code>dict</code>  结构的实现。还有一篇专门的文章，来介绍  <code>dict</code>  的详细内容。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/",
            "title": "Redis数据结构之 List",
            "date_published": "2021-08-01T07:08:55.000Z",
            "content_html": "<h2 id=\"书接上回\"><a class=\"markdownIt-Anchor\" href=\"#书接上回\">#</a> 书接上回</h2>\n<p>上一篇文章 <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BString/\">Redis 的数据结构 string</a> 我们一起学习了这种类型的常用命令，并且还学习了  <code>Redis</code>  中的字符串的结构表示以及好处，这里我们接着学习另外一种数据结构  <code>list</code> 。</p>\n<h2 id=\"list-简介\"><a class=\"markdownIt-Anchor\" href=\"#list-简介\">#</a>  <code>list</code>  简介</h2>\n<p><code>list</code> , 一般都会称为列表。在 <code>Redis</code>  中，这种数据结构是一种比较灵活的结构，由于其元素的是有序的，所以可以充当栈和队列这两种数据结构。实际在开发总也有很多应用场景。</p>\n<p>一个 <code>List</code>  最多可以包含  <code>2^32-1</code>  个元素。</p>\n<p>很多人都会以为 <code>list</code>  是用数组来实现的，非也，非也。它内部是 <code>quicklist</code>  这种数据结构。想要先睹为快的，那么坐<a href=\"##%60list%60%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84%E4%B9%8B%60quicklist%60\">电梯直达</a>吧。</p>\n<h2 id=\"list的相关命令\"><a class=\"markdownIt-Anchor\" href=\"#list的相关命令\">#</a>  <code>list</code>  的相关命令</h2>\n<h3 id=\"lpush命令\"><a class=\"markdownIt-Anchor\" href=\"#lpush命令\">#</a>  <code>LPUSH</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LPUSH key value [value …]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>lpush</code>  :  <code>left push</code> 。</p>\n<p>将一个或者多个值插入到列表 <code>key</code>  的表头，返回列表的长度。元素可以是重复的。</p>\n<p>如果 <code>key</code>  不存在，那么会先穿件一个列表，然后再执行 <code>push</code>  操作.</p>\n<p>如果 <code>key</code>  值存在，但是 <code>value</code>  类型不是列表类型时，会返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置一个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH k22 v22</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询指定区间内的数据,使用lrange命令</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k22 0 10</span><br><span class=\"line\">1) &quot;v22&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 一次插入多个值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH k22 v22_1 v22_2 v22_3 v22_4</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k22 0 10</span><br><span class=\"line\">1) &quot;v22_4&quot;</span><br><span class=\"line\">2) &quot;v22_3&quot;</span><br><span class=\"line\">3) &quot;v22_2&quot;</span><br><span class=\"line\">4) &quot;v22_1&quot;</span><br><span class=\"line\">5) &quot;v22&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lpushx-命令\"><a class=\"markdownIt-Anchor\" href=\"#lpushx-命令\">#</a>  <code>lpushx</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LPUSHX key value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>仅当  <code>key</code>  存在的时候，才将  <code>value</code>  插入列表的表头。返回列表中元素的个数。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当key值不存在的时候，不会放入列表中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSHX k23 v23</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\"># 再次尝试放入，也不可以。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSHX k23 v23</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\"># 先往数组放入一个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k23 v23</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 再次尝试使用lpushx放入数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSHX k23 v23_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\"># 再次尝试使用lpushx放入数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSHX k23 v23_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\"># 查看列表 k23 中的数据。注意：和插入的顺序是相反的。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lrange k23 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v23_2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v23_1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v23&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"rpush-命令\"><a class=\"markdownIt-Anchor\" href=\"#rpush-命令\">#</a>  <code>rpush</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>RPUSH key value [value ...]</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>rpush</code>  就是 <code>right push</code> 。将一个或多个值  <code>value</code>  插入到列表  <code>key</code>  的表尾 (最右边)。返回列表的长度。</p>\n<p>如果  <code>key</code>  不存在的时候，会创建一个空列表，然后在执行  <code>rpush</code>  操作。</p>\n<p>如果  <code>key</code>  存在，但是不是一个列表类型时，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 往列表中加入数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; RPUSH k24 v24</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; RPUSH k24 v24_1 v25_2 v25_3</span><br><span class=\"line\">(integer) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k24 0 -1</span><br><span class=\"line\">1) &quot;v24&quot;</span><br><span class=\"line\">2) &quot;v24_1&quot;</span><br><span class=\"line\">3) &quot;v25_2&quot;</span><br><span class=\"line\">4) &quot;v25_3&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 演示 key 存在，但是不是一个列表类型</span></span><br><span class=\"line\">127.0.0.1:6379&gt; set k24_1 v24_1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush k24_1 v24_1</span><br><span class=\"line\">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpushx-命令\"><a class=\"markdownIt-Anchor\" href=\"#rpushx-命令\">#</a>  <code>rpushx</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>rpushx key value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>与  <code>lpushx</code>  类似，如果 <code>key</code>  不存在时，什么都不会操作。如果 <code>key</code>  存在，才会将元素添加到表尾。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> key不存在的时候，不会插入数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpushx k25 v25</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先设置一个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush k25 v25_1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; rpushx k25 v25_2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; rpushx k25 v25_3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看列表中的数据。注意和插入的顺序是一致的。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k25 0 -1</span><br><span class=\"line\">1) &quot;v25_1&quot;</span><br><span class=\"line\">2) &quot;v25_2&quot;</span><br><span class=\"line\">3) &quot;v25_3&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lpop-命令\"><a class=\"markdownIt-Anchor\" href=\"#lpop-命令\">#</a>  <code>lpop</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LPOP key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>left pop</code> ;</p>\n<p>移除并返回列表的头元素。当 <code>key</code>  不存在的时候，返回 <code>nil</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> key不存在的时候，返回nil</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP k26</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置一个列表，有三个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k26 v26_1 v26_2 v26_3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看列表中的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k26 0 -1</span><br><span class=\"line\">1) &quot;v26_3&quot;</span><br><span class=\"line\">2) &quot;v26_2&quot;</span><br><span class=\"line\">3) &quot;v26_1&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 依次pop出元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpop k26</span><br><span class=\"line\">&quot;v26_3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop k26</span><br><span class=\"line\">&quot;v26_2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop k26</span><br><span class=\"line\">&quot;v26_1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop k26</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tip：  <code>lpush</code>  +  <code>lpop</code>  =&gt; 栈， <code>rpush</code>  +  <code>lpop</code>  =&gt; 队列。</p>\n</blockquote>\n<h3 id=\"rpop-命令\"><a class=\"markdownIt-Anchor\" href=\"#rpop-命令\">#</a>  <code>rpop</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>rpop key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>rpop</code>  ：  <code>right pop</code> ;</p>\n<p>和 lpop 相反。移除并返回列表的尾元素。如果 key 不存在返回 nil。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># key 不存在，返回nil</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop k27</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 先设置一个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k27 v27_1 v27_2 v27_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k27 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v27_3&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v27_2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v27_1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 一次pop每个值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop k27</span><br><span class=\"line\"><span class=\"string\">&quot;v27_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop k27</span><br><span class=\"line\"><span class=\"string\">&quot;v27_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop k27</span><br><span class=\"line\"><span class=\"string\">&quot;v27_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop k27</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tip:  <code>lpush</code>  +  <code>rpop</code>  =&gt; 队列， <code>rpush</code>  +  <code>rpop</code>  =&gt; 栈。</p>\n</blockquote>\n<h3 id=\"lrange-命令\"><a class=\"markdownIt-Anchor\" href=\"#lrange-命令\">#</a>  <code>lrange</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LRANGE key start stop</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>获取指定区间内的元素。0 表示第一个元素。如果超过了实际范围就返回空数组。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LRANGE k22 0 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;v22_4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v22_3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v22_2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v22_1&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;v22&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k22 0 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v22_4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v22_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k22 10 100</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpoplpush-命令\"><a class=\"markdownIt-Anchor\" href=\"#rpoplpush-命令\">#</a>  <code>rpoplpush</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>RPOPLPUSH source destination</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将  <code>source</code>  的尾元素插入到 <code>destination</code>  列表的头元素中，返回该元素。 注意，这是一个原子操作。</p>\n<p>比如:  <code>source</code> :  <code>a,b,c</code></p>\n<p><code>distination</code> :  <code>1,2,3</code></p>\n<p>使用  <code>RPOPLPUSH source distination</code>  , 则：</p>\n<p><code>source</code> :  <code>a,b</code></p>\n<p><code>distination</code> :  <code>c,1,2,3</code></p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置列表1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k28_1 v28_c v28_b v28_a</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\"># 设置列表2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k28_2 v28_3 v28_2 v28_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\"># 使用 rpoppush命令</span></span><br><span class=\"line\">127.0.0.1:6379&gt; RPOPLPUSH k28_1 k28_2</span><br><span class=\"line\"><span class=\"string\">&quot;v28_c&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看列表1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k28_1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v28_a&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v28_b&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看列表2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k28_2 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v28_c&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v28_1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v28_2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v28_3&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"lrem-命令\"><a class=\"markdownIt-Anchor\" href=\"#lrem-命令\">#</a>  <code>lrem</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LREM key count value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>至多移除列表中  <code>count</code>  个与参数  <code>value</code>  相等的元素。</p>\n<p>有以下情況:</p>\n<p><code>count &gt; 0</code>  : 从表头开始向表尾搜索，移除与  <code>value</code>  相等的元素，最多移除 <code>count</code>  个 。</p>\n<p><code>count &lt; 0</code>  : 从表尾开始向表头搜索，移除与  <code>value</code>  相等的元素，最多移除 <code>|count|</code>  个。</p>\n<p><code>count = 0</code>  : 移除表中所有与  <code>value</code>  相等的值。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 演示 count&gt;0 时</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置一个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k29_1 v29_1  v29  v29_2 v29 v29_3 v29</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从表头开始，移除2个 v29</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem k29_1 2 v29</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k29_1 0 -1</span><br><span class=\"line\">1) &quot;v29_3&quot;</span><br><span class=\"line\">2) &quot;v29_2&quot;</span><br><span class=\"line\">3) &quot;v29&quot;</span><br><span class=\"line\">4) &quot;v29_1&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 演示count&lt;0 时</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k29_2 v29_1 v29  v29_2 v29 v29_3 v29</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem k29_2 -2 v29</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k29_2 0 -1</span><br><span class=\"line\">1) &quot;v29&quot;</span><br><span class=\"line\">2) &quot;v29_3&quot;</span><br><span class=\"line\">3) &quot;v29_2&quot;</span><br><span class=\"line\">4) &quot;v29_1&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 演示count=0时</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k29_3 v29_1 v29  v29_2 v29 v29_3 v29</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem k29_3 0 v29</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE k29_3 0 -1</span><br><span class=\"line\">1) &quot;v29_3&quot;</span><br><span class=\"line\">2) &quot;v29_2&quot;</span><br><span class=\"line\">3) &quot;v29_1&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"llen-命令\"><a class=\"markdownIt-Anchor\" href=\"#llen-命令\">#</a>  <code>llen</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>LLEN key</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>获取列表的长度。</p>\n<p>如果  <code>key</code>  不存在的时候，返回 <code>0</code> .</p>\n<p>如果  <code>key</code>  对应类型不是  <code>list</code>  ，则返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; llen k30</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k30 v30_1 v30_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; llen k30</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删掉k30，演示，类型不是list的时候，报错</span></span><br><span class=\"line\">127.0.0.1:6379&gt; del k30</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k30 v30</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; llen k30</span><br><span class=\"line\">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n<h3 id=\"lindex-命令\"><a class=\"markdownIt-Anchor\" href=\"#lindex-命令\">#</a>  <code>lindex</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>lindex key index</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>返回列表中，下标为  <code>index</code>  的元素.  <code>-1</code>  表示列表的最后一个元素，如果 <code>key</code>  不存在，或者 <code>index</code>  超出范围，返回 <code>nil</code> ， 如果 key 不是一个列表类型，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush k31 v31_3 v31_2 v31_1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LINDEX k31 2</span><br><span class=\"line\">&quot;v31_3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; LINDEX k31 1</span><br><span class=\"line\">&quot;v31_2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; LINDEX k31 0</span><br><span class=\"line\">&quot;v31_1&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"linsert-命令\"><a class=\"markdownIt-Anchor\" href=\"#linsert-命令\">#</a>  <code>linsert</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>linsert key BEFORE|AFTER pivot value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将 <code>value</code>  插入到 <code>key</code>  队列 <code>pivot</code>  值之前或者之后。返回插入完成之后列表的长度。</p>\n<p>如果  <code>pivot</code>  不存在 或者  <code>key</code>  不存在，不执行任何操作。</p>\n<p>如果  <code>key</code>  对应的不是一个列表类型，返回一个错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; linsert k32 BEFORE k31_1 k31_0</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k32 v32_1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> k32_3 =&gt; pivot不存在</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert k32 BEFORE v32_3 v31_2</span><br><span class=\"line\">(integer) -1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pivot之前插入</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert k32 BEFORE v32_1 v31_0</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pivot之后插入</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert k32 AFTER v32_1 v31_2</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"lset-命令\"><a class=\"markdownIt-Anchor\" href=\"#lset-命令\">#</a> lset 命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>lset key index value</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>将列表中的 索引为 <code>index</code>  的值设置为 <code>value</code> 。 如果 <code>index</code>  超出范围，则返回一个错误</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush k33 v33_3 v33_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k33 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v33_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v33_3&quot;</span></span><br><span class=\"line\"><span class=\"comment\">## 将第二个值，索引为1，设置为v33_2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset k33 1 v33_2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k33 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v33_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v33_2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 超出范围返回错误</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset k33 2 v33_2</span><br><span class=\"line\">(error) ERR index out of range</span><br></pre></td></tr></table></figure>\n<h3 id=\"ltrim-命令\"><a class=\"markdownIt-Anchor\" href=\"#ltrim-命令\">#</a>  <code>ltrim</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>ltrim key start stop</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p>保留列表从 <code>start</code>  到 <code>stop</code>  之间的元素。其他元素都将被删除。 注意：包含 (不删除) <code>start</code>  和 <code>stop</code>  两个元素.</p>\n<p>如果 <code>key</code>  不存在，直接返回 <code>OK</code> , 如果 <code>key</code>  对应的不是列表，直接返回错误。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush k34 v34_1 v34_2 v34_3 v34_4 v34_5 v34_6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim k34 1 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k34  0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v34_5&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v34_4&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v34_3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;v34_2&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"blpop-命令\"><a class=\"markdownIt-Anchor\" href=\"#blpop-命令\">#</a> blpop 命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>BLPOP key [key ...] timeout</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>lpop</code>  的 阻塞版本。  <code>block left pop</code></p>\n<p>当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止。<br>\n当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># push到三组列表，分别三个元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k35 v35_1 v35_2 v35_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k35 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v35_3&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v35_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k35_1 v35_1 v35_2 v35_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k35_2 v35_1 v35_2 v35_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 阻塞调用lpop, 从左到右 依次pop元素，直到有一个元素可以pop。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k35_2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v35_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; blpop k35 k35_1 k35_2 10</span><br><span class=\"line\"><span class=\"comment\"># 没有元素的时候会阻塞一直到超时。</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">(10.59s)</span><br></pre></td></tr></table></figure>\n<h3 id=\"brpop-命令\"><a class=\"markdownIt-Anchor\" href=\"#brpop-命令\">#</a>  <code>brpop</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>BRPOP key [key ...] timeout</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>rpop</code>  的阻塞版本。  <code>block right pop</code> <br>\n 当给定多个 <code>key</code>  的时候，按照 <code>key</code>  的先后顺序依次检查各个列表。直到弹出一个元素或者超时。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置两个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k36 v36_1 v36_2 v36_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k36_1 v36_1 v36_2 v36_3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\"># 阻塞式的pop出每个值。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\">1) <span class=\"string\">&quot;k36_1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v36_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP k36 k36_1 10</span><br><span class=\"line\"><span class=\"comment\"># 阻塞10s</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">(10.61s)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tips:  <code>lpush</code>  +  <code>brpop</code>  =&gt; 阻塞队列。</p>\n</blockquote>\n<h3 id=\"brpoplpush-命令\"><a class=\"markdownIt-Anchor\" href=\"#brpoplpush-命令\">#</a>  <code>brpoplpush</code>  命令</h3>\n<ul>\n<li>语法</li>\n</ul>\n<p><code>BRPOPLPUSH source destination timeout</code></p>\n<ul>\n<li>解释</li>\n</ul>\n<p><code>rpoplpush</code>  的阻塞版本。  <code>block right left push</code> 。</p>\n<p>当列表  <code>source</code>  为空的时候，该命令将阻塞，直到超时，或者 source 中有一个元素可以 pop。</p>\n<ul>\n<li>演示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置一个列表</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k37_source v37_1 v37_2 v37_3 v37_4</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\"># 将source移动到distination中。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOPLPUSH k37_source k37_distination 10</span><br><span class=\"line\"><span class=\"string\">&quot;v37_1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看下distination。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange k37_distination 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v37_1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOPLPUSH k37_source k37_distination 10</span><br><span class=\"line\"><span class=\"string\">&quot;v37_2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOPLPUSH k37_source k37_distination 10</span><br><span class=\"line\"><span class=\"string\">&quot;v37_3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOPLPUSH k37_source k37_distination 10</span><br><span class=\"line\"><span class=\"string\">&quot;v37_4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这时我们启动两个客户端,演示阻塞直到另一个客户端执行source列表中的插入操作。</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端1中继续执行 BRPOPLPUSH, 然后马上在客户端2中，输入&quot;LPUSH k37_source v37_5&quot;.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOPLPUSH k37_source k37_distination 10</span><br><span class=\"line\"><span class=\"string\">&quot;v37_5&quot;</span></span><br><span class=\"line\">(3.02s)</span><br><span class=\"line\"><span class=\"comment\"># 客户端2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH k37_source v37_5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<h2 id=\"list内部结构之quicklist\"><a class=\"markdownIt-Anchor\" href=\"#list内部结构之quicklist\">#</a>  <code>list</code>  内部结构之 <code>quicklist</code></h2>\n<h3 id=\"quicklist\"><a class=\"markdownIt-Anchor\" href=\"#quicklist\">#</a>  <code>quicklist</code></h3>\n<p>我们来看一下 <code>list</code>  的内部实现  <code>quicklist</code>  结构.</p>\n<p>特别注明：  <code>quicklist</code>  是双向的链表结构。</p>\n<p>在 <code>Redis</code>  中使用如下结构体表示.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklist</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 头结点</span></span><br><span class=\"line\">    quicklistNode *head;</span><br><span class=\"line\">    <span class=\"comment\">// 尾结点</span></span><br><span class=\"line\">    quicklistNode *tail;</span><br><span class=\"line\">    <span class=\"comment\">// 列表的元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> count;</span><br><span class=\"line\">    <span class=\"comment\">// 链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    <span class=\"comment\">// 单个节点的填充因子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fill : <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 不进行节点压缩的最大深度</span></span><br><span class=\"line\">    <span class=\"comment\">// 超过这个节点就会进行节点压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> compress : <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125; quicklist;</span><br></pre></td></tr></table></figure>\n<p><code>quicklist</code>  是回一个通用的双向链接快速列表实现。它的每个节点用  <code>quicklistNode</code>  表示。</p>\n<p>一起来看下  <code>qucklistNode</code>  是什么吧。</p>\n<h3 id=\"quicklistnode\"><a class=\"markdownIt-Anchor\" href=\"#quicklistnode\">#</a>  <code>quicklistNode</code></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 前一个节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">// 后一个节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据指针。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果指向的数据没有被压缩,那么会指向zipList结构。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果进行了压缩，那么会指向 quickLZF结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *zl;</span><br><span class=\"line\">    <span class=\"comment\">// 当前节点的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"comment\">// 元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count : <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 编码方式，1=RAW，2=LZF</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 表示未被压缩</span></span><br><span class=\"line\">    <span class=\"comment\">// 2 表示使用LZF结构进行的压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> encoding : <span class=\"number\">2</span>;   </span><br><span class=\"line\">    <span class=\"comment\">// 使用的容器是什么？1=NONE,2=ZIPLIST</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> container : <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 前一个节点是否被压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> recompress : <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"comment\">// 是否压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> attempted_compress : <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"comment\">// 暂时留出来，以后使用。</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> extra : <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125; quicklistNode;</span><br></pre></td></tr></table></figure>\n<p><code>quicklistNode</code>  是一个 <code>32byte</code>  的结构体，用于描述一个 <code>quicklist</code>  的一个节点。从代码中可看出，使用了位图来节约空间。在上面的代码中我们还提到两种数据结构，对应的是代码中  <code>zl</code>  指针，指向的位置，如果数据被压缩，指向 <code>quicklistLZF</code>  和 没有数据没有被压缩就是指向  <code>ziplist</code> .</p>\n<h3 id=\"ziplist\"><a class=\"markdownIt-Anchor\" href=\"#ziplist\">#</a>  <code>ziplist</code></h3>\n<p><code>ziplist</code>  这种结构比较复杂，而且在源码中也没有给出明确定义。那  <code>ziplist</code>  这么神秘的结构到底是什么样的呢？</p>\n<p>别着急，我们先大体熟悉下 <code>ziplist</code>  这种结构的设计意图。</p>\n<p><code>ziplist</code>  是一个经过特殊编码的双向链表，它的设计意图就是 提高存储效率，  <code>ziplist</code>  可以用于存储字符串或者整数，其中整数是按照真正的二进制进行编码的。 它能以 <code>O(1)</code>  的效率在表的两端进行 <code>pop</code>  和 <code>push</code>  操作。</p>\n<p>我们都知道，普通的链表每项都是一块独立的内存空间，各项之间都是通过指针连接起来的。这种方式，会带来大量的空间碎片，指针引用也会占用部分空间内存。所以 <code>ziplist</code>  是将表中每项放在连续的空间内存中 (类似数组)， <code>ziplist</code>  还对值采取了一个可变长度的存储方式，大的值就用大空间，小的值就用小空间。</p>\n<h4 id=\"ziplist结构的官方定义\"><a class=\"markdownIt-Anchor\" href=\"#ziplist结构的官方定义\">#</a> ziplist 结构的官方定义。</h4>\n<blockquote>\n<p>The general layout of the ziplist is as follows:<br>\n <code>&lt;zlbytes&gt; &lt;zltail&gt; &lt;zllen&gt; &lt;entry&gt; &lt;entry&gt; ... &lt;entry&gt; &lt;zlend&gt;</code> <br>\n <code>&lt;uint32_t zlbytes&gt;</code>  is an unsigned integer to hold the number of bytes that  the ziplist occupies, including the four bytes of the zlbytes field itself.  This value needs to be stored to be able to resize the entire structure  without the need to traverse it first.<br>\n <code>&lt;uint32_t zltail&gt;</code>  is the offset to the last entry in the list. This allows  a pop operation on the far side of the list without the need for full  traversal.<br>\n <code>&lt;uint16_t zllen&gt;</code>  is the number of entries. When there are more than  2^16-2 entries, this value is set to 2^16-1 and we need to traverse the entire list to know how many items it holds.<br>\n <code>&lt;uint8_t zlend&gt;</code>  is a special entry representing the end of the ziplist. Is encoded as a single byte equal to 255. No other normal entry starts with a byte set to the value of 255.</p>\n</blockquote>\n<p>根据上面中解释我们可以得出以下这种模型：</p>\n<p><img data-src=\"./images/ziplist-01-Ziplist%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<p>如果没有特殊指定的话，都是采用小尾数法存储的。</p>\n<ul>\n<li>\n<p><code>zlbytes</code> : 存储一个无符号整数，用于存储 ziplist 的所用的字节数，(包括 zlbytes 字段本身的四个字节)，当重新分配内容的时候，不需要遍历整个列表来计算内存大小。</p>\n</li>\n<li>\n<p><code>zltail</code> : 一个无符号整数，表示 ziplist 中最后一个元素的偏移字节数，这样可以方便的找到最后一个元素，从而可以以 O (1) 的复杂度在尾端进行 pop 和 push。</p>\n</li>\n<li>\n<p><code>zllen：压缩列表包含的结点的个数，即entry的个数。</code> <br>\n这里的 <code>zllen</code>  是占用 <code>16bit</code> , 也就是说最多存储  <code>2^16-2</code>  个。但是 <code>ziplist</code>  超了 <code>2^16-2</code>  个也是可以表示的。那种情况就是 <code>16</code>  个 <code>1</code>  的时候，只需要从头遍历到尾就好了。</p>\n</li>\n<li>\n<p><code>entry</code> : 真正存放数据的数据项，每个数据项都有自己的内部结构。</p>\n</li>\n<li>\n<p><code>zlend</code> :  <code>ziplist</code>  的最后一个字节，值固定等于 <code>255</code> ，就是一个结束标记。</p>\n</li>\n</ul>\n<h4 id=\"entry-结构\"><a class=\"markdownIt-Anchor\" href=\"#entry-结构\">#</a> entry 结构</h4>\n<p><code>entry</code>  是由三部分构成的。</p>\n<ul>\n<li>\n<p><code>previous length（pre_entry_length）</code> ： 表示前一个数据节点占用的总字节数，这个字段的用处是为了让 ziplist 能够从后向前遍历（从后一项的位置，只需向前偏移 <code>previous length</code>  个字节，就找到了前一项）。这个字段采用变长编码。</p>\n</li>\n<li>\n<p><code>encoding</code> （ <code>encoding&amp;cur_entry_length</code> ）：表示当前数据节点 content 的内容类型以及长度。也采用变长编码。</p>\n</li>\n<li>\n<p><code>entry-data</code> ：表示当前节点存储的数据， <code>entry-data</code>  的内容类型有整数类型和字节数组类型，且某些条件下 <code>entry-data</code>  的长度可能为 <code>0</code> 。</p>\n</li>\n</ul>\n<p>所以我们可以得出  <code>ziplist</code>  是一个这样的结构。</p>\n<p><img data-src=\"./images/ziplist-01-entry%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<p>有时，encoding 也可以代表 entry 本身，就像小整数一样。</p>\n<p><img data-src=\"./images/ziplist-01-entry%E7%9A%84%E7%BB%93%E6%9E%842.png\" alt=\"\"></p>\n<p>这里就是大体的了解下 ziplist 这种数据结构。</p>\n<blockquote>\n<p>这里是一篇关于 <a href=\"./10-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bziplist.md\">ziplist</a> 详细解读的文章。</p>\n</blockquote>\n<h3 id=\"quicklistlzf\"><a class=\"markdownIt-Anchor\" href=\"#quicklistlzf\">#</a>  <code>quicklistLZF</code></h3>\n<p>看完了比较神秘的 <code>ziplist</code>  结构，我们来看一个比较简单的 <code>quicklist</code>  的压缩节点的结构  <code>quicklistLZF</code> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * quicklistLZF是一个4 + N字节的 struct。</span></span><br><span class=\"line\"><span class=\"comment\"> * sz 是 compressed 字段的字节长度。&#x27;compressed&#x27; 是长度为 sz的 LZF数据。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 未被压缩的长度保存到 quicklistNode-&gt;sz中。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 当压缩了quicklistNode-&gt;zl时，quicklistNode-&gt;zl指向的是一个 quicklistLZF类型的数据。</span></span><br><span class=\"line\"><span class=\"comment\"> * 未压缩的时候，指向的是ziplist.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistLZF</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///compressed数组长度 </span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sz; </span><br><span class=\"line\">    <span class=\"keyword\">char</span> compressed[];</span><br><span class=\"line\">&#125; quicklistLZF;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><code>list</code>  相关的命令。以及常见的应用场景。比如栈和队列等等。</li>\n<li><code>list</code>  其实是一种链表结构，但是不是一个普通的链表结构。</li>\n<li><code>list</code>  是由  <code>quicklist</code>  这种数据结构实现的。 <code>quicklist</code>  中的每个节点是 <code>quicklistNode</code> , 而 <code>quicklist</code>  中 <code>zl</code>  指针，指向的是 一个 <code>ziplist</code>  或者 <code>quickListLZF</code> 。</li>\n<li><code>ziplist</code>  是一个比较神秘的数据结构，有 <code>5</code>  部分构成，是连续存储的，可以实现 <code>O(1)</code>  的尾端 <code>pop</code>  和 <code>push</code>  操作。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BString/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BString/",
            "title": "Redis数据结构之 String",
            "date_published": "2021-08-01T06:58:55.000Z",
            "content_html": "<p>今天来聊聊  <code>Redis</code>  的 <code>string</code> ，这一数据结构。</p>\n<h3 id=\"string简介\"><a class=\"markdownIt-Anchor\" href=\"#string简介\">#</a>  <code>string</code>  简介</h3>\n<p><code>string</code>  是 <code>Redis</code>  中最基本，也是最简单的数据结构。一个键 ( <code>key</code> ) 对应着一个 <code>string</code>  类型的值 ( <code>value</code> ). 我们都知道 <code>redis</code>  是使用 <code>C</code>  语言来编写的，但是  <code>string</code>  这一个数据结构并非是使用 <code>C</code>  语言的  <code>string(char[])</code>  来实现的，要想先了解，那就做电梯吧 -&gt;( <a href=\"#%60Redis%60%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">电梯直达</a> ).</p>\n<p>现在，先暂且抛开内部实现，我们先看看有怎么使用这一数据结构。</p>\n<h3 id=\"string相关常用命令\"><a class=\"markdownIt-Anchor\" href=\"#string相关常用命令\">#</a>  <code>string</code>  相关常用命令</h3>\n<h4 id=\"set命令\"><a class=\"markdownIt-Anchor\" href=\"#set命令\">#</a>  <code>set</code>  命令</h4>\n<p><code>SET key value [expiration EX seconds|PX milliseconds] [NX|XX]</code></p>\n<p>使用示例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.设置一个键值对 f1=&gt;f1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 根据键查询值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.设置一个键值对(f2=&gt;f2),设置超时时间为10s</span></span><br><span class=\"line\"><span class=\"comment\"># EX 表示秒</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2 EX 10</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 等待10s之后去查询f2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.设置一个键值对(f3=&gt;f3),设置超时时间为 10000毫秒</span></span><br><span class=\"line\"><span class=\"comment\"># PX 表示为毫秒</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3 PX 10000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.设置键值对k4=&gt;v4,验证&quot;存在相同的key就设置失败&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># setnx 命令也可实现,注意返回值。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4 NX</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 如果存在相同的key就设置失败(与下面的注意对比)</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4 NX</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.验证&quot;不存在相同的key就设置失败&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5 XX</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 先设置一个键值对,</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5 </span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 设置不存在相同的key就设置失败</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5 XX</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h4 id=\"setnx命令\"><a class=\"markdownIt-Anchor\" href=\"#setnx命令\">#</a>  <code>setnx</code>  命令</h4>\n<p><code>setnx key value</code></p>\n<p><code>set if not exists</code>  的缩写。如果已存在 key, 返回 0, 不存在返回 1. 常用于分布式锁。</p>\n<p>使用实例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置一个不存在的键值对 k6=&gt;v6</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx k6 v6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 如果key已经存在,则返回0。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx k6 v6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"setex-命令\"><a class=\"markdownIt-Anchor\" href=\"#setex-命令\">#</a>  <code>setEx</code>  命令</h4>\n<p><code>setex key seconds value</code></p>\n<p>给键值对设置生存时间 (秒级别)。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置k7=&gt;v7这个键值对的生存时间为5s</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex k7 5 v7</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k7</span><br><span class=\"line\">&quot;v7&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 过5s秒钟之后,再查看。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k7</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n<h4 id=\"psetex-命令\"><a class=\"markdownIt-Anchor\" href=\"#psetex-命令\">#</a>  <code>psetEx</code>  命令</h4>\n<p><code>psetex key milliseconds value</code></p>\n<blockquote>\n<p><code>tip</code> : 命令助记:  <code>psetex</code>  ,  <code>p</code>  直接的是毫秒。可以参考 <code>set</code>  命令的 <code>PX</code>  选项。</p>\n</blockquote>\n<p>给键值对设置生存时间 (毫秒级别)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置键值对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; psetex k8 5000 v8</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 获取k8的值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k8</span><br><span class=\"line\"><span class=\"string\">&quot;v8&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 5s之后，获取k8的值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k8</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<h4 id=\"get命令\"><a class=\"markdownIt-Anchor\" href=\"#get命令\">#</a>  <code>get</code>  命令</h4>\n<p>这个命令不多说了，获取 <code>key</code>  相关联的 <code>value</code> .  <code>get key</code></p>\n<h4 id=\"getset命令\"><a class=\"markdownIt-Anchor\" href=\"#getset命令\">#</a>  <code>getset</code>  命令</h4>\n<p><code>getset key value</code></p>\n<p>设置键值对， <code>key=&gt;value</code> , 如果 <code>key</code>  已经存在，返回旧值。不存在返回  <code>nil</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置键值对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset k9 v9</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 获取值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k9</span><br><span class=\"line\"><span class=\"string\">&quot;v9&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 在设置一次k9,值为vv9,返回旧值 v9</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset k9 vv9</span><br><span class=\"line\"><span class=\"string\">&quot;v9&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps: 如果原来的存在 key，但是 value 的类型与新设置的类型不一致，会抛出命令错误。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置一个list类型，key为k9_1, Value中只有一个元素v9_1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k9_1 v9_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 使用getset命令载设置一次,抛出命令错误。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset k9_1 vv9_1</span><br><span class=\"line\">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n<h4 id=\"strlen-命令\"><a class=\"markdownIt-Anchor\" href=\"#strlen-命令\">#</a>  <code>strlen</code>  命令</h4>\n<p><code>strlen key</code></p>\n<p>返回字符串的长度。如果 key 不存在的时候，返回 0, 如果 key 对应的不是一个字符串时，返回错误.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k10 v10</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen k10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\"># 演示报错</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush k10_1 v10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen k10_1</span><br><span class=\"line\">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n<h4 id=\"append命令\"><a class=\"markdownIt-Anchor\" href=\"#append命令\">#</a>  <code>APPEND</code>  命令</h4>\n<p><code>APPEND key value</code>  命令</p>\n<p>根据 key，给 key 对应的值追加字符串。如果 key 不存在，就设置一对键值对。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果key不存在则设置键值对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; append k11 v11</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; get k11</span><br><span class=\"line\"><span class=\"string\">&quot;v11&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果存在，则追加</span></span><br><span class=\"line\">127.0.0.1:6379&gt; append k11 v11</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get k11</span><br><span class=\"line\"><span class=\"string\">&quot;v11v11&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"setrange命令\"><a class=\"markdownIt-Anchor\" href=\"#setrange命令\">#</a>  <code>setrange</code>  命令</h4>\n<p><code>setrange key offset value</code></p>\n<p>从偏移量  <code>offset</code>  开始覆写原来 <code>key</code>  的值。如果 <code>key</code>  不存的时候当作空字符串处理。返回被设置后 <code>Value</code>  的长度。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置不存在的key</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setrange k12 3 v12</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\"><span class=\"comment\"># 在offset前的空位置会用 \\x00 填充</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k12</span><br><span class=\"line\"><span class=\"string\">&quot;\\x00\\x00\\x00v12&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置已经存在的key</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setrange k12 4 v12</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get k12</span><br><span class=\"line\"><span class=\"string\">&quot;\\x00\\x00\\x00vv12&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"getrange命令\"><a class=\"markdownIt-Anchor\" href=\"#getrange命令\">#</a>  <code>getrange</code>  命令</h4>\n<p><code>getrange key start end</code></p>\n<p>获取指定区间的值。报错 start 和 end 位置。索引位置是从 0 开始的。</p>\n<p>负数偏移量表示从字符创的末位开始计数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k13 v13v13v13</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; getrange k13 2 5</span><br><span class=\"line\"><span class=\"string\">&quot;3v13&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 从索引为2处，到倒数第4位。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange k13 2 -4</span><br><span class=\"line\"><span class=\"string\">&quot;3v13&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果end大于Value的长度，返回目前start到结束的部分</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange k13 3 10</span><br><span class=\"line\"><span class=\"string\">&quot;v13v13&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 超过Value的长度返回为 &quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange k13 100 120</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"incr-命令\"><a class=\"markdownIt-Anchor\" href=\"#incr-命令\">#</a>  <code>incr</code>  命令</h4>\n<p><code>incr key</code></p>\n<p>在 key 对应的 Value 上进行自增 1. 如果 Value 可以解释为数据，则自增，反之，返回错误。</p>\n<p>返回值为自增后的值。</p>\n<p>如果 ke 不存在，则先初始化 key 对应的 Value=0， 然后再自增。</p>\n<p>相对的是: <a href=\"#%60DECR%60%E5%91%BD%E4%BB%A4\"> <code>DECR</code>  命令</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; incr k14</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get k14</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incr k14</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n<h4 id=\"incrby命令\"><a class=\"markdownIt-Anchor\" href=\"#incrby命令\">#</a>  <code>incrby</code>  命令</h4>\n<p><code>incrby key increment</code></p>\n<p>带有步长的自增命令。</p>\n<p>相对的命令是: <a href=\"%60DECRBY%60%E5%91%BD%E4%BB%A4\"> <code>DECRBY</code>  命令</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; incrby k15 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY k15 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY k15 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br></pre></td></tr></table></figure>\n<h4 id=\"incrbyfloat命令\"><a class=\"markdownIt-Anchor\" href=\"#incrbyfloat命令\">#</a>  <code>INCRBYFLOAT</code>  命令</h4>\n<p><code>INCRBYFLOAT key increment</code></p>\n<p>带有步长的浮点数自增</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; INCRBYFLOAT k16 5.0</span><br><span class=\"line\"><span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBYFLOAT k16 5.2</span><br><span class=\"line\"><span class=\"string\">&quot;10.2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBYFLOAT k16 5.4</span><br><span class=\"line\"><span class=\"string\">&quot;15.6&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"decr命令\"><a class=\"markdownIt-Anchor\" href=\"#decr命令\">#</a>  <code>DECR</code>  命令</h4>\n<p><code>DECR key</code></p>\n<p>自减 <code>1</code> .</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果key，不存在，同样会初始化为0，然后自减1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DECR k17</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; DECR k17</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; DECR k17</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -3</span><br></pre></td></tr></table></figure>\n<h4 id=\"decrby命令\"><a class=\"markdownIt-Anchor\" href=\"#decrby命令\">#</a>  <code>DECRBY</code>  命令</h4>\n<p>带有步长的自减命令，与 <a href=\"%60INCRBY%60%E5%91%BD%E4%BB%A4\"> <code>INCRBY</code>  命令</a>相对。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果key不存在，会初始化为0，在进行自减。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY k18 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -5</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY k18 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -10</span><br></pre></td></tr></table></figure>\n<h4 id=\"mget命令\"><a class=\"markdownIt-Anchor\" href=\"#mget命令\">#</a>  <code>mget</code>  命令</h4>\n<p><code>mget key [key ...]</code></p>\n<p>一次性返回多个 <code>key</code>  的值。 如果 <code>key</code>  不存在，返回  <code>(nil)</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k19_0 v19_0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k19_1 v19_1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget k19_0 k19_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v19_0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v19_1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果key不存在的时候，返回 (nil)</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mget k19_0 k19_1 k10_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;v19_0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v19_1&quot;</span></span><br><span class=\"line\">3) (nil)</span><br></pre></td></tr></table></figure>\n<h4 id=\"mset命令\"><a class=\"markdownIt-Anchor\" href=\"#mset命令\">#</a>  <code>mset</code>  命令</h4>\n<p>同时为设置多个键值对。 如果 key 已经存在，直接覆盖掉。</p>\n<p>注意： 这个原子性操作。所有给定的 key 都会在同一时间内被设置。</p>\n<blockquote>\n<p>tips: 如果希望，已经存在的 key 不被覆盖，可以参考 <a href=\"#%60msetnx%60%E5%91%BD%E4%BB%A4\"> <code>msetnx</code>  命令</a></p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一下设置三对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mset k20_0 v20_0 k20_1 v20_1 k20_2 v20_2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget k20_0 k20_1 k20_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;v20_0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v20_1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v20_2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 演示已有的key对应的值会被覆盖掉。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mset k20_2 vv20_2 k20_3 v20_3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget k20_2 k20_3</span><br><span class=\"line\">1) <span class=\"string\">&quot;vv20_2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v20_3&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"msetnx命令\"><a class=\"markdownIt-Anchor\" href=\"#msetnx命令\">#</a>  <code>msetnx</code>  命令</h4>\n<p><code>MSETNX key value [key value ...]</code></p>\n<p>当且仅当所有给定的 key 不存在的时候，才会设置键值对。即使有一个 key 存在，该命令也不会设置其他的 key 对应的键值对.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 演示设置成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; MSETNX k21_0 v21_0 k21_1 v21_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET k21_0 k21_1</span><br><span class=\"line\">1) <span class=\"string\">&quot;v21_0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v21_1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存在其中的一个给定key，就不能设置成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k21_1 vv21_1 k21_2 v21_2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET k21_1 k21_2</span><br><span class=\"line\">1) <span class=\"string\">&quot;v21_1&quot;</span></span><br><span class=\"line\">2) (nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis如何实现string这一数据结构\"><a class=\"markdownIt-Anchor\" href=\"#redis如何实现string这一数据结构\">#</a>  <code>Redis</code>  如何实现 <code>String</code>  这一数据结构</h3>\n<p>在  <code>string</code>  的相关命令介绍的时候，我其实使用一个错误的描述。就是将 <code>Redis</code>  的 <code>String</code>  类型称为字符串。这种说法其实不正确的。</p>\n<p>在  <code>redis</code>  中， <code>string</code>  这一数据结构使用 <code>sds</code>  来表示的。</p>\n<h4 id=\"sds\"><a class=\"markdownIt-Anchor\" href=\"#sds\">#</a>  <code>sds</code></h4>\n<p><code>sds</code>  是  <code>simple dynamic string</code>  的简称。 意思是  <code>简单的动态字符串</code> 。 这里面的 <code>string</code>  就是实打实的 <code>C</code>  语言中的字符串 ( <code>char[]</code> ).  <code>Redis</code>  也并非一点也没有使用  <code>C</code>  语言的字符串，像一些字面量常亮，日志都是使用 <code>C</code>  语言的字符串。</p>\n<p>那  <code>sds</code>  到底是一个什么样的结构呢？</p>\n<p>在源码的  <code>src</code>  目录下，我找到了  <code>sds.h</code>  这样一个文件。这里规定了  <code>sds</code>  结构。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">attribute__</span> ((__<span class=\"title\">packed__</span>)) <span class=\"title\">sdshdr64</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示已使用的长度,即buf[]的长度。</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> len; </span><br><span class=\"line\">    <span class=\"comment\">// 已分配的长度(包括未使用的长度)</span></span><br><span class=\"line\">    <span class=\"comment\">// alloc-len,对应着之前版本的free</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> alloc; </span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> flags; </span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tips: 如果你注意到了这个结构体的命名。那么来看下<a href=\"\">这篇文章</a>吧。</p>\n</blockquote>\n<p><code>sds</code>  保留了  <code>C</code>  字符串以空字符结尾的惯例。保留的这个空字符的长度不会保存在  <code>len</code>  字段中。保留这一惯例的好处就是可以使用 <code>C</code>  字符串函数库的一些方法。</p>\n<p>假设我们分配了 <code>10</code>  个字节空间，只保存了  <code>redis</code>  这个 <code>C</code>  字符串，那么 在 <code>sds</code>  中，是这么表示的：</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/01-01-sds%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"01-01-sds示意图.png\"></p>\n<h4 id=\"使用sds比使用c字符串有什么好处呢\"><a class=\"markdownIt-Anchor\" href=\"#使用sds比使用c字符串有什么好处呢\">#</a> 使用 <code>sds</code>  比使用 <code>C</code>  字符串有什么好处呢？</h4>\n<h5 id=\"获取字符长度的时间复杂度为-o1\"><a class=\"markdownIt-Anchor\" href=\"#获取字符长度的时间复杂度为-o1\">#</a> 获取字符长度的时间复杂度为  <code>O(1)</code></h5>\n<p><code>C</code>  语言获取一个字符串的长度为  <code>O(N)</code> . 需要遍历字符串并累加，判断字符是否为  <code>'\\0'</code>  来获得字符串的长度。</p>\n<p><code>sds</code>  只需要根据  <code>len</code>  字段获取即可。怎么获取的呢？</p>\n<p>我们来看下源码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义char类型的指针类型。</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"><span class=\"comment\">// 获取长度的结构体指针的宏.</span></span><br><span class=\"line\"><span class=\"comment\">// 可根据指向buf的指针返回指向sdshdr结构体首地址的宏</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T))))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sds 直接指向结构体里的buf</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// sds是直接指向结构体里的buf数据, 当获取len等字段的信息,只需要减去结构体长度，回退一下指针就可以了。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里使用的尾指针法。</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> flags = s[<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 判断属于那种 sdshdr,对应减去不同的地址。</span></span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_5:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SDS_TYPE_5_LEN</span>(flags);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_8:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SDS_HDR</span>(<span class=\"number\">8</span>,s)-&gt;len;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_16:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SDS_HDR</span>(<span class=\"number\">16</span>,s)-&gt;len;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_32:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SDS_HDR</span>(<span class=\"number\">32</span>,s)-&gt;len;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_64:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SDS_HDR</span>(<span class=\"number\">64</span>,s)-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"可以杜绝缓冲区溢出\"><a class=\"markdownIt-Anchor\" href=\"#可以杜绝缓冲区溢出\">#</a> 可以杜绝缓冲区溢出</h5>\n<p><code>C</code>  语言是不会判断数组是否越界的。比如  <code>strcat</code>  方法，如果当前的数据不能容纳拼接之后字符时，必然会发生缓存区溢出。<br>\n但是  <code>sds</code>  则不会。我们来看下  <code>sds</code>  的字符串拼接的方法  <code>sdscat</code> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// s 原来的字符串，t是要拼接的字符串</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sdscatlen</span>(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取原来字符串的长度。(见上面的方法)</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> curlen = <span class=\"built_in\">sdslen</span>(s);</span><br><span class=\"line\">    <span class=\"comment\">// 扩大sds字符串末尾的可用空间，</span></span><br><span class=\"line\">    <span class=\"comment\">//以便调用者确保在调用此函数后可以覆盖字符串末尾的addlen字节，</span></span><br><span class=\"line\">    <span class=\"comment\">//再为null项再加上一个字节。 具体实现，参考源码(sds.c:204)。</span></span><br><span class=\"line\">    s = <span class=\"built_in\">sdsMakeRoomFor</span>(s,len);</span><br><span class=\"line\">    <span class=\"comment\">// 如果内存分配失败，就会返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用C语言的分配</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s+curlen, t, len);</span><br><span class=\"line\">    <span class=\"comment\">// sds设置 sdshdr的len字段的值。</span></span><br><span class=\"line\">    <span class=\"built_in\">sdssetlen</span>(s, curlen+len);</span><br><span class=\"line\">    <span class=\"comment\">// 添加最后一个字符为: &#x27;\\0&#x27;</span></span><br><span class=\"line\">    s[curlen+len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"sds-优化了c语言的内存分配策略\"><a class=\"markdownIt-Anchor\" href=\"#sds-优化了c语言的内存分配策略\">#</a> sds 优化了 C 语言的内存分配策略</h5>\n<h6 id=\"空间预分配\"><a class=\"markdownIt-Anchor\" href=\"#空间预分配\">#</a> 空间预分配</h6>\n<p>空间预分配策略遵循下面的公式:</p>\n<ul>\n<li>如果 <code>SDS</code>  的长度小于最大的预分配空间 ( <code>1MB</code> ), 那么会分配两倍的新空间，再加上结尾的空字符 <code>'\\0'</code>  举个例子：原有的 <code>sds</code>  的 <code>len</code>  为 <code>5</code> , <code>alloc</code>  为 <code>5</code> , 要拼接的字符串长度为 <code>15</code> , 那么新分配的空间大小是:  <code>(5byte+15byte)*2 + 1byte = 41byte</code> .</li>\n<li>如果 <code>sds</code>  的长度大于等于默认的预分配空间，那么就在新分配的空间大小基础上，在分配 <code>1MB</code>  的空间。如果修改后的， <code>SDS</code>  的 <code>len</code>  是  <code>20M</code> ，那么 <code>alloc</code>  就是  <code>20M + 1M + 1byte</code></li>\n</ul>\n<p>具体分配过程见下面的源码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SDS 默认最大的预分配空间为1M</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sds 预分配空间</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *sh, *newsh;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> avail = <span class=\"built_in\">sdsavail</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> type, oldtype = s[<span class=\"number\">-1</span>] &amp; SDS_TYPE_MASK;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hdrlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果空间足够，直接返回 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (avail &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sdslen</span>(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">char</span>*)s-<span class=\"built_in\">sdsHdrSize</span>(oldtype);</span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\"></span><br><span class=\"line\">    type = <span class=\"built_in\">sdsReqType</span>(newlen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Don&#x27;t use type 5: the user is appending to the string and type 5 is</span></span><br><span class=\"line\"><span class=\"comment\">     * not able to remember empty space, so sdsMakeRoomFor() must be called</span></span><br><span class=\"line\"><span class=\"comment\">     * at every appending operation. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == SDS_TYPE_5) type = SDS_TYPE_8;</span><br><span class=\"line\"></span><br><span class=\"line\">    hdrlen = <span class=\"built_in\">sdsHdrSize</span>(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldtype==type) &#123;</span><br><span class=\"line\">        newsh = <span class=\"built_in\">s_realloc</span>(sh, hdrlen+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        s = (<span class=\"keyword\">char</span>*)newsh+hdrlen;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Since the header size changes, need to move the string forward,</span></span><br><span class=\"line\"><span class=\"comment\">         * and can&#x27;t use realloc */</span></span><br><span class=\"line\">        newsh = <span class=\"built_in\">s_malloc</span>(hdrlen+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>((<span class=\"keyword\">char</span>*)newsh+hdrlen, s, len+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">s_free</span>(sh);</span><br><span class=\"line\">        s = (<span class=\"keyword\">char</span>*)newsh+hdrlen;</span><br><span class=\"line\">        s[<span class=\"number\">-1</span>] = type;</span><br><span class=\"line\">        <span class=\"built_in\">sdssetlen</span>(s, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sdssetalloc</span>(s, newlen);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"惰性空间释放\"><a class=\"markdownIt-Anchor\" href=\"#惰性空间释放\">#</a> 惰性空间释放</h6>\n<p>当对 sds 进行缩短操作时，程序并不会立马对内存重分配来回收收缩的空间，而是仅仅改变 <code>len</code>  属性，并且在队对应的位置上将字符设置为:  <code>'\\0'</code></p>\n<p>以 函数  <code>sdstrim</code>  为例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdstrim</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cset)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *start, *end, *sp, *ep;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    sp = start = s;</span><br><span class=\"line\">    ep = end = s+<span class=\"built_in\">sdslen</span>(s)<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sp &lt;= end &amp;&amp; <span class=\"built_in\">strchr</span>(cset, *sp)) sp++;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ep &gt; sp &amp;&amp; <span class=\"built_in\">strchr</span>(cset, *ep)) ep--;</span><br><span class=\"line\">    len = (sp &gt; ep) ? <span class=\"number\">0</span> : ((ep-sp)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 进行移位</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != sp) <span class=\"built_in\">memmove</span>(s, sp, len);</span><br><span class=\"line\">    <span class=\"comment\">// 设置字符串结束符</span></span><br><span class=\"line\">    s[len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置len字段的值</span></span><br><span class=\"line\">    <span class=\"built_in\">sdssetlen</span>(s,len);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述实现中，并没有进行内存回收。 <code>sds</code>  也提供了内存回收的函数 <code>sds_free</code> . 具体可以看 <code>Redis 5.0.7</code>  版源码.  <code>sds.c</code>  第 <code>1120</code>  行。这里不再深入学习了。</p>\n<h4 id=\"二进制安全\"><a class=\"markdownIt-Anchor\" href=\"#二进制安全\">#</a> 二进制安全</h4>\n<p><code>sds</code>  的 <code>API</code>  都是二进制安全的。因为 <code>Redis</code>  对  <code>sds</code>  结构中的 <code>buf</code>  数组中的数据都是以二进制的方式处理的。</p>\n<h4 id=\"兼容部分的c字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#兼容部分的c字符串函数\">#</a> 兼容部分的 <code>C</code>  字符串函数</h4>\n<p><code>Redis</code>  还是遵循了 <code>C</code>  字符串以  <code>'\\0'</code>  结尾的习惯，所以保存了文本数据的 <code>sds</code>  是可以复用  <code>&lt;string.h&gt;</code>  库中的函数。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>\n<p><code>string</code>  是 <code>redis</code>  中最简单的数据结构.  <code>string</code>  不是 <code>C</code>  字符串，而是对 <code>C</code>  字符串进行了封装.</p>\n</li>\n<li>\n<p>学习了 <code>string</code>  类型相关的 <code>api</code> 。  <code>set</code> , <code>setnx</code> , <code>setex</code> ,  <code>get</code> ,  <code>getset</code> ,  <code>incr</code> ,  <code>decr</code> ,…</p>\n</li>\n<li>\n<p><code>sds</code>  这种设计的好处，提高了性能，优化内存分配，二进制安全，兼容 <code>C</code>  字符串。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/02-Redis%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/02-Redis%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "Redis 多个数据库",
            "date_published": "2021-08-01T06:48:55.000Z",
            "content_html": "<p><code>Redis</code>  默认提供了 <code>16</code>  个数据库。每个数据库都有一个 <code>id</code> , 从  <code>0</code>  开始，[0,15]。 不同的数据库中数据隔离保存。我们可以通过修改 redis 的配置文件进行修改数据库的数量。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">database</span> <span class=\"string\">32</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用  <code>select &lt;ID&gt;</code>  可以切换数据库.</li>\n</ul>\n<p>示例如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 演示数据隔离</span></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; <span class=\"built_in\">set</span> <span class=\"built_in\">test</span> 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[1]&gt; select 2</span><br><span class=\"line\">Ok</span><br><span class=\"line\">127.0.0.1:6379[2]&gt; get <span class=\"built_in\">test</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<p>可以通过命令之前的部分区分我们所在的数据库.<br>\n <code>127.0.0.1:6379[2]&gt; select 2</code>  执行这个命令的时候，我们是在数据库 <code>1</code>  中的。</p>\n<ul>\n<li>使用  <code>flushdb</code>  只能删除 <b>该数据库 (一个库)</b> 中的数据。</li>\n<li>使用  <code>flushall</code>  可以删除 <b>所有库</b> 中的数据。</li>\n</ul>\n<h2 id=\"redis使用分库的意义\"><a class=\"markdownIt-Anchor\" href=\"#redis使用分库的意义\">#</a> redis 使用分库的意义</h2>\n<ul>\n<li>避免不同应用相同 <code>key</code>  的影响。</li>\n<li>更便于管理。<br>\n一个实例上运行多个库，只运维这一个实例就可以了。</li>\n<li>也有不少文章说，redis 的作者曾说过，“多数据库的设计可能是最糟糕的决定.”. Redis 是单线程的，即使是多数据库也不会带来性能提升。但是这个并没有和前面的两个好处冲突。下面是作者的原话:</li>\n</ul>\n<blockquote>\n<p>I understand how this can be useful, but unfortunately I consider Redis multiple database errors my worst decision in Redis design at all… without any kind of real gain, it makes the internals a lot more complex. The reality is that databases don’t scale well for a number of reason, like active expire of keys and VM. If the DB selection can be performed with a string I can see this feature being used as a scalable O(1) dictionary layer, that instead it is not.</p>\n</blockquote>\n<blockquote>\n<p>With DB numbers, with a default of a few DBs, we are communication better what this feature is and how can be used I think. I hope that at some point we can drop the multiple DBs support at all, but I think it is probably too late as there is a number of people relying on this feature for their work.</p>\n</blockquote>\n<h3 id=\"redis的分库是怎么实现\"><a class=\"markdownIt-Anchor\" href=\"#redis的分库是怎么实现\">#</a> Redis 的分库是怎么实现？</h3>\n<p><code>Redis</code>  服务器间所有的数据库都保存在 服务器状态  <code>redis.h/redisServer</code>  结构的 db 数组中。 <code>db</code>  数组中的每个元素都是一个  <code>redis.h/redisDb</code>  结构。每个 <code>redisDb</code>  结构代表一个数据库.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisServer</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存所有数据库</span></span><br><span class=\"line\">    redisDb *db;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库的数量(redis.conf文件中 database配置的)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dbnum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个 <code>Redis</code>  客户端都有自己的目标数据库，每个客户端执行数据库写命令或者数据库读命令的时候，目标数据库都会成为这些命令的操作对象.<br>\n 每个客户端用  <code>RedisClient</code>  来描述。  <code>RedisClient</code>  结构的 <code>db</code>  属性记录了客户端当前的目标数据库，这个属性是一个指向  <code>redisDb</code>  的指针.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisClient</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 记录客户端端正在使用的数据库id</span></span><br><span class=\"line\">    redisDb *db;</span><br><span class=\"line\">&#125; redisClient;</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个例子\"><a class=\"markdownIt-Anchor\" href=\"#举个例子\">#</a> 举个例子:</h4>\n<p>假设我们客户端连接的是数据库 <code>1</code> , 那么客户端与服务器端之间的关系是这样的:</p>\n<p><img data-src=\"./images/00-01%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"00-01多数据库示意图\"></p>\n<p>如果我们运行  <code>select 2</code> , 其实，就是改变的 db 的指针。让它指向了  <code>db(2)</code> , 这就是  <code>select</code>  命令的运行原理。如下图。</p>\n<p><img data-src=\"./images/00-02%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"00-02多数据库示意图\"></p>\n<p>以上就是 关于  <code>Redis</code>  多数据库的内容了。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-Redis%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-Redis%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94/",
            "title": "Redis 简介",
            "date_published": "2021-08-01T06:40:55.000Z",
            "content_html": "<p><code>Redis</code>  是一个开放源代码（ <code>BSD</code>  许可）的内存中数据结构存储，用作数据库，缓存和消息代理。它支持数据结构，例如字符串，哈希，列表，集合，带范围查询的排序集合，位图 ( <code>bitMap</code> )，超日志 ( <code>hyperlog</code> )，带有半径查询和流的地理空间索引 ( <code>geohash</code> )。 <code>Redis</code>  还内置了副本， <code>Lua</code>  脚本， <code>LRU</code>  驱逐策略，事务和不同级别的磁盘持久性，并通过 <code>Redis Sentinel</code>  和 <code>Redis Cluster</code>  自动分区提供了高可用性。</p>\n<p><code>Redis</code>  还支持一下特性:</p>\n<ul>\n<li>事务</li>\n<li>发布 / 订阅模式</li>\n<li><code>lua</code>  脚本</li>\n<li>键值的允许生存时长.</li>\n<li><code>LRU</code>  驱逐</li>\n<li>故障自动转移</li>\n</ul>\n<h2 id=\"与其他数据库对比\"><a class=\"markdownIt-Anchor\" href=\"#与其他数据库对比\">#</a> 与其他数据库对比</h2>\n<p>与其他数据库的对比:</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>Redis</th>\n<th>MongoDB</th>\n<th>Hbase</th>\n<th>Mysql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库类型</td>\n<td>NoSQL</td>\n<td>NOSQL</td>\n<td>NoSQL</td>\n<td>关系型数据库</td>\n</tr>\n<tr>\n<td>数据类型</td>\n<td>key-value, 提供 String,List,zet 等多种结构</td>\n<td>Collection.Document.BSON</td>\n<td>基于列模式的映射数据库，可表示简单的 key-value 的映射关系。</td>\n<td>DB.table.row/col</td>\n</tr>\n<tr>\n<td>持久化</td>\n<td>支持 (RDB/AOF)</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>是否支持集群</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>使用场景</td>\n<td>缓存 (内存稳定，读写性能极佳), 读多写少</td>\n<td>使用 Mysql 等关系型数据库，但是会遇到表结构不稳定的时候 (灵活)</td>\n<td>数据库大，特别大，列数据库，适合写多读少的场景</td>\n<td>常规的数据存储</td>\n</tr>\n<tr>\n<td>是否支持索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>是否支持事务</td>\n<td>支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88Redis/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88Redis/",
            "title": "Redis的单机部署",
            "date_published": "2021-08-01T06:38:55.000Z",
            "content_html": "<h1 id=\"源码安装\"><a class=\"markdownIt-Anchor\" href=\"#源码安装\">#</a> 源码安装</h1>\n<h2 id=\"下载地址\"><a class=\"markdownIt-Anchor\" href=\"#下载地址\">#</a> 下载地址</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Rvd25sb2FkLnJlZGlzLmlvL3JlbGVhc2VzL3JlZGlzLTUuMC43LnRhci5neg==\">http://download.redis.io/releases/redis-5.0.7.tar.gz</span></p>\n<h2 id=\"安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#安装步骤\">#</a> 安装步骤</h2>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar xvf redis-5.0.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@fangjiaxiaobai <span class=\"built_in\">local</span>]<span class=\"comment\"># cd ./redis-5.0.7/</span></span><br><span class=\"line\">[root@fangjiaxiaobai redis-5.0.7]<span class=\"comment\"># make &amp;&amp; make install</span></span><br><span class=\"line\"></span><br><span class=\"line\">Hint: It<span class=\"string\">&#x27;s a good idea to run &#x27;</span>make <span class=\"built_in\">test</span><span class=\"string\">&#x27; ;)</span></span><br><span class=\"line\"><span class=\"string\"># 出现上面的提示代表成功了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"可能出现以下错误\"><a class=\"markdownIt-Anchor\" href=\"#可能出现以下错误\">#</a> 可能出现以下错误:</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh: cc: <span class=\"built_in\">command</span> not found</span><br><span class=\"line\">解决方案: yum install gcc</span><br><span class=\"line\"></span><br><span class=\"line\">jemalloc/jemalloc.h: No such file or directory</span><br><span class=\"line\">原因是jemalloc重载了Linux下的ANSI C的malloc和free函数。解决办法：make时添加参数。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案: make MALLOC=libc</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a class=\"markdownIt-Anchor\" href=\"#启动\">#</a> 启动</h3>\n<p>[root@fangjiaxiaobai ~]# cd /usr/local/redis-5.0.7/src/</p>\n<p>[root@fangjiaxiaobai init.d]# ./redis_6379 start</p>\n<h3 id=\"关闭\"><a class=\"markdownIt-Anchor\" href=\"#关闭\">#</a> 关闭</h3>\n<p>[root@fangjiaxiaobai src]# ./redis-cli -p 6379 shutdown</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%931-01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%931-01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC/",
            "title": "MySQL数据库的版本",
            "date_published": "2021-07-24T06:48:55.000Z",
            "content_html": "<h2 id=\"mysql数据库的版本\"><a class=\"markdownIt-Anchor\" href=\"#mysql数据库的版本\">#</a>  <code>MySQL</code>  数据库的版本</h2>\n<p><code>mysql-5.0</code>   :   <code>mysql-5.0</code>  版本之前， <code>myisam</code>  默认支持的表大小为 <code>4G</code> 。从 <code>mysql-5.0</code>  以后， <code>MyISAM</code>  默认支持 <code>256T</code>  的表单数据。 <code>myisam</code>  只缓存索引数据。  <code>2005</code>  年的 <code>5.0</code>  版本又添加了存储过程、服务端游标、触发器、查询优化以及分布式事务功能。</p>\n<p><code>MySQL5.1</code>   :   <code>2008</code>  年发布的 <code>MySQL 5.1</code>  的版本，基本上就是一个增加了崩溃恢复功能的 <code>MyISAM</code> ，使用表级锁，但可以做到读写不冲突，即在进行任何类型的更新操作的同时都可以进行读操作，但多个写操作不能并发。</p>\n<p><code>mysql5.5</code>  :   <code>2010</code>  年 <code>12</code>  月发布 <code>mysql5.5</code>  版本默认存储引擎更改为 <code>InnoDB</code>  多个回滚段（ <code>Multiple Rollback Segments</code> ）, 之前的 <code>innodb</code>  版本最大能处理 <code>1023</code>  个并发处理操作，现在 <code>mysql5.5</code>  可以处理高达 128K 的并发事务，改善事务处理中的元数据锁定。例如，事物中一个语句需要锁一个表，会在事物结束时释放这个表，而不是像以前在语句结束时释放表。 增加了 <code>INFORMATION_SCHEMA</code>  表，新的表提供了与 InnoDB 压缩和事务处理锁定有关的具体信息。</p>\n<h3 id=\"mysql56\"><a class=\"markdownIt-Anchor\" href=\"#mysql56\">#</a> mysql5.6</h3>\n<p><code>2013</code>  年 <code>2</code>  月发布。</p>\n<ul>\n<li>\n<p>安全性进行了加强。用户的账号和密码进行了更强的加密算法，使用 <code>sha256_passwordSHA-256</code>  密码哈希的身份验证插件来进行加密。 <code>mysql.user</code>  表中新增了 <code>password_expired</code>  字段，过期后，所有连接的执行都会报出异常。</p>\n</li>\n<li>\n<p><code>MySQL Server</code>  的参数默认值进行了更改。如下图所示:</p>\n</li>\n</ul>\n<p><img data-src=\"/images/MySQL%E7%B3%BB%E5%88%97/10101-MySQL5.6Server%E7%AB%AF%E5%8F%82%E6%95%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC.png\" alt=\"10101-MySQL5.6Server端参数修改的默认值.png\"></p>\n<ul>\n<li>\n<p><code>mysql5.6</code>  版本中 <code>InnoDB</code>  可以限制大量表打开的时候内存占用过多的问题 <code>InnoDB</code>  性能加强。如大内存优化等 <code>InnoDB</code>  死锁信息可以记录到  <code>error</code>  日志，<br>\n<b> <code>InnoDB</code>  引擎也支持了 <code>FULLTEXT</code>  索引</b>。并使用 <code>MATCH() ... AGAINST</code>  语法查询它们。 <code>ALTER TABLE </code> 在不复制表，不阻止对表的插入，更新和删除或两者都不进行的情况下，可以执行多种操作。<b> <code>InnoDB</code>  使用更快的新算法来检测 死锁</b></p>\n</li>\n<li>\n<p>分区功能</p>\n<ul>\n<li>分区的最大数量增加到 <code>8192</code> 。此数量包括表的所有分区和所有子分区。</li>\n</ul>\n</li>\n<li>\n<p>复制和日志记录</p>\n<ul>\n<li><code>MySQL</code>  现在支持使用全局事务标识符（也称为  <code>GTID</code> ）进行基于事务的复制 。这样，当每个事务在原始服务器上提交并被任何从属服务器应用时，就可以识别和跟踪每个事务。</li>\n<li><code>MySQL</code>  基于行的复制从该版本开始支持行图像控制</li>\n</ul>\n</li>\n<li>\n<p>优化器增强功能</p>\n<ul>\n<li><code>limit</code>  查询进行了优化，如果 <code>N</code>  行元素小于排序缓冲区，那么就使用内存排序而不是合并文件。</li>\n<li>优化器可以更有效地处理 <code>FROM</code>  子句中的子查询 （即派生表）。FROM 子句中子查询的实现 被推迟到查询执行期间需要其内容时为止，从而提高了性能。在查询执行期间，优化器可以将索引添加到派生表中，以加快从中获取行的速度。</li>\n</ul>\n</li>\n<li>\n<p>数据类型</p>\n<ul>\n<li><code>MySQL</code>  从 <code>5.6</code>  开始允许 <code>TIME</code> ， <code>DATETIME</code>  和 <code>TIMESTAMP</code>  值的小数秒，精度高达微秒（ <code>6</code>  位）。\n<ul>\n<li>取消了每个表最多可以自动将 <code>TIMESTAMP</code>  列初始化或更新为当前日期和时间的限制。任何 <code>TIMESTAMP</code>  列定义都可以具有 <code>DEFAULT CURRENT_TIMESTAMP</code>  和 <code>ON UPDATE CURRENT_TIMESTAMP</code>  子句的任意组合。此外，这些子句现在可以与 DATETIME 列定义一起使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主机缓存。<br>\n <code>MySQL</code>  现在提供有关客户端连接到服务器时发生错误的原因的更多信息，以及对主机缓存的改进访问，该缓存包含客户端 <code>IP</code>  地址和主机名信息，用于避免 <code>DNS</code>  查找。</p>\n</li>\n</ul>\n<h3 id=\"mysql57\"><a class=\"markdownIt-Anchor\" href=\"#mysql57\">#</a> mysql5.7</h3>\n<ul>\n<li>\n<p>将  <code>Undo</code>  从共享表空间  <code>ibdata</code>  文件中分离出来，可以在安装  <code>MySQL</code>  时由用户自行指定文件大小和数量。</p>\n</li>\n<li>\n<p>增加了  <code>temporary</code>  临时表空间，里面存储着临时表或临时查询结果集的数据。</p>\n</li>\n<li>\n<p><code>Buffer Pool</code>  大小可以动态修改，无需重启数据库实例，这是  <code>DBA</code>  的福音。</p>\n</li>\n</ul>\n<h3 id=\"mysql-80-版本新特性如下\"><a class=\"markdownIt-Anchor\" href=\"#mysql-80-版本新特性如下\">#</a> MySQL 8.0 版本新特性如下：</h3>\n<ul>\n<li>\n<p>将  <code>InnoDB</code>  表的数据字典和  <code>Undo</code>  都从共享表空间  <code>ibdata</code>  中彻底分离出来了，以前需要 <code>ibdata</code>  文件中数据字典与独立表空间  <code>ibd</code>  文件中数据字典一致才行， <code>8.0</code>  版本就不需要了。</p>\n</li>\n<li>\n<p><code>temporary</code>  临时表空间也可以配置多个物理文件，而且均为  <code>InnoDB</code>  存储引擎并能创建索引，这样加快了处理的速度。</p>\n</li>\n<li>\n<p>用户可以像  <code>Oracle</code>  数据库那样设置一些表空间，每个表空间对应多个物理文件，每个表空间可以给多个表使用，但一个表只能存储在一个表空间中。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%930-00.%E8%AF%B4%E6%98%8E/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%930-00.%E8%AF%B4%E6%98%8E/",
            "title": "MySQL 开篇 & 说明",
            "date_published": "2021-07-23T06:48:55.000Z",
            "content_html": "<h2 id=\"版本说明\"><a class=\"markdownIt-Anchor\" href=\"#版本说明\">#</a> 版本说明</h2>\n<p>本系列文章，以 MySQL 8.0.20 版本为实验背景进行编写。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9pbnRlcm5hbHMvZW4vYmluYXJ5LWxvZy1vdmVydmlldy5odG1s\">MySQL 手册</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E5%89%8D%E8%A8%80/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E5%89%8D%E8%A8%80/",
            "title": "Redis 开篇杂谈",
            "date_published": "2021-07-23T06:28:55.000Z",
            "content_html": "<h2 id=\"杂谈\"><a class=\"markdownIt-Anchor\" href=\"#杂谈\">#</a> 杂谈</h2>\n<p>这里说些杂谈吧。</p>\n<p>以下的文章中，同一个名词并非代表的是同一种对象。比如 list。</p>\n<p>在 t_list.c 中，list 的表示的 面向于用户的 Redis 数据结构 List (列表)。而在 adlsit.c 中表示的 Redis 数据结构的底层实现 list (其实是链表这种数据结构 - 此处的数据结构，表示真实的数据结构)。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E7%9B%AE%E5%BD%95/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E7%9B%AE%E5%BD%95/",
            "title": "Redis 开篇 & 说明",
            "date_published": "2021-07-23T06:18:55.000Z",
            "content_html": "<p>本系列学习笔记以  <code>redis5.0.7</code>  版本为基础进行学习.</p>\n<ul>\n<li><code>2021-07-21 Redis 6.0.6</code></li>\n<li><code>2019-12-19 Redis 6.x</code>  开始发布，具体内容: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FudGlyZXovcmVkaXMvNi4wLzAwLVJFTEVBU0VOT1RFUw==\">Redis 6.x 版本发布明细</span></li>\n</ul>\n<h2 id=\"开篇说明\"><a class=\"markdownIt-Anchor\" href=\"#开篇说明\">#</a> 开篇 &amp; 说明</h2>\n<ul>\n<li><a href=\"/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E5%89%8D%E8%A8%80/\">Redis 开篇 &amp; 说明 </a></li>\n</ul>\n<h2 id=\"新手入门\"><a class=\"markdownIt-Anchor\" href=\"#新手入门\">#</a> 新手入门</h2>\n<h3 id=\"基础概念\"><a class=\"markdownIt-Anchor\" href=\"#基础概念\">#</a> 基础概念</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-Redis%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94/\">Redis 简介及其他数据库对比</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/02-Redis%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/\">Redis 的多个数据库</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88Redis/\">Redis 的单机部署</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> Redis 的集群部署 (源码安装 /docker 安装)</label></li>\n</ul>\n<h3 id=\"五种常用的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#五种常用的数据类型\">#</a> 五种常用的数据类型</h3>\n<blockquote>\n<p>常用的命令以及浅浅的了解内部结构。</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BString/\">Redis 数据结构之  <code>String</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/\">Redis 数据结构之  <code>List</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">Redis 数据结构之  <code>Hash</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\"><label for=\"cbx_7\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-4-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88set/\">Redis 数据结构之集合  <code>Set</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\"><label for=\"cbx_8\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-5-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset/\">Redis 数据结构之有序集合  <code>Zset</code> </a></label></li>\n</ul>\n<h3 id=\"知道会很牛逼的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#知道会很牛逼的数据类型\">#</a> 知道会很牛逼的数据类型</h3>\n<blockquote>\n<p>常用的命令以及浅浅的了解内部结构。</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\"><label for=\"cbx_9\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-6-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E4%BD%8D%E5%9B%BEbitmap/\">Redis 数据结构之位图  <code>BitMap</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\"><label for=\"cbx_10\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-7-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BHyperLogLogs/\">Redis 数据结构之  <code>HyperLogLogs</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> GeoHash</label></li>\n</ul>\n<h3 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\">#</a> 其他命令</h3>\n<blockquote>\n<p>除了基本的数据结构之外的 <code>Redis</code>  的命令。</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\"><label for=\"cbx_12\"> help</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" disabled=\"true\"><label for=\"cbx_13\"> auth</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" disabled=\"true\"><label for=\"cbx_14\"> scan</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" disabled=\"true\"><label for=\"cbx_15\"> keys</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" disabled=\"true\"><label for=\"cbx_16\"> select</label></li>\n</ul>\n<h2 id=\"内功心法\"><a class=\"markdownIt-Anchor\" href=\"#内功心法\">#</a> 内功心法</h2>\n<h3 id=\"redis中的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#redis中的数据结构\">#</a> Redis 中的数据结构</h3>\n<blockquote>\n<p><code>Redis</code>  内部的数据结构详解</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" checked=\"true\" disabled=\"true\"><label for=\"cbx_17\"> <a href=\"/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/\">Redis 中的数据结构之跳表及其原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" checked=\"true\" disabled=\"true\"><label for=\"cbx_18\"> <a href=\"/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bziplist/\">Redis 数据结构之详解 <code>ziplist</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" disabled=\"true\"><label for=\"cbx_19\"> intset</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" disabled=\"true\"><label for=\"cbx_20\"> dict</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" disabled=\"true\"><label for=\"cbx_21\"> skiplist</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" disabled=\"true\"><label for=\"cbx_22\"> module object</label></li>\n</ul>\n<blockquote>\n<p>高阶 <code>Redis</code>  使用，助力成为大牛</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" disabled=\"true\"><label for=\"cbx_23\"> Redis 的数据淘汰机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" disabled=\"true\"><label for=\"cbx_24\"> 持久化策略</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" disabled=\"true\"><label for=\"cbx_25\"> 主从复制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" disabled=\"true\"><label for=\"cbx_26\"> 事务机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" disabled=\"true\"><label for=\"cbx_27\"> 哨兵机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_28\" disabled=\"true\"><label for=\"cbx_28\"> 监察器</label></li>\n</ul>\n<h2 id=\"实战与应用\"><a class=\"markdownIt-Anchor\" href=\"#实战与应用\">#</a> 实战与应用</h2>\n<blockquote>\n<p>说的再多，不如动手练练</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_29\" disabled=\"true\"><label for=\"cbx_29\"> Redis 实现分布式锁。</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_30\" disabled=\"true\"><label for=\"cbx_30\"> Redis 实现发布订阅模式</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_31\" disabled=\"true\"><label for=\"cbx_31\"> 布隆过滤器</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_32\" disabled=\"true\"><label for=\"cbx_32\"> 限流实例</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_33\" disabled=\"true\"><label for=\"cbx_33\"> 延时队列</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_34\" disabled=\"true\"><label for=\"cbx_34\"> 统计 PV</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_35\" disabled=\"true\"><label for=\"cbx_35\"> 限流</label></li>\n</ul>\n<h2 id=\"运维\"><a class=\"markdownIt-Anchor\" href=\"#运维\">#</a> 运维</h2>\n<blockquote>\n<p>不让别人擦屁股</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_36\" disabled=\"true\"><label for=\"cbx_36\"> 配置文件详解</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_37\" disabled=\"true\"><label for=\"cbx_37\"> 数据持久化</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_38\" disabled=\"true\"><label for=\"cbx_38\"> 数据迁移</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_39\" disabled=\"true\"><label for=\"cbx_39\"> 再谈集群</label></li>\n</ul>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h2>\n<blockquote>\n<p>不仅要有内涵，更要有颜值。</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_40\" disabled=\"true\"><label for=\"cbx_40\">  <code>Redis</code>  面试题</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_41\" disabled=\"true\"><label for=\"cbx_41\">  <code>Redis</code>  为什么这么快</label></li>\n</ul>\n<h2 id=\"学习路线图\"><a class=\"markdownIt-Anchor\" href=\"#学习路线图\">#</a> 学习路线图</h2>\n<blockquote>\n<p>这里是灯塔。</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_42\" disabled=\"true\"><label for=\"cbx_42\"> 路线图</label></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "目录",
                "Redis"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/pictures/pic20220127-super/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/pictures/pic20220127-super/",
            "title": "图片二-8K",
            "date_published": "2021-07-23T06:18:55.000Z",
            "content_html": "<p class=\"gallery\" data-height=\"120\"><img data-src=\"https://images.pexels.com/photos/1366630/pexels-photo-1366630.jpeg?cs=srgb&amp;dl=pexels-max-andrey-1366630.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"></p>\n",
            "tags": [
                "图片"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/pictures/pic20220127/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/pictures/pic20220127/",
            "title": "图片一",
            "date_published": "2021-07-23T06:18:55.000Z",
            "content_html": "<p class=\"gallery\" data-height=\"120\"><img data-src=\"https://gitee.com/fangjiaxiaobai/open-sources/raw/master/images/pexels-pixabay-207779.jpg\" alt=\"\"><br>\n<img data-src=\"https://gitee.com/fangjiaxiaobai/open-sources/raw/master/images/000004.jpg\" alt=\"\"><br>\n<img data-src=\"https://gitee.com/fangjiaxiaobai/open-sources/raw/master/images/000001.jpeg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/1097456/pexels-photo-1097456.jpeg?cs=srgb&amp;dl=pexels-sebastiaan-stam-1097456.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/1559285/pexels-photo-1559285.jpeg?cs=srgb&amp;dl=pexels-engin-akyurt-1559285.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/1274260/pexels-photo-1274260.jpeg?cs=srgb&amp;dl=pexels-rakicevic-nenad-1274260.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/589840/pexels-photo-589840.jpeg?cs=srgb&amp;dl=pexels-valiphotos-589840.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/266004/pexels-photo-266004.jpeg?cs=srgb&amp;dl=pexels-pixabay-266004.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/373934/pexels-photo-373934.jpeg?cs=srgb&amp;dl=pexels-burst-373934.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"https://images.pexels.com/photos/839011/pexels-photo-839011.jpeg?cs=srgb&amp;dl=pexels-andrea-piacquadio-839011.jpg&amp;fm=jpg\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"><br>\n<img data-src=\"\" alt=\"\"></p>\n",
            "tags": [
                "图片"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/RoadMap/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/RoadMap/",
            "title": "全站地图",
            "date_published": "2021-07-18T12:49:55.000Z",
            "content_html": "<details class=\"danger\"><summary>推荐&必看</summary><div>\n<div class=\"tab\" data-id=\"mustlook\" data-title=\"近日上新\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> 👉 <a href=\"/2021/09/01/rocketMQ/README/\">RocketMQ 系列</a>🔥🔥🔥</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/\">动态规划</a> 🔥🔥🔥🔥</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/\">哈希算法和一致性哈希算法</a> 🔥🔥🔥🔥</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/\">排序系列算法之九种排序算法</a> 🔥🔥🔥🔥🔥</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> 👉 <a href=\"/2021/08/23/Java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/\">JDK 的 Stream 之系列一 初窥流原理</a>🔥🔥🔥</label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"mustlook\" data-title=\"极力推荐\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"/images/promotions/Redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98.jpg\">Redis 源码剖析和解析</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> <a href=\"/promotions/geekbang/\">全部课程</a></label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"primary\"><summary>RocketMQ系列-实战&源码解析</summary><div>\n<div class=\"tab\" data-id=\"rocketMQ\" data-title=\"Rocket系列-入门\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\"><label for=\"cbx_7\"> <a href=\"/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/\">Rocket 系列 - 入门</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\"><label for=\"cbx_8\"> <a href=\"/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/\">概念</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\"><label for=\"cbx_9\"> <a href=\"/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/\">安装</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\"><label for=\"cbx_10\"> <a href=\"/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/\">使用</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" checked=\"true\" disabled=\"true\"><label for=\"cbx_11\"> <a href=\"/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/\">基本样例</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\"><label for=\"cbx_12\"> <a href=\"/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/\">顺序消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" checked=\"true\" disabled=\"true\"><label for=\"cbx_13\"> <a href=\"/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/\">延时消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\"><label for=\"cbx_14\"> <a href=\"/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/\">批量消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" checked=\"true\" disabled=\"true\"><label for=\"cbx_15\"> <a href=\"/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/\">过滤消息</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" checked=\"true\" disabled=\"true\"><label for=\"cbx_16\"> <a href=\"/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/\">事务消息</a></label></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"rocketMQ\" data-title=\"Rocket系列-进阶\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" checked=\"true\" disabled=\"true\"><label for=\"cbx_17\"> <a href=\"/2021/09/28/rocketMQ/2-01-RocketMQ-Arch-Start/\">架构设计之启动过程详解</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" checked=\"true\" disabled=\"true\"><label for=\"cbx_18\"> <a href=\"/2021/09/28/rocketMQ/2-02-RocketMQ-Arch-Message/\">架构设计之消息的收发过程详解</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" checked=\"true\" disabled=\"true\"><label for=\"cbx_19\"> <a href=\"/2022/01/02/rocketMQ/3-01-RocketMQ-Transaction-msg/\">事务消息实现原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" checked=\"true\" disabled=\"true\"><label for=\"cbx_20\"> <a href=\"/2022/05/16/rocketMQ/3-02-reliabllity-msg/\">消息可靠性实现原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\"><label for=\"cbx_21\"> <a href=\"/2022/07/09/rocketMQ/3-08-save-msg-detail/\">消息刷盘过程详解</a></label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"success\"><summary>Java系列</summary><div>\n<div class=\"tab\" data-id=\"java\" data-title=\"JDK原理&源码\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" checked=\"true\" disabled=\"true\"><label for=\"cbx_22\"> <a href=\"/2021/07/15/JDK%E6%BA%90%E7%A0%81/README/\">JDK 原理 &amp; 源码 目录</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" checked=\"true\" disabled=\"true\"><label for=\"cbx_23\"> <a href=\"/2021/08/23/java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/\">JDK 的 Stream 之系列一 初窥流原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" checked=\"true\" disabled=\"true\"><label for=\"cbx_24\"> <a href=\"/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap/\">【HashMap】全网最全的 HashMap 源码解读</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" checked=\"true\" disabled=\"true\"><label for=\"cbx_25\"> <a href=\"/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap%E7%9A%84Hash%E5%87%BD%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89/\">【HashMap】HashMap 的 Hash 函数到底有什么意义</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"java\" data-title=\"JVM原理\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" checked=\"true\" disabled=\"true\"><label for=\"cbx_26\"> <a href=\"/2021/08/19/java%E7%B3%BB%E5%88%97/JVM/OOM/\">JVM 之你没见过的 OOM</a></label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"info\"><summary>刷题</summary><div>\n<div class=\"tab\" data-id=\"bq\" data-title=\"LeetCode\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" checked=\"true\" disabled=\"true\"><label for=\"cbx_27\"> <a href=\"/2021/08/19/BQ/LeetCode/001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/\">LC: 反转数组</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_28\" checked=\"true\" disabled=\"true\"><label for=\"cbx_28\"> <a href=\"/2021/08/29/BQ/LeetCode/002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/\">LC: 反转链表 I</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"bq\" data-title=\"杭电\">\n<p><a href=\"/2021/10/13/BQ/hdoj/HD-1000/\">1000 A + B Problem</a><br>\n<a href=\"/2021/10/14/BQ/hdoj/HD-1001/\">1001 Sum Problem</a><br>\n<a href=\"/2021/10/15/BQ/hdoj/HD-1002/\">1002 A + B Problem II</a><br>\n<a href=\"/2021/10/16/BQ/hdoj/HD-1003/\">1003 Max Sum</a><br>\n<a href=\"/2021/10/17/BQ/hdoj/HD-1004/\">1004 Let the Balloon Rise</a><br>\n<a href=\"/2021/10/18/BQ/hdoj/HD-1005/\">1005 Number Sequence</a></p>\n</div>\n</div></details>\n<details class=\"warning\"><summary>数据库系列</summary><div>\n<div class=\"tab\" data-id=\"db\" data-title=\"MySQL\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_29\" checked=\"true\" disabled=\"true\"><label for=\"cbx_29\"> <a href=\"/series/MySQL/\">MySQL 系列目录</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_30\" checked=\"true\" disabled=\"true\"><label for=\"cbx_30\"> <a href=\"/2021/07/23/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%930-00.%E8%AF%B4%E6%98%8E/\">MySQL 开篇 &amp; 说明</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_31\" checked=\"true\" disabled=\"true\"><label for=\"cbx_31\"> <a href=\"/2021/07/24/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%931-01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC/\">MySQL 数据库的版本</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"db\" data-title=\"Redis\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_32\" checked=\"true\" disabled=\"true\"><label for=\"cbx_32\"> <a href=\"/2021/07/23/Redis%E7%B3%BB%E5%88%97/00-%E7%9B%AE%E5%BD%95/\">Redis 开篇 &amp; 说明 &amp; 目录</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_33\" checked=\"true\" disabled=\"true\"><label for=\"cbx_33\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-Redis%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94/\">Redis 简介及其他数据库对比</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_34\" checked=\"true\" disabled=\"true\"><label for=\"cbx_34\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/02-Redis%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/\">Redis 的多个数据库</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_35\" checked=\"true\" disabled=\"true\"><label for=\"cbx_35\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/01-%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88Redis/\">Redis 的单机部署</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_36\" checked=\"true\" disabled=\"true\"><label for=\"cbx_36\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-1-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BString/\">Redis 数据结构之 <code>String</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_37\" checked=\"true\" disabled=\"true\"><label for=\"cbx_37\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-2-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Blist/\">Redis 数据结构之 <code>List</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_38\" checked=\"true\" disabled=\"true\"><label for=\"cbx_38\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-3-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bhash/\">Redis 数据结构之 <code>Hash</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_39\" checked=\"true\" disabled=\"true\"><label for=\"cbx_39\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-4-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88set/\">Redis 数据结构之集合 <code>Set</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_40\" checked=\"true\" disabled=\"true\"><label for=\"cbx_40\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-5-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88zset/\">Redis 数据结构之有序集合 <code>Zset</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_41\" checked=\"true\" disabled=\"true\"><label for=\"cbx_41\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-6-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E4%BD%8D%E5%9B%BEbitmap/\">Redis 数据结构之位图 <code>BitMap</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_42\" checked=\"true\" disabled=\"true\"><label for=\"cbx_42\"> <a href=\"/2021/08/01/Redis%E7%B3%BB%E5%88%97/B-7-Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BHyperLogLogs/\">Redis 数据结构之 <code>HyperLogLogs</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_43\" checked=\"true\" disabled=\"true\"><label for=\"cbx_43\"> <a href=\"/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/\">Redis 中的数据结构之跳表及其原理</a></label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"primary\"><summary>Git系列</summary><div>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_44\" checked=\"true\" disabled=\"true\"><label for=\"cbx_44\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/02-Git%E4%BB%8B%E7%BB%8D/\">git 介绍</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_45\" checked=\"true\" disabled=\"true\"><label for=\"cbx_45\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/01-GIt%E5%AE%89%E8%A3%85/\">git 安装</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_46\" checked=\"true\" disabled=\"true\"><label for=\"cbx_46\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/03-git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%BC%80%E5%A7%8B/\">从创建仓库开始</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_47\" checked=\"true\" disabled=\"true\"><label for=\"cbx_47\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/04-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/\">git 基本命令一</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_48\" checked=\"true\" disabled=\"true\"><label for=\"cbx_48\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/05-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A42%20git%E6%97%B6%E5%85%89%E6%9C%BA1/\">git 基本命令二</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_49\" checked=\"true\" disabled=\"true\"><label for=\"cbx_49\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/06-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A43-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/\">git 基本命令三</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_50\" checked=\"true\" disabled=\"true\"><label for=\"cbx_50\"> <a href=\"/2021/07/18/git%E7%B3%BB%E5%88%97/07-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A44-%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%AB%E5%90%8D/\">git 基本命令四</a></label></li>\n</ul>\n</div></details>\n<details class=\"success\"><summary>搜索相关</summary><div>\n<div class=\"tab\" data-id=\"seach\" data-title=\"ElasticSearch\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_51\" checked=\"true\" disabled=\"true\"><label for=\"cbx_51\"> <a href=\"/2021/08/31/es-series/01.ES%E7%AE%80%E4%BB%8B/\">1.ES 简介</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_52\" checked=\"true\" disabled=\"true\"><label for=\"cbx_52\"> <a href=\"/2021/08/31/es-series/02.ES%E5%AE%89%E8%A3%85/\">2.ES 栈安装</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_53\" checked=\"true\" disabled=\"true\"><label for=\"cbx_53\"> <a href=\"/2021/08/31/es-series/03.ES%E9%85%8D%E7%BD%AE/\">3.ElasticSearch 配置</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_54\" checked=\"true\" disabled=\"true\"><label for=\"cbx_54\"> <a href=\"/2021/08/31/es-series/04.ES%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/\">4. 基本概念</a></label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"danger\"><summary>数据结构与算法</summary><div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"数据结构\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_55\" checked=\"true\" disabled=\"true\"><label for=\"cbx_55\"> 🍺 <a href=\"/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/\">跳表</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"排序\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_56\" checked=\"true\" disabled=\"true\"><label for=\"cbx_56\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/\">排序开篇</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_57\" checked=\"true\" disabled=\"true\"><label for=\"cbx_57\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/\">冒泡排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_58\" checked=\"true\" disabled=\"true\"><label for=\"cbx_58\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/\">选择排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_59\" checked=\"true\" disabled=\"true\"><label for=\"cbx_59\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/\">归并排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_60\" checked=\"true\" disabled=\"true\"><label for=\"cbx_60\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/\">快速排序</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_61\" disabled=\"true\"><label for=\"cbx_61\"> 👉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/sort/%E7%AE%97%E6%B3%9503-%E6%A1%B6%E6%8E%92%E5%BA%8F/\">桶排序 (Bubble Sort)</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"动态规划\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_62\" disabled=\"true\"><label for=\"cbx_62\"> ✊ <a href=\"/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/\">动态规划</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"哈希算法\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_63\" checked=\"true\" disabled=\"true\"><label for=\"cbx_63\"> 🔥🔥 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/\">哈希算法和一致性哈希算法</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_64\" checked=\"true\" disabled=\"true\"><label for=\"cbx_64\"> 🔥🔥 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/\">一致性哈希算法实现</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"递归算法\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_65\" checked=\"true\" disabled=\"true\"><label for=\"cbx_65\"> 🎉 <a href=\"/2021/09/01/dataStructuresAndAlgorithms/recursion/%E7%AE%97%E6%B3%9501-%E9%80%92%E5%BD%92/\">递归算法</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"查找\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_66\" disabled=\"true\"><label for=\"cbx_66\"> 补货中…</label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"背包\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_67\" disabled=\"true\"><label for=\"cbx_67\"> 补货中…</label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"dss\" data-title=\"贪心\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_68\" disabled=\"true\"><label for=\"cbx_68\"> 补货中…</label></li>\n</ul>\n</div>\n</div></details>\n<details class=\"warning\"><summary>面经</summary><div>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_69\" disabled=\"true\"><label for=\"cbx_69\"> <a href=\"\">聊聊面试那点事儿</a></label></li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>推广&推荐</summary><div>\n<div class=\"tab\" data-id=\"promotion\" data-title=\"极客时间\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_70\" disabled=\"true\"><label for=\"cbx_70\"> <a href=\"/images/promotions/Redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98.jpg\">Redis 原理</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_71\" disabled=\"true\"><label for=\"cbx_71\"> <a href=\"/promotions/geekbang/\">全部课程</a></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"promotion\" data-title=\"科学上网\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_72\" disabled=\"true\"><label for=\"cbx_72\"> 补货中…</label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"promotion\" data-title=\"书籍\">\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_73\" disabled=\"true\"><label for=\"cbx_73\"> 补货中…</label></li>\n</ul>\n</div>\n</div></details>\n",
            "tags": [
                "全站地图",
                "目录"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/dataStructuresAndAlgorithms/SnowFlake/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/dataStructuresAndAlgorithms/SnowFlake/",
            "title": "雪花算法",
            "date_published": "2021-07-18T12:49:55.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>雪花算法是  <code>twitter</code>  开源的由  <code>64</code>  位整数组成的分布式 <code>id</code> 。目的是在分布式系统中产生全局唯一且趋势递增的 <code>ID</code> 。</p>\n<p>其核心思想就是：<b>使用一个  <code>64 bit</code>  的  <code>long</code>  型的数字作为全局唯一  <code>id</code> 。在分布式系统中的应用十分广泛，且 <code>ID</code>  引入了时间戳，保持自增性且不重复。</b></p>\n<h3 id=\"雪花算法的结构\"><a class=\"markdownIt-Anchor\" href=\"#雪花算法的结构\">#</a> 雪花算法的结构</h3>\n<p><img data-src=\"/images/%E7%AE%97%E6%B3%95/snowFlake%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<ul>\n<li>标识： 没有实际意义。一般都是 0，都是正数。</li>\n<li>时间戳：  <code>41 bit</code>  可以表示的数字多达  <code>2^41 - 1</code> ，也就是可以标识  <code>2 ^ 41 - 1</code>  个毫秒值，换算成年就是表示  <code>69</code>  年的时间。</li>\n<li>机器 id: 这里标识的是机器的唯一标识，一般由两部分构成： <code>机房id+机器id</code> 。一共 <code>10</code>  位，可以表示 <code>1024</code>  台机器。</li>\n<li>序列号：可以用这个  <code>12 bit</code>  代表的数字来区分同一个毫秒内的  <code>4096</code>  个不同的  <code>id</code> 。也就是同一毫秒内同一台机器所生成的最大 ID 数量为 <code>4096</code></li>\n</ul>\n<h3 id=\"雪花算法的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#雪花算法的工作流程\">#</a> 雪花算法的工作流程</h3>\n<p>以一个简单的雪花算法工作流程来说。假设有一个服务假设要生成一个全局唯一 <code>id</code> ，那么就可以发送一个请求给部署了  <code>SnowFlake</code>  算法的系统，由这个  <code>SnowFlake</code>  算法系统来生成唯一  <code>id</code> 。这个  <code>SnowFlake</code>  算法系统首先肯定是知道自己所在的机器号，（假设机器 id 为 10bit）接着  <code>SnowFlake</code>  算法系统接收到这个请求之后，首先就会用二进制位运算的方式生成一个  <code>64 bit</code>  的  <code>long</code>  型  <code>id</code> ， <code>64</code>  个  <code>bit</code>  中的第一个  <code>bit</code>  是无意义的。接着用当前时间戳（单位到毫秒）占用 <code>41</code>  个  <code>bit</code> ，然后接着  <code>10</code>  个  <code>bit</code>  设置机器  <code>id</code> 。最后再判断一下，当前这台机房的这台机器上这一毫秒内，这是第几个请求，给这次生成  <code>id</code>  的请求累加一个序号，作为最后的  <code>12</code>  个  <code>bit</code> 。</p>\n<h3 id=\"雪花算法实现\"><a class=\"markdownIt-Anchor\" href=\"#雪花算法实现\">#</a> 雪花算法实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fxb.algorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 雪花算法生成器</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.todo: 可以指定不同数据位数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.todo: 单例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> fangjiaxiaobai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020-10-24 23:51</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnowFlakeGenerator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始时间戳 (2015-01-01)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_TIMESTAMP = <span class=\"number\">1603556068000L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 总位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> BITS_COUNT = <span class=\"number\">64L</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 机器id所占的位数,</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认是5位。最多支持31台机器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_WORKER_ID_BITS = <span class=\"number\">5L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据中心id所占的位数</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以理解为机房。默认是5位。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_DATA_CENTER_ID_BITS = <span class=\"number\">5L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 序列在id中占的位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_SEQUENCE_BITS = <span class=\"number\">12L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_MAX_WORKER_ID = ~(-<span class=\"number\">1L</span> &lt;&lt; DEFAULT_WORKER_ID_BITS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持的数据中心数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_MAX_DATA_CENTER_ID_BITS = ~(-<span class=\"number\">1L</span> &lt;&lt; DEFAULT_DATA_CENTER_ID_BITS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_SEQUENCE_MASK = ~(-<span class=\"number\">1L</span> &lt;&lt; DEFAULT_SEQUENCE_BITS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间戳向左移22位(5+5+12)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_TIMESTAMP_LEFT_SHIFT = DEFAULT_SEQUENCE_BITS + DEFAULT_WORKER_ID_BITS + DEFAULT_DATA_CENTER_ID_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据标识id向左移17位(12+5)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_DATA_CENTER_ID_SHIFT = DEFAULT_SEQUENCE_BITS + DEFAULT_WORKER_ID_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * workId的位移</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> DEFAULT_WORKER_ID_SHIFT = DEFAULT_SEQUENCE_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 工作机器ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据中心ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> dataCenterId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持的最大数据中心数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxDataCenterId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持的最大workerid数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxWorkerId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 序列号的位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long sequenceBits;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 序列号的掩码</span></span><br><span class=\"line\"><span class=\"comment\">     * 即，2^sequenceBits</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long sequenceMask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 毫秒内序列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上次生成ID的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> dataCenterIdShift;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerIdShift;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间戳的位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestampLeftShift;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认 每个数据中心可以容纳31台机器</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> workerId     工作ID</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataCenterId 数据中心ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SnowFlakeGenerator</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> dataCenterId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据自己的配置决定容纳的机器数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> workerId         工作机器的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataCenterId     数据中心的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> workerIdBits     工作机占的位数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataCenterIdBits 数据中心占的位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SnowFlakeGenerator</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> dataCenterId, <span class=\"keyword\">long</span> workerIdBits, <span class=\"keyword\">long</span> dataCenterIdBits)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> SnowflakeId</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> currentTimestamp = getCurrentTimeStamp();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currentTimestamp &lt; lastTimestamp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">                    String.format(<span class=\"string\">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - currentTimestamp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lastTimestamp == currentTimestamp) &#123;</span><br><span class=\"line\">            sequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</span><br><span class=\"line\">            <span class=\"comment\">//毫秒内序列溢出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sequence == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class=\"line\">                currentTimestamp = tilNextMillis(lastTimestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//时间戳改变，毫秒内序列重置</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sequence = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//上次生成ID的时间戳</span></span><br><span class=\"line\">        lastTimestamp = currentTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((currentTimestamp - DEFAULT_TIMESTAMP) &lt;&lt; timestampLeftShift)</span><br><span class=\"line\">                | (dataCenterId &lt;&lt; dataCenterIdShift)</span><br><span class=\"line\">                | (workerId &lt;&lt; workerIdShift)</span><br><span class=\"line\">                | sequence;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> timestamp = getCurrentTimeStamp();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class=\"line\">            timestamp = getCurrentTimeStamp();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前时间戳。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">getCurrentTimeStamp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码: <span class=\"exturl\" data-url=\"aHR0cDovL2R3ei5kYXRlL2NXbVI=\">http://dwz.date/cWmR</span></p>\n<p>公众号中回复 【雪花算法】，可以直接获取源码文件。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "雪花算法",
                "算法"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/02-Git%E4%BB%8B%E7%BB%8D/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/02-Git%E4%BB%8B%E7%BB%8D/",
            "title": "Git介绍",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"git是目前最先进的版本控制管理系统-b\"><a class=\"markdownIt-Anchor\" href=\"#git是目前最先进的版本控制管理系统-b\">#</a>  <code>Git</code>  是目前最先进的版本控制管理系统。</b></h2>\n<p>本质上讲， <code>git</code>  是一个内容寻址文件系统。其核心部分是一个简单的键值对数据库 ( <code>key-value data store</code> ). 你可以想像 <code>git</code>  仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。</p>\n<h2 id=\"git先进在哪里\"><a class=\"markdownIt-Anchor\" href=\"#git先进在哪里\">#</a>  <code>git</code>  先进在哪里？</h2>\n<ul>\n<li>\n<p>直接记录快照，而不是比较差异。<br>\n这也是 <code>git</code>  和其他版本管理系统的主要差别。其他版本管理系统 ( <code>CVS</code> , <code>Subversion</code> , <code>Perforce</code> , <code>Bazaar</code>  等) 存储各个版本之间，每个文件随时间逐渐累积的差异。这类版本管理系统称为 基于差异的版本控制。如下图:<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D01.png\" alt=\"git介绍01.png\"></p>\n<p><code>git</code>  则不然，当你提交更新或者保存项目状态的时候，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果没有没有修改， <code>git</code>  不再重新存储该文 <code>git</code>  件，而是只保留一个连接指向之前存储的文件。 <code>Git</code>  对待所管理的数据更像是一个快照流。如下图:<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D02.png\" alt=\"git介绍02.png\"></p>\n<p><b> <code>git</code>  更像是一个小型的文件系统，而不只是一个简单的 CVS。</b></p>\n</li>\n<li>\n<p><code>git</code>  近乎所有操作都在本地执行<br>\n这意味着不管有无网络，你都可以工作。没有网络的时候，你照常可以提交代码，等到有网的时候，在进行上传到远程仓库。而使用 <code>Subversion</code> ， <code>CVS</code>  的话，只能修改文件，但是不能提交。</p>\n</li>\n<li>\n<p><code>git</code>  保证完整性<br>\n <code>Git</code>  中所有的数据在存储前都计算校验和，然后以校验和来引用。这就是说， <code>Git</code>  会知道你所有的更改任何文件内容或者目录内容，这个是构成 git 哲学不可或缺的部分。 <code>Git</code>  使用计算校验和的机制叫做  <code>SHA-1</code>  散列 ( <code>hash</code> , 哈希)。这是一个由 <code>40</code>  个十六进制字符 ( <code>0-9</code>  和 <code>a-f</code> ) 组成的字符串，基于 Git 中文件的内容和目录结构计算出来的。 <code>Git</code>  数据库中保存的信息都是以文件内容的哈希值来索引数据，而不是文件名。</p>\n</li>\n<li>\n<p><code>Git</code>  一般都只添加数据<br>\n执行的所有的 <code>git</code>  操作，几乎只往数据库中添加数据。一旦你提交了快照到 <code>git</code>  中，就难以再丢失数据，特别是定期的推送到了远程仓库。</p>\n</li>\n</ul>\n<h2 id=\"git的三种状态\"><a class=\"markdownIt-Anchor\" href=\"#git的三种状态\">#</a>  <code>git</code>  的三种状态</h2>\n<p><code>git</code>  对文件的管理，有三种状态。</p>\n<ul>\n<li>已修改：表示修改了文件，但还没有保存到数据库中。</li>\n<li>已暂存：表示对一个已修改文件的当前版本做了标记，使之在下次提交的快照中。</li>\n<li>已提交：表示数据已经安全的保存到了本地的 git 数据库中。</li>\n</ul>\n<p>这三种状态分别代表了 <code>git</code>  的三个工作区。工作区，暂存区以及 <code>git</code>  目录 (版本库)。如下图</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D03.png\" alt=\"git介绍03\"></p>\n<p>工作区是对项目的某个版本独立提取出来的内容。这些从 <code>git</code>  仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区是一个文件，保存了下次将要提交的文件列表信息。 <code>git</code>  中称为索引，不过一般都是称为暂存区。<br>\n <code>Git</code>  仓库目录指的就是 .git 目录 (.git)。下节就从创建仓库开始学起。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/06-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A43-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/06-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A43-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/",
            "title": "git命令3 - 远程仓库",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<p>远程仓库指的是 托管到因特网或者其他网络中的项目的版本库。</p>\n<p>可以使用  <code>git remote</code>  命令来配置远程仓库。</p>\n<p>我们先看一下  <code>git remote</code>  命令都有什么子选项.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote [-v | --verbose]</span><br><span class=\"line\">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class=\"line\">git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;...</span><br><span class=\"line\">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class=\"line\">git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class=\"line\">git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class=\"line\">git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">git remote [-v | --verbose] show [-n] &lt;name&gt;...</span><br><span class=\"line\">git remote prune [-n | --dry-run] &lt;name&gt;...</span><br><span class=\"line\">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)...]</span><br></pre></td></tr></table></figure>\n<p>下面我们只介绍几个常用的远程仓库的命令</p>\n<h3 id=\"配置远程仓库-git-remote-add\"><a class=\"markdownIt-Anchor\" href=\"#配置远程仓库-git-remote-add\">#</a> 配置远程仓库 -  <code>git remote add</code></h3>\n<p><code>git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</code></p>\n<p>首先在页面上新建一个空的仓库备用。<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/web%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%96%B0%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png\" alt=\"web页面上新建git远程仓库.png\"><br>\n 演示一下使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;演示配置远程仓库&#x27; &gt; testRemoteGit</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;新增一个文件，初始化项目&quot;</span><br><span class=\"line\">[master (root-commit) 5ed81fa] 新增一个文件，初始化项目</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 testRemoteGit</span><br><span class=\"line\"> # 配置远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"># 查看远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\"></span><br><span class=\"line\">## 在增加一个远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin2 http://git.baijiahulian.com/wangxiyue/gitlearn.git</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"将本地的文件推送到远程仓库中\"><a class=\"markdownIt-Anchor\" href=\"#将本地的文件推送到远程仓库中\">#</a> 将本地的文件推送到远程仓库中</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git push origin master</span><br><span class=\"line\">Counting objects: 3, done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 281 bytes | 281.00 KiB/s, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class=\"line\">To https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">➜  gitlearn git:(master)</span><br></pre></td></tr></table></figure>\n<h3 id=\"从git仓库中拉取数据\"><a class=\"markdownIt-Anchor\" href=\"#从git仓库中拉取数据\">#</a> 从 git 仓库中拉取数据</h3>\n<p>可以使用  <code>git fetch</code>  命令。 我们现在页面上的一个仓库中手动修改一个文件来演示一下 fetch 的功能。</p>\n<p>在页面就行点击编辑，然后加上  <code>这里是在远程仓库中加入的内容。</code> 这样一句话。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git fetch origin</span><br><span class=\"line\">remote: Enumerating objects: 5, done.</span><br><span class=\"line\">remote: Counting objects: 100% (5/5), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From https://gitee.com/fangjiaxiaobai/gitlearn</span><br><span class=\"line\">   5ed81fa..62be3ab  master     -&gt; origin/master</span><br></pre></td></tr></table></figure>\n<p>使用  <code>git pull</code>  也可以得到相同的结果。</p>\n<h3 id=\"查看某个远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#查看某个远程仓库\">#</a> 查看某个远程仓库</h3>\n<p><code>git remote show</code>  来查看远程仓库中的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote show origin</span><br><span class=\"line\">* remote origin</span><br><span class=\"line\">  Fetch URL: https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\">  Push  URL: https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\">  HEAD branch: master</span><br><span class=\"line\">  Remote branch:</span><br><span class=\"line\">    master tracked</span><br><span class=\"line\">  Local ref configured for &#x27;git push&#x27;:</span><br><span class=\"line\">    master pushes to master (local out of date)</span><br></pre></td></tr></table></figure>\n<p>它会列出远程仓库的  <code>URL</code>  与跟踪分支的信息。因为我们这是一个新建的仓库，这里我粘贴一个很多次提交的项目来看一下。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/gitRemote%E5%88%86%E6%94%AF%E7%8A%B6%E6%80%81.png\" alt=\"gitRemote分支状态\"></p>\n<p>这个命令列出了当你在特定的分支上执行  <code>git push</code>  会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了， 还有当你执行  <code>git pull</code>  时哪些本地分支可以与它跟踪的远程分支自动合并。</p>\n<h4 id=\"重命名远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#重命名远程仓库\">#</a> 重命名远程仓库</h4>\n<p>使用  <code>git remote renam</code> e 命令可以来重命名仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote rename origin giteeOrigin</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">giteeOrigin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">giteeOrigin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#删除远程分支\">#</a> 删除远程分支</h4>\n<p>使用命令  <code>git remote remove</code>  命令可以删除远程仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote remove giteeOrigin</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<p>一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/05-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A42%20git%E6%97%B6%E5%85%89%E6%9C%BA1/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/05-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A42%20git%E6%97%B6%E5%85%89%E6%9C%BA1/",
            "title": "git基本命令二",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p><code>git</code>  的时光机 (简化版)</p>\n<ul>\n<li><code>git log</code> ：查看历史记录</li>\n<li><code>git commit -amend</code> ：重写上一次的提交历史</li>\n</ul>\n<h3 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a>  <code>git log</code></h3>\n<p><code>git</code>  有一个特别实用的功能，可以让我们看到所有的历史更改记录。这个命令就是  <code>git log</code> .</p>\n<p>首先我们新建一个仓库。随便进行 <code>5</code>  次更改， <code>5</code>  提交。</p>\n<p>执行如下的操作:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;第一行&#x27; &gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test git-log 1 &quot;</span><br><span class=\"line\">[master (root-commit) 0718ac9] test git-log 1</span><br><span class=\"line\"> 2 files changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 .gitignore</span><br><span class=\"line\"> create mode 100644 testGitLog</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第二行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 2 &quot;</span><br><span class=\"line\">[master f8248a5] test git-log 2</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第三行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 3 &quot;</span><br><span class=\"line\">[master b282b88] test git-log 3</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第四行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 4 &quot;</span><br><span class=\"line\">[master b9df1bb] test git-log 4</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第五行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 5 &quot;</span><br><span class=\"line\">[master 769db1c] test git-log 5</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>运行一下  <code>git log</code>  我们查看一下输出的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:35:30 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:34:39 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们没有传入任何参数的情况下， <code>git log</code>  会按照先后顺序列出所有的提交，时间最近的更新排在最上面。</p>\n<p>该命令会列出每次提交的 SHA-1 校验和，作者的名字和电子邮箱，提交时间，以及提交说明。</p>\n<p><code>git log</code>  还有很多我们选项，我在后面有一篇文章写了 git 的命令大全，并且会保持更新哦。</p>\n<h4 id=\"git-log命令选项\"><a class=\"markdownIt-Anchor\" href=\"#git-log命令选项\">#</a>  <code>git log</code>  命令选项</h4>\n<p>这里我们就先介绍一写常用的命令选项。</p>\n<h5 id=\"显示每次提交所引入的差异-patch\"><a class=\"markdownIt-Anchor\" href=\"#显示每次提交所引入的差异-patch\">#</a> 显示每次提交所引入的差异  <code>--patch</code></h5>\n<p><code>git log --patch</code>  或者  <code>git log -p</code>  会显示每次提交所引入的差异，会按照补丁的方式展示。后面也可以加上数字来限制下面显示几次提交。比如： <code>git log -p -1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index 11c20cd..844b7e8 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -2,3 +2,4 @@</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\"> 第四行</span><br><span class=\"line\">+第五行</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index f1c8e85..11c20cd 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -1,3 +1,4 @@</span><br><span class=\"line\"> 第一行</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\">+第四行</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>限制提交数演示：</p>\n<p><code>git log -p -1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index 11c20cd..844b7e8 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -2,3 +2,4 @@</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\"> 第四行</span><br><span class=\"line\">+第五行</span><br></pre></td></tr></table></figure>\n<p>这个选项可以在每次提交的下面列出所有修改过的文件，有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>\n<h5 id=\"查看每次提交的简略统计信息-git-log-stat\"><a class=\"markdownIt-Anchor\" href=\"#查看每次提交的简略统计信息-git-log-stat\">#</a> 查看每次提交的简略统计信息， <code>git log --stat</code></h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">## 什么文件被修改了，增加还是删除</span><br><span class=\"line\"> testGitLog | 1 +</span><br><span class=\"line\">## 一共修改了多少文件</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"格式化输出日志-pretty\"><a class=\"markdownIt-Anchor\" href=\"#格式化输出日志-pretty\">#</a> 格式化输出日志  <code>--pretty</code></h4>\n<p>这个选项可以使不同于默认格式化的方式展示提交历史。它提供了几种内建的格式化方式，除此之外使用者还可以自定义格式化方式。</p>\n<h6 id=\"内建一oneline\"><a class=\"markdownIt-Anchor\" href=\"#内建一oneline\">#</a> 内建一：oneline</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master) test git-log 5</span><br><span class=\"line\">b9df1bb5c10f6602f7fa889ca91759a2e45e69cb test git-log 4</span><br><span class=\"line\">b282b882317b118095eb921e707e449f45fdeef6 test git-log 3</span><br><span class=\"line\">f8248a5fbc18a90710c95cee475b34797299bc61 test git-log 2</span><br><span class=\"line\">0718ac9a20021971d6f1a09a3ef72e36b6fd73c9 test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建二-short\"><a class=\"markdownIt-Anchor\" href=\"#内建二-short\">#</a> 内建二： short</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=short</span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建三full\"><a class=\"markdownIt-Anchor\" href=\"#内建三full\">#</a> 内建三：full</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=full</span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建四fuller\"><a class=\"markdownIt-Anchor\" href=\"#内建四fuller\">#</a> 内建四：fuller</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=fullter</span><br><span class=\"line\"></span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"最nb的format\"><a class=\"markdownIt-Anchor\" href=\"#最nb的format\">#</a> 最 NB 的：format</h6>\n<p>这个选项目可以让我们定制记录的显示格式，这种并不会随着 git 的更新而发生改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&quot;%h-%an,%ar:%s&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">769db1c - fangjiaxiaobai, 27 minutes ago:test git-log 5</span><br><span class=\"line\">b9df1bb - fangjiaxiaobai, 27 minutes ago:test git-log 4</span><br><span class=\"line\">b282b88 - fangjiaxiaobai, 27 minutes ago:test git-log 3</span><br><span class=\"line\">f8248a5 - fangjiaxiaobai, 27 minutes ago:test git-log 2</span><br><span class=\"line\">0718ac9 - fangjiaxiaobai, 28 minutes ago:test git-log 1</span><br></pre></td></tr></table></figure>\n<p>format 后面的分别代表什么含义呢？<br>\n这里列出了 Format 的常用参数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%H</td>\n<td style=\"text-align:left\">提交的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%h</td>\n<td style=\"text-align:left\">提交的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%T</td>\n<td style=\"text-align:left\">树的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%t</td>\n<td style=\"text-align:left\">树的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%P</td>\n<td style=\"text-align:left\">父提交的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">父提交的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%an</td>\n<td style=\"text-align:left\">作者名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ae</td>\n<td style=\"text-align:left\">作者的电子邮件地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ad</td>\n<td style=\"text-align:left\">作者修订日期（可以用 --date = 选项 来定制格式）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ar</td>\n<td style=\"text-align:left\">作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cn</td>\n<td style=\"text-align:left\">提交者的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ce</td>\n<td style=\"text-align:left\">提交者的电子邮件地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cd</td>\n<td style=\"text-align:left\">提交日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cr</td>\n<td style=\"text-align:left\">提交日期（距今多长时间）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">提交说明</td>\n</tr>\n</tbody>\n</table>\n<p>咦～？作者和提交这有什么区别呢？<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mtext>❷</mtext></msup></mrow><annotation encoding=\"application/x-tex\">^❷</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.363em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.363em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">❷</span></span></span></span></span></span></span></span></span></span></span><br>\n这里，小白就要卖一个关子了。不过答案就在这个系列里～。因为在目前这总单分支的本地开发环境里，提交者就是作者。<br>\n另外在多分支的开发过车中，使用  <code>format</code>  配合  <code>--graph</code>  选项就尤为有用。后面介绍～</p>\n<h5 id=\"限制输出性的选项\"><a class=\"markdownIt-Anchor\" href=\"#限制输出性的选项\">#</a> 限制输出性的选项</h5>\n<p>上面用过了  <code>-&lt;number&gt;</code>  的方式来显示 git log 输出日志的条数，git 还提供了 类似于：  <code>--since</code>  和  <code>--until</code> ,  <code>--before</code>  等时间限制的选项目。</p>\n<p>比如：  <code>git log --since=2.weeks</code>  输出 2 周之内的提交记录。</p>\n<p>该命令可用的格式十分丰富 —— 可以是类似 “2008-01-15” 的具体的某一天，也可以是类似 “2 years 1 day 3 minutes ago” 的相对日期。<br>\n还可以过滤出匹配指定条件的提交。 用  <code>--author</code>  选项显示指定作者的提交，用  <code>--grep</code>  选项搜索提交说明中的关键字。</p>\n<p>另一个非常有用的过滤器是 -S（俗称 <code>“pickaxe”</code>  选项，取 “用鹤嘴锄在土里捡石头” 之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -S function_name</span><br></pre></td></tr></table></figure>\n<p>最后一个很实用的  <code>git log</code>  选项是路径（ <code>path</code> ）， 如果只关心某些文件或者目录的历史提交，可以在  <code>git log</code>  选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（ <code>--</code> ）隔开之前的选项和后面限定的路径名。</p>\n<h2 id=\"git-commit-amend\"><a class=\"markdownIt-Anchor\" href=\"#git-commit-amend\">#</a>  <code>git commit --amend</code></h2>\n<p>这个命令可以让我们重写上一次的提交记录。<br>\n比如有下面这样的场景：</p>\n<p>小白修改了一个文件，提交了之后发现写了一个错别字，小白又想保持 <code>git</code>  提交历史的整洁。这时  <code>git commit -amend</code>  就派上了用场了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git log --pretty=oneline</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第留行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 6 &quot;</span><br><span class=\"line\">[detached HEAD f65b589] test git-log 6</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">➜  gitlearn git:(master) vim testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a --amend -m &quot;test git-log 6 &quot;</span><br><span class=\"line\">[detached HEAD 1afd020] test git-log 6</span><br><span class=\"line\"> Date: Tue Jul 21 16:36:43 2020 +0800</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 查看提交日志</span><br><span class=\"line\">➜  gitlearn git:(master) git log --pretty=oneline</span><br><span class=\"line\">1afd020466eb9b519cec80415cb1e9c587612511 (HEAD) test git-log 6</span><br><span class=\"line\">769db1cd5ba091162707a3e648d67ec8e6913d2b test git-log 5</span><br><span class=\"line\">b9df1bb5c10f6602f7fa889ca91759a2e45e69cb test git-log 4</span><br><span class=\"line\">b282b882317b118095eb921e707e449f45fdeef6 test git-log 3</span><br><span class=\"line\">f8248a5fbc18a90710c95cee475b34797299bc61 test git-log 2</span><br><span class=\"line\">0718ac9a20021971d6f1a09a3ef72e36b6fd73c9 test git-log 1</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<p>注意！ 这里第二次提交的结果会替换掉之前的一次提交。</p>\n<p>以上就是本次 简约版本时光机的所有内容了。下一篇 远程仓库</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/04-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/04-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/",
            "title": "git基本使用一",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p>上一篇文章，我们学习了 使用 <code>git</code>  如何创建一个仓库。而且还详细的介绍了 <code>git</code>  各个工作目录的作用。</p>\n<p><code>git</code> :  <code>global information tracker</code></p>\n<p><code>git</code>  其实是内容寻址文件系统。本质是一个 <code>key-value</code>  的数据库。在上一篇文章了解了 <code>git</code>  的四种对象：提交对象，数据对象，树对象和标签对象。还学习了 <code>git</code>  的引用 ( <code>HEAD</code> , <code>Index</code> , <code>refs</code>  目录)，以及最后学习了 <code>git</code>  的压缩，( <code>git gc</code> ).</p>\n<p>今天我们从 简单的 git 使用流程说起。</p>\n<p>上一篇中，我们创建了一个仓库.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master)</span><br></pre></td></tr></table></figure>\n<p>新建完仓库之后，我们一般会对仓库进行配置。</p>\n<h3 id=\"git-config\"><a class=\"markdownIt-Anchor\" href=\"#git-config\">#</a> git config</h3>\n<p><code>git</code>  自带了一个  <code>git config</code>  工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置。</p>\n<ul>\n<li><code>A</code> : <code>/etc/gitconfig</code>  文件：包含系统上每一个用户以及他们仓库的通用配置。 如果执行  <code>git config</code>  时，带上 --system 选项，就会读写该配置文件中的配置属性。</li>\n<li><code>B</code> : <code>~/.gitconfig</code>  或  <code>~/.config/git/config</code>  文件：只针对当前用户。使用  <code>--global</code>  选项会让 <code>git</code>  读写此文件，这会对你系统的上的<b>所有</b>仓库生效。</li>\n<li><code>C</code> : 当前使用仓库的 <code>git</code>  目录的 <code>config</code>  文件 ( <code>.git/config</code> ): 只针对当前仓库。 可以使用  <code>--local</code>  选项让 <code>git</code>  强制读写此文件，默认情况下也会使用它。</li>\n</ul>\n<p>读取顺序为：  <code>A</code> -&gt; <code>B</code> -&gt; <code>C</code> ,  <code>C</code>  会覆盖 <code>B</code>  中相同的配置， <code>B</code>  会覆盖 <code>A</code>  中相同的配置。</p>\n<blockquote>\n<p>可以通过 git config --list --show origin 命令查查文件位置以及命令所在的文件。</p>\n</blockquote>\n<p>一般我们新建了仓库，或者  <code>clone</code>  一个远程仓库到本地之后，<b>第一件事就是配置自己的用户名和邮件地址。</b></p>\n<p>刚才说过，三种配置方式的作用范围，这里<b>一般情况下</b>会使用  <code>--global</code> 。 当前登录的用户都会使用一样的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;fangjiaxiaobai&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;fangjiaxiaobai@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>这一点非常重要！</p>\n<p>我们来查看一下配置的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global --list</span><br><span class=\"line\">user.name=fangjiaxiaobai</span><br><span class=\"line\">user.email=fangjiaxiaobai@163.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-git-的默认文本编辑器\"><a class=\"markdownIt-Anchor\" href=\"#修改-git-的默认文本编辑器\">#</a> 修改 git 的默认文本编辑器</h4>\n<p><code>git</code>  的文本编辑器有什么作用呢？</p>\n<p>当我们的文件 在 提交代码，拉取远程代码或者切换分支出现冲突的时候， <code>git</code>  命令行窗口就会有一个处理冲突之后填写 <code>commit</code>  信息的命令行窗口，这里使用的编辑器就是 我们要说的 “文本编辑器了”。</p>\n<p><code>git</code>  中默认的文本编辑器是  <code>nano</code>  编辑器，我们使用进行配置，使用  <code>vim</code>  编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git config --global core.editor &quot;vim&quot;</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git config --global -l</span><br><span class=\"line\">user.name=fangjiaxiaobai</span><br><span class=\"line\">user.email=fangjiaxiaobai@163.com</span><br><span class=\"line\">core.editor=vim</span><br></pre></td></tr></table></figure>\n<p>配置完仓库，之后，我们就正式开始使用  <code>git</code>  了。</p>\n<h3 id=\"使用-git-进行工作\"><a class=\"markdownIt-Anchor\" href=\"#使用-git-进行工作\">#</a> 使用  <code>git</code>  进行工作</h3>\n<p>简单来讲，我们只需三步，两个命令就可以完成文件的版本控制。</p>\n<ul>\n<li>修改文件 (创建文件，修改文件内容，删除文件)</li>\n<li>使用  <code>git add .</code>  将文件纳入版本管理</li>\n<li>使用  <code>git commit -m &quot;xxx&quot;</code>  将文件提交到版本仓库。</li>\n</ul>\n<p>在我们的工作目录中 (比如  <code>gitlearn/</code> ), 所有的文件只有两种状态：  <code>已跟踪</code> 和 <code>未跟踪</code> 。</p>\n<p>已跟踪的文件是指被纳入版本控制的文件。在上一次快照中有他们的记录，在工作一段时间后，他们的状态可能是未修改，已修改，或者已经放入了 <code>暂存区</code>  $^❶ $。</p>\n<p>未跟踪的文件：就是 即不存在上次快照中，也没有被放入暂存区中。</p>\n<p>这里我们再次的介绍一下 <code>git</code>  的工作区域:</p>\n<p>工作区，暂存区，版本库。</p>\n<p>工作区，就是我们修改的文件。包括：新建文件，修改文件内容，删除文件。<br>\n暂存区，就是 <code>git</code>  将我们修改的文件记录起来起来。<br>\n版本库，就是 <code>git</code>  的记录的版本变更历史。就是  <code>.git</code>  目录下的 <code>objects/</code>  等目录下的所有文件。即我们 进行了 <code>commit</code>  操作之后就会进入了版本库。</p>\n<h3 id=\"让-git-跟踪我们的文件\"><a class=\"markdownIt-Anchor\" href=\"#让-git-跟踪我们的文件\">#</a> 让  <code>git</code>  跟踪我们的文件</h3>\n<p>使用  <code>git add</code>  命令，可以让 <code>git</code>  开始跟踪一个文件。</p>\n<p>使 <code>git</code>  跟踪文件  <code>README.md</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test git跟踪文件&#x27; &gt; README.md</span><br><span class=\"line\"># 查看工作区中文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tREADME.md</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>\n<p>这里我们看到了，未跟踪的该文件：  <code>README.md</code> 。我们可以使用 <code>git add</code>  命令，将未跟踪的文件纳入跟踪范围。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git add README.md</span><br><span class=\"line\"># 查看文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br></pre></td></tr></table></figure>\n<p><code>Changes to be committed</code> : 将要提交的变更。说明下面的文件已经是暂存状态了。使用  <code>git rm --cached &lt;file&gt;...</code>  命令可以取消暂存。此时 <code>README.md</code>  文件已经是 <code>git</code>  跟踪的了。我们再次修改一下  <code>README.md</code>  文件。查看一下工作区中文件的状态.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;test 再次修改已经被跟踪的文件&#x27; &gt;&gt; README.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodified:   README.md</span><br></pre></td></tr></table></figure>\n<p>又看到了 <code>Changes not staged for commit</code> ： 还没有被暂存的提交去提交。说明第二次的变更还没有被 <code>git</code>  跟踪起来。这就需要我们在运行一次 <code>git add README.md</code>  命令了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git add README.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，第二次更改也被 <code>git</code>  跟踪了起来。</p>\n<p><code>git status</code>  命令的输出十分详细，可以使用 <code>git status -s(--short)</code>  命令，输出非常简洁的结果.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git status -s</span><br><span class=\"line\">A  README.md</span><br></pre></td></tr></table></figure>\n<p>输出结果的格式是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XX file1</span><br><span class=\"line\">XX file2</span><br></pre></td></tr></table></figure>\n<p>左列 XX: 第一个 X 表示，暂存区的状态，第二个 X 表示工作区的状态。</p>\n<p>XX 的规则如下：</p>\n<ul>\n<li>新添加的未跟踪文件前面有？？标记</li>\n<li>新添加到暂存区中的文件前面有 A 标记</li>\n<li>修改过的文件前面有 M 标记。</li>\n</ul>\n<h3 id=\"提交到版本库\"><a class=\"markdownIt-Anchor\" href=\"#提交到版本库\">#</a> 提交到版本库</h3>\n<p>现在我们就可以提交文件了。最好在每次提交之前都用  <code>git status</code>  看下，我们需要的文件是否都放入 暂存区了。然后再用  <code>git commit</code>  进行提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br><span class=\"line\"># 提交代码</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;first commit&quot;</span><br><span class=\"line\">[master (root-commit) fb554b5] first commit</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 README.md</span><br></pre></td></tr></table></figure>\n<p>可以看到，提交后它会告诉你，当前是在哪个分支（ <code>master</code> ）提交的，本次提交的完整  <code>SHA-1</code>  校验和是什么（ <code>463dc4f</code> ），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p>\n<p>以上就是我们最简单的开发流程了。</p>\n<p>这时，如果我不想某个文件纳入版本管理，但是这个文件还必须要在工作区中呢？</p>\n<h4 id=\"忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#忽略文件\">#</a> 忽略文件</h4>\n<p>在这种情况下，我们可以创建一个名为：  <code>.gitignore</code>  的文件，列出要忽略的文件的模式。</p>\n<p><code>.gitignore</code>  文件的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 # 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>\n<li>匹配模式可以以（/）开头防止递归。</li>\n<li>匹配模式可以以（/）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li>\n</ul>\n<p>所谓的  <code>glob</code>  模式是指  <code>shell</code>  所使用的简化了的正则表达式。 星号 <code>（*）</code> 匹配零个或多个任意字符； <code>[abc]</code>  匹配任何一个列在方括号中的字符 （这个例子要么匹配一个  <code>a</code> ，要么匹配一个  <code>b</code> ，要么匹配一个  <code>c</code> ）； 问号 <code>（?）</code> 只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如  <code>[0-9]</code>  表示匹配所有  <code>0</code>  到  <code>9</code>  的数字）。 使用两个星号（ <code>**</code> ）表示匹配任意中间目录，比如  <code>a/**/z</code>  可以匹配  <code>a/z</code>  、  <code>a/b/z</code>  或  <code>a/b/c/z</code>  等。</p>\n<p>来看一个  <code>.gitignore</code>  文件的例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 忽略所有的 .a 文件</span></span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class=\"line\">/TODO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n<p>假设：我们还有一个名叫：  <code>git.log</code>  的文件。在更早的一个快照中，已经把它纳入了版本库中。现在我们要把它移除掉。应该怎么办呢</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 准备工作</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test remove logs files&#x27; &gt; git.log</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test remove logs files&quot;</span><br><span class=\"line\">[master b83b8f1] test remove logs files</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 git.log</span><br><span class=\"line\"></span><br><span class=\"line\"> ### 移除 git.log</span><br><span class=\"line\">➜  gitlearn git:(master) git rm git.log</span><br><span class=\"line\">rm &#x27;git.log&#x27;</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\"># 新建 .gitignore 文件</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;*.log&#x27; &gt; .gitignore</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\"># 查看文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   .gitignore</span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;*.log&#x27; &gt; .gitignore</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   .gitignore</span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交文件</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test remove logs files - remove git.log&quot;</span><br><span class=\"line\">[master 9118876] test remove logs files - remove git.log</span><br><span class=\"line\"> 2 files changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"> create mode 100644 .gitignore</span><br><span class=\"line\"> delete mode 100644 git.log</span><br><span class=\"line\">➜  gitlearn git:(master) git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\"># 验证一下git.log文件会不会被git跟踪</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改了git.log文件之后，git不会跟踪其变更。</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test track git.log??&#x27; &gt; git.log</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>运行  <code>git rm</code>  命令并不能删除文件！是从 <code>git</code>  中删除，使 <code>git</code>  不在跟踪其变化。</p>\n<p>有时候，使用  <code>git rm</code>  命令并不能使文件不被 <code>git</code>  跟踪，因为在缓存中还跟踪了文件。 这使，可以使用  <code>git rm -rf --cached</code>  命令使 <code>git</code>  不跟踪文件。</p>\n<p><code>git rm</code>  命令也可以使用  <code>glob</code>  模式。</p>\n<h3 id=\"查看文件的修改内容\"><a class=\"markdownIt-Anchor\" href=\"#查看文件的修改内容\">#</a> 查看文件的修改内容</h3>\n<p><code>git</code>  提供了一个命令 <code>git diff</code>  可以查看文件修改了那些地方.</p>\n<p>假设：我们修改了一个文件，我要看一下修改的内容 (此时还没有提交。)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test diff&#x27; &gt; README.md</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看不同</span><br><span class=\"line\">### 比较的是： 工作目录中当前文件和暂存区域快照之间的差异。</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git diff</span><br><span class=\"line\">diff --git a/README.md b/README.md</span><br><span class=\"line\">index 2afbeed..b69a2df 100644</span><br><span class=\"line\">--- a/README.md</span><br><span class=\"line\">+++ b/README.md</span><br><span class=\"line\">@@ -1,2 +1 @@</span><br><span class=\"line\">-test git跟踪文件</span><br><span class=\"line\">-test 再次修改已经被跟踪的文件</span><br><span class=\"line\">+test diff</span><br></pre></td></tr></table></figure>\n<p>使用  <code>--staged</code>  选项可以比较 已暂存文件与最后一次提交的文件差异。<br>\n<b>请注意， <code>git diff</code>  本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件，运行  <code>git diff</code>  后却什么也没有，就是这个原因。</b></p>\n<h3 id=\"移动文件\"><a class=\"markdownIt-Anchor\" href=\"#移动文件\">#</a> 移动文件</h3>\n<p>可以使用  <code>git mv</code>  命令来移动文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git mv README.md README.md.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\trenamed:    README.md -&gt; README.md.md</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodified:   README.md.md</span><br></pre></td></tr></table></figure>\n<p>这个命令就相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv README.md README.md.md</span><br><span class=\"line\">$ git rm README.md</span><br><span class=\"line\">$ git add README.md.md</span><br></pre></td></tr></table></figure>\n<p>本篇文章就到这里啦，下一篇～<b>git 的时光机</b></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/01-GIt%E5%AE%89%E8%A3%85/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/01-GIt%E5%AE%89%E8%A3%85/",
            "title": "安装git",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"windows下安装\"><a class=\"markdownIt-Anchor\" href=\"#windows下安装\">#</a> windows 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"linux下安装\"><a class=\"markdownIt-Anchor\" href=\"#linux下安装\">#</a> linux 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"mac下安装\"><a class=\"markdownIt-Anchor\" href=\"#mac下安装\">#</a> mac 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/13-git%E5%91%BD%E4%BB%A4/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/13-git%E5%91%BD%E4%BB%A4/",
            "title": "git命令",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p>本章开始学习一些在开发中常用的 git 命令</p>\n<p>先看一下 git 有多少个命令。</p>\n<p>直接在 命令行中输入 git 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  / git</span><br><span class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">These are common Git commands used in various situations:</span><br><span class=\"line\"></span><br><span class=\"line\">start a working area (see also: git help tutorial)</span><br><span class=\"line\">   clone      Clone a repository into a new directory</span><br><span class=\"line\">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class=\"line\"></span><br><span class=\"line\">work on the current change (see also: git help everyday)</span><br><span class=\"line\">   add        Add file contents to the index</span><br><span class=\"line\">   mv         Move or rename a file, a directory, or a symlink</span><br><span class=\"line\">   reset      Reset current HEAD to the specified state</span><br><span class=\"line\">   rm         Remove files from the working tree and from the index</span><br><span class=\"line\"></span><br><span class=\"line\">examine the history and state (see also: git help revisions)</span><br><span class=\"line\">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class=\"line\">   grep       Print lines matching a pattern</span><br><span class=\"line\">   log        Show commit logs</span><br><span class=\"line\">   show       Show various types of objects</span><br><span class=\"line\">   status     Show the working tree status</span><br><span class=\"line\"></span><br><span class=\"line\">grow, mark and tweak your common history</span><br><span class=\"line\">   branch     List, create, or delete branches</span><br><span class=\"line\">   checkout   Switch branches or restore working tree files</span><br><span class=\"line\">   commit     Record changes to the repository</span><br><span class=\"line\">   diff       Show changes between commits, commit and working tree, etc</span><br><span class=\"line\">   merge      Join two or more development histories together</span><br><span class=\"line\">   rebase     Reapply commits on top of another base tip</span><br><span class=\"line\">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class=\"line\"></span><br><span class=\"line\">collaborate (see also: git help workflows)</span><br><span class=\"line\">   fetch      Download objects and refs from another repository</span><br><span class=\"line\">   pull       Fetch from and integrate with another repository or a local branch</span><br><span class=\"line\">   push       Update remote refs along with associated objects</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some</span><br><span class=\"line\">concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;</span><br><span class=\"line\">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<p>小朋友，你以为 git 就这几个命令吗？</p>\n<p>太单纯！！！<br>\n还有很多命令！！ 下篇分享（也分享不完）</p>\n<h3 id=\"git-clone\"><a class=\"markdownIt-Anchor\" href=\"#git-clone\">#</a> git clone</h3>\n<h3 id=\"git-init\"><a class=\"markdownIt-Anchor\" href=\"#git-init\">#</a> git init</h3>\n<h3 id=\"git-add\"><a class=\"markdownIt-Anchor\" href=\"#git-add\">#</a> git add</h3>\n<h3 id=\"git-commit\"><a class=\"markdownIt-Anchor\" href=\"#git-commit\">#</a> git commit</h3>\n<h3 id=\"git-checkout\"><a class=\"markdownIt-Anchor\" href=\"#git-checkout\">#</a> git checkout</h3>\n<h3 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a> git log</h3>\n<h3 id=\"git-tag\"><a class=\"markdownIt-Anchor\" href=\"#git-tag\">#</a> git tag</h3>\n<h3 id=\"git-diff\"><a class=\"markdownIt-Anchor\" href=\"#git-diff\">#</a> git diff</h3>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/14-git%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/14-git%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/",
            "title": "其他命令",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">available git commands in &#x27;/usr/local/git/libexec/git-core&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  add                       diff-index                merge-octopus             reset</span><br><span class=\"line\">  add--interactive          diff-tree                 merge-one-file            rev-list</span><br><span class=\"line\">  am                        difftool                  merge-ours                rev-parse</span><br><span class=\"line\">  annotate                  difftool--helper          merge-recursive           revert</span><br><span class=\"line\">  apply                     fast-export               merge-resolve             rm</span><br><span class=\"line\">  archimport                fast-import               merge-subtree             send-email</span><br><span class=\"line\">  archive                   fetch                     merge-tree                send-pack</span><br><span class=\"line\">  bisect                    fetch-pack                mergetool                 sh-i18n--envsubst</span><br><span class=\"line\">  bisect--helper            filter-branch             mktag                     shell</span><br><span class=\"line\">  blame                     fmt-merge-msg             mktree                    shortlog</span><br><span class=\"line\">  branch                    for-each-ref              mv                        show</span><br><span class=\"line\">  bundle                    format-patch              name-rev                  show-branch</span><br><span class=\"line\">  cat-file                  fsck                      notes                     show-index</span><br><span class=\"line\">  check-attr                fsck-objects              p4                        show-ref</span><br><span class=\"line\">  check-ignore              gc                        pack-objects              stage</span><br><span class=\"line\">  check-mailmap             get-tar-commit-id         pack-redundant            stash</span><br><span class=\"line\">  check-ref-format          grep                      pack-refs                 status</span><br><span class=\"line\">  checkout                  gui                       patch-id                  stripspace</span><br><span class=\"line\">  checkout-index            gui--askpass              prune                     submodule</span><br><span class=\"line\">  cherry                    hash-object               prune-packed              submodule--helper</span><br><span class=\"line\">  cherry-pick               help                      pull                      subtree</span><br><span class=\"line\">  citool                    http-backend              push                      svn</span><br><span class=\"line\">  clean                     http-fetch                quiltimport               symbolic-ref</span><br><span class=\"line\">  clone                     http-push                 read-tree                 tag</span><br><span class=\"line\">  column                    imap-send                 rebase                    unpack-file</span><br><span class=\"line\">  commit                    index-pack                rebase--helper            unpack-objects</span><br><span class=\"line\">  commit-tree               init                      receive-pack              update-index</span><br><span class=\"line\">  config                    init-db                   reflog                    update-ref</span><br><span class=\"line\">  count-objects             instaweb                  remote                    update-server-info</span><br><span class=\"line\">  credential                interpret-trailers        remote-ext                upload-archive</span><br><span class=\"line\">  credential-cache          log                       remote-fd                 upload-pack</span><br><span class=\"line\">  credential-cache--daemon  ls-files                  remote-ftp                var</span><br><span class=\"line\">  credential-store          ls-remote                 remote-ftps               verify-commit</span><br><span class=\"line\">  cvsexportcommit           ls-tree                   remote-http               verify-pack</span><br><span class=\"line\">  cvsimport                 mailinfo                  remote-https              verify-tag</span><br><span class=\"line\">  cvsserver                 mailsplit                 remote-testsvn            web--browse</span><br><span class=\"line\">  daemon                    merge                     repack                    whatchanged</span><br><span class=\"line\">  describe                  merge-base                replace                   worktree</span><br><span class=\"line\">  diff                      merge-file                request-pull              write-tree</span><br><span class=\"line\">  diff-files                merge-index               rerere</span><br><span class=\"line\"></span><br><span class=\"line\">git commands available from elsewhere on your $PATH</span><br><span class=\"line\"></span><br><span class=\"line\">  credential-osxkeychain</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some</span><br><span class=\"line\">concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;</span><br><span class=\"line\">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<p>除去上篇文章中介绍的命令，这些命令就相对高端了～，我们还是挑一些可以用得到来分享。</p>\n<h3 id=\"命令解释\"><a class=\"markdownIt-Anchor\" href=\"#命令解释\">#</a> 命令解释</h3>\n<ul>\n<li>git hash-object</li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/20-git%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/20-git%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/",
            "title": "git开发模型 - github-flow",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"github-flow\"><a class=\"markdownIt-Anchor\" href=\"#github-flow\">#</a>  <code>github flow</code></h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndWlkZXMuZ2l0aHViLmNvbS9pbnRyb2R1Y3Rpb24vZmxvdy8=\">参考地址</span></p>\n<p><code>GitHub flow</code>  是一个轻量级的，基于分支的工作流，它支持定期进行部署的团队和项目。</p>\n<p><code>gitHub flow</code>  主要分为以下步骤：</p>\n<h4 id=\"1创建分支\"><a class=\"markdownIt-Anchor\" href=\"#1创建分支\">#</a> 1. 创建分支</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>在你准备进行开发的时候，或者突然有一个想法，想要马上去实现的时候，先创建一个分支。</p>\n<p>分支是 <code>Git</code>  中的核心概念，整个 <code>GitHub</code>  流程都以此为基础。只有一个规则： <code>master</code>  分支中的任何内容始终都是可部署的。因此，在处理功能或修订时，要在主分支之外创建新分支非常重要。您的分支名称应具有描述性（例如，重构身份验证，用户内容缓存密钥， <code>make-retina</code>  头像），以便其他人可以看到正在处理的内容。</p>\n<h4 id=\"2-添加提交\"><a class=\"markdownIt-Anchor\" href=\"#2-添加提交\">#</a> 2. 添加提交</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>创建分支后，就该开始进行更改了。每当添加，编辑或删除文件时，您都在进行提交，并将其添加到分支中。添加提交的过程会使 git 跟踪您在功能分支上工作的进度。提交还会为您的工作创建透明的历史记录，其他人可以参考该历史记录来了解您的工作以及原因。每个提交都有一个关联的提交消息，该消息是说明为什么进行特定更改的说明。此外，每次提交都被视为一个单独的变更单元。如果发现错误或决定朝另一个方向前进，则可以回滚更改。</p>\n<h4 id=\"3打开拉取请求\"><a class=\"markdownIt-Anchor\" href=\"#3打开拉取请求\">#</a> 3. 打开拉取请求</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>将我们本地开发的代码 <code>commit</code>  了之后，在 <code>push</code>  远程仓库之前，我们要 发起一次  <code>pull request</code> . 这最直接的效果就是如果存在冲突，我们就可以现在本地完成冲突的处理。其次，通过 <code>pull request</code>  我们还可以看到团队中其他成员的工作内容，获取该项目中最新的代码。</p>\n<h4 id=\"4讨论并检查您的代码\"><a class=\"markdownIt-Anchor\" href=\"#4讨论并检查您的代码\">#</a> 4. 讨论并检查您的代码</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>打开 “拉取请求” 后，审阅您所做更改的人员或团队可能会有疑问或意见。也许编码风格与项目准则不匹配，更改缺少单元测试，或者一切看起来都很不错，并且道具井井有条。提取请求旨在鼓励和捕获这种类型的对话。您还可以根据有关提交的讨论和反馈继续推送到分支机构。如果有人评论您忘记做某事，或者代码中有错误，则可以在分支机构中对其进行修复，然后进行更改。 <code>GitHub</code>  将在统一的 “拉取请求” 视图中显示您的新提交以及您可能收到的任何其他反馈。</p>\n<h4 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\">#</a> 部署</h4>\n<p><img data-src=\"./images/github-flow5.png\" alt=\"github-flow5.png\"></p>\n<p>借助 <code>GitHub</code> ，您可以从分支机构进行部署，以在正式合并之前进行生产中的最终测试。审核拉取请求并且分支机构通过测试后，您可以部署更改以在生产中进行验证。如果您的分支机构引起问题，则可以通过将现有的主服务器部署到生产中来回滚它。</p>\n<h4 id=\"合并到master分支\"><a class=\"markdownIt-Anchor\" href=\"#合并到master分支\">#</a> 合并到 master 分支</h4>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>现在您的更改已在生产环境中得到验证，是时候将代码合并到 <code>master</code>  分支中了。合并后，拉取请求会保留代码历史更改的记录。因为它们是可搜索的，所以它们使任何人都能及时返回，以了解做出决定的原因和方式。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/07-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A44-%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%AB%E5%90%8D/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/07-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A44-%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%AB%E5%90%8D/",
            "title": "git 基础 - 标签 和 别名",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"标签\"><a class=\"markdownIt-Anchor\" href=\"#标签\">#</a> 标签</h3>\n<p>标签最主要的作用是，人们会使用这个功能来发布节点，作为一个里程碑等特殊意义的标识。</p>\n<p><code>git</code>  中标签使用  <code>tag</code>  来表示。对应着  <code>git tag</code>  这个命令。</p>\n<p>先看一下  <code>git tag</code>  命令吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]</span><br><span class=\"line\">        &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class=\"line\">git tag -d &lt;tagname&gt;...</span><br><span class=\"line\">git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class=\"line\">        [--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class=\"line\">        [--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class=\"line\">        [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;...]</span><br><span class=\"line\">git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;...</span><br></pre></td></tr></table></figure>\n<p>老规矩，这里我们介绍几个常用的命令。</p>\n<h4 id=\"标签命令\"><a class=\"markdownIt-Anchor\" href=\"#标签命令\">#</a> 标签命令</h4>\n<p><code>git</code>  支持两种标签， 轻量标签 和 附注标签。</p>\n<p>轻量标签 是一个 <code>不会改变的分支</code> ，它只是一个特定的提交引用。<br>\n而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p>\n<p>这里我以功能为点，同时介绍两种标签的使用的方式。</p>\n<h5 id=\"创建标签\"><a class=\"markdownIt-Anchor\" href=\"#创建标签\">#</a> 创建标签</h5>\n<h6 id=\"创建附注标签\"><a class=\"markdownIt-Anchor\" href=\"#创建附注标签\">#</a> 创建附注标签</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  git_learn git:(master) git log --pretty=oneline</span><br><span class=\"line\">cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 (HEAD -&gt; master) commit 3</span><br><span class=\"line\">76400568f6397322f7d57d13834fa5ff6fbed2d9 commit 2</span><br><span class=\"line\">5758ef102fd4924ffbcf4c0cfeddac503deb32a9 commit 1</span><br><span class=\"line\"></span><br><span class=\"line\">## 添加标签</span><br><span class=\"line\">➜  git_learn git:(master) git tag -a v1.0 cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 -m &quot;第一个tag&quot;</span><br><span class=\"line\">## 查看标签的内容</span><br><span class=\"line\">➜  git_learn git:(master) git show v1.0</span><br><span class=\"line\"># 输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。  2</span><br><span class=\"line\">tag v1.0</span><br><span class=\"line\">Tagger: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Fri Jul 31 08:51:24 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">第一个tag</span><br><span class=\"line\"></span><br><span class=\"line\">commit cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 (HEAD -&gt; master, tag: v1.0)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Fri Jul 31 08:45:24 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    commit 3</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/test3.txt b/test3.txt</span><br><span class=\"line\">new file mode 100644</span><br><span class=\"line\">index 0000000..e69de29</span><br></pre></td></tr></table></figure>\n<p><code>-m</code>  选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会启动编辑器要求你输入信息</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_update-index/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_update-index/",
            "title": "git命令详解之 git update-index",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"官方\"><a class=\"markdownIt-Anchor\" href=\"#官方\">#</a> 官方</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git update-index [&lt;options&gt;] [--] [&lt;file&gt;...]</span><br><span class=\"line\"></span><br><span class=\"line\">    -q                    continue refresh even when index needs update</span><br><span class=\"line\">    --ignore-submodules   refresh: ignore submodules</span><br><span class=\"line\">    --add                 do not ignore new files</span><br><span class=\"line\">    --replace             let files replace directories and vice-versa</span><br><span class=\"line\">    --remove              notice files missing from worktree</span><br><span class=\"line\">    --unmerged            refresh even if index contains unmerged entries</span><br><span class=\"line\">    --refresh             refresh stat information</span><br><span class=\"line\">    --really-refresh      like --refresh, but ignore assume-unchanged setting</span><br><span class=\"line\">    --cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;path&gt;</span><br><span class=\"line\">                          add the specified entry to the index</span><br><span class=\"line\">    --chmod (+/-)x        override the executable bit of the listed files</span><br><span class=\"line\">    --assume-unchanged    mark files as &quot;not changing&quot;</span><br><span class=\"line\">    --no-assume-unchanged</span><br><span class=\"line\">                          clear assumed-unchanged bit</span><br><span class=\"line\">    --skip-worktree       mark files as &quot;index-only&quot;</span><br><span class=\"line\">    --no-skip-worktree    clear skip-worktree bit</span><br><span class=\"line\">    --info-only           add to index only; do not add content to object database</span><br><span class=\"line\">    --force-remove        remove named paths even if present in worktree</span><br><span class=\"line\">    -z                    with --stdin: input lines are terminated by null bytes</span><br><span class=\"line\">    --stdin               read list of paths to be updated from standard input</span><br><span class=\"line\">    --index-info          add entries from standard input to the index</span><br><span class=\"line\">    --unresolve           repopulate stages #2 and #3 for the listed paths</span><br><span class=\"line\">    -g, --again           only update entries that differ from HEAD</span><br><span class=\"line\">    --ignore-missing      ignore files missing from worktree</span><br><span class=\"line\">    --verbose             report actions to standard output</span><br><span class=\"line\">    --clear-resolve-undo  (for porcelains) forget saved unresolved conflicts</span><br><span class=\"line\">    --index-version &lt;n&gt;   write index in this format</span><br><span class=\"line\">    --split-index         enable or disable split index</span><br><span class=\"line\">    --untracked-cache     enable/disable untracked cache</span><br><span class=\"line\">    --test-untracked-cache</span><br><span class=\"line\">                          test if the filesystem supports untracked cache</span><br><span class=\"line\">    --force-untracked-cache</span><br><span class=\"line\">                          enable untracked cache without testing the filesystem</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/README/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/README/",
            "title": "git命令详解",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<h3 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"./git_update-index.md\">git update-index</a></label></li>\n</ul>\n<h3 id=\"小技巧\"><a class=\"markdownIt-Anchor\" href=\"#小技巧\">#</a> 小技巧</h3>\n<ul>\n<li>某个文件需要被管理，但是要忽略其修改的内容。 <a href=\"./git_update-index.md\">git update-index</a><br>\ngit update-index --no-skip-worktree 同样可以。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMDQzMDQyNg==\">参考文档</span>   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMDM1ODU4OA==\">参考文档 2</span></li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_ls-files/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_ls-files/",
            "title": "git命令详解之 git ls-files",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git ls-files [&lt;options&gt;] [&lt;file&gt;...]</span><br><span class=\"line\"></span><br><span class=\"line\">    -z                    paths are separated with NUL character</span><br><span class=\"line\">    -t                    identify the file status with tags</span><br><span class=\"line\">    -v                    use lowercase letters for &#x27;assume unchanged&#x27; files</span><br><span class=\"line\">    -c, --cached          show cached files in the output (default)</span><br><span class=\"line\">    -d, --deleted         show deleted files in the output</span><br><span class=\"line\">    -m, --modified        show modified files in the output</span><br><span class=\"line\">    -o, --others          show other files in the output</span><br><span class=\"line\">    -i, --ignored         show ignored files in the output</span><br><span class=\"line\">    -s, --stage           show staged contents&#x27; object name in the output</span><br><span class=\"line\">    -k, --killed          show files on the filesystem that need to be removed</span><br><span class=\"line\">    --directory           show &#x27;other&#x27; directories&#x27; names only</span><br><span class=\"line\">    --eol                 show line endings of files</span><br><span class=\"line\">    --empty-directory     don&#x27;t show empty directories</span><br><span class=\"line\">    -u, --unmerged        show unmerged files in the output</span><br><span class=\"line\">    --resolve-undo        show resolve-undo information</span><br><span class=\"line\">    -x, --exclude &lt;pattern&gt;</span><br><span class=\"line\">                          skip files matching pattern</span><br><span class=\"line\">    -X, --exclude-from &lt;file&gt;</span><br><span class=\"line\">                          exclude patterns are read from &lt;file&gt;</span><br><span class=\"line\">    --exclude-per-directory &lt;file&gt;</span><br><span class=\"line\">                          read additional per-directory exclude patterns in &lt;file&gt;</span><br><span class=\"line\">    --exclude-standard    add the standard git exclusions</span><br><span class=\"line\">    --full-name           make the output relative to the project top directory</span><br><span class=\"line\">    --recurse-submodules  recurse through submodules</span><br><span class=\"line\">    --error-unmatch       if any &lt;file&gt; is not in the index, treat this as an error</span><br><span class=\"line\">    --with-tree &lt;tree-ish&gt;</span><br><span class=\"line\">                          pretend that paths removed since &lt;tree-ish&gt; are still present</span><br><span class=\"line\">    --abbrev[=&lt;n&gt;]        use &lt;n&gt; digits to display SHA-1s</span><br><span class=\"line\">    --debug               show debugging data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/03-git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%BC%80%E5%A7%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/03-git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%BC%80%E5%A7%8B/",
            "title": "从创建仓库开始",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"从创建仓库开始\"><a class=\"markdownIt-Anchor\" href=\"#从创建仓库开始\">#</a> 从创建仓库开始</h2>\n<p>这篇文章分享一下我们在使用 git 进行版本管理时候的常用的操作！我们从创建仓库开始～</p>\n<p>获取代码仓库的方式有两种，一种是从零开始初始化一个 git 仓库，另一种是 clone 他人的仓库。</p>\n<p>首先我们创建一个空目录，然后初始化一个仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ cd</span><br><span class=\"line\"># 创建空目录</span><br><span class=\"line\">~ mkdir gitlearn</span><br><span class=\"line\">~ cd gitlearn</span><br><span class=\"line\"># 初始化仓库</span><br><span class=\"line\">~ git init .</span><br></pre></td></tr></table></figure>\n<p>就这样我们创建一个了<b>本地仓库</b>, 团队合作的时候这样肯定不行的，不行，后面我们后介绍到。<br>\n或者 我们还可以克隆一个<b>远程仓库</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br></pre></td></tr></table></figure>\n<p>我们来看一下新建的仓库目录下都有什么文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) l</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 .</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 ..</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 13 18:25 .git</span><br><span class=\"line\">➜  gitlearn git:(master) cd .git</span><br><span class=\"line\">➜  .git git:(master) l</span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 13 18:30 .</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 ..</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    16B  7 13 20:38 COMMIT_EDITMSG # 存储最新一次的commit信息</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    23B  7 13 18:23 HEAD ## 当前被检出的分支</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 13 18:23 branches # 所有分支</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel   315B  7 13 18:23 config # 包含项目特有的配置选项</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    73B  7 13 18:23 description #Git web页面程序使用</span><br><span class=\"line\">drwxr-xr-x  12 bjhl  wheel   384B  7 13 18:23 hooks # 包含客户端或者服务器端的钩子脚本</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 info # 包含一个全局性排除文件，用以防止那些不希望被纳入版本管理的文件，.gitignore文件中记录的</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel   126B  7 13 20:39 index ## 保存暂存区信息(进行stash操作之后出现的)</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 13 18:23 objects ## 存储所有数据的内容</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 13 18:23 refs ## 存储指向数据（分支，远程仓库和标签等）的提交对象的指针。</span><br></pre></td></tr></table></figure>\n<p>其中有四个条目非常重要，我用  <code>##</code>  进行了标注。 分别是： <code>HEAD</code>  文件， <code>index</code>  文件， <code>objects</code>  目录， <code>refs</code>  目录。</p>\n<p><b>如果你想只是想了解 git 的话，那么下面的内容就可以忽略了。</b></p>\n<p>我们来搞一点有趣的东西。</p>\n<h3 id=\"objects目录下存放的是什么东西-git对象\"><a class=\"markdownIt-Anchor\" href=\"#objects目录下存放的是什么东西-git对象\">#</a>  <code>objects/</code>  目录下存放的是什么东西？–  Git 对象</h3>\n<p>前面说过， <code>git</code>  是一个内容寻址文件系统。==&gt;  <code>git</code>  是一个简单的键值对数据库。</p>\n<p>即，你可以向 <code>git</code>  仓库中插入任务类型的内容，它会返回一个唯一的键。通过该键可以在任意时刻再次取回该内容。</p>\n<p>上面说过， <code>objects</code>  目录下存放的是所有数据的内容。在 <code>git</code>  中，数据是什么呢？是我们工作目录的所有文件的快照！</p>\n<p>这里我们使用两个还没有学习的命令。</p>\n<ul>\n<li><code>git add .</code> ： 将目录中的文件纳入版本库进行管理起来。此时的状态是： <code>已暂存(新建)</code> 。暂存区的目录树会被更新，同时工作区修改 (新增的) 文件内容被写入到对象库中的一个新文件中，而该对象的 id 会被记录在暂存区的文件索引中。</li>\n<li><code>git commit -m 'xxx'</code> ：将目录中的文件提交到本地版本库。此时的状态是： <code>已提交</code> 。这时，暂存区的目录树写到版本库中，对应的分支会进行相应的更新。</li>\n</ul>\n<p>那下面演示一下： <code>objects</code>  目录下存储的文件。</p>\n<p>首先，我们查看下 <code>object</code>  目录下的所有文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看objects下的文件</span></span><br><span class=\"line\">~ l .git/objects </span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 14 11:30 .</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 14 11:30 ..</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 14 11:30 info</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 14 11:30 pack</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个文件： test-objects-files-01.txt</span></span><br><span class=\"line\">➜  gitlearn git:(master) sudo touch test-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 root  wheel   128B  7 14 15:10 .</span><br><span class=\"line\">drwxr-xr-x  10 root  wheel   320B  7 14 15:10 ..</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改文件</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sudo vim test-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 root  wheel   128B  7 14 15:10 .</span><br><span class=\"line\">drwxr-xr-x  10 root  wheel   320B  7 14 15:10 ..</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx   5 root  wheel   160B  7 14 15:34 .</span><br><span class=\"line\">drwxrwxrwx  11 root  wheel   352B  7 14 15:34 ..</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 14 15:34 37</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # blob类型(文件)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用git cat-file来看下一下文件的内容</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git cat-file -p 3717929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们进行commit</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test-object-files add&quot;</span><br><span class=\"line\">[master (root-commit) 1883fd5] test-object-files add</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ..省略部分提示</span></span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100755 test-objects-files-01.txt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 来看一下objects目录下的文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 表示存储的事blob格式的文件，test-objects-files-01.txt</span></span><br><span class=\"line\">100755 blob 3717929ecb3efabae427dbe3725654b3de1a114b\ttest-objects-files-01.txt</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 存储的是 树对象(后面有介绍)</span></span><br><span class=\"line\">tree 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">author bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594712728 +0800</span><br><span class=\"line\">committer bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594712728 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">test-object-files add</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>git cat-file<br>\n 这个命令可以实现从 <code>git</code>  仓库中取回数据。-p 参数可以自动判断内容的类型。还有一个写入的命令。 <code>git hash-object</code>  . 下面简单演示一下。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test hash-object function&#x27; | git hash-object -w --stdin</span><br><span class=\"line\">11a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 11a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">test hash-object function</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d # commit-id </span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br></pre></td></tr></table></figure>\n<p>从上面的例子我们可以看到， <code>git</code>  中含有， <code>blob</code>   <code>commit-id</code> ， <code>tree</code> ，这三种对象。<br>\n这其实就是  <code>Git</code>  的对象：数据对象，提交对象，树对象。</p>\n<p>接下来我们来看一个 <code>git</code>  的对象 - 树对象</p>\n<h3 id=\"树对象\"><a class=\"markdownIt-Anchor\" href=\"#树对象\">#</a> 树对象</h3>\n<p>树对象能够解决文件名保存的问题，也允许多个文件组织到一起。所有内容均以树对象和数据独享的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 <code>inodes</code>  或者文件内容。</p>\n<p>一个树对象包含了一条或多条树对象记录，每条记录含有一个指向数据对象或者子树对象的 <code>SHA-1</code>  指针，以及相应的模式，类型，文件名信息。</p>\n<p>我们再来看一下，刚才的三个 <code>objects</code>  下的校验和。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">tree 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">test-object-files add</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">100755 blob 3717929ecb3efabae427dbe3725654b3de1a114b\ttest-objects-files-01.txt</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 3717929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">test - objects - files - 第一行</span><br></pre></td></tr></table></figure>\n<p>我根据 数对象  <code>1883fd</code>  找到了  <code>54500d</code>  (表示对应的 txt 文件)，然后可以根据 txt 文件，看到这次提交的内容 <code>371792</code> . 如下图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%9501.png\" alt=\"git工作目录01.png\"></p>\n<p>这时，我们在尝试从修改一下这个文件，进行提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) sudo vim test-objects-files-01.txt</span><br><span class=\"line\">Password:</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99 # test hash-object function (本次实验可以忽略)</span><br><span class=\"line\">## 下面两行是新增的，本次操作生成的。</span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04 #内容: test - objects - files - 第一行 \\n test - objects - files - 第二行</span><br><span class=\"line\"></span><br><span class=\"line\">## 提交到版本库中。</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test-object-files updated&quot;</span><br><span class=\"line\">[master 200e059] test-object-files updated</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d # commit - id</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99 # test hash-object function(本次实现忽略) </span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04 # 文件</span><br><span class=\"line\"># 下面两行是新增的，本次操作生成的</span><br><span class=\"line\">./.git/objects/20/0e059f0c0b178378aecd6736f384a74d28df94 # commit-id</span><br><span class=\"line\">./.git/objects/20/db6c4af7677b7509d2b323b503733405e4987e # 树对象</span><br></pre></td></tr></table></figure>\n<p>我们的操作如下：</p>\n<ol>\n<li>在 git 仓库中创建了一个文件，并且将它纳入版本管理，提交到了版本库中</li>\n<li>修改了这个问题，并且再次提交到了版本库中。</li>\n</ol>\n<p>经过这个两个步骤之后，出现了如下图的  <code>git</code>  树对象。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D02.png\" alt=\"git工作目录介绍02.png\"></p>\n<p>这时，我们使用  <code>git log</code>  命令来查看日志。可以发现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br></pre></td></tr></table></figure>\n<p>为了便于大家理解，咱们继续修改这个文件，加上第三行数据:  <code>test - objects - files - 第三行</code> ：</p>\n<p>然后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;test-object-files updated 02&quot;</span><br></pre></td></tr></table></figure>\n<p>然后查看 <code>objects</code>  目录下的文件内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/20/0e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">./.git/objects/20/db6c4af7677b7509d2b323b503733405e4987e</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 以下三行是本次commit产生的。</span></span><br><span class=\"line\">./.git/objects/a6/2a79d99b37bc5c44ca083cd40f9e4c00aae0bd # commit-id，提交对象</span><br><span class=\"line\">./.git/objects/ba/f6b0843a522f8e77f326d2615cb37ed290d06e # 文件，数据对象</span><br><span class=\"line\">./.git/objects/c4/3622f1e8e728f88eb11adfee1ea08d41c792a0 # 树对象</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</span><br><span class=\"line\">tree c43622f1e8e728f88eb11adfee1ea08d41c792a0</span><br><span class=\"line\">parent 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">test-object-files updated 02</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p c43622f1e8e728f88eb11adfee1ea08d41c792a0</span><br><span class=\"line\">100755 blob baf6b0843a522f8e77f326d2615cb37ed290d06e\ttest-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p baf6b0843a522f8e77f326d2615cb37ed290d06e</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\">test - objects - files - 第二行</span><br><span class=\"line\">test - objects - files - 第三行</span><br></pre></td></tr></table></figure>\n<p>做完上面的操作之后，我们来看一下 <code>objects</code>  目录下的树结构图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D03.png\" alt=\"git工作目录介绍03.png\"></p>\n<h4 id=\"objects目录总结\"><a class=\"markdownIt-Anchor\" href=\"#objects目录总结\">#</a> objects 目录总结</h4>\n<ul>\n<li>作用： 存放所有数据的内容。</li>\n<li><code>git</code>  是一个内容存执文件管理系统。也就是一个 <code>KV</code>  数据库，对应的 <code>key-value</code>  放到了 <code>objects</code>  目录下，存储形式是一个 <code>40</code>  位十六机制的校验和。 <code>key</code>  是文件名， <code>value</code>  是文件内容。</li>\n<li>学习了两个底层命令：  <code>git cat-file</code>  和  <code>git hash-object</code> . 更多底层命令可以看下这篇文章。// TODO</li>\n<li><b>演示一个文件的三次更新时变化过程，以及各个版本之间的迭代过程，那么如果是多个文件呢？这里大家可以去试一下，就会更清晰的理解树对象了。（这里演示一个文件并不能完全的解释清树对象这个概念）</b></li>\n</ul>\n<h2 id=\"git引用-git工作目录下的refs目录\"><a class=\"markdownIt-Anchor\" href=\"#git引用-git工作目录下的refs目录\">#</a> Git 引用， git 工作目录下的 refs 目录！</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) l ./.git/refs/</span><br><span class=\"line\">drwxrwxrwx   3 root  wheel    96B  7 14 17:02 heads</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 tags</span><br></pre></td></tr></table></figure>\n<ul>\n<li>heads 目录，存储各个分支的 HEAD 指针指向的版本。</li>\n<li>tags 目录，git tag 命令产生的结果。</li>\n</ul>\n<h4 id=\"heads目录\"><a class=\"markdownIt-Anchor\" href=\"#heads目录\">#</a> heads 目录</h4>\n<p>我们还是根据 objects 部门的操作来演示这部分的内容。<br>\n如下图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D04-object%E7%9B%AE%E5%BD%95%E6%80%BB%E7%BB%93.png\" alt=\"git工作目录介绍04-object目录总结.png\"></p>\n<p>通过查看我们目前是在  <code>a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</code>  这个版本上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) cat ./.git/refs/heads/master</span><br><span class=\"line\">a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</span><br></pre></td></tr></table></figure>\n<p>我们可以通过  <code>git update-ref</code>  命令来实现切换版本 (回退到制定的版本上)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们先使用 git log 命令来查看一下提交记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 17:02:46 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated 02</span><br><span class=\"line\"></span><br><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们要回退到第二个版本上。使用 git update-ref,更新引用。</span></span><br><span class=\"line\">➜ .git git:(master) git update-ref refs/heads/master 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 再去查看git的Head目录下的版本号</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ cat ./.git/refs/heads/master</span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 这个时候再使用 git log 去看日志：</span></span><br><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br><span class=\"line\"><span class=\"comment\"># 再去看我们的文件: 是不会更新工作区内容的。</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ cat test-objects-files-01.txt</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第一行</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第二行</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第三行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们还可以使用 git update-ref 来创建新的分支。</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ <span class=\"built_in\">cd</span> .git</span><br><span class=\"line\">➜  .git git:(master) git update-ref refs/heads/<span class=\"built_in\">test</span> 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 查看test分支的日志</span></span><br><span class=\"line\">➜  .git git:(master) git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"built_in\">test</span></span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master, <span class=\"built_in\">test</span>) test-object-files updated</span><br><span class=\"line\">1883fd5aefeb430cb25150e531e92e38f0176f0d test-object-files add</span><br><span class=\"line\"><span class=\"comment\"># 这时我们去查看我们所处的分支, 发现我们仍然处在master上，并没有进行切换。</span></span><br><span class=\"line\">➜  .git git:(master) git branch</span><br><span class=\"line\">* master</span><br><span class=\"line\">  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>上面的演示中，我们发现了，虽然只是修改的记录的文件，但是并没有对我们工作区的文件进行更新。怎么解决呢？</p>\n<h3 id=\"head文件\"><a class=\"markdownIt-Anchor\" href=\"#head文件\">#</a> HEAD 文件</h3>\n<p><code>HEAD</code>  文件通常是一个符号引用，指向目前所在的分支。所谓符号引用，表示它是一个指向其他引用的指针。</p>\n<p>我们查看一下  <code>HEAD</code>  文件中的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ cat .git/HEAD</span><br><span class=\"line\">ref: refs/heads/master</span><br></pre></td></tr></table></figure>\n<p>这里呢，有一个命令可以帮助我们实现修改  <code>HEAD</code>  文件的内容</p>\n<p><b>git symbolic-ref</b></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在的分支</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git symbolic-ref HEAD</span><br><span class=\"line\">refs/heads/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置当前所在的分支</span></span><br><span class=\"line\">➜  .git git:(master) git symbolic-ref HEAD refs/heads/test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 已经可以看到我们已经把分支切换到了<span class=\"built_in\">test</span></span></span><br><span class=\"line\">➜  .git git:(test)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们去看 工作区里的文件，发现并没有变化！</span></span><br><span class=\"line\">➜  .git git:(test) cat ../test-objects-files-01.txt</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\">test - objects - files - 第二行</span><br><span class=\"line\">test - objects - files - 第三行</span><br></pre></td></tr></table></figure>\n<p>文件的内容的，修改就必须使用  <code>git checkout</code>  /  <code>git reset</code>  了。</p>\n<p>我们回来接着看 refs 目录的另一个目录：tags.</p>\n<p>tags 是 git tag 命令的产物。</p>\n<p>然后，在 git 中，tags 其实是标签对象，包含了一个标签创建者信息，一个日期，一段注释信息，以及一个指针。标签对象通常指向一个提交对象，而不是一个树对象。永远都会指向同一个提交对象。</p>\n<p>标签分为 附注标签 和 轻量标签。</p>\n<p>使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 常见一个轻量标签 -&gt; 一个固定的引用</span><br><span class=\"line\">➜  .git git:(test) git update-ref refs/tags/v1.0 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br></pre></td></tr></table></figure>\n<p>创建一个附注标签的时候，git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向要提交的对象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  .git git:(test) git tag -a v1.1 1883fd5aefeb430cb25150e531e92e38f0176f0d -m &#x27;附注标签&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看标签对象。</span></span><br><span class=\"line\">➜  .git git:(test) cat refs/tags/v1.1</span><br><span class=\"line\">3f224b87d02aa196b0b8331aa28389a172e3f723</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看附注标签详细的内容</span></span><br><span class=\"line\">➜  .git git:(test) git cat-file -p 3f224b87d02aa196b0b8331aa28389a172e3f723</span><br><span class=\"line\">object 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">type commit</span><br><span class=\"line\">tag v1.1</span><br><span class=\"line\">tagger bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594727545 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">附注标签</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程引用\"><a class=\"markdownIt-Anchor\" href=\"#远程引用\">#</a> 远程引用</h4>\n<p>在 git 的引用中，还有一个远程引用。</p>\n<p>这个目录会在我们配置远程仓库的时候出现，我们一起配置一下远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置远程仓库</span></span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push 到远程分支。</span></span><br><span class=\"line\">➜  gitlearn git:(master) git push origin master</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 548 bytes | 548.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class=\"line\">To https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 .git目录下，出现了remotes</span></span><br><span class=\"line\"> ➜  gitlearn git:(master) l ./.git/refs/</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxrwxrwx   6 root  wheel   192B  7 14 19:58 .</span><br><span class=\"line\">drwxrwxrwx  16 root  wheel   512B  7 14 19:58 ..</span><br><span class=\"line\">drwxrwxrwx   4 root  wheel   128B  7 14 19:56 heads</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 14 19:58 remotes</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    41B  7 14 19:56 stash # 进行git stash命令后出现</span><br><span class=\"line\">drwxrwxrwx   4 root  wheel   128B  7 14 19:52 tags</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看对应remote配置文件</span></span><br><span class=\"line\">➜  gitlearn git:(master) cat .git/refs/remotes/origin/master</span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94</span><br></pre></td></tr></table></figure>\n<p>这个校验码表示 ，远程版本库中和本地的版本库中最新一次交互的 commit id 。</p>\n<p>远程引用和分支之间最主要的区别，就是远程引用是只读的。Git 永远不会讲 HEAD 引用指向该远程引用，因此，不可能通过 commit 来更新远程引用。</p>\n<h3 id=\"index文件\"><a class=\"markdownIt-Anchor\" href=\"#index文件\">#</a> Index 文件</h3>\n<p>这个文件是  <code>git stage</code>  的文件信息存放地，根据该文件中的内容，可以查看当前哪些文件，或者哪些文件发生了变化，而在 <code>commit</code>  之后，则会把相应的信息存入  <code>.git/objects</code>  文件夹下。通过  <code>git ls-files -s</code>  可以查 看  <code>index</code>  文件中的  <code>stage</code>  文件的信息。</p>\n<p><code>Index</code>  文件是用二进制存储的，包含有  <code>ctime</code>  和  <code>mtime</code>  时间信息，文件存储的设备信息，磁盘的 <code>inode</code>  信息，文件的  <code>mode</code>  信息， <code>UID</code> ， <code>GID</code> ，文件大小，文件的 <code>SHA-1</code>  码， <code>flag</code> ，文件的 <code>file path</code>  等信息。</p>\n<p>各个文件的信息按照一定的排列顺序进行排布。提交的时候，按照这种约定进行解析。</p>\n<h2 id=\"包文件\"><a class=\"markdownIt-Anchor\" href=\"#包文件\">#</a> 包文件</h2>\n<p>在文章一开始，我们就说过，git 是基于快照的方式来进行版本控制的。这就意味着，我们每进行一次 commit 操作，git 就是存储一份我们所有的文件。那么，一个大项目，那岂不是会占用很大的存储空间？？</p>\n<p>我们先做个实验。看看 git 会不会占用很大的存储空间？</p>\n<p><b>首先，我们新建一个仓库</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建仓库</span><br><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\"># 添加文件</span><br><span class=\"line\">➜  gitlearn git:(master) touch test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 1&quot;</span><br><span class=\"line\">[master (root-commit) 12cbb50] test package file 1</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test-package-file</span><br><span class=\"line\"># 查看数据对象的id</span><br><span class=\"line\">➜  gitlearn git:(master)  git cat-file -p master^&#123;tree&#125;</span><br><span class=\"line\">100644 blob c2e8644a8379ab0cf4f2bc5a14160d94608502f7\ttest-package-file</span><br><span class=\"line\"># 修改 test ,添加 test package file * 700</span><br><span class=\"line\">➜  gitlearn git:(master) vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 2&quot;</span><br><span class=\"line\">[master 421177c] test package file 2</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 740 insertions(+)</span><br><span class=\"line\"># 查看第二次提交的数据对象的id</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p master^&#123;tree&#125;</span><br><span class=\"line\">100644 blob 363980e2f742592594e01648888a661d2d0479b9\ttest-package-file</span><br><span class=\"line\">### 查看两次数据对象的大小</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -s c2e8644a8379ab0cf4f2bc5a14160d94608502f7</span><br><span class=\"line\">18</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -s 363980e2f742592594e01648888a661d2d0479b9</span><br><span class=\"line\">13338</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看一下这两次文件存储的文件。</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/12/cbb50359469eb29efe29945a3b18e262f6e862</span><br><span class=\"line\">./.git/objects/36/3980e2f742592594e01648888a661d2d0479b9</span><br><span class=\"line\">./.git/objects/42/1177c9026e757e7e123b6ee589bcffa067eb96</span><br><span class=\"line\">./.git/objects/8e/0703665933215a57787a3117b079d4c8cb1921</span><br><span class=\"line\">./.git/objects/c2/e8644a8379ab0cf4f2bc5a14160d94608502f7</span><br><span class=\"line\">./.git/objects/c3/1d0ebb18efdfc791a254ab58a01ff2ed0136e4</span><br></pre></td></tr></table></figure>\n<p>现在 <code>git</code>  中存储了两个文件，分别是我们第一次提交和第二次提交的内容。</p>\n<p>如果 <code>git</code>  像 <code>SVN</code>  一样记录变更的内容的话，是不是更好呢？</p>\n<p><code>git</code>  上本来可以那么做。  <code>git</code>  最初向磁盘中存储对象时所使用的格式称为 松散对象格式。 但是， <code>git</code>  会时不时的将多个对象打包成一个 称为 “包文件” 的二进制文件。来节省空间和效率。</p>\n<p>当仓库中有太多的 松散对象，或者手动执行  <code>git gc</code>  命令，或者向远程服务器执行推送时， <code>git</code>  都会这么做。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行一下 git gc</span><br><span class=\"line\">➜  gitlearn git:(master) git gc</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack</span><br></pre></td></tr></table></figure>\n<p>这里生成了一个包文件 ( <code>.pack</code> ) 和一个索引文件 ( <code>.idx</code> )。包文件抱愧了刚才从一个文件系统中移除的所有对象的内容，索引文件包含了文件的偏移信息。我们可以通过偏移文件快速的定位任意一个指定对象。</p>\n<p><code>git</code>  打包对象时，会查找命名以及大小相近的文件，并只保存文件不同版本之间的差异内容。可以使用  <code>git verify-pack</code>  这个底层命令查看已经打包内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git verify-pack -v .git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">421177c9026e757e7e123b6ee589bcffa067eb96 commit 238 160 12</span><br><span class=\"line\">12cbb50359469eb29efe29945a3b18e262f6e862 commit 190 131 172</span><br><span class=\"line\">363980e2f742592594e01648888a661d2d0479b9 blob   13338 80 303</span><br><span class=\"line\">c31d0ebb18efdfc791a254ab58a01ff2ed0136e4 tree   45 55 383</span><br><span class=\"line\">8e0703665933215a57787a3117b079d4c8cb1921 tree   45 56 438</span><br><span class=\"line\">c2e8644a8379ab0cf4f2bc5a14160d94608502f7 blob   18 28 494</span><br><span class=\"line\">non delta: 6 objects</span><br><span class=\"line\">.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack: ok</span><br></pre></td></tr></table></figure>\n<p>其中第三列是在包文件中各个对象的大小，可以看到，树对象是 <code>45</code>  字节，数据对象和提交对象，都是原来的大小。</p>\n<p>显然这次并没有进行压缩。 我们再次修改文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改文件： 最后一行添加 test package file</span><br><span class=\"line\">➜  gitlearn git:(master) vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 3&quot;</span><br><span class=\"line\">[master 2ab3a27] test package file 3</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> # 查看目录下的文件</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/2a/b3a275bf16a86f77e632127ccf62bcecf98579</span><br><span class=\"line\">./.git/objects/84/003569b2725d79bc209821c9c3dbb5c2ef8a8d</span><br><span class=\"line\">./.git/objects/df/e088f704e98a835ed3ca2ce31919947d63f884</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack</span><br><span class=\"line\"># 进行打包</span><br><span class=\"line\">➜  gitlearn git:(master) git gc</span><br><span class=\"line\">Counting objects: 9, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (9/9), done.</span><br><span class=\"line\">Total 9 (delta 1), reused 5 (delta 0)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.idx</span><br><span class=\"line\">./.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.pack</span><br><span class=\"line\"># 查看打包的内容</span><br><span class=\"line\">➜  gitlearn git:(master) git verify-pack -v .git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.idx</span><br><span class=\"line\">2ab3a275bf16a86f77e632127ccf62bcecf98579 commit 238 160 12</span><br><span class=\"line\">421177c9026e757e7e123b6ee589bcffa067eb96 commit 238 160 172</span><br><span class=\"line\">12cbb50359469eb29efe29945a3b18e262f6e862 commit 190 131 332</span><br><span class=\"line\">84003569b2725d79bc209821c9c3dbb5c2ef8a8d tree   45 56 555</span><br><span class=\"line\">c31d0ebb18efdfc791a254ab58a01ff2ed0136e4 tree   45 55 611</span><br><span class=\"line\">8e0703665933215a57787a3117b079d4c8cb1921 tree   45 56 684</span><br><span class=\"line\">dfe088f704e98a835ed3ca2ce31919947d63f884 blob   13356 92 463 # 第三次提交</span><br><span class=\"line\">363980e2f742592594e01648888a661d2d0479b9 blob   7 18 666 1 dfe088f704e98a835ed3ca2ce31919947d63f884 # 第二次提交</span><br><span class=\"line\">c2e8644a8379ab0cf4f2bc5a14160d94608502f7 blob   18 28 740 # 第一次提交</span><br><span class=\"line\">non delta: 8 objects</span><br><span class=\"line\">chain length = 1: 1 object</span><br><span class=\"line\">.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.pack: ok</span><br></pre></td></tr></table></figure>\n<p>我们可以到看到 第三次提交的内容是  <code>13356</code>  字节，而第二次提交的内容只有  <code>7</code>  个字节。显然， <code>git</code>  这次进行压缩。另外，第三个版本是保存了最新的文件内容，原始版本是以差异方式存在的 -- 这是因为大部分情况下，需要快速的访问文件的最新版本。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><code>git</code>  创建仓库两种方式：本地创建， <code>clone</code>  仓库</li>\n<li><code>git</code>  仓库的目录结构\n<ul>\n<li><code>objects</code>  目录<br>\n我们通过一个最简单的三次提交来看了一下 <code>git</code>  仓库是如何存储数据的。<br>\n这里，我贴上这张我们操作过程的图，加深一下印象.<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D04-object%E7%9B%AE%E5%BD%95%E6%80%BB%E7%BB%93.png\" alt=\"git工作目录介绍04-object目录总结.png\"></li>\n<li><code>refs</code> : 引用\n<ul>\n<li>四种对象：提交对象，数据对象，树对象，标签对象。</li>\n<li>树对象:  <code>commit-&gt;tree-&gt;blob</code>  (文件)  <span class=\"spoiler\" title=\"...\">课后作业：多文件的提交记录</span></li>\n<li><code>heads/master</code> ,  <code>heads/test/</code> , <code>tags/</code> . 这几个文件的作用</li>\n<li><code>git symbolic</code>  命令，</li>\n</ul>\n</li>\n<li><code>Index</code>  文件。记录当前哪些文件被修改，新增。</li>\n<li>包文件： 解决 git 工作目录过大的问题。压缩。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/README/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/README/",
            "title": "【目录】JDK源码解读目录",
            "date_published": "2021-07-15T06:48:55.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h2>\n<h4 id=\"javautil\"><a class=\"markdownIt-Anchor\" href=\"#javautil\">#</a> java.util</h4>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"/2021/07/15/source%20code/HashMap/HashMap/\">HashMap</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> <a href=\"/2021/07/15/source%20code/HashMap/HashMap%E7%9A%84Hash%E5%87%BD%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89/\">HashMap 的 Hash 函数到底有什么意义.md</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> <a href=\"./HashMap/HashMap%E5%88%B0%E5%BA%95%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84.md\">HashMap 到底为什么是不安全的.md</a></label></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"javautilconcurrency\"><a class=\"markdownIt-Anchor\" href=\"#javautilconcurrency\">#</a> java.util.concurrency</h4>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> ConcurrentHashMap</label></li>\n</ul>\n<h4 id=\"javalang\"><a class=\"markdownIt-Anchor\" href=\"#javalang\">#</a> java.lang</h4>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> <a href=\"2021/07/15/source%20code/String/String/\">String.md</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> <a href=\"./threadLocal/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md\">ThreadLocal 源码分析.md</a></label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\"><label for=\"cbx_6\"> <a href=\"./threadLocal/ThreadLocal%E7%9A%84%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95.md\">ThreadLocal 的哈希算法.md</a></label></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "目录",
                "源码"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap%E7%9A%84Hash%E5%87%BD%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap%E7%9A%84Hash%E5%87%BD%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89/",
            "title": "HashMap的Hash函数到底有什么意义",
            "date_published": "2021-07-15T06:48:55.000Z",
            "content_html": "<h2 id=\"jdk18-hashmap中hash值计算源码\"><a class=\"markdownIt-Anchor\" href=\"#jdk18-hashmap中hash值计算源码\">#</a> jdk1.8 HashMap 中 hash 值计算源码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扰动函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其中的key.hashCode调用的是底层的native方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Q: 为什么不直接使用 key 的 hashCode 值呢？</li>\n</ul>\n<p>如果直接使用 key 的 hashCode () 函数的时候，将 hash 值作下标访问 Map 的数组的话，由于 2 进制的取值范围是 [-2<sup>31,2</sup>31), 加起来大于有 40 亿的映射空间。只要 hash 函数散列的比较松散，那么久很难出现碰撞。当然，40 亿的数据，内存也是放不下的。所以不能直接拿 key 的 hashCode。</p>\n<ul>\n<li>Q: 为什么要进行  <code>h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>  这个运算呢？</li>\n</ul>\n<p>这个问题就要从计算出的 hash 值的作用上来切入了，hashMap 计算这个 hash 值就是为了什么？增删改查的时候确定元素在数组中的位置。那么 hashMap 是怎么确定位置的呢？我们知道 HashMap 中的数组是 tab 字段。根据 tab 找到，在 <code>final HashMap.Node&lt;K,V&gt; getNode(int hash, Object key)</code>  方法中，有这么 <code>tab[(n - 1) &amp; hash]</code>  使用。 n 是数组的长度.<br>\n 这里 n-1 相当于一个 <code>低位掩码</code> ，和 hash 进行与操作的结果就是散列值的高位全部归零，保留低位，用来做下标访问。这么看，就算我们的 hash 散列分布再松散，冲突也会很严重。以默认长度 16 为例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  11111111  11111111 11110000 11101010  # native方法 HashCode()</span><br><span class=\"line\">&amp; 00000000  00000000 00000000 00001111  # 默认初始长度 15 = 16 -1</span><br><span class=\"line\">  -------------------------------------</span><br><span class=\"line\">  00000000  00000000 00000000 00001010  # 进行&amp;操作，计算出的下标为10</span><br></pre></td></tr></table></figure>\n<p>我们看下使用扰动函数计算后的结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 扰动函数计算过程:</span><br><span class=\"line\">   h=hashCode():  11111111  11111111  11110000  11101010  # native方法 HashCode()</span><br><span class=\"line\">   -------------------------------------------------------------------------------</span><br><span class=\"line\">              h:  11111111  11111111  11110000  11101010  # native方法 HashCode()计算出的值。</span><br><span class=\"line\">   ^     h&gt;&gt;&gt;16:  00000000  00000000  11111111  11111111  # hashCode左移16位=&gt;高16位变低位</span><br><span class=\"line\">   -----------------------------------------------------------------------------------</span><br><span class=\"line\">hash=h^(h&gt;&gt;&gt;16):  11111111  11111111  00001111  00010101  # 扰动函数计算出的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 与掩码做&amp;运算=&gt;计算数组下标</span><br><span class=\"line\">hash=h^(h&gt;&gt;&gt;16):  11111111  11111111  00001111  00010101  # 扰动函数计算出的值</span><br><span class=\"line\">            &amp;  :  00000000  00000000  00000000  00001111  # 低位掩码=&gt; hashMap中数组的长度</span><br><span class=\"line\">    -----------------------------------------------------------------------------------</span><br><span class=\"line\">                             ....                  00101  # =&gt;计算出的下标为5.</span><br></pre></td></tr></table></figure>\n<h3 id=\"peter-lawley的一篇专栏文章an-introduction-to-optimising-a-hashing-strategy里的的一个实验\"><a class=\"markdownIt-Anchor\" href=\"#peter-lawley的一篇专栏文章an-introduction-to-optimising-a-hashing-strategy里的的一个实验\">#</a> Peter Lawley 的一篇专栏文章《An introduction to optimising a hashing strategy》里的的一个实验</h3>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/hashMap%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8.png\" alt=\"hashMap扰动函数的作用.png\"></p>\n<p>结果显示，当 HashMap 数组长度为 512 的时候，也就是用掩码取低 9 位的时候，在没有扰动函数的情况下，发生了 103 次碰撞，接近 30%。而在使用了扰动函数之后只有 92 次碰撞。碰撞减少了将近 10%。看来扰动函数确实还是有功效的。</p>\n<h2 id=\"jdk7中的hashmap计算hash的方式\"><a class=\"markdownIt-Anchor\" href=\"#jdk7中的hashmap计算hash的方式\">#</a> JDK7 中的 HashMap 计算 hash 的方式</h2>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemhlbmd3YW5nL3AvODEzNjE2NC5odG1s\">HashMap 中的 hash 函数</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "源码",
                "HashMap",
                "JDK",
                "JDK8"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/String/String/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/String/String/",
            "title": "String类源码解析",
            "date_published": "2021-07-15T06:48:55.000Z",
            "content_html": "<p>一、签名：</p>\n<p><code>public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence</code></p>\n<ul>\n<li>String 不能被继承，</li>\n<li>实现了 Serializable：可被序列化。</li>\n<li>实现了 Comparable：可以比较，排序，</li>\n<li>实现了 CharSequence：值是可读序列。</li>\n</ul>\n<p>二、成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];  <span class=\"comment\">// 存储字符。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash;     <span class=\"comment\">// 缓存字符串的hash值。</span></span><br><span class=\"line\">Private <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectStreamField[] serialPersistentFields = <span class=\"keyword\">new</span> ObjectStreamFiled[<span class=\"number\">0</span>];  <span class=\"comment\">// 字符串类被指定转化序列化流协议中。</span></span><br><span class=\"line\"><span class=\"comment\">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6849794470754667710L</span>;</span><br></pre></td></tr></table></figure>\n<p><code>Value</code>  是 <code>final</code>  的，所以 <code>String</code>  一旦定义之后，就不可变的。</p>\n<p>三、构造函数：</p>\n<p>四、常用方法：</p>\n<p>由于 String 中重载的方法太多了，所以就只写方法名了。</p>\n<p>1.   <code>getBytes</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getBytes() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StringCoding.encode(value, <span class=\"number\">0</span>, value.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上面的这个方法为例：它交给了 <code>StringCoding.encode</code>  去获取 <code>bytes</code> 。然而 <code>StringEncoder</code>  去调用了 <code>StringEncoder</code>  的相应方法获取 <code>bytes</code> 、</p>\n<p>2.  equals</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;   <span class=\"comment\">// 如果地址都相同的话，那肯定就是同一个了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            String anotherString = (String)anObject;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;  <span class=\"comment\">//不错的编码风格。比for要好一点？</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>3.  equalsIgnoreCase:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == anotherString) ? <span class=\"keyword\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">          : (anotherString != <span class=\"keyword\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">          &amp;&amp; (anotherString.value.length == value.length)</span><br><span class=\"line\"></span><br><span class=\"line\">          &amp;&amp; regionMatches(<span class=\"keyword\">true</span>, <span class=\"number\">0</span>, anotherString, <span class=\"number\">0</span>, value.length);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">regionMatches</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreCase, <span class=\"keyword\">int</span> toffset,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            String other, <span class=\"keyword\">int</span> ooffset, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> ta[] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> to = toffset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> pa[] = other.value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> po = ooffset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ooffset &lt; <span class=\"number\">0</span>) || (toffset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                || (toffset &gt; (<span class=\"keyword\">long</span>)value.length - len)</span><br><span class=\"line\"></span><br><span class=\"line\">                || (ooffset &gt; (<span class=\"keyword\">long</span>)other.value.length - len)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">char</span> c1 = ta[to++];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">char</span> c2 = pa[po++];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ignoreCase) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// If characters don&#x27;t match but case may be ignored,</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// try converting both characters to uppercase.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// If the results match, then the comparison scan should</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// continue.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">char</span> u1 = Character.toUpperCase(c1);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">char</span> u2 = Character.toUpperCase(c2);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (u1 == u2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// conversion.  So we need to make one last check before</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// exiting.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在 regionMatches 中首先对传入的参数，进行合法性判断。然后取出每一个字符，比较一下，相同就下个字符，不同，都转换成大写，比较一次，如果相同就比较下一个字符，如果不相同就都转化成小写在比较一下。解释是说：有时候，转大写不一定每次都会正确。</p>\n<p>4.  startsWith:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix, <span class=\"keyword\">int</span> toffset)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> ta[] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> to = toffset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> pa[] = prefix.value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> po = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pc = prefix.value.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((toffset &lt; <span class=\"number\">0</span>) || (toffset &gt; value.length - pc)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (--pc &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>5.  endsWith</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> startsWith(suffix, value.length - suffix.value.length);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.  重点来了：hashCode</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = hash;  <span class=\"comment\">///先获取缓存中的hash值。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h == <span class=\"number\">0</span> &amp;&amp; value.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> val[] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">               h = <span class=\"number\">31</span> * h + val[i];   <span class=\"comment\">// hash值算法。31</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hash = h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>7.  replace</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">char</span> oldChar, <span class=\"keyword\">char</span> newChar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldChar != newChar) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = value.length;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] val = value; <span class=\"comment\">/* avoid getfield opcode */</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++i &lt; len) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val[i] == oldChar) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; len) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                    buf[j] = val[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> c = val[i];</span><br><span class=\"line\">                    buf[i] = (c == oldChar) ? newChar : c;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(buf, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "源码",
                "JDK",
                "JDK8",
                "String"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/15/JDK%E6%BA%90%E7%A0%81/HashMap/HashMap/",
            "title": "全网最全的 HashMap 源码解读",
            "date_published": "2021-07-15T06:48:55.000Z",
            "content_html": "<h2 id=\"要思考的问题\"><a class=\"markdownIt-Anchor\" href=\"#要思考的问题\">#</a> 要思考的问题</h2>\n<ul>\n<li>HashMap 的底层数据结构 (节点结构，这种结构有什么优点)</li>\n<li>如何处理 hash 冲突</li>\n<li>怎么扩容？扩展机制是什么？</li>\n<li>增删改查过程</li>\n<li>链表到红黑树的转换过程，反之？</li>\n<li>红黑树相关 (见另一篇数据结构之红黑树)</li>\n<li>hash 计算</li>\n</ul>\n<h2 id=\"达到的目标\"><a class=\"markdownIt-Anchor\" href=\"#达到的目标\">#</a> 达到的目标</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> 掌握底层数据结构</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 掌握扩容原理</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> 掌握 hash 冲突的处理过程</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> 掌握增删改查过程</label></li>\n</ul>\n<h2 id=\"看之前要掌握的知识点\"><a class=\"markdownIt-Anchor\" href=\"#看之前要掌握的知识点\">#</a> 看之前要掌握的知识点</h2>\n<h3 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"#红黑树\">#</a> 红黑树</h3>\n<h2 id=\"看之前大体了解的知识点\"><a class=\"markdownIt-Anchor\" href=\"#看之前大体了解的知识点\">#</a> 看之前大体了解的知识点</h2>\n<h3 id=\"hash算法\"><a class=\"markdownIt-Anchor\" href=\"#hash算法\">#</a> hash 算法</h3>\n<h3 id=\"poisson分布\"><a class=\"markdownIt-Anchor\" href=\"#poisson分布\">#</a> Poisson 分布</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2lzc29uX2Rpc3RyaWJ1dGlvbg==\">poisson 分布</span></p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<h3 id=\"hashmap的继承体系\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的继承体系\">#</a> HashMap 的继承体系</h3>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/HashMap01-%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB.png\" alt=\"HashMap01-继承体系.png\"></p>\n<ul>\n<li>AbstractMap: map 的抽象类，以最大限度的减少实现 Map 接口的类的工作量。</li>\n</ul>\n<h3 id=\"hashmap结构\"><a class=\"markdownIt-Anchor\" href=\"#hashmap结构\">#</a> hashMap 结构</h3>\n<h3 id=\"字段解释\"><a class=\"markdownIt-Anchor\" href=\"#字段解释\">#</a> 字段解释</h3>\n<h4 id=\"常量字段默认值字段\"><a class=\"markdownIt-Anchor\" href=\"#常量字段默认值字段\">#</a> 常量字段 (默认值字段)</h4>\n<ul>\n<li>DEFAULT_INITIAL_CAPACITY=1&lt;&lt;4: 默认的初始容量，默认是为 16, 必须是 2 的 n 次方。为什么呢？见扩容的方法。</li>\n<li>DEFAULT_LOAD_FACTOR=0.75f: 默认的负载因子。它和哈希表的容量的乘积是决定是否重新 hash 的阈值。</li>\n<li>TREEIFY_THRESHOLD=8: 使用树而不是链表的计数阈值。当桶的元素添加到具有至少这么多节点时，桶被转换为树。</li>\n<li>UNTREEIFY_THRESHOLD=6: 用于在调整大小操作期间解除（拆分）桶的桶计数阈值。(untreeifying 不是一个英语单词，这里的以是非树化，即转换成普通列表的过程). 也就是说从树转换成普通的桶 (链表) 的阈值。</li>\n<li>MAXIMUM_CAPACITY=1&lt;&lt;30: 最大的容量:  <code>1&lt;&lt;30</code> ，如果具有参数的任一构造函数隐式指定更高的值，则使用此参数。必须是 2 的 n 次方，小于等于 <code>1&lt;&lt;30</code></li>\n<li>MIN_TREEIFY_CAPACITY=64: 容器可以树化的最小容量 (否则，如果 bin 中的节点太多，则会调整表的大小.) 应该至少为 4 * TREEIFY_THRESHOLD，以避免调整大小和树化阈值之间的冲突.</li>\n</ul>\n<h4 id=\"类属性\"><a class=\"markdownIt-Anchor\" href=\"#类属性\">#</a> 类属性</h4>\n<ul>\n<li>table:  <code>transient HashMap.Node&lt;K,V&gt;[] table</code> ; table 在首次使用时初始化，并根据需要调整大小。分配时，长度始终是 2 的幂。(我们还在一些操作中容忍长度为零，以允许当前不需要的自举机制)</li>\n<li>entrySet:  <code>transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet</code> ; 保存缓存的 entrySet.</li>\n<li>size:  <code>transient int size</code> ; map 中元素的数量。结构修改是那些改变 HashMap 中映射数量或以其他方式修改其内部结构（例如，rehash）的修改。此字段用于在 HashMap 的 Collection-views 上快速生成迭代器 (见 ConcurrentModificationException)</li>\n</ul>\n<hr>\n<p>注意：这些字段都是  <code>transient</code>  的？为什么呢？</p>\n<ul>\n<li>loadFactor:  <code>final float loadFactor;</code>  hash 表的负载因子，在实例化 hashTable 的时候指定，该对象内不能变更 (final);</li>\n<li>threshold:  <code>int threshold;</code> , 下一次调整容器大小的阈值. threshold=capacity * load factor</li>\n</ul>\n<h4 id=\"hashmap的两种节点\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的两种节点\">#</a> HashMap 的两种节点</h4>\n<ul>\n<li>基本的哈希桶的节点 (链表的结点) Node</li>\n</ul>\n<p><code>static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</code>  它继承了 Map 的 Entry, 是对子类的行为规范。要求提供了 getKey (),getValue () 等常用方法。</p>\n<p>链表节点的结构如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// 避免重复计算key的hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    <span class=\"comment\">// 指向下一个节点的指针</span></span><br><span class=\"line\">    HashMap.Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V value, HashMap.Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>        </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span>      </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> key + <span class=\"string\">&quot;=&quot;</span> + value; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// todo 没有找到在哪里使用了这个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">        V oldValue = value;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">                    Objects.equals(value, e.getValue()))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Tree 的节点 TreeNode</li>\n</ul>\n<p><code>static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt;</code>  继承了其子类的 Entry, 子类的 Entry 继承了父类的 Node. 注意了，这里乍一看还挺乱。来张图吧。<br>\n<img data-src=\"/images/JavaSourceCode/HashMap/hashMap%E7%9A%84%E8%8A%82%E7%82%B9%E7%9A%84%E7%BB%A7%E6%89%BF%E5%9B%BE.png\" alt=\"hashMap的节点的继承图.png\"></p>\n<p>这里呢，TreeNode 其实是 Node 的孙子，也就是说 HashMap 的树节点是链表节点的孙子辈儿的。<br>\n为什么要使两种节点有继承关系呢？为什么 TreeNode 不直接继承 Node 节点呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; parent;  <span class=\"comment\">// red-black tree links</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; prev;    <span class=\"comment\">// needed to unlink next upon deletion</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> red;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> hash, K key, V val, HashMap.Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(hash, key, val, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hashmap增加方法-hashmapput\"><a class=\"markdownIt-Anchor\" href=\"#hashmap增加方法-hashmapput\">#</a> HashMap 增加方法 HashMap#put ()</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  将指定的value和key关联在map中。</span></span><br><span class=\"line\"><span class=\"comment\">*  如果map中已经存在了key,那么将会替换掉老的value。</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> key key 指定的key</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> value value 和指定key关联的value</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 如果返回了value，就说明map中原来和key关联是有值的。如果返回null就说明没有value。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就比较有看点了，1. 这里是 hashMap 的增加方法，增加方法里必然会遇到 hash 冲突的问题，我们等会看下 hash 冲突是如何处理的，还会涉及到扩容的问题，我们也要来看看他是怎么扩容的，扩容的过程中还会遇到普通的桶转换成树的过程。我们先来看下 hash 值是怎么计算出来的。</p>\n<ul>\n<li TODO=\"\" 和jdk1.7中的比较=\"\"><code>hash</code>  值的计算</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算key的hashCode并且和hashCode值高16位进行异或运算。(异或: 相同为0，不同为1)</span></span><br><span class=\"line\"><span class=\"comment\"> * 混和低位和高位，就是为了加大低位的随机性,而且混合后的低位掺杂了高位的部分特征,</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样高位的信息也被变相的保留了下来。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么这么做呢？见<a href=\"/2021/07/15/source%20code/HashMap/HashMap%E7%9A%84Hash%E5%87%BD%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89/\"> HashMap 的 Hash 函数到底有什么意义</a></p>\n<ul>\n<li>那我们接下接着看 <code>putVal()</code>  方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Map.put相关的方法。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class=\"line\"><span class=\"comment\"> *                     如果是true的,不会修改存在的值。返回老的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> *              如果为false的时候,表属于创建模式,第一次新增元素的时候。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HashMap.Node&lt;K,V&gt;[] tab;</span><br><span class=\"line\">    HashMap.Node&lt;K,V&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果数组为null,或者数组长度为0的时候，数组需要调整大小。</span></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 定位到数组的桶为null的时候,创建桶内的第一个元素。next=null;</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果桶不为null，则创建链表</span></span><br><span class=\"line\">        HashMap.Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// p表示当前桶的第一个元素。</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果新增的元素和第一个元素相等的话(出现hash冲突),暂存已经存在的元素到变量e中。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">                ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> HashMap.TreeNode)</span><br><span class=\"line\">            <span class=\"comment\">// 如果是树节点。</span></span><br><span class=\"line\">            e = ((HashMap.TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 链表元素新增的过程了。</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 如果桶内的元素数量达到树化的阈值,将链表转换成树。</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"comment\">// 如果第一个元素和要新增的元素hash,key都相等的话,直接进行新增操作。</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果原来的元素不为空,保留原来的值。</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 覆盖掉原来的value;</span></span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            <span class=\"comment\">// 留一个无方法体的方法，供子类扩展</span></span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// failFast计数</span></span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        <span class=\"comment\">// 如果table中的桶的数量超过了阈值。扩容。</span></span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    <span class=\"comment\">// 供子类扩展的方法。</span></span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码里中有三处重要的地方， <code>resize()</code> , <code>treeifyBin()</code> , <code>putTreeNode()</code> , 接下来我们依次看下这三个方法。</p>\n<h4 id=\"resize\"><a class=\"markdownIt-Anchor\" href=\"#resize\">#</a> resize</h4>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化，或者加倍表格的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果为null时候，根据字段threshold的初始容量进行分配</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，因为我们正在使用二次幂扩展，所以每个bin中的元素必须保持相同的索引，或者在新表中以两个偏移的幂移动</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the table 新的表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.Node&lt;K, V&gt;[] resize() &#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果旧表的大小大于0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// hash表达到最大容量</span></span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果翻倍后旧表大小&lt;最大表长度，并且旧表长度&gt;默认初始化长度。</span></span><br><span class=\"line\">            <span class=\"comment\">// 扩容的阈值也翻倍。 还是等级 table.length*loadFactor</span></span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        <span class=\"comment\">// 旧表长度&lt;=0,旧的threshold&gt;0,</span></span><br><span class=\"line\">        <span class=\"comment\">// 就把threshold设置为表长度。</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置为默认值。</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果新的扩缩容阈值等于0,设置新的扩缩容阈值为新的容量*负载因子.</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>) newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>) MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                (<span class=\"keyword\">int</span>) ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新创建新的hash表</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] newTab = (HashMap.Node&lt;K, V&gt;[]) <span class=\"keyword\">new</span> HashMap.Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"comment\">// 如果旧表不为空,进行扩容.</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则(旧表为空)就进行初始化过程.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K, V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果当前桶只有一个节点。</span></span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> HashMap.TreeNode) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果当前桶是棵红黑树</span></span><br><span class=\"line\">                    ((HashMap.TreeNode&lt;K, V&gt;) e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    <span class=\"comment\">// 桶是链表,将该桶内的元素重新分配到表中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    HashMap.Node&lt;K, V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    HashMap.Node&lt;K, V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    HashMap.Node&lt;K, V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 遍历桶内的元素，将元素重新分配到hash表内的各个桶中。</span></span><br><span class=\"line\">                    <span class=\"comment\">// 具体的实现过程是: 将当前的元素的hash值和容量取&amp;,如果&gt;0,那就说明该元素应该分配到新的桶内。</span></span><br><span class=\"line\">                    <span class=\"comment\">// 桶的位置就是: oldCap+j.即桶原来容器+该元素所在的桶的下标。(hiHead所标识的位置)</span></span><br><span class=\"line\">                    <span class=\"comment\">// 反之如果hash值是==0的,那么该元素就应该还在当前桶内。(loHead所标识的位置)</span></span><br><span class=\"line\">                    <span class=\"comment\">// 这里所说的位置都是指桶的下标,整个表都是新的了,位置肯定都变了。</span></span><br><span class=\"line\">                    <span class=\"comment\">// 为什么可以这么实现呢？</span></span><br><span class=\"line\">                    <span class=\"comment\">// 因为扩容的时候，使用的是原来容量的2倍进行扩容的。所以就可以使用(oldCap+j)的方式来确定元素的新位置了。</span></span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 还在原桶中</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// 位置最后一个节点为空,使用e=next的时候，next为null的情况。</span></span><br><span class=\"line\">                                <span class=\"comment\">// 在桶内元素遍历完成后,会把桶的最后一个元素的next置为null。</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 放置到新的桶内。</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// 位置最后一个节点为空,使用e=next的时候，next为null的情况。</span></span><br><span class=\"line\">                                <span class=\"comment\">// 在桶内元素遍历完成后,会把桶的最后一个元素的next置为null。</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 原来桶的位置。</span></span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 确定新桶的位置</span></span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一个散列还算非常均匀的例子来看扩容过程。</p>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/hashMap04-Put%E6%96%B9%E6%B3%95%E8%BF%87%E7%A8%8B01.png\" alt=\"hashMap04-Put方法过程01.png\"></p>\n<p>那么进行扩容的过程是怎么样的呢？</p>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/hashMap05-resize%E6%96%B9%E6%B3%9501.png\" alt=\"hashMap05-resize方法01.png\"></p>\n<p>以元素 1 和 12 为例，看扩容过程:<br>\n 元素 1 的 hash 值为 49.(以 hashMap 计算 hash 值的方式得出。)， 与 15 取 &amp; 计算桶的下标为 1, 扩容后，与 31 取 &amp;, 计算桶的下标为 17. 所以扩容前位置是 0，扩容后元素 1 的存放位置是 17。<br>\n代码中是怎么完成这个过程的呢？<br>\n和扩容前 hash 表的容量取 &amp;, 得  <code>49 &amp; 16 = 16 &gt; 0</code>  (代码第 86-96 行), 新的桶的头节点 (对应代码里的 hiHead) 就是当前节点 1，尾节点 (hiTail) 赋为当前节点。然后进行下一次 <code>do...while</code>  循环，处理节点 12, 计算出节点 12 的 hash 值为 <code>1569</code> , 进行计算 <code>1569 &amp; 16 = 0 == 0</code>  原来桶的头结点是节点 12, 尾节点也是节点 12 (对应着代码第 76-86 行), 这样 hitail 和 loTail 均不为 null, 所以然后直接使用 <code>newTab[j] = loHead;</code>  和  <code>newTab[j + oldCap] = hiHead;</code>  的方式确定桶的位置。这个案例里，处理完节点 12 才会确定桶的位置。因为原来的表中下标为 1 的桶中有两个元素 1 和 12. 那桶里只有一个元素的怎么处理的呢？ <code>newTab[e.hash &amp; (newCap - 1)] = e;</code>  e 是当前节点，newCap 是新表的容量。</p>\n<blockquote>\n<p>如果你想问为什么能使用   <code>hash &amp; olcCap==0?</code>  来决定是 <code>newTab[j]</code>  还是  <code>newTab[j+oldCap]</code>  这种方式来确定新的桶的下标的话。 那么原因就是扩容使用的是 2 次幂的方式，容量是原来容量的 2 倍。所以就可以使用  <code>hash &amp; olcCap==0?</code>  来判断了。</p>\n</blockquote>\n<p>这个例子呢，演示了扩容过程中的链表的新增和扩容过程。再回头看 resize 方法，还有一种情况我们没有分析过。那就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> HashMap.TreeNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前桶是棵红黑树</span></span><br><span class=\"line\">    ((HashMap.TreeNode&lt;K, V&gt;) e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 将原来树桶中的节点拆分为更低或更高的树桶,如果太小的话就转化成链表</span></span><br><span class=\"line\"><span class=\"comment\">    * 只被resize方法调用</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> map   hash表</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> tab   表中的指定的桶的头结点(桶是一个棵树)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> index 要拆分的hash表的节点</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bit   the bit of hash to split on 要分裂的hash位</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(HashMap&lt;K, V&gt; map, HashMap.Node&lt;K, V&gt;[] tab, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; b = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Relink into lo and hi lists, preserving order</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// lc代表的是原来的桶的元素的数量</span></span><br><span class=\"line\">    <span class=\"comment\">// hc代表新的桶中的元素的数量, 用来和UNTREEIFY_THRESHOLD比较决定是否要转换结构.</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里还是当做链表去处理，把桶内的元素重新散列。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K, V&gt; e = b, next; e != <span class=\"keyword\">null</span>; e = next) &#123;</span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K, V&gt;) e.next;</span><br><span class=\"line\">        e.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.hash &amp; bit) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                loHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                loTail.next = e;</span><br><span class=\"line\">            loTail = e;</span><br><span class=\"line\">            ++lc;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                hiTail.next = e;</span><br><span class=\"line\">            hiTail = e;</span><br><span class=\"line\">            ++hc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//  散列完后，判断原来的桶(lo)和新的桶中的元素个数</span></span><br><span class=\"line\">    <span class=\"comment\">//  然后决定转换为树还是链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index] = loHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index] = loHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) <span class=\"comment\">// (else is already treeified)</span></span><br><span class=\"line\">                loHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index + bit] = hiHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将树重新穿换成链表的过程就比较简单了：</p>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Returns a list of non-TreeNodes replacing those linked from</span></span><br><span class=\"line\"><span class=\"comment\">    * this node.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">Node&lt;K, V&gt; <span class=\"title\">untreeify</span><span class=\"params\">(HashMap&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.Node&lt;K, V&gt; q = <span class=\"keyword\">this</span>; q != <span class=\"keyword\">null</span>; q = q.next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// replacementNode:将TreeNode转成Node</span></span><br><span class=\"line\">        HashMap.Node&lt;K, V&gt; p = map.replacementNode(q, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            hd = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tl.next = p;</span><br><span class=\"line\">        tl = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就是和红黑树相关的内容了，这里关键的是 split 调用了一个 treeify 的方法。这个方法同时也被 treeifyBin 调用了。所以 treeify 方法就和 treeifyBin 方法一块分享。<br>\n顺便提一嘴，他们有如下的关系:</p>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/hashMap06-%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png\" alt=\"hashMap06-红黑树相关方法调用关系.png\"><br>\n 其中蓝色的是红黑树的方法，黄色的是 HashMap 调用的方法。</p>\n<h4 id=\"treeifybin\"><a class=\"markdownIt-Anchor\" href=\"#treeifybin\">#</a> treeifyBin</h4>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将链表转换成树。</span></span><br><span class=\"line\"><span class=\"comment\">* 替换给定hash值的索引处的桶的所有节点，如果表太小(table.length小于64),就调整大小.这里其实是对hash表的一种优化,防止因为表长度太小而转换成树,造成性能浪费</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> hash 用于确定桶的位置。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeifyBin</span><span class=\"params\">(HashMap.Node&lt;K, V&gt;[] tab, <span class=\"keyword\">int</span> hash)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">    <span class=\"comment\">// 链表的节点</span></span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; e;</span><br><span class=\"line\">    <span class=\"comment\">// 如果hash表为空或者hash表的长度小于最小化的树化容量(64)，这时会重调整大小。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将容量扩大为原来的两倍。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY) &#123;</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        `HashMap.TreeNode&lt;K, V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 构建一个树的节点。</span></span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 如果尾为null,说明这个节点是该桶中的第一个元素，</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以要将其赋于头节点。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                hd = p;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将该节点放在尾节点后。</span></span><br><span class=\"line\">                p.prev = tl;</span><br><span class=\"line\">                tl.next = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前节点作为尾节点。</span></span><br><span class=\"line\">            tl = p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果该桶中有元素，则进行树化。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tab[index] = hd) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            hd.treeify(tab);</span><br><span class=\"line\">        &#125;`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实呢，这个 <code>treeifyBin</code>  方法还是做了一些将桶树化的前置操作，然后将装有 <code>TreeNode</code>  节点的桶交给了 <code>treeify</code>  方法去真正的转换为一棵红黑树。那我们接下来看下 <code>treeify</code>  方法。注意这个方法定义在 <code>HashMap.TreeNode#treeify()</code></p>\n<h5 id=\"treeify方法\"><a class=\"markdownIt-Anchor\" href=\"#treeify方法\">#</a> treeify () 方法</h5>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Forms tree of the nodes linked from this node.</span></span><br><span class=\"line\"><span class=\"comment\"> * 把该节点连接的所有节点组成一棵树。(树化的过程)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeify</span><span class=\"params\">(HashMap.Node&lt;K, V&gt;[] tab)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该棵树的根节点。</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// x是遍历的每个节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K, V&gt; x = <span class=\"keyword\">this</span>, next; x != <span class=\"keyword\">null</span>; x = next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存下下一个节点。(指向下一个节点的指针)</span></span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K, V&gt;) x.next;</span><br><span class=\"line\">        x.left = x.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 对根节点就行赋值(无父节点,黑色)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            root = x;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            K k = x.key;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = x.hash;</span><br><span class=\"line\">            Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K, V&gt; p = root; ; ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// dir,负值和0为左子树，正值为右子树。</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> dir, ph;</span><br><span class=\"line\">                K pk = p.key;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*************判断节点在左子树还是右子树 -start***************/</span></span><br><span class=\"line\">                <span class=\"comment\">// h为当前节点的hash值。</span></span><br><span class=\"line\">                <span class=\"comment\">// p是父节点, ph是父节点的hash值。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 放在左子树</span></span><br><span class=\"line\">                    dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 放在又子树</span></span><br><span class=\"line\">                    dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前节点和父节点的hash值相等:</span></span><br><span class=\"line\">                <span class=\"comment\">//如果节点的key实现了Comparable, 或者 父节点和当前节点的key为一个。</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp; (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// k是当前节点的key，pk是父节点的key</span></span><br><span class=\"line\">                    <span class=\"comment\">// 根据hashMap定义的规则,判断当前节点应该位于左子树还是右子树。</span></span><br><span class=\"line\">                    dir = tieBreakOrder(k, pk);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/*************判断节点在左子树还是右子树 -end***************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">                HashMap.TreeNode&lt;K, V&gt; xp = p;</span><br><span class=\"line\">                <span class=\"comment\">// p==null,代表着遍历到了叶子节点。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// xp是当前节点的父节点。</span></span><br><span class=\"line\">                    x.parent = xp;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        xp.left = x;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        xp.right = x;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 平衡插入的红黑树(完成插入后，红黑树的性质可能被破坏,这里进行重新平衡)</span></span><br><span class=\"line\">                    root = balanceInsertion(root, x);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//确保红黑树的根节点是桶的第一个节点。</span></span><br><span class=\"line\">    moveRootToFront(tab, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里呢，有 3 个方法没有仔细去说明，分别是 tieBreakOrder (),balanceInsertion () 和 moveRootToFront (tab, root), 注意，这三个方法在下面的 PutTreeVal 中也有调用。当然包括调整平衡的左旋 (rotateLeft), 右旋 (rotateRight) 方法。我们接着往下看吧。</p>\n<h5 id=\"balanceinsertion方法\"><a class=\"markdownIt-Anchor\" href=\"#balanceinsertion方法\">#</a> balanceInsertion 方法</h5>\n<p>在说这个方法之前，先总结下红黑树变换的 5 条规则。</p>\n<ul>\n<li>规则 1: 红黑树为空树 ==&gt; {<mark>直接插入当前节点，节点涂为黑色。</mark>}</li>\n<li>规则 2: 插入节点的父节点是黑色 ==&gt; {<mark>直接插入当前节点.</mark>}</li>\n<li>规则 3: 当前节点的父节点是红色，并且叔叔节点是红色。==&gt; {<mark>父节点涂黑，叔叔节点涂黑，祖父节点涂红.</mark>}</li>\n<li>规则 4: 当前节点的父节点是红色，叔叔是黑色，当前节点是父节点的右子树. ==&gt; {<mark>当前节点的父节点作为新的当前节点，以新的当前节点左旋。</mark>}</li>\n<li>规则 5: 当前节点的父节点是红色，叔叔节点是黑色，当前节点是父节点的左子树. ==&gt; {<mark>父节点变为黑色，祖父节点变为红色，以祖父节点为支点右旋.</mark>}<br>\n 下面结合代码看 HashMap 是怎么实现上面这个 5 个规则的:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调整红黑树</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> root 根节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x 当前节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K, V&gt; HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">balanceInsertion</span><span class=\"params\">(HashMap.TreeNode&lt;K, V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                        HashMap.TreeNode&lt;K, V&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    x.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// xp: 当前节点的父节点(父节点)</span></span><br><span class=\"line\">    <span class=\"comment\">// xpp: 当前节点的父节点的父节点(祖父节点)</span></span><br><span class=\"line\">    <span class=\"comment\">// xppl: 当前节点的父节点的父节点的左子树(叔叔节点)</span></span><br><span class=\"line\">    <span class=\"comment\">// xppr: 当前节点的父节点的父节点的右子树(叔叔节点)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K, V&gt; xp, xpp, xppl, xppr; ; ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规则1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 父节点为黑色 或者祖父节点为空==&gt;规则2</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!xp.red || (xpp = xp.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 父节点是左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 父节点是左子树,且祖父节点存在右子树(叔叔节点为右子树)，并且叔叔为红色。 ==&gt; 父节点是右子树时的性质1.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xppr = xpp.right) != <span class=\"keyword\">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 叔叔节点涂黑</span></span><br><span class=\"line\">                xppr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 父节点涂黑</span></span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 祖父节点涂红</span></span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 以祖父节点为新的当前节点</span></span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 祖父节点没有右子树或者有右子树,颜色为黑色。</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前节点是父节点的右子树==&gt; 规则4</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.right) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 左旋</span></span><br><span class=\"line\">                    root = rotateLeft(root, x = xp);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置祖父节点要么为空要么是父节点。</span></span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 规则5</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 父节点涂成黑色</span></span><br><span class=\"line\">                    <span class=\"comment\">// 此时xp可能为root.</span></span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果xp不是root的时候。</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 祖父节点涂成红色,右旋。</span></span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 父节点不是左子树==&gt; 父节点是右子树。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 叔叔节点(祖父节点的左子树),叔叔为红色 ==&gt; 规则3</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xppl != <span class=\"keyword\">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 叔叔涂黑</span></span><br><span class=\"line\">                xppl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 父节点涂黑</span></span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 祖父节点涂红</span></span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 以祖父节点为新的当前节点</span></span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 祖父节点没有右子树或者有右子树,颜色为黑色。 ==&gt; 规则4</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前节点是左子树</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.left) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 右旋</span></span><br><span class=\"line\">                    root = rotateRight(root, x = xp);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置祖父节点要么为空要么是父节点。</span></span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// ==&gt; 规则5</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果有祖父</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 祖父节点涂成红色,右旋。</span></span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rotateleft-左旋\"><a class=\"markdownIt-Anchor\" href=\"#rotateleft-左旋\">#</a> rotateLeft 左旋</h5>\n<p>这里的代码不能用语言描述，真的是只能意会不能言传啊。</p>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;K, V&gt; HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">rotateLeft2</span><span class=\"params\">(HashMap.TreeNode&lt;K, V&gt; root, HashMap.TreeNode&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; r, pp, rl;</span><br><span class=\"line\">            <span class=\"comment\">// p是父节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 右孩子</span></span><br><span class=\"line\">        r = p.right;</span><br><span class=\"line\">        <span class=\"comment\">// 右孩子有左孩子的话.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右孩子变成右孩子的左孩子。即rl变成了p的右孩子。</span></span><br><span class=\"line\">            p.right = r.left;</span><br><span class=\"line\">            rl = r.left;</span><br><span class=\"line\">            rl.parent = p;</span><br><span class=\"line\">            <span class=\"comment\">// 注意此时r没有关联。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pp = p.parent;</span><br><span class=\"line\">        <span class=\"comment\">// 如果p没有有父节点的话。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将r的父节点置为null</span></span><br><span class=\"line\">            r.parent = p.parent;</span><br><span class=\"line\">            <span class=\"comment\">// 颜色涂成黑色，并且r就是根节点。</span></span><br><span class=\"line\">            (root = r).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//  如果p节点有父节点，并且p是左子树的话</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.left == p) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将祖父节点的左子树置为r,</span></span><br><span class=\"line\">            pp.left = r;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将祖父节点的右子树置为r,</span></span><br><span class=\"line\">            pp.right = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将r和p连接起来。</span></span><br><span class=\"line\">        r.left = p;</span><br><span class=\"line\">        p.parent = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意下，这里的代码是我修改之后，JDK 的源码看起来很精简，理解起来，啧啧啧。</p>\n<p>MD, 来张图:</p>\n<p><img data-src=\"/images/JavaSourceCode/HashMap/HashMap07-%E5%B7%A6%E6%97%8B%E7%9A%84%E8%BF%87%E7%A8%8B.png\" alt=\"HashMap07-左旋的过程.md\"></p>\n<p>这里假设右孩子是有左孩子的。如果没有的话，那就直接去掉绿色的 rl 就好了。</p>\n<h5 id=\"rotateright\"><a class=\"markdownIt-Anchor\" href=\"#rotateright\">#</a> rotateRight</h5>\n<p>右旋的过程同理:</p>\n<figure class=\"highlight java\"><figcaption><span>&#123;,.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;K, V&gt; HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">rotateRight</span><span class=\"params\">(HashMap.TreeNode&lt;K, V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                         HashMap.TreeNode&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; l, pp, lr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (l = p.left) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((lr = p.left = l.right) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            lr.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((pp = l.parent = p.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            (root = l).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.right == p)</span><br><span class=\"line\">            pp.right = l;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.left = l;</span><br><span class=\"line\">        l.right = p;</span><br><span class=\"line\">        p.parent = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这图啊，有空再做吧。今天太累了。</p>\n<p>还有一个方法:</p>\n<h5 id=\"moveroottofront\"><a class=\"markdownIt-Anchor\" href=\"#moveroottofront\">#</a> moveRootToFront</h5>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Ensures that the given root is the first node of its bin.</span></span><br><span class=\"line\"><span class=\"comment\">  * // 确保红黑树的根节点是桶的第一个节点。</span></span><br><span class=\"line\"><span class=\"comment\">  * 为什么不直接将tab[index]==root? 是为了树重新转换成链表的时候使用的。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K, V&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveRootToFront</span><span class=\"params\">(HashMap.Node&lt;K, V&gt;[] tab, HashMap.TreeNode&lt;K, V&gt; root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; tab != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; root.hash;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; first = (HashMap.TreeNode&lt;K, V&gt;) tab[index];</span><br><span class=\"line\">        <span class=\"comment\">// 判断第一个节点和root是不是相等的,判断的是地址。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != first) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K, V&gt; rn;</span><br><span class=\"line\">            tab[index] = root;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; rp = root.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((rn = root.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// root的后一个节点的指向前的指针指向root的前一个节点。</span></span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K, V&gt;) rn).prev = rp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// root的前一个节点的指向后的指针指向root的后一个节点。</span></span><br><span class=\"line\">                rp.next = rn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第一个元素的前指针指向root</span></span><br><span class=\"line\">                first.prev = root;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// root的后向指针指向first</span></span><br><span class=\"line\">            root.next = first;</span><br><span class=\"line\">            <span class=\"comment\">// root的前向指针置为null</span></span><br><span class=\"line\">            root.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归不变检查</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">checkInvariants</span><span class=\"params\">(root)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"puttreenode\"><a class=\"markdownIt-Anchor\" href=\"#puttreenode\">#</a> putTreeNode</h4>\n<figure class=\"highlight java\"><figcaption><span>&#123;./line-bumbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">putTreeVal</span><span class=\"params\">(HashMap&lt;K, V&gt; map, HashMap.Node&lt;K, V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                <span class=\"keyword\">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> searched = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; root = (parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K, V&gt; p = root; ; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dir, ph;</span><br><span class=\"line\">        K pk;</span><br><span class=\"line\">        <span class=\"comment\">/***************判断 左右子树 ******************/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h) &#123;</span><br><span class=\"line\">            dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h) &#123;</span><br><span class=\"line\">            dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!searched) &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K, V&gt; q, ch;</span><br><span class=\"line\">                searched = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((ch = p.left) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                        (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        ((ch = p.right) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                                (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dir = tieBreakOrder(k, pk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/***************判断 左右子树 end******************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; xp = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K, V&gt; xpn = xp.next;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                xp.left = x;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                xp.right = x;</span><br><span class=\"line\">            xp.next = x;</span><br><span class=\"line\">            x.parent = x.prev = xp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpn != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K, V&gt;) xpn).prev = x;</span><br><span class=\"line\">            <span class=\"comment\">// 这里比较重要了，不过我们在treeify中已经说过了。</span></span><br><span class=\"line\">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，HashMap 的新增过程我们就处理完了。</p>\n<h3 id=\"hashmap删除方法-hashmapremove\"><a class=\"markdownIt-Anchor\" href=\"#hashmap删除方法-hashmapremove\">#</a> HashMap 删除方法 HashMap#remove ()</h3>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从map中删除指定的key,如果key存在的话</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key key whose mapping is to be removed from the map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> value 如果key存在,返回key对应的Value,如果不存在返回null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中计算 hash 值的方法还是和之前的一样。</p>\n<h4 id=\"removenode\"><a class=\"markdownIt-Anchor\" href=\"#removenode\">#</a> removeNode</h4>\n<figure class=\"highlight java\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.remove and related methods.</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Map.remove相关的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash       hashCode</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key       key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value     value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matchValue 如果是true，仅在value相等的时候删除。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> movable   如果为false，则在删除节点的时候不移动其他节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 返回删除的节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">Node&lt;K, V&gt; <span class=\"title\">removeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key, Object value,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"keyword\">boolean</span> matchValue, <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            (p = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        HashMap.Node&lt;K, V&gt; node = <span class=\"keyword\">null</span>, e;</span><br><span class=\"line\">        K k;</span><br><span class=\"line\">        V v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">                ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = p.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> HashMap.TreeNode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到红黑树中的节点</span></span><br><span class=\"line\">                node = ((HashMap.TreeNode&lt;K, V&gt;) p).getTreeNode(hash, key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 删除链表中的节点1: 查找到节点的位置。</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                            ((k = e.key) == key ||</span><br><span class=\"line\">                                    (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 真正的去删除的过程。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> HashMap.TreeNode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 删除红黑树的节点</span></span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K, V&gt;) node).removeTreeNode(<span class=\"keyword\">this</span>, tab, movable);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == p) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 桶中只有当前的节点。</span></span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 链表中节点的删除</span></span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 修改次数+1</span></span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一个最难理解的方法落在了红黑树的移除上了。</p>\n<h4 id=\"hashmaptreenoderemovetreenode\"><a class=\"markdownIt-Anchor\" href=\"#hashmaptreenoderemovetreenode\">#</a> HashMap#TreeNode#removeTreeNode</h4>\n<p>还是先看下红黑树的删除是怎么回事。</p>\n<p>在删除方法调用之前必须要有存在的给定节点。<br>\n这比典型的红黑删除代码更混乱，因为我们不能将内部节点的内容与叶子后继交换，后者由遍历期间可独立访问的 “下一个” 指针固定。 所以我们交换树链接。 如果当前树似乎有太少的节点，则红黑树 (bin) 将转换回普通的链表 (普通 bin). （测试会在 2 到 6 个节点之间触发，具体取决于树结构）。<br>\n上面是 removeTreeNode 方法的解释。说实话，没理解…</p>\n<p>HashMap 的删除不同于普通的红黑树的删除，因为它其中还维护了，一个链表的指向. HashMap 采用的是将树中的两个节点进行换位，颜色也要进行互换，来保证红黑树的平衡，并不改变二者在链表中的位置，互换后，删除节点此时的左子树是空的，将问题转换成了对左子树为空的节点的删除。</p>\n<p>有一个简单的问题，千万不要弄混了，就是 TreeNode 中要删除的节点是谁？？</p>\n<p>删除的签名是这样的: <code> final void removeTreeNode(HashMap&lt;K, V&gt; map, HashMap.Node&lt;K, V&gt;[] tab,boolean movable)</code> , 并没有传 TreeNode 啊？是不是？？</p>\n<p>干吗呢！大兄嘚。要删除的节点是：this 啊。我们现在走到了 TreeNode 内部了！！它本身就是要被删除的节点啊。</p>\n<p>好了，那我现在要告诉你：删除自己！</p>\n<p>HashMap 删除红黑树的节点，实际上就是 TreeNode 自己删除自己。那么它是怎么删的呢？</p>\n<p>它分成了三步:</p>\n<ul>\n<li>1. 将删除节点从双链向链表中删除.</li>\n<li>2. 将删除节点与其右子树最小节点互换，之后平衡树</li>\n<li>3. 将树根节点，移动到 <code>tab[index]</code>  指针处</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">removeTreeNode</span><span class=\"params\">(HashMap&lt;K, V&gt; map, HashMap.Node&lt;K, V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                  <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注意了： 这个时候被删除的节点是谁??</span></span><br><span class=\"line\">        <span class=\"comment\">// 是this.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到对应的索引(确定对应桶的位置), n 是当前表的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; hash;</span><br><span class=\"line\">        <span class=\"comment\">// first: 第一个树节点(当前为父节点),root，父节点。rl:</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; first = (HashMap.TreeNode&lt;K, V&gt;) tab[index], root = first, rl;</span><br><span class=\"line\">        <span class=\"comment\">// succ:下一个节点(链表的指向)。pred, 前一个节点。</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; succ = (HashMap.TreeNode&lt;K, V&gt;) next, pred = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 前一个为空时，即当前接是父节点:(被删除的节点是根节点)</span></span><br><span class=\"line\">            tab[index] = first = succ;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 否测,前一个节点的下一个执行当前节点的下一个。(意会)</span></span><br><span class=\"line\">            pred.next = succ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (succ != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前节点的后节点不为null,后一个节点的前节点指向当前节点的前节点(意会)</span></span><br><span class=\"line\">            succ.prev = pred;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果删除当前节点，该桶变成了null的。就直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 重置table[index]处为树的根节点。</span></span><br><span class=\"line\">            root = root.root();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// PS: 说点没用， JDK除了部分ifelse不加括号之外，</span></span><br><span class=\"line\">        <span class=\"comment\">// 其实换行，还是用的挺多的，看起来也挺舒服的。</span></span><br><span class=\"line\">        <span class=\"comment\">// 值得借鉴</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || (movable &amp;&amp; (root.right == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || (rl = root.left) == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || rl.left == <span class=\"keyword\">null</span>))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 树太小了，将树转换成链表</span></span><br><span class=\"line\">            tab[index] = first.untreeify(map);  <span class=\"comment\">// too small</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*****注意！！！ 此时已经从双向链表中删除了, 第一步走完。******/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// p是待删除的节点，pl当前节点的左孩子节点,pr当前节点的右孩子节点,replacement,用来交换的节点。</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; p = <span class=\"keyword\">this</span>, pl = left, pr = right, replacement;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span> &amp;&amp; pr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// s为右子树的最小的节点,sl为左子树(一下五行和源码略有不同)</span></span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; s = pr, sl = s.left;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sl != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// find successor</span></span><br><span class=\"line\">                s = sl;</span><br><span class=\"line\">                sl = s.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 交换颜色</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> c = s.red;</span><br><span class=\"line\">            s.red = p.red;</span><br><span class=\"line\">            p.red = c; <span class=\"comment\">// swap colors</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 交换节点连接</span></span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; sr = s.right;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class=\"line\">            <span class=\"comment\">// pr是当前节点的右孩子节点</span></span><br><span class=\"line\">            <span class=\"comment\">// s是当前节点的右子树的最小的节点</span></span><br><span class=\"line\">            <span class=\"comment\">// p的右子树,只有s这一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == pr) &#123; <span class=\"comment\">// p was s&#x27;s direct parent</span></span><br><span class=\"line\">                p.parent = s;</span><br><span class=\"line\">                s.right = p;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"comment\">// sp： 最小节点的父节点</span></span><br><span class=\"line\">                HashMap.TreeNode&lt;K, V&gt; sp = s.parent;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p.parent = sp) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s == sp.left)</span><br><span class=\"line\">                        sp.left = p;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        sp.right = p;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((s.right = pr) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    pr.parent = s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 置null孩子。</span></span><br><span class=\"line\">            p.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p.right = sr) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sr.parent = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((s.left = pl) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                pl.parent = s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((s.parent = pp) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                root = s;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left) &#123;</span><br><span class=\"line\">                pp.left = s;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pp.right = s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 确定要交换的节点完毕，交换节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                replacement = sr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                replacement = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前树只含有左子树</span></span><br><span class=\"line\">            replacement = pl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前树，只有又子树</span></span><br><span class=\"line\">            replacement = pr;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无孩子</span></span><br><span class=\"line\">            replacement = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (replacement != p) &#123;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; pp = replacement.parent = p.parent;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                root = replacement;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">                pp.left = replacement;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                pp.right = replacement;</span><br><span class=\"line\">            p.left = p.right = p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 是否要进行重平衡树?</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在平衡后删除该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (replacement == p) &#123;  <span class=\"comment\">// detach</span></span><br><span class=\"line\">            HashMap.TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class=\"line\">            p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">                    pp.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.right)</span><br><span class=\"line\">                    pp.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 参数moveable控制是否删除节点后确保树的根节点为链表的头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movable) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将树根节点，移动到tab[index]指针处</span></span><br><span class=\"line\">            moveRootToFront(tab, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样呢，整个删除过程就完成了。<br>\n用官方中的话，比较混乱。尤其是涉及到红黑树的删除，这部分内容。还是需要好好消化，消化的。</p>\n<p>下面我们还剩下两个内容：修改和查找</p>\n<h3 id=\"hashmap的查找方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的查找方法\">#</a> HashMap 的查找方法</h3>\n<p><code>HashMap</code>  的查找的方法，有 <code>get</code> , <code>getOrDefault</code> . 很明显，这两个方法前者不存在的时候返回的是 <code>null</code> ，后者返回的就是 <code>defaultValue</code> .</p>\n<p>先来看下这两个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据指定的key返回映射的Value，当没有包含key的映射时，会返回 null</span></span><br><span class=\"line\"><span class=\"comment\"> * 更正式的情况下： 如果存在一个key(K)的映射 value (V),使得 key==null?K==null:key.equals(K),</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果等式的值为 true, 那么返回V</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则返回 null</span></span><br><span class=\"line\"><span class=\"comment\"> * 不能通过 返回值为null 来判断是否含有&lt;K,V&gt; 映射，因为HashMap允许value为null。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? defaultValue : e.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，它调用的都是同一个方法，顺藤摸瓜，我们看这个  <code>getNode</code>  方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">Node&lt;K, V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; first, e;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    K k;</span><br><span class=\"line\">    <span class=\"comment\">// 数组不为空，并且对应的桶(bin)不为null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是否为桶内的第一个节点是否满足</span></span><br><span class=\"line\">        <span class=\"comment\">// 为什么要检测第一个节点，直接进入循环或者树节点的检测不行吗?</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设第一个节点是目的节点,可以直接返回，少执行一次if判断，来判断其是树节点还是链表节点。</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不是第一个节点，循环也会少执行一次,树节点的遍历，也会少遍历一次。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">                ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">//如果第一个节点不是要查找的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是树节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> HashMap.TreeNode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((HashMap.TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是链表,遍历查找。</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于 jdk8 之后，有两种类型的节点，我们还说过，这两种节点是  <code>爷孙</code>  的关系.<br>\n 链表的节点遍历就不用看了，比较简单。我们看下 红黑树的节点的查找:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">getTreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点不是根节点,找到根节点，调用find进行查找,</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是根节点，调用find进行查找。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>).find(h, k, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 红黑树的查找，</span></span><br><span class=\"line\"><span class=\"comment\">* 从根节点开始, 直接判断hash值即可。</span></span><br><span class=\"line\"><span class=\"comment\">* 如果hash值，小于当前节点hash值，对其左子树进行遍历。</span></span><br><span class=\"line\"><span class=\"comment\">* 反之，对右子树进行遍历。</span></span><br><span class=\"line\"><span class=\"comment\">* key值相等直接返回.</span></span><br><span class=\"line\"><span class=\"comment\">* 注意: 这里有左右子树为null的情况。</span></span><br><span class=\"line\"><span class=\"comment\">* 对接k和k的类进行比较,判断其要遍历的树为左子树或者右子树。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K, V&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; p = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ph, dir;</span><br><span class=\"line\">        K pk;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K, V&gt; pl = p.left, pr = p.right, q;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                (kc = comparableClassFor(k)) != <span class=\"keyword\">null</span>) &amp;&amp;</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            p = (dir &lt; <span class=\"number\">0</span>) ? pl : pr;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((q = pr.find(h, k, kc)) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个查找关键因素在于判断对左子树还是右子树进行递归遍历匹配。</p>\n<p>以上就是红黑树的查找过程了。</p>\n<h3 id=\"hashmap的其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的其他常用方法\">#</a> HashMap 的其他常用方法</h3>\n<p>这些方法中的实现，我们大部分都分享过了。接下来，我们简单的看下其是如何调用的就好了.</p>\n<h4 id=\"hashmapcontainskey-和-hashmapcontainsvalue\"><a class=\"markdownIt-Anchor\" href=\"#hashmapcontainskey-和-hashmapcontainsvalue\">#</a>  <code>HashMap.containsKey()</code>  和  <code>HashMap.containsValue()</code></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果Map中包含一个映射关系,则返回true,注意是包含映射关系就会返回ture.</span></span><br><span class=\"line\"><span class=\"comment\"> * hashMap.put(&quot;1&quot;,null),也会返回true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getNode(hash(key), key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果存在指定的Value,就会返回true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">    V v;</span><br><span class=\"line\">    <span class=\"comment\">// 如果table的长度不为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历每个bin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历bin下的每个Node</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HashMap.Node&lt;K, V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((v = e.value) == value ||</span><br><span class=\"line\">                        (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里为什么可以通过  <code>.next</code>  的方式去遍历呢？<br>\n 这个主要是考虑在转换成树节点和树节点的新增的时候。 <code>hashMap</code>  在这两个时刻都对 <code>HashMap</code>  的 <code>next</code>  &quot;指针&quot; 进行了维护。所以，在这里就可以明白了，为什么树化节点时候还要维护 <code>.next</code>  了.</p>\n<h4 id=\"hashmapsize\"><a class=\"markdownIt-Anchor\" href=\"#hashmapsize\">#</a>  <code>HashMap.size()</code></h4>\n<p><code>HashMap</code>   的  <code>size</code>  函数最简单了，因为  <code>HashMap</code>  内部本来就维护了一个  <code>size</code>  字段，来记录  <code>HashMap</code>  的元素数量.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回HashMap的映射数量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashmapisempty\"><a class=\"markdownIt-Anchor\" href=\"#hashmapisempty\">#</a>  <code>HashMap.isEmpty()</code></h4>\n<p>HashMap 的 isEmpty 同样简单，废话少说，看下它的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果为映射数量为0的时候，返回true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashmapentryset\"><a class=\"markdownIt-Anchor\" href=\"#hashmapentryset\">#</a>  <code>HashMap.entrySet()</code></h4>\n<p>这个方法是我们在遍历的时候，常用的一个方法，它的实现有点小复杂。 我们来看下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回这个Map里映射关系的一个 Set 视图.</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改HashMap会影响这个 Set 视图, 同样的，在这个视图里修改, 也会影响HashMap</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果通过对视图的迭代过程来修改HashMap(除了迭代器自身的remove方法,或者对迭代器返回的Entry的setValue操作),</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改的结果是不确定的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个 set 视图, 支持元素的删除, 也会从 HashMap 中删除对应的元素.</span></span><br><span class=\"line\"><span class=\"comment\"> *  支持 Iterator.remove, Set.remove,  Set.removeAll, Set.retainAll, Set.clear 等操作</span></span><br><span class=\"line\"><span class=\"comment\"> * 但是它不支持 add, addAll 操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class=\"line\">    Set&lt;Map.Entry&lt;K, V&gt;&gt; es;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (es = entrySet) == <span class=\"keyword\">null</span> ? (entrySet = <span class=\"keyword\">new</span> HashMap.EntrySet()) : es;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，如果 <code>entrySet</code>  这个属性的为 <code>null</code>  的时候，就会返回一个空的 <code>HashMap</code>  的 <code>entry</code> , 否则就返回 <code>entrySet(es)</code> .<br>\n 那么  <code>entrySet</code>  这个字段是怎么来的呢？</p>\n<p>最先 HashMap 定义了一个这样的字段。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存缓存的 entrySet().</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意: 这个AbstractMap 的字段会被 keySet() 和 values()使用。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure>\n<p>好了，我们接着来看  <code>HashMap.EntrySet()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * EntrySet 继承的是 AbstractSet,</span></span><br><span class=\"line\"><span class=\"comment\">    * 泛型传入</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntrySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap.<span class=\"keyword\">this</span>.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 直接调用 HashMap 迭代器</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Iterator&lt;Map.Entry&lt;K, V&gt;&gt; iterator() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashMap.EntryIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 判断是否存在,</span></span><br><span class=\"line\"><span class=\"comment\">        * 直接调用的是hashMap的getNode方法</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class=\"line\">        Object key = e.getKey();</span><br><span class=\"line\">        HashMap.Node&lt;K, V&gt; candidate = getNode(hash(key), key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> candidate != <span class=\"keyword\">null</span> &amp;&amp; candidate.equals(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 直接调用的 HashMap的删除方法.</span></span><br><span class=\"line\"><span class=\"comment\">        * 从这个方法中也可以看出来, 我们在 set试图中删除元素是会直接影响Hashmap的。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">            Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class=\"line\">            Object key = e.getKey();</span><br><span class=\"line\">            Object value = e.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * entrySet 的分隔器</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Spliterator&lt;Map.Entry&lt;K, V&gt;&gt; spliterator() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashMap.EntrySpliterator&lt;&gt;(HashMap.<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * entrySet 的迭代器</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>&#123;</span><br><span class=\"line\">        HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span> &amp;&amp; (tab = table) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mc = modCount;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (HashMap.Node&lt;K, V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next)</span><br><span class=\"line\">                    action.accept(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != mc)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashmapreplace\"><a class=\"markdownIt-Anchor\" href=\"#hashmapreplace\">#</a>  <code>HashMap.replace()</code></h4>\n<p>这个是  <code>HashMap</code>  覆盖掉 <code>JDK8</code>  版本中 的替换方法，将制定的 <code>K-V</code>  映射替换掉。这个方法也会匹配 <code>Value</code>  的值是否相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; e;</span><br><span class=\"line\">    V v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">            ((v = e.value) == oldValue || (v != <span class=\"keyword\">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class=\"line\">        e.value = newValue;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个也是覆盖  <code>JDK8</code>  版本中  <code>Map</code>  的方法，返回原来的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">replace</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        V oldValue = e.value;</span><br><span class=\"line\">        e.value = value;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashmapforeach\"><a class=\"markdownIt-Anchor\" href=\"#hashmapforeach\">#</a>  <code>HashMap.forEach()</code></h4>\n<p>这个也是一个常用的方法，实现也比较简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> K, ? <span class=\"keyword\">super</span> V&gt; action)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span> &amp;&amp; (tab = table) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mc = modCount;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HashMap.Node&lt;K, V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next)</span><br><span class=\"line\">                action.accept(e.key, e.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modCount != mc)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashmapclear\"><a class=\"markdownIt-Anchor\" href=\"#hashmapclear\">#</a>  <code>HashMap.clear()</code></h4>\n<p>清空方法也是很简单的，逐一置空 <code>null</code>   <code>HashMap</code>  的每个 <code>bin</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K, V&gt;[] tab;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i)</span><br><span class=\"line\">            tab[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题解答\"><a class=\"markdownIt-Anchor\" href=\"#问题解答\">#</a> 问题解答</h2>\n<ul>\n<li>如果我的 HashMap 的初始大小设置为 <code>[3|9|12]</code> , 第一次扩容的时候，容量变为了多少？是如何进行扩容的？</li>\n<li>(有毒的问题) 假设 Hash 表的长度是 32, 已知某一个 bin 中的链表长度为 7, 如果新增一个元素还是在该 bin 中的时，会进行什么操作？  <code>resize</code>  还是 <code>treeifyBin</code> ? 假设完成这个操作后该 bin 中元素数量没变，又新增一个元素还是到该 bin 中，这时进行什么操作？</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>表中允许 null 的键和 null 值。</li>\n<li>线程不同步，</li>\n<li>不保证元素的顺序。</li>\n</ul>\n<h2 id=\"网上常见面试问题汇总以及参考解答\"><a class=\"markdownIt-Anchor\" href=\"#网上常见面试问题汇总以及参考解答\">#</a> 网上常见面试问题汇总以及参考解答</h2>\n<h2 id=\"冷门知识点\"><a class=\"markdownIt-Anchor\" href=\"#冷门知识点\">#</a> 冷门知识点</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> failFast 机制。</label></li>\n</ul>\n<h2 id=\"jdk变更历史说明\"><a class=\"markdownIt-Anchor\" href=\"#jdk变更历史说明\">#</a> JDK 变更历史说明</h2>\n<h2 id=\"课后娱乐\"><a class=\"markdownIt-Anchor\" href=\"#课后娱乐\">#</a> 课后娱乐</h2>\n<ul>\n<li>java 实现红黑树</li>\n<li>自定义实现 hashMap。</li>\n</ul>\n<h2 id=\"参考文档答谢\"><a class=\"markdownIt-Anchor\" href=\"#参考文档答谢\">#</a> 参考文档 &amp; 答谢</h2>\n<h2 id=\"感受\"><a class=\"markdownIt-Anchor\" href=\"#感受\">#</a> 感受</h2>\n<ul>\n<li>注释：新字段要加注释标注此字段的作用，该字段是什么含义。</li>\n</ul>\n<hr>\n<p>阅读之前记录</p>\n<p>1. 图解。遇到问题，画图说明。<br>\n2. 一定要有自己的理解。<br>\n3. 对比其他版本 JDK。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "源码",
                "HashMap",
                "JDK",
                "JDK8"
            ]
        }
    ]
}