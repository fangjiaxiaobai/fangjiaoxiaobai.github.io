{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"mysql数据库\" category",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%931-01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%931-01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC/",
            "title": "MySQL数据库的版本",
            "date_published": "2021-07-24T06:48:55.000Z",
            "content_html": "<h2 id=\"mysql数据库的版本\"><a class=\"markdownIt-Anchor\" href=\"#mysql数据库的版本\">#</a>  <code>MySQL</code>  数据库的版本</h2>\n<p><code>mysql-5.0</code>   :   <code>mysql-5.0</code>  版本之前， <code>myisam</code>  默认支持的表大小为 <code>4G</code> 。从 <code>mysql-5.0</code>  以后， <code>MyISAM</code>  默认支持 <code>256T</code>  的表单数据。 <code>myisam</code>  只缓存索引数据。  <code>2005</code>  年的 <code>5.0</code>  版本又添加了存储过程、服务端游标、触发器、查询优化以及分布式事务功能。</p>\n<p><code>MySQL5.1</code>   :   <code>2008</code>  年发布的 <code>MySQL 5.1</code>  的版本，基本上就是一个增加了崩溃恢复功能的 <code>MyISAM</code> ，使用表级锁，但可以做到读写不冲突，即在进行任何类型的更新操作的同时都可以进行读操作，但多个写操作不能并发。</p>\n<p><code>mysql5.5</code>  :   <code>2010</code>  年 <code>12</code>  月发布 <code>mysql5.5</code>  版本默认存储引擎更改为 <code>InnoDB</code>  多个回滚段（ <code>Multiple Rollback Segments</code> ）, 之前的 <code>innodb</code>  版本最大能处理 <code>1023</code>  个并发处理操作，现在 <code>mysql5.5</code>  可以处理高达 128K 的并发事务，改善事务处理中的元数据锁定。例如，事物中一个语句需要锁一个表，会在事物结束时释放这个表，而不是像以前在语句结束时释放表。 增加了 <code>INFORMATION_SCHEMA</code>  表，新的表提供了与 InnoDB 压缩和事务处理锁定有关的具体信息。</p>\n<h3 id=\"mysql56\"><a class=\"markdownIt-Anchor\" href=\"#mysql56\">#</a> mysql5.6</h3>\n<p><code>2013</code>  年 <code>2</code>  月发布。</p>\n<ul>\n<li>\n<p>安全性进行了加强。用户的账号和密码进行了更强的加密算法，使用 <code>sha256_passwordSHA-256</code>  密码哈希的身份验证插件来进行加密。 <code>mysql.user</code>  表中新增了 <code>password_expired</code>  字段，过期后，所有连接的执行都会报出异常。</p>\n</li>\n<li>\n<p><code>MySQL Server</code>  的参数默认值进行了更改。如下图所示:</p>\n</li>\n</ul>\n<p><img data-src=\"/images/MySQL%E7%B3%BB%E5%88%97/10101-MySQL5.6Server%E7%AB%AF%E5%8F%82%E6%95%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC.png\" alt=\"10101-MySQL5.6Server端参数修改的默认值.png\"></p>\n<ul>\n<li>\n<p><code>mysql5.6</code>  版本中 <code>InnoDB</code>  可以限制大量表打开的时候内存占用过多的问题 <code>InnoDB</code>  性能加强。如大内存优化等 <code>InnoDB</code>  死锁信息可以记录到  <code>error</code>  日志，<br>\n<b> <code>InnoDB</code>  引擎也支持了 <code>FULLTEXT</code>  索引</b>。并使用 <code>MATCH() ... AGAINST</code>  语法查询它们。 <code>ALTER TABLE </code> 在不复制表，不阻止对表的插入，更新和删除或两者都不进行的情况下，可以执行多种操作。<b> <code>InnoDB</code>  使用更快的新算法来检测 死锁</b></p>\n</li>\n<li>\n<p>分区功能</p>\n<ul>\n<li>分区的最大数量增加到 <code>8192</code> 。此数量包括表的所有分区和所有子分区。</li>\n</ul>\n</li>\n<li>\n<p>复制和日志记录</p>\n<ul>\n<li><code>MySQL</code>  现在支持使用全局事务标识符（也称为  <code>GTID</code> ）进行基于事务的复制 。这样，当每个事务在原始服务器上提交并被任何从属服务器应用时，就可以识别和跟踪每个事务。</li>\n<li><code>MySQL</code>  基于行的复制从该版本开始支持行图像控制</li>\n</ul>\n</li>\n<li>\n<p>优化器增强功能</p>\n<ul>\n<li><code>limit</code>  查询进行了优化，如果 <code>N</code>  行元素小于排序缓冲区，那么就使用内存排序而不是合并文件。</li>\n<li>优化器可以更有效地处理 <code>FROM</code>  子句中的子查询 （即派生表）。FROM 子句中子查询的实现 被推迟到查询执行期间需要其内容时为止，从而提高了性能。在查询执行期间，优化器可以将索引添加到派生表中，以加快从中获取行的速度。</li>\n</ul>\n</li>\n<li>\n<p>数据类型</p>\n<ul>\n<li><code>MySQL</code>  从 <code>5.6</code>  开始允许 <code>TIME</code> ， <code>DATETIME</code>  和 <code>TIMESTAMP</code>  值的小数秒，精度高达微秒（ <code>6</code>  位）。\n<ul>\n<li>取消了每个表最多可以自动将 <code>TIMESTAMP</code>  列初始化或更新为当前日期和时间的限制。任何 <code>TIMESTAMP</code>  列定义都可以具有 <code>DEFAULT CURRENT_TIMESTAMP</code>  和 <code>ON UPDATE CURRENT_TIMESTAMP</code>  子句的任意组合。此外，这些子句现在可以与 DATETIME 列定义一起使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主机缓存。<br>\n <code>MySQL</code>  现在提供有关客户端连接到服务器时发生错误的原因的更多信息，以及对主机缓存的改进访问，该缓存包含客户端 <code>IP</code>  地址和主机名信息，用于避免 <code>DNS</code>  查找。</p>\n</li>\n</ul>\n<h3 id=\"mysql57\"><a class=\"markdownIt-Anchor\" href=\"#mysql57\">#</a> mysql5.7</h3>\n<ul>\n<li>\n<p>将  <code>Undo</code>  从共享表空间  <code>ibdata</code>  文件中分离出来，可以在安装  <code>MySQL</code>  时由用户自行指定文件大小和数量。</p>\n</li>\n<li>\n<p>增加了  <code>temporary</code>  临时表空间，里面存储着临时表或临时查询结果集的数据。</p>\n</li>\n<li>\n<p><code>Buffer Pool</code>  大小可以动态修改，无需重启数据库实例，这是  <code>DBA</code>  的福音。</p>\n</li>\n</ul>\n<h3 id=\"mysql-80-版本新特性如下\"><a class=\"markdownIt-Anchor\" href=\"#mysql-80-版本新特性如下\">#</a> MySQL 8.0 版本新特性如下：</h3>\n<ul>\n<li>\n<p>将  <code>InnoDB</code>  表的数据字典和  <code>Undo</code>  都从共享表空间  <code>ibdata</code>  中彻底分离出来了，以前需要 <code>ibdata</code>  文件中数据字典与独立表空间  <code>ibd</code>  文件中数据字典一致才行， <code>8.0</code>  版本就不需要了。</p>\n</li>\n<li>\n<p><code>temporary</code>  临时表空间也可以配置多个物理文件，而且均为  <code>InnoDB</code>  存储引擎并能创建索引，这样加快了处理的速度。</p>\n</li>\n<li>\n<p>用户可以像  <code>Oracle</code>  数据库那样设置一些表空间，每个表空间对应多个物理文件，每个表空间可以给多个表使用，但一个表只能存储在一个表空间中。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%930-00.%E8%AF%B4%E6%98%8E/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E5%BA%930-00.%E8%AF%B4%E6%98%8E/",
            "title": "MySQL 开篇 & 说明",
            "date_published": "2021-07-23T06:48:55.000Z",
            "content_html": "<h2 id=\"版本说明\"><a class=\"markdownIt-Anchor\" href=\"#版本说明\">#</a> 版本说明</h2>\n<p>本系列文章，以 MySQL 8.0.20 版本为实验背景进行编写。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9pbnRlcm5hbHMvZW4vYmluYXJ5LWxvZy1vdmVydmlldy5odG1s\">MySQL 手册</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        }
    ]
}