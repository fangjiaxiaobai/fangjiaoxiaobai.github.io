<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fangjiaxiaobai.github.io</id>
    <title>方家小白 • Posts by &#34;面经&#34; category</title>
    <link href="https://fangjiaxiaobai.github.io" />
    <updated>2021-08-04T06:14:00.000Z</updated>
    <category term="全站地图" />
    <category term="目录" />
    <category term="源码" />
    <category term="MySQL" />
    <category term="Redis" />
    <category term="数据结构" />
    <category term="雪花算法" />
    <category term="算法" />
    <category term="Elastic Search" />
    <category term="搜索" />
    <category term="git" />
    <category term="go" />
    <category term="go-error" />
    <category term="k8s" />
    <category term="kubernetes" />
    <category term="MachineLearn" />
    <category term="youtube" />
    <category term="gpu" />
    <category term="日拱一卒" />
    <category term="日常" />
    <category term="Springboot" />
    <category term="Netty" />
    <category term="log" />
    <category term="go-log" />
    <category term="RocketMQ" />
    <category term="消息队列" />
    <category term="图片" />
    <category term="HashMap" />
    <category term="JDK" />
    <category term="JDK8" />
    <category term="HD" />
    <category term="BQ" />
    <category term="AC" />
    <category term="leetCode" />
    <category term="数组" />
    <category term="面经之算法题" />
    <category term="链表" />
    <category term="猫影视" />
    <category term="线程池" />
    <category term="面经" />
    <category term="动态规划" />
    <category term="不做也罢的算法题" />
    <category term="有点难的算法题" />
    <category term="String" />
    <category term="数据结构与算法" />
    <category term="哈希算法" />
    <category term="霍夫曼编码" />
    <category term="哈夫曼编码" />
    <category term="C++" />
    <category term="排序" />
    <category term="冒泡排序" />
    <category term="分治思想排序" />
    <category term="go-设计模式" />
    <category term="交换排序" />
    <category term="快速排序" />
    <category term="分支思想排序" />
    <category term="桶排序" />
    <category term="线性思想排序" />
    <category term="选择排序" />
    <category term="Java" />
    <category term="dubbo" />
    <category term="模型评估" />
    <category term="递归" />
    <category term="架构" />
    <category term="笔记" />
    <category term="go-runtimes" />
    <category term="KNN" />
    <category term="JDK版本" />
    <category term="JDK11" />
    <category term="OOM" />
    <category term="JVM" />
    <category term="Stream" />
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/08/04/%E9%9D%A2%E7%BB%8F/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
        <title>JDK的内置线程池</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/08/04/%E9%9D%A2%E7%BB%8F/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
        <content type="html">&lt;h1 id=&#34;线程池是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程池是什么&#34;&gt;#&lt;/a&gt; 线程池是什么？&lt;/h1&gt;
&lt;p&gt;线程池可以控制线程运行的数量，处理过程中将任务放到队列中，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，那么超出数量的线程就会排队等候，等其他线程执行完毕，再从队列中取出任务来执行。&lt;/p&gt;
&lt;p&gt;主要特点为：&lt;br&gt;
1、降低资源消耗，通过重复利用已创建的线程创建和销毁造成的消耗。&lt;br&gt;
2、提供响应速度。当任务到达时，任务可以不需要等待线程创建，能够立即执行。&lt;br&gt;
3、提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性。使用线程池可以进行统一的分配，调优和监控。&lt;/p&gt;
&lt;h1 id=&#34;线程池参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程池参数&#34;&gt;#&lt;/a&gt; 线程池参数：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;corePoolSize&lt;/code&gt; : 线程池中常驻的线程数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maximumPoolSize&lt;/code&gt; : 线程池中能够容纳同时执行的最大线程数，此值必须大于 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keepAliveTime&lt;/code&gt; : 多余的空闲线程的存活时间。当前线程池数量超过 &lt;code&gt;corePoolSize&lt;/code&gt;  时，当空闲时间达 &lt;code&gt;keepAliveTime&lt;/code&gt;  值时，多余的空闲线程会被销毁直到剩下 &lt;code&gt;corePoolSize&lt;/code&gt;  个线程为止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unit&lt;/code&gt; :  &lt;code&gt;keepAliveTime&lt;/code&gt;  的单位.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workQueue&lt;/code&gt; : 任务队列，被提交但尚未执行的任务.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadFactory&lt;/code&gt; : 表示生成线程池中工作线程的线程工厂，用于创建线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headler&lt;/code&gt; : 拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数 ( &lt;code&gt;maximumPoolSize&lt;/code&gt; ) 时采取的措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程池运行原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程池运行原理&#34;&gt;#&lt;/a&gt; 线程池运行原理：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; . 在创建线程之后，等待提交过来的任务请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; . 当调用 &lt;code&gt;execute()&lt;/code&gt;  方法添加一个请求任务时，线程池会做如下判断：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2.1&lt;/code&gt; 、如果正在运行的线程数量小于 &lt;code&gt;corePoolSize&lt;/code&gt; ，那么马上创建线程执行这个任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2.2&lt;/code&gt; 、如果正在运行的线程数量大于或等于 &lt;code&gt;corePoolSize&lt;/code&gt; ，那么将这个任务放入队列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2.3&lt;/code&gt; 、如果这时候队列满了且正在运行的线程数量还小于 &lt;code&gt;maximumPoolSize&lt;/code&gt; , 那么创建非核心线程 l 立刻执行这个任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2.4&lt;/code&gt; 、如果队列满了且正在运行的线程数量大于或者等于这个 &lt;code&gt;maximumPoolSize&lt;/code&gt; , 那么线程池会启动饱和拒绝策略来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt; 、当线程执行完成任务时，它会从队列中取下一个任务来执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt; 、当线程无事可做超过一定的时间 ( &lt;code&gt;keepAliveTime&lt;/code&gt; ) 时，线程池会判断：&lt;br&gt;
如果当前运行的线程数大于 &lt;code&gt;corePoolSize&lt;/code&gt; ，那么这个线程就会被停掉。&lt;br&gt;
所以线程池的所有任务完成后它最终会收缩到 &lt;code&gt;corePoolSize&lt;/code&gt;  的大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程池拒绝策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程池拒绝策略&#34;&gt;#&lt;/a&gt; 线程池拒绝策略&lt;/h1&gt;
&lt;p&gt;拒绝策略实现了  &lt;code&gt;RejectedExecutionHandler&lt;/code&gt;  接口。&lt;/p&gt;
&lt;h2 id=&#34;jdk内置的四种&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jdk内置的四种&#34;&gt;#&lt;/a&gt; JDK 内置的四种:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbortPolicy&lt;/code&gt;  (默认): 直接抛出 &lt;code&gt;RejectedExecutionException&lt;/code&gt;  异常阻止系统正常运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CallerRunsPolicy&lt;/code&gt; : “调用者运行” 一种运行机制，该策略既不会 抛弃任务，也不会抛出异常，而是返回给调用者，从而减轻新任务流量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DiscardOldestPolicy&lt;/code&gt; : 抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DiscardPolicy&lt;/code&gt; : 直接丢弃任务，不予任何处理也不会抛出异常。如果允许任务丢失，这是最好的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;如何配置线程池参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何配置线程池参数&#34;&gt;#&lt;/a&gt; 如何配置线程池参数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 密集型:&lt;br&gt;
 需要大量的运算，没有阻塞。CPU 一直在全速运行。&lt;br&gt;
CPU 密集型任务只有在真正的多核 CPU 上才可以得到加速&lt;/p&gt;
&lt;p&gt;&lt;b&gt;参考公式： CPU 核心数 + 1 个线程&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO 密集型：&lt;br&gt;
即该任务需要大量的 IO，即大量的阻塞。&lt;br&gt;
在单线程上运行 IO 密集型的任务会导致浪费大量的 CPU 运算能力浪费等待。所以在 IO 秘籍型任务重使用多线程可以大大的加速程序运行，即使在单核 CPU 上，这种加速主要就是利用了被浪费掉的阻塞时间。&lt;br&gt;
IO 密集型，大部分线程都会阻塞。所以需要多配置线程。配置方案有两种：&lt;/p&gt;
&lt;p&gt;&lt;b&gt;1、参考公式: CPU 核数 / 1 - 阻塞系数。 阻塞系数在 0.8-0.9 之间。&lt;/b&gt;&lt;br&gt;
比如 8 核 CPU:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.9&lt;/mn&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;80&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{8}{1-0.9}=80&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2484389999999999em;vertical-align:-0.403331em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.655em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.403331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;个线程&lt;br&gt;
&lt;b&gt;2、参考公式: CPU 核数 * 2&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="线程池" />
        <category term="面经" />
        <updated>2021-08-04T06:14:00.000Z</updated>
    </entry>
</feed>
