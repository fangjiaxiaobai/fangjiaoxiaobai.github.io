{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"git系列\" category",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/18/git%E7%B3%BB%E5%88%97/%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/18/git%E7%B3%BB%E5%88%97/%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87/",
            "title": "git系列开篇",
            "date_published": "2021-08-18T06:48:55.000Z",
            "content_html": "<p>这个是继  <code>Redis</code>  ,  <code>MySQL</code>  之后的第三个系列了。<br>\n然而，前两个系列还都没有写完。<br>\n <code>so</code> ,  <code>Redis</code>  和  <code>MySQL</code>  pause.</p>\n<p>只是暂停～，我会在未来的三年内，将它们全部完成。</p>\n<p>叮～</p>\n<p><code>git</code> ！</p>\n<p>说到 <code>git</code> ，我们先了解一个人， <code>linus Torvalds</code>  （林纳斯・托瓦兹）</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/LinusTorvalds01.jpg\" alt=\"linus·Torvalds\"></p>\n<p>林纳斯・托瓦兹 是当今世界最著名的电脑程序员、黑客之一。他是 linux 内核的最早作者，随后发起了这个开源项目，担任 linux 内核的首要架构师和项目协调者。并于 2005 年 7 月 11 日，发布了仅用 10 天时间开发出的最早版本的 git 0.99。到今天 (2020 年 7 月 13 日)，最新的版本号是 2.27. 这个系列就以该版本进行分享。</p>\n<p>关于更多内容，查看这里 -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlFJTk3JUU3JUJBJUIzJUU2JTk2JUFGJUMyJUI3JUU2JTg5JTk4JUU3JTkzJUE2JUU1JTg1JUI5\">林纳斯・托瓦兹</span></p>\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\">#</a> git</h2>\n<p><code>2002</code>  年开始，林纳斯・托瓦斯 决定使用  <code>BitKeeper</code>  作为主要的版本控制系统来维护代码。但是社区中很多人认为，应该使用开源的版本控制软件来维护代码 林纳斯・托瓦斯也考虑使用 <code>monotone</code> ，但是 林纳斯・托瓦斯 嫌弃其性能不佳。在 <code>2005</code>  年，林纳斯决定自行开发一套版本控制系统。</p>\n<p>为什么称为 <code>git</code>  呢？</p>\n<p><code>git</code>  在英氏俚语中表示 不愉快的人。</p>\n<p>下面是 林纳斯・托瓦兹 对 <code>git</code>  的描述</p>\n<blockquote>\n<p>The name “git” was given by Linus Torvalds when he wrote the very first version. He described the tool as “the stupid content tracker” and the name as (depending on your way):<br>\nrandom three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of “get” may or may not be relevant.<br>\n“global information tracker”: you’re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.<br>\nstupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.</p>\n</blockquote>\n<p>林纳斯・托瓦兹在编写第一个版本时就使用了 <code>“git”</code>  这个名称。 他将工具描述为 “愚蠢的内容跟踪器”，并将其描述为（取决于您的方式）：</p>\n<ul>\n<li>可以发音念出的随机三个字母组合，而且并未被实际用在任何  <code>UNIX</code>  指令上。它是 <code>“get”</code>  的错误发音，这点可能相关也可能无关。</li>\n<li>“全局的信息跟踪器”：您的心情不错，对你而言它也确实说得通。天使唱歌，房间突然充满光明。( <code>Global Information tracker</code> )</li>\n<li>愚蠢的。鄙视和卑鄙的。简单。从俚语字典中选择。</li>\n</ul>\n<h3 id=\"git的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#git的实现原理\">#</a> git 的实现原理</h3>\n<p><code>git</code>  更像是一个文件系统，直接从本机上获取数据，不用连接服务端，每个开发者都可有全部开发历史的本地副本， <code>changes</code>  从这种本地 <code>repository</code>  复制给其他开发者。这些 <code>changes</code>  作为新增的开发分支被导入，可以与本地开发分支合并。</p>\n<p>而且，分支是轻量的，一个分支是对一个 <code>commit</code>  的引用。</p>\n<p><code>git</code>  使用 C 语言进行开发的，以追求更高的性能。 <code>git</code>  自动完成了垃圾回收，也可以通过  <code>git gc --prune</code></p>\n<p><code>git</code>  存储每个新创建的 <code>object</code>  作为一个单独文件。为了压缩存储空间占用，  <code>packs</code>  操作把很多文件（启发式类似名字的文件往往具有类似内容）使用差分压缩入一个文件中（ <code>packfile</code> ），并创建一个对应的索引文件，指明 <code>object</code>  在 <code>packfile</code>  中的偏移值。新创建的对象仍然作为单独文件存在。 <code>repacks</code>  操作非常费时间， <code>git</code>  会在空闲时间自动做此操作。也可用命令 <code>git gc</code>  来直接启动 <code>repack</code> 。 <code>packfile</code>  与索引文件都用 SHA-1 作为校验和并作为文件名。 <code>git fsck</code>  命令做校验和的完整性验证。</p>\n<p>Git 服务器典型的 TCP 监听端口为 <code>9418</code> 。</p>\n<p><code>git</code>  和其他版本控制系统（如 <code>CVS</code> ）有不小的差别， <code>git</code>  本身关心文件的整体性是否有改变，但多数的版本控制系统如 <code>CVS</code>  或 <code>Subversion</code>  系统则在乎文件内容的差异。 <code>git</code>  拒绝保持每个文件的版本修订关系。因此查看一个文件的历史需要遍历各个 <code>history</code>  快照； <code>git</code>  隐式处理文件更名，即同名文件默认为其前身，如果没有同名文件则在前一个版本中搜索具有类似内容的文件.</p>\n<p>以上简要介绍，先到这里，我们来看下， <code>git</code>  这一系列文章的目录。</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> git 介绍</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> git 安装</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> git 简单使用<br>\n介绍 git add、commit、merge、checkout、reset… 等基础命令的使用。</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> git 使用进阶<br>\n介绍：git diff、log、reflog，cherry-pick 等命令的使用</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> git 高级命令</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> git 底层命令</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> git 分支</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> git 远程仓库</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> git 工作流</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> git 搜索</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> git 再谈重置</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> git 安全性验证</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\"><label for=\"cbx_12\"> git 钩子</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" disabled=\"true\"><label for=\"cbx_13\"> git 传输协议</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" disabled=\"true\"><label for=\"cbx_14\"> git 数据维护和修复</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" disabled=\"true\"><label for=\"cbx_15\"> git 工作原理</label></li>\n</ul>\n<h3 id=\"推荐书籍\"><a class=\"markdownIt-Anchor\" href=\"#推荐书籍\">#</a> 推荐书籍</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy\">git-doc</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvODk2MDQzNDg4MDI5NjAw\"> 廖雪峰 Git 教程</span></p>\n<p><b>一个不错的 Github 仓库：</b> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bjb3R0bGUvbGVhcm5HaXRCcmFuY2hpbmc=\">游戏中学 git</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "目录",
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/02-Git%E4%BB%8B%E7%BB%8D/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/02-Git%E4%BB%8B%E7%BB%8D/",
            "title": "Git介绍",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"git是目前最先进的版本控制管理系统-b\"><a class=\"markdownIt-Anchor\" href=\"#git是目前最先进的版本控制管理系统-b\">#</a>  <code>Git</code>  是目前最先进的版本控制管理系统。</b></h2>\n<p>本质上讲， <code>git</code>  是一个内容寻址文件系统。其核心部分是一个简单的键值对数据库 ( <code>key-value data store</code> ). 你可以想像 <code>git</code>  仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。</p>\n<h2 id=\"git先进在哪里\"><a class=\"markdownIt-Anchor\" href=\"#git先进在哪里\">#</a>  <code>git</code>  先进在哪里？</h2>\n<ul>\n<li>\n<p>直接记录快照，而不是比较差异。<br>\n这也是 <code>git</code>  和其他版本管理系统的主要差别。其他版本管理系统 ( <code>CVS</code> , <code>Subversion</code> , <code>Perforce</code> , <code>Bazaar</code>  等) 存储各个版本之间，每个文件随时间逐渐累积的差异。这类版本管理系统称为 基于差异的版本控制。如下图:<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D01.png\" alt=\"git介绍01.png\"></p>\n<p><code>git</code>  则不然，当你提交更新或者保存项目状态的时候，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果没有没有修改， <code>git</code>  不再重新存储该文 <code>git</code>  件，而是只保留一个连接指向之前存储的文件。 <code>Git</code>  对待所管理的数据更像是一个快照流。如下图:<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D02.png\" alt=\"git介绍02.png\"></p>\n<p><b> <code>git</code>  更像是一个小型的文件系统，而不只是一个简单的 CVS。</b></p>\n</li>\n<li>\n<p><code>git</code>  近乎所有操作都在本地执行<br>\n这意味着不管有无网络，你都可以工作。没有网络的时候，你照常可以提交代码，等到有网的时候，在进行上传到远程仓库。而使用 <code>Subversion</code> ， <code>CVS</code>  的话，只能修改文件，但是不能提交。</p>\n</li>\n<li>\n<p><code>git</code>  保证完整性<br>\n <code>Git</code>  中所有的数据在存储前都计算校验和，然后以校验和来引用。这就是说， <code>Git</code>  会知道你所有的更改任何文件内容或者目录内容，这个是构成 git 哲学不可或缺的部分。 <code>Git</code>  使用计算校验和的机制叫做  <code>SHA-1</code>  散列 ( <code>hash</code> , 哈希)。这是一个由 <code>40</code>  个十六进制字符 ( <code>0-9</code>  和 <code>a-f</code> ) 组成的字符串，基于 Git 中文件的内容和目录结构计算出来的。 <code>Git</code>  数据库中保存的信息都是以文件内容的哈希值来索引数据，而不是文件名。</p>\n</li>\n<li>\n<p><code>Git</code>  一般都只添加数据<br>\n执行的所有的 <code>git</code>  操作，几乎只往数据库中添加数据。一旦你提交了快照到 <code>git</code>  中，就难以再丢失数据，特别是定期的推送到了远程仓库。</p>\n</li>\n</ul>\n<h2 id=\"git的三种状态\"><a class=\"markdownIt-Anchor\" href=\"#git的三种状态\">#</a>  <code>git</code>  的三种状态</h2>\n<p><code>git</code>  对文件的管理，有三种状态。</p>\n<ul>\n<li>已修改：表示修改了文件，但还没有保存到数据库中。</li>\n<li>已暂存：表示对一个已修改文件的当前版本做了标记，使之在下次提交的快照中。</li>\n<li>已提交：表示数据已经安全的保存到了本地的 git 数据库中。</li>\n</ul>\n<p>这三种状态分别代表了 <code>git</code>  的三个工作区。工作区，暂存区以及 <code>git</code>  目录 (版本库)。如下图</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E4%BB%8B%E7%BB%8D03.png\" alt=\"git介绍03\"></p>\n<p>工作区是对项目的某个版本独立提取出来的内容。这些从 <code>git</code>  仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区是一个文件，保存了下次将要提交的文件列表信息。 <code>git</code>  中称为索引，不过一般都是称为暂存区。<br>\n <code>Git</code>  仓库目录指的就是 .git 目录 (.git)。下节就从创建仓库开始学起。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/01-GIt%E5%AE%89%E8%A3%85/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/01-GIt%E5%AE%89%E8%A3%85/",
            "title": "安装git",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"windows下安装\"><a class=\"markdownIt-Anchor\" href=\"#windows下安装\">#</a> windows 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"linux下安装\"><a class=\"markdownIt-Anchor\" href=\"#linux下安装\">#</a> linux 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"mac下安装\"><a class=\"markdownIt-Anchor\" href=\"#mac下安装\">#</a> mac 下安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8/Z3dzX3JkPXNzbA==\">here</span></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/05-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A42%20git%E6%97%B6%E5%85%89%E6%9C%BA1/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/05-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A42%20git%E6%97%B6%E5%85%89%E6%9C%BA1/",
            "title": "git基本命令二",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p><code>git</code>  的时光机 (简化版)</p>\n<ul>\n<li><code>git log</code> ：查看历史记录</li>\n<li><code>git commit -amend</code> ：重写上一次的提交历史</li>\n</ul>\n<h3 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a>  <code>git log</code></h3>\n<p><code>git</code>  有一个特别实用的功能，可以让我们看到所有的历史更改记录。这个命令就是  <code>git log</code> .</p>\n<p>首先我们新建一个仓库。随便进行 <code>5</code>  次更改， <code>5</code>  提交。</p>\n<p>执行如下的操作:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;第一行&#x27; &gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test git-log 1 &quot;</span><br><span class=\"line\">[master (root-commit) 0718ac9] test git-log 1</span><br><span class=\"line\"> 2 files changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 .gitignore</span><br><span class=\"line\"> create mode 100644 testGitLog</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第二行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 2 &quot;</span><br><span class=\"line\">[master f8248a5] test git-log 2</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第三行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 3 &quot;</span><br><span class=\"line\">[master b282b88] test git-log 3</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第四行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 4 &quot;</span><br><span class=\"line\">[master b9df1bb] test git-log 4</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第五行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 5 &quot;</span><br><span class=\"line\">[master 769db1c] test git-log 5</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>运行一下  <code>git log</code>  我们查看一下输出的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:35:30 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:34:39 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们没有传入任何参数的情况下， <code>git log</code>  会按照先后顺序列出所有的提交，时间最近的更新排在最上面。</p>\n<p>该命令会列出每次提交的 SHA-1 校验和，作者的名字和电子邮箱，提交时间，以及提交说明。</p>\n<p><code>git log</code>  还有很多我们选项，我在后面有一篇文章写了 git 的命令大全，并且会保持更新哦。</p>\n<h4 id=\"git-log命令选项\"><a class=\"markdownIt-Anchor\" href=\"#git-log命令选项\">#</a>  <code>git log</code>  命令选项</h4>\n<p>这里我们就先介绍一写常用的命令选项。</p>\n<h5 id=\"显示每次提交所引入的差异-patch\"><a class=\"markdownIt-Anchor\" href=\"#显示每次提交所引入的差异-patch\">#</a> 显示每次提交所引入的差异  <code>--patch</code></h5>\n<p><code>git log --patch</code>  或者  <code>git log -p</code>  会显示每次提交所引入的差异，会按照补丁的方式展示。后面也可以加上数字来限制下面显示几次提交。比如： <code>git log -p -1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index 11c20cd..844b7e8 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -2,3 +2,4 @@</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\"> 第四行</span><br><span class=\"line\">+第五行</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index f1c8e85..11c20cd 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -1,3 +1,4 @@</span><br><span class=\"line\"> 第一行</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\">+第四行</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>限制提交数演示：</p>\n<p><code>git log -p -1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/testGitLog b/testGitLog</span><br><span class=\"line\">index 11c20cd..844b7e8 100644</span><br><span class=\"line\">--- a/testGitLog</span><br><span class=\"line\">+++ b/testGitLog</span><br><span class=\"line\">@@ -2,3 +2,4 @@</span><br><span class=\"line\"> 第二行</span><br><span class=\"line\"> 第三行</span><br><span class=\"line\"> 第四行</span><br><span class=\"line\">+第五行</span><br></pre></td></tr></table></figure>\n<p>这个选项可以在每次提交的下面列出所有修改过的文件，有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>\n<h5 id=\"查看每次提交的简略统计信息-git-log-stat\"><a class=\"markdownIt-Anchor\" href=\"#查看每次提交的简略统计信息-git-log-stat\">#</a> 查看每次提交的简略统计信息， <code>git log --stat</code></h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">## 什么文件被修改了，增加还是删除</span><br><span class=\"line\"> testGitLog | 1 +</span><br><span class=\"line\">## 一共修改了多少文件</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"格式化输出日志-pretty\"><a class=\"markdownIt-Anchor\" href=\"#格式化输出日志-pretty\">#</a> 格式化输出日志  <code>--pretty</code></h4>\n<p>这个选项可以使不同于默认格式化的方式展示提交历史。它提供了几种内建的格式化方式，除此之外使用者还可以自定义格式化方式。</p>\n<h6 id=\"内建一oneline\"><a class=\"markdownIt-Anchor\" href=\"#内建一oneline\">#</a> 内建一：oneline</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master) test git-log 5</span><br><span class=\"line\">b9df1bb5c10f6602f7fa889ca91759a2e45e69cb test git-log 4</span><br><span class=\"line\">b282b882317b118095eb921e707e449f45fdeef6 test git-log 3</span><br><span class=\"line\">f8248a5fbc18a90710c95cee475b34797299bc61 test git-log 2</span><br><span class=\"line\">0718ac9a20021971d6f1a09a3ef72e36b6fd73c9 test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建二-short\"><a class=\"markdownIt-Anchor\" href=\"#内建二-short\">#</a> 内建二： short</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=short</span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建三full\"><a class=\"markdownIt-Anchor\" href=\"#内建三full\">#</a> 内建三：full</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=full</span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 3</span><br><span class=\"line\"></span><br><span class=\"line\">commit f8248a5fbc18a90710c95cee475b34797299bc61</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 0718ac9a20021971d6f1a09a3ef72e36b6fd73c9</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Commit: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 1</span><br></pre></td></tr></table></figure>\n<h6 id=\"内建四fuller\"><a class=\"markdownIt-Anchor\" href=\"#内建四fuller\">#</a> 内建四：fuller</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=fullter</span><br><span class=\"line\"></span><br><span class=\"line\">commit 769db1cd5ba091162707a3e648d67ec8e6913d2b (HEAD -&gt; master)</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:36:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 5</span><br><span class=\"line\"></span><br><span class=\"line\">commit b9df1bb5c10f6602f7fa889ca91759a2e45e69cb</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:36:01 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test git-log 4</span><br><span class=\"line\"></span><br><span class=\"line\">commit b282b882317b118095eb921e707e449f45fdeef6</span><br><span class=\"line\">Author:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">AuthorDate: Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\">Commit:     fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">CommitDate: Tue Jul 21 15:35:48 2020 +0800</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"最nb的format\"><a class=\"markdownIt-Anchor\" href=\"#最nb的format\">#</a> 最 NB 的：format</h6>\n<p>这个选项目可以让我们定制记录的显示格式，这种并不会随着 git 的更新而发生改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&quot;%h-%an,%ar:%s&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">769db1c - fangjiaxiaobai, 27 minutes ago:test git-log 5</span><br><span class=\"line\">b9df1bb - fangjiaxiaobai, 27 minutes ago:test git-log 4</span><br><span class=\"line\">b282b88 - fangjiaxiaobai, 27 minutes ago:test git-log 3</span><br><span class=\"line\">f8248a5 - fangjiaxiaobai, 27 minutes ago:test git-log 2</span><br><span class=\"line\">0718ac9 - fangjiaxiaobai, 28 minutes ago:test git-log 1</span><br></pre></td></tr></table></figure>\n<p>format 后面的分别代表什么含义呢？<br>\n这里列出了 Format 的常用参数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%H</td>\n<td style=\"text-align:left\">提交的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%h</td>\n<td style=\"text-align:left\">提交的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%T</td>\n<td style=\"text-align:left\">树的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%t</td>\n<td style=\"text-align:left\">树的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%P</td>\n<td style=\"text-align:left\">父提交的完整哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">父提交的简写哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%an</td>\n<td style=\"text-align:left\">作者名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ae</td>\n<td style=\"text-align:left\">作者的电子邮件地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ad</td>\n<td style=\"text-align:left\">作者修订日期（可以用 --date = 选项 来定制格式）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ar</td>\n<td style=\"text-align:left\">作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cn</td>\n<td style=\"text-align:left\">提交者的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%ce</td>\n<td style=\"text-align:left\">提交者的电子邮件地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cd</td>\n<td style=\"text-align:left\">提交日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cr</td>\n<td style=\"text-align:left\">提交日期（距今多长时间）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">提交说明</td>\n</tr>\n</tbody>\n</table>\n<p>咦～？作者和提交这有什么区别呢？<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mtext>❷</mtext></msup></mrow><annotation encoding=\"application/x-tex\">^❷</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.363em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.363em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">❷</span></span></span></span></span></span></span></span></span></span></span><br>\n这里，小白就要卖一个关子了。不过答案就在这个系列里～。因为在目前这总单分支的本地开发环境里，提交者就是作者。<br>\n另外在多分支的开发过车中，使用  <code>format</code>  配合  <code>--graph</code>  选项就尤为有用。后面介绍～</p>\n<h5 id=\"限制输出性的选项\"><a class=\"markdownIt-Anchor\" href=\"#限制输出性的选项\">#</a> 限制输出性的选项</h5>\n<p>上面用过了  <code>-&lt;number&gt;</code>  的方式来显示 git log 输出日志的条数，git 还提供了 类似于：  <code>--since</code>  和  <code>--until</code> ,  <code>--before</code>  等时间限制的选项目。</p>\n<p>比如：  <code>git log --since=2.weeks</code>  输出 2 周之内的提交记录。</p>\n<p>该命令可用的格式十分丰富 —— 可以是类似 “2008-01-15” 的具体的某一天，也可以是类似 “2 years 1 day 3 minutes ago” 的相对日期。<br>\n还可以过滤出匹配指定条件的提交。 用  <code>--author</code>  选项显示指定作者的提交，用  <code>--grep</code>  选项搜索提交说明中的关键字。</p>\n<p>另一个非常有用的过滤器是 -S（俗称 <code>“pickaxe”</code>  选项，取 “用鹤嘴锄在土里捡石头” 之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -S function_name</span><br></pre></td></tr></table></figure>\n<p>最后一个很实用的  <code>git log</code>  选项是路径（ <code>path</code> ）， 如果只关心某些文件或者目录的历史提交，可以在  <code>git log</code>  选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（ <code>--</code> ）隔开之前的选项和后面限定的路径名。</p>\n<h2 id=\"git-commit-amend\"><a class=\"markdownIt-Anchor\" href=\"#git-commit-amend\">#</a>  <code>git commit --amend</code></h2>\n<p>这个命令可以让我们重写上一次的提交记录。<br>\n比如有下面这样的场景：</p>\n<p>小白修改了一个文件，提交了之后发现写了一个错别字，小白又想保持 <code>git</code>  提交历史的整洁。这时  <code>git commit -amend</code>  就派上了用场了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git log --pretty=oneline</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;第留行&#x27; &gt;&gt; testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a -m &quot;test git-log 6 &quot;</span><br><span class=\"line\">[detached HEAD f65b589] test git-log 6</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">➜  gitlearn git:(master) vim testGitLog</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -a --amend -m &quot;test git-log 6 &quot;</span><br><span class=\"line\">[detached HEAD 1afd020] test git-log 6</span><br><span class=\"line\"> Date: Tue Jul 21 16:36:43 2020 +0800</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 查看提交日志</span><br><span class=\"line\">➜  gitlearn git:(master) git log --pretty=oneline</span><br><span class=\"line\">1afd020466eb9b519cec80415cb1e9c587612511 (HEAD) test git-log 6</span><br><span class=\"line\">769db1cd5ba091162707a3e648d67ec8e6913d2b test git-log 5</span><br><span class=\"line\">b9df1bb5c10f6602f7fa889ca91759a2e45e69cb test git-log 4</span><br><span class=\"line\">b282b882317b118095eb921e707e449f45fdeef6 test git-log 3</span><br><span class=\"line\">f8248a5fbc18a90710c95cee475b34797299bc61 test git-log 2</span><br><span class=\"line\">0718ac9a20021971d6f1a09a3ef72e36b6fd73c9 test git-log 1</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<p>注意！ 这里第二次提交的结果会替换掉之前的一次提交。</p>\n<p>以上就是本次 简约版本时光机的所有内容了。下一篇 远程仓库</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/06-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A43-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/06-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A43-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/",
            "title": "git命令3 - 远程仓库",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<p>远程仓库指的是 托管到因特网或者其他网络中的项目的版本库。</p>\n<p>可以使用  <code>git remote</code>  命令来配置远程仓库。</p>\n<p>我们先看一下  <code>git remote</code>  命令都有什么子选项.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote [-v | --verbose]</span><br><span class=\"line\">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class=\"line\">git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;...</span><br><span class=\"line\">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class=\"line\">git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class=\"line\">git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class=\"line\">git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">git remote [-v | --verbose] show [-n] &lt;name&gt;...</span><br><span class=\"line\">git remote prune [-n | --dry-run] &lt;name&gt;...</span><br><span class=\"line\">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)...]</span><br></pre></td></tr></table></figure>\n<p>下面我们只介绍几个常用的远程仓库的命令</p>\n<h3 id=\"配置远程仓库-git-remote-add\"><a class=\"markdownIt-Anchor\" href=\"#配置远程仓库-git-remote-add\">#</a> 配置远程仓库 -  <code>git remote add</code></h3>\n<p><code>git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</code></p>\n<p>首先在页面上新建一个空的仓库备用。<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/web%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%96%B0%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png\" alt=\"web页面上新建git远程仓库.png\"><br>\n 演示一下使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;演示配置远程仓库&#x27; &gt; testRemoteGit</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;新增一个文件，初始化项目&quot;</span><br><span class=\"line\">[master (root-commit) 5ed81fa] 新增一个文件，初始化项目</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 testRemoteGit</span><br><span class=\"line\"> # 配置远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"># 查看远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\"></span><br><span class=\"line\">## 在增加一个远程仓库</span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin2 http://git.baijiahulian.com/wangxiyue/gitlearn.git</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">origin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"将本地的文件推送到远程仓库中\"><a class=\"markdownIt-Anchor\" href=\"#将本地的文件推送到远程仓库中\">#</a> 将本地的文件推送到远程仓库中</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git push origin master</span><br><span class=\"line\">Counting objects: 3, done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 281 bytes | 281.00 KiB/s, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class=\"line\">To https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">➜  gitlearn git:(master)</span><br></pre></td></tr></table></figure>\n<h3 id=\"从git仓库中拉取数据\"><a class=\"markdownIt-Anchor\" href=\"#从git仓库中拉取数据\">#</a> 从 git 仓库中拉取数据</h3>\n<p>可以使用  <code>git fetch</code>  命令。 我们现在页面上的一个仓库中手动修改一个文件来演示一下 fetch 的功能。</p>\n<p>在页面就行点击编辑，然后加上  <code>这里是在远程仓库中加入的内容。</code> 这样一句话。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git fetch origin</span><br><span class=\"line\">remote: Enumerating objects: 5, done.</span><br><span class=\"line\">remote: Counting objects: 100% (5/5), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From https://gitee.com/fangjiaxiaobai/gitlearn</span><br><span class=\"line\">   5ed81fa..62be3ab  master     -&gt; origin/master</span><br></pre></td></tr></table></figure>\n<p>使用  <code>git pull</code>  也可以得到相同的结果。</p>\n<h3 id=\"查看某个远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#查看某个远程仓库\">#</a> 查看某个远程仓库</h3>\n<p><code>git remote show</code>  来查看远程仓库中的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote show origin</span><br><span class=\"line\">* remote origin</span><br><span class=\"line\">  Fetch URL: https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\">  Push  URL: https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\">  HEAD branch: master</span><br><span class=\"line\">  Remote branch:</span><br><span class=\"line\">    master tracked</span><br><span class=\"line\">  Local ref configured for &#x27;git push&#x27;:</span><br><span class=\"line\">    master pushes to master (local out of date)</span><br></pre></td></tr></table></figure>\n<p>它会列出远程仓库的  <code>URL</code>  与跟踪分支的信息。因为我们这是一个新建的仓库，这里我粘贴一个很多次提交的项目来看一下。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/gitRemote%E5%88%86%E6%94%AF%E7%8A%B6%E6%80%81.png\" alt=\"gitRemote分支状态\"></p>\n<p>这个命令列出了当你在特定的分支上执行  <code>git push</code>  会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了， 还有当你执行  <code>git pull</code>  时哪些本地分支可以与它跟踪的远程分支自动合并。</p>\n<h4 id=\"重命名远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#重命名远程仓库\">#</a> 重命名远程仓库</h4>\n<p>使用  <code>git remote renam</code> e 命令可以来重命名仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote rename origin giteeOrigin</span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">giteeOrigin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (fetch)</span><br><span class=\"line\">giteeOrigin\thttps://gitee.com/fangjiaxiaobai/gitlearn.git (push)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#删除远程分支\">#</a> 删除远程分支</h4>\n<p>使用命令  <code>git remote remove</code>  命令可以删除远程仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git remote remove giteeOrigin</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git remote -v</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (fetch)</span><br><span class=\"line\">origin2\thttp://git.baijiahulian.com/wangxiyue/gitlearn.git (push)</span><br></pre></td></tr></table></figure>\n<p>一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/07-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A44-%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%AB%E5%90%8D/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/07-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A44-%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%AB%E5%90%8D/",
            "title": "git 基础 - 标签 和 别名",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"标签\"><a class=\"markdownIt-Anchor\" href=\"#标签\">#</a> 标签</h3>\n<p>标签最主要的作用是，人们会使用这个功能来发布节点，作为一个里程碑等特殊意义的标识。</p>\n<p><code>git</code>  中标签使用  <code>tag</code>  来表示。对应着  <code>git tag</code>  这个命令。</p>\n<p>先看一下  <code>git tag</code>  命令吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]</span><br><span class=\"line\">        &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class=\"line\">git tag -d &lt;tagname&gt;...</span><br><span class=\"line\">git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class=\"line\">        [--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class=\"line\">        [--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class=\"line\">        [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;...]</span><br><span class=\"line\">git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;...</span><br></pre></td></tr></table></figure>\n<p>老规矩，这里我们介绍几个常用的命令。</p>\n<h4 id=\"标签命令\"><a class=\"markdownIt-Anchor\" href=\"#标签命令\">#</a> 标签命令</h4>\n<p><code>git</code>  支持两种标签， 轻量标签 和 附注标签。</p>\n<p>轻量标签 是一个 <code>不会改变的分支</code> ，它只是一个特定的提交引用。<br>\n而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p>\n<p>这里我以功能为点，同时介绍两种标签的使用的方式。</p>\n<h5 id=\"创建标签\"><a class=\"markdownIt-Anchor\" href=\"#创建标签\">#</a> 创建标签</h5>\n<h6 id=\"创建附注标签\"><a class=\"markdownIt-Anchor\" href=\"#创建附注标签\">#</a> 创建附注标签</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  git_learn git:(master) git log --pretty=oneline</span><br><span class=\"line\">cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 (HEAD -&gt; master) commit 3</span><br><span class=\"line\">76400568f6397322f7d57d13834fa5ff6fbed2d9 commit 2</span><br><span class=\"line\">5758ef102fd4924ffbcf4c0cfeddac503deb32a9 commit 1</span><br><span class=\"line\"></span><br><span class=\"line\">## 添加标签</span><br><span class=\"line\">➜  git_learn git:(master) git tag -a v1.0 cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 -m &quot;第一个tag&quot;</span><br><span class=\"line\">## 查看标签的内容</span><br><span class=\"line\">➜  git_learn git:(master) git show v1.0</span><br><span class=\"line\"># 输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。  2</span><br><span class=\"line\">tag v1.0</span><br><span class=\"line\">Tagger: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Fri Jul 31 08:51:24 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">第一个tag</span><br><span class=\"line\"></span><br><span class=\"line\">commit cbfebb28dde6707bf9dcc95175506a5c4cd4bfb4 (HEAD -&gt; master, tag: v1.0)</span><br><span class=\"line\">Author: fangjiaxiaobai &lt;fangjiaxiaobai@163.com&gt;</span><br><span class=\"line\">Date:   Fri Jul 31 08:45:24 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    commit 3</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/test3.txt b/test3.txt</span><br><span class=\"line\">new file mode 100644</span><br><span class=\"line\">index 0000000..e69de29</span><br></pre></td></tr></table></figure>\n<p><code>-m</code>  选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会启动编辑器要求你输入信息</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/14-git%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/14-git%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/",
            "title": "其他命令",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">available git commands in &#x27;/usr/local/git/libexec/git-core&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  add                       diff-index                merge-octopus             reset</span><br><span class=\"line\">  add--interactive          diff-tree                 merge-one-file            rev-list</span><br><span class=\"line\">  am                        difftool                  merge-ours                rev-parse</span><br><span class=\"line\">  annotate                  difftool--helper          merge-recursive           revert</span><br><span class=\"line\">  apply                     fast-export               merge-resolve             rm</span><br><span class=\"line\">  archimport                fast-import               merge-subtree             send-email</span><br><span class=\"line\">  archive                   fetch                     merge-tree                send-pack</span><br><span class=\"line\">  bisect                    fetch-pack                mergetool                 sh-i18n--envsubst</span><br><span class=\"line\">  bisect--helper            filter-branch             mktag                     shell</span><br><span class=\"line\">  blame                     fmt-merge-msg             mktree                    shortlog</span><br><span class=\"line\">  branch                    for-each-ref              mv                        show</span><br><span class=\"line\">  bundle                    format-patch              name-rev                  show-branch</span><br><span class=\"line\">  cat-file                  fsck                      notes                     show-index</span><br><span class=\"line\">  check-attr                fsck-objects              p4                        show-ref</span><br><span class=\"line\">  check-ignore              gc                        pack-objects              stage</span><br><span class=\"line\">  check-mailmap             get-tar-commit-id         pack-redundant            stash</span><br><span class=\"line\">  check-ref-format          grep                      pack-refs                 status</span><br><span class=\"line\">  checkout                  gui                       patch-id                  stripspace</span><br><span class=\"line\">  checkout-index            gui--askpass              prune                     submodule</span><br><span class=\"line\">  cherry                    hash-object               prune-packed              submodule--helper</span><br><span class=\"line\">  cherry-pick               help                      pull                      subtree</span><br><span class=\"line\">  citool                    http-backend              push                      svn</span><br><span class=\"line\">  clean                     http-fetch                quiltimport               symbolic-ref</span><br><span class=\"line\">  clone                     http-push                 read-tree                 tag</span><br><span class=\"line\">  column                    imap-send                 rebase                    unpack-file</span><br><span class=\"line\">  commit                    index-pack                rebase--helper            unpack-objects</span><br><span class=\"line\">  commit-tree               init                      receive-pack              update-index</span><br><span class=\"line\">  config                    init-db                   reflog                    update-ref</span><br><span class=\"line\">  count-objects             instaweb                  remote                    update-server-info</span><br><span class=\"line\">  credential                interpret-trailers        remote-ext                upload-archive</span><br><span class=\"line\">  credential-cache          log                       remote-fd                 upload-pack</span><br><span class=\"line\">  credential-cache--daemon  ls-files                  remote-ftp                var</span><br><span class=\"line\">  credential-store          ls-remote                 remote-ftps               verify-commit</span><br><span class=\"line\">  cvsexportcommit           ls-tree                   remote-http               verify-pack</span><br><span class=\"line\">  cvsimport                 mailinfo                  remote-https              verify-tag</span><br><span class=\"line\">  cvsserver                 mailsplit                 remote-testsvn            web--browse</span><br><span class=\"line\">  daemon                    merge                     repack                    whatchanged</span><br><span class=\"line\">  describe                  merge-base                replace                   worktree</span><br><span class=\"line\">  diff                      merge-file                request-pull              write-tree</span><br><span class=\"line\">  diff-files                merge-index               rerere</span><br><span class=\"line\"></span><br><span class=\"line\">git commands available from elsewhere on your $PATH</span><br><span class=\"line\"></span><br><span class=\"line\">  credential-osxkeychain</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some</span><br><span class=\"line\">concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;</span><br><span class=\"line\">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<p>除去上篇文章中介绍的命令，这些命令就相对高端了～，我们还是挑一些可以用得到来分享。</p>\n<h3 id=\"命令解释\"><a class=\"markdownIt-Anchor\" href=\"#命令解释\">#</a> 命令解释</h3>\n<ul>\n<li>git hash-object</li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/04-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/04-git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/",
            "title": "git基本使用一",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p>上一篇文章，我们学习了 使用 <code>git</code>  如何创建一个仓库。而且还详细的介绍了 <code>git</code>  各个工作目录的作用。</p>\n<p><code>git</code> :  <code>global information tracker</code></p>\n<p><code>git</code>  其实是内容寻址文件系统。本质是一个 <code>key-value</code>  的数据库。在上一篇文章了解了 <code>git</code>  的四种对象：提交对象，数据对象，树对象和标签对象。还学习了 <code>git</code>  的引用 ( <code>HEAD</code> , <code>Index</code> , <code>refs</code>  目录)，以及最后学习了 <code>git</code>  的压缩，( <code>git gc</code> ).</p>\n<p>今天我们从 简单的 git 使用流程说起。</p>\n<p>上一篇中，我们创建了一个仓库.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\">➜  gitlearn git:(master)</span><br></pre></td></tr></table></figure>\n<p>新建完仓库之后，我们一般会对仓库进行配置。</p>\n<h3 id=\"git-config\"><a class=\"markdownIt-Anchor\" href=\"#git-config\">#</a> git config</h3>\n<p><code>git</code>  自带了一个  <code>git config</code>  工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置。</p>\n<ul>\n<li><code>A</code> : <code>/etc/gitconfig</code>  文件：包含系统上每一个用户以及他们仓库的通用配置。 如果执行  <code>git config</code>  时，带上 --system 选项，就会读写该配置文件中的配置属性。</li>\n<li><code>B</code> : <code>~/.gitconfig</code>  或  <code>~/.config/git/config</code>  文件：只针对当前用户。使用  <code>--global</code>  选项会让 <code>git</code>  读写此文件，这会对你系统的上的<b>所有</b>仓库生效。</li>\n<li><code>C</code> : 当前使用仓库的 <code>git</code>  目录的 <code>config</code>  文件 ( <code>.git/config</code> ): 只针对当前仓库。 可以使用  <code>--local</code>  选项让 <code>git</code>  强制读写此文件，默认情况下也会使用它。</li>\n</ul>\n<p>读取顺序为：  <code>A</code> -&gt; <code>B</code> -&gt; <code>C</code> ,  <code>C</code>  会覆盖 <code>B</code>  中相同的配置， <code>B</code>  会覆盖 <code>A</code>  中相同的配置。</p>\n<blockquote>\n<p>可以通过 git config --list --show origin 命令查查文件位置以及命令所在的文件。</p>\n</blockquote>\n<p>一般我们新建了仓库，或者  <code>clone</code>  一个远程仓库到本地之后，<b>第一件事就是配置自己的用户名和邮件地址。</b></p>\n<p>刚才说过，三种配置方式的作用范围，这里<b>一般情况下</b>会使用  <code>--global</code> 。 当前登录的用户都会使用一样的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;fangjiaxiaobai&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;fangjiaxiaobai@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>这一点非常重要！</p>\n<p>我们来查看一下配置的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global --list</span><br><span class=\"line\">user.name=fangjiaxiaobai</span><br><span class=\"line\">user.email=fangjiaxiaobai@163.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-git-的默认文本编辑器\"><a class=\"markdownIt-Anchor\" href=\"#修改-git-的默认文本编辑器\">#</a> 修改 git 的默认文本编辑器</h4>\n<p><code>git</code>  的文本编辑器有什么作用呢？</p>\n<p>当我们的文件 在 提交代码，拉取远程代码或者切换分支出现冲突的时候， <code>git</code>  命令行窗口就会有一个处理冲突之后填写 <code>commit</code>  信息的命令行窗口，这里使用的编辑器就是 我们要说的 “文本编辑器了”。</p>\n<p><code>git</code>  中默认的文本编辑器是  <code>nano</code>  编辑器，我们使用进行配置，使用  <code>vim</code>  编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git config --global core.editor &quot;vim&quot;</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git config --global -l</span><br><span class=\"line\">user.name=fangjiaxiaobai</span><br><span class=\"line\">user.email=fangjiaxiaobai@163.com</span><br><span class=\"line\">core.editor=vim</span><br></pre></td></tr></table></figure>\n<p>配置完仓库，之后，我们就正式开始使用  <code>git</code>  了。</p>\n<h3 id=\"使用-git-进行工作\"><a class=\"markdownIt-Anchor\" href=\"#使用-git-进行工作\">#</a> 使用  <code>git</code>  进行工作</h3>\n<p>简单来讲，我们只需三步，两个命令就可以完成文件的版本控制。</p>\n<ul>\n<li>修改文件 (创建文件，修改文件内容，删除文件)</li>\n<li>使用  <code>git add .</code>  将文件纳入版本管理</li>\n<li>使用  <code>git commit -m &quot;xxx&quot;</code>  将文件提交到版本仓库。</li>\n</ul>\n<p>在我们的工作目录中 (比如  <code>gitlearn/</code> ), 所有的文件只有两种状态：  <code>已跟踪</code> 和 <code>未跟踪</code> 。</p>\n<p>已跟踪的文件是指被纳入版本控制的文件。在上一次快照中有他们的记录，在工作一段时间后，他们的状态可能是未修改，已修改，或者已经放入了 <code>暂存区</code>  $^❶ $。</p>\n<p>未跟踪的文件：就是 即不存在上次快照中，也没有被放入暂存区中。</p>\n<p>这里我们再次的介绍一下 <code>git</code>  的工作区域:</p>\n<p>工作区，暂存区，版本库。</p>\n<p>工作区，就是我们修改的文件。包括：新建文件，修改文件内容，删除文件。<br>\n暂存区，就是 <code>git</code>  将我们修改的文件记录起来起来。<br>\n版本库，就是 <code>git</code>  的记录的版本变更历史。就是  <code>.git</code>  目录下的 <code>objects/</code>  等目录下的所有文件。即我们 进行了 <code>commit</code>  操作之后就会进入了版本库。</p>\n<h3 id=\"让-git-跟踪我们的文件\"><a class=\"markdownIt-Anchor\" href=\"#让-git-跟踪我们的文件\">#</a> 让  <code>git</code>  跟踪我们的文件</h3>\n<p>使用  <code>git add</code>  命令，可以让 <code>git</code>  开始跟踪一个文件。</p>\n<p>使 <code>git</code>  跟踪文件  <code>README.md</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test git跟踪文件&#x27; &gt; README.md</span><br><span class=\"line\"># 查看工作区中文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tREADME.md</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>\n<p>这里我们看到了，未跟踪的该文件：  <code>README.md</code> 。我们可以使用 <code>git add</code>  命令，将未跟踪的文件纳入跟踪范围。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git add README.md</span><br><span class=\"line\"># 查看文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br></pre></td></tr></table></figure>\n<p><code>Changes to be committed</code> : 将要提交的变更。说明下面的文件已经是暂存状态了。使用  <code>git rm --cached &lt;file&gt;...</code>  命令可以取消暂存。此时 <code>README.md</code>  文件已经是 <code>git</code>  跟踪的了。我们再次修改一下  <code>README.md</code>  文件。查看一下工作区中文件的状态.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;test 再次修改已经被跟踪的文件&#x27; &gt;&gt; README.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodified:   README.md</span><br></pre></td></tr></table></figure>\n<p>又看到了 <code>Changes not staged for commit</code> ： 还没有被暂存的提交去提交。说明第二次的变更还没有被 <code>git</code>  跟踪起来。这就需要我们在运行一次 <code>git add README.md</code>  命令了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git add README.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，第二次更改也被 <code>git</code>  跟踪了起来。</p>\n<p><code>git status</code>  命令的输出十分详细，可以使用 <code>git status -s(--short)</code>  命令，输出非常简洁的结果.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git status -s</span><br><span class=\"line\">A  README.md</span><br></pre></td></tr></table></figure>\n<p>输出结果的格式是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XX file1</span><br><span class=\"line\">XX file2</span><br></pre></td></tr></table></figure>\n<p>左列 XX: 第一个 X 表示，暂存区的状态，第二个 X 表示工作区的状态。</p>\n<p>XX 的规则如下：</p>\n<ul>\n<li>新添加的未跟踪文件前面有？？标记</li>\n<li>新添加到暂存区中的文件前面有 A 标记</li>\n<li>修改过的文件前面有 M 标记。</li>\n</ul>\n<h3 id=\"提交到版本库\"><a class=\"markdownIt-Anchor\" href=\"#提交到版本库\">#</a> 提交到版本库</h3>\n<p>现在我们就可以提交文件了。最好在每次提交之前都用  <code>git status</code>  看下，我们需要的文件是否都放入 暂存区了。然后再用  <code>git commit</code>  进行提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   README.md</span><br><span class=\"line\"># 提交代码</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;first commit&quot;</span><br><span class=\"line\">[master (root-commit) fb554b5] first commit</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 README.md</span><br></pre></td></tr></table></figure>\n<p>可以看到，提交后它会告诉你，当前是在哪个分支（ <code>master</code> ）提交的，本次提交的完整  <code>SHA-1</code>  校验和是什么（ <code>463dc4f</code> ），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p>\n<p>以上就是我们最简单的开发流程了。</p>\n<p>这时，如果我不想某个文件纳入版本管理，但是这个文件还必须要在工作区中呢？</p>\n<h4 id=\"忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#忽略文件\">#</a> 忽略文件</h4>\n<p>在这种情况下，我们可以创建一个名为：  <code>.gitignore</code>  的文件，列出要忽略的文件的模式。</p>\n<p><code>.gitignore</code>  文件的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 # 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>\n<li>匹配模式可以以（/）开头防止递归。</li>\n<li>匹配模式可以以（/）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li>\n</ul>\n<p>所谓的  <code>glob</code>  模式是指  <code>shell</code>  所使用的简化了的正则表达式。 星号 <code>（*）</code> 匹配零个或多个任意字符； <code>[abc]</code>  匹配任何一个列在方括号中的字符 （这个例子要么匹配一个  <code>a</code> ，要么匹配一个  <code>b</code> ，要么匹配一个  <code>c</code> ）； 问号 <code>（?）</code> 只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如  <code>[0-9]</code>  表示匹配所有  <code>0</code>  到  <code>9</code>  的数字）。 使用两个星号（ <code>**</code> ）表示匹配任意中间目录，比如  <code>a/**/z</code>  可以匹配  <code>a/z</code>  、  <code>a/b/z</code>  或  <code>a/b/c/z</code>  等。</p>\n<p>来看一个  <code>.gitignore</code>  文件的例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 忽略所有的 .a 文件</span></span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class=\"line\">/TODO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n<p>假设：我们还有一个名叫：  <code>git.log</code>  的文件。在更早的一个快照中，已经把它纳入了版本库中。现在我们要把它移除掉。应该怎么办呢</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 准备工作</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test remove logs files&#x27; &gt; git.log</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test remove logs files&quot;</span><br><span class=\"line\">[master b83b8f1] test remove logs files</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 git.log</span><br><span class=\"line\"></span><br><span class=\"line\"> ### 移除 git.log</span><br><span class=\"line\">➜  gitlearn git:(master) git rm git.log</span><br><span class=\"line\">rm &#x27;git.log&#x27;</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\"># 新建 .gitignore 文件</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;*.log&#x27; &gt; .gitignore</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\"># 查看文件的状态</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   .gitignore</span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ echo &#x27;*.log&#x27; &gt; .gitignore</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnew file:   .gitignore</span><br><span class=\"line\">\tdeleted:    git.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交文件</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test remove logs files - remove git.log&quot;</span><br><span class=\"line\">[master 9118876] test remove logs files - remove git.log</span><br><span class=\"line\"> 2 files changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"> create mode 100644 .gitignore</span><br><span class=\"line\"> delete mode 100644 git.log</span><br><span class=\"line\">➜  gitlearn git:(master) git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\"># 验证一下git.log文件会不会被git跟踪</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改了git.log文件之后，git不会跟踪其变更。</span><br><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test track git.log??&#x27; &gt; git.log</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>运行  <code>git rm</code>  命令并不能删除文件！是从 <code>git</code>  中删除，使 <code>git</code>  不在跟踪其变化。</p>\n<p>有时候，使用  <code>git rm</code>  命令并不能使文件不被 <code>git</code>  跟踪，因为在缓存中还跟踪了文件。 这使，可以使用  <code>git rm -rf --cached</code>  命令使 <code>git</code>  不跟踪文件。</p>\n<p><code>git rm</code>  命令也可以使用  <code>glob</code>  模式。</p>\n<h3 id=\"查看文件的修改内容\"><a class=\"markdownIt-Anchor\" href=\"#查看文件的修改内容\">#</a> 查看文件的修改内容</h3>\n<p><code>git</code>  提供了一个命令 <code>git diff</code>  可以查看文件修改了那些地方.</p>\n<p>假设：我们修改了一个文件，我要看一下修改的内容 (此时还没有提交。)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test diff&#x27; &gt; README.md</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看不同</span><br><span class=\"line\">### 比较的是： 工作目录中当前文件和暂存区域快照之间的差异。</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git diff</span><br><span class=\"line\">diff --git a/README.md b/README.md</span><br><span class=\"line\">index 2afbeed..b69a2df 100644</span><br><span class=\"line\">--- a/README.md</span><br><span class=\"line\">+++ b/README.md</span><br><span class=\"line\">@@ -1,2 +1 @@</span><br><span class=\"line\">-test git跟踪文件</span><br><span class=\"line\">-test 再次修改已经被跟踪的文件</span><br><span class=\"line\">+test diff</span><br></pre></td></tr></table></figure>\n<p>使用  <code>--staged</code>  选项可以比较 已暂存文件与最后一次提交的文件差异。<br>\n<b>请注意， <code>git diff</code>  本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件，运行  <code>git diff</code>  后却什么也没有，就是这个原因。</b></p>\n<h3 id=\"移动文件\"><a class=\"markdownIt-Anchor\" href=\"#移动文件\">#</a> 移动文件</h3>\n<p>可以使用  <code>git mv</code>  命令来移动文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ git mv README.md README.md.md</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">\trenamed:    README.md -&gt; README.md.md</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodified:   README.md.md</span><br></pre></td></tr></table></figure>\n<p>这个命令就相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv README.md README.md.md</span><br><span class=\"line\">$ git rm README.md</span><br><span class=\"line\">$ git add README.md.md</span><br></pre></td></tr></table></figure>\n<p>本篇文章就到这里啦，下一篇～<b>git 的时光机</b></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/13-git%E5%91%BD%E4%BB%A4/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/13-git%E5%91%BD%E4%BB%A4/",
            "title": "git命令",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<p>本章开始学习一些在开发中常用的 git 命令</p>\n<p>先看一下 git 有多少个命令。</p>\n<p>直接在 命令行中输入 git 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  / git</span><br><span class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">These are common Git commands used in various situations:</span><br><span class=\"line\"></span><br><span class=\"line\">start a working area (see also: git help tutorial)</span><br><span class=\"line\">   clone      Clone a repository into a new directory</span><br><span class=\"line\">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class=\"line\"></span><br><span class=\"line\">work on the current change (see also: git help everyday)</span><br><span class=\"line\">   add        Add file contents to the index</span><br><span class=\"line\">   mv         Move or rename a file, a directory, or a symlink</span><br><span class=\"line\">   reset      Reset current HEAD to the specified state</span><br><span class=\"line\">   rm         Remove files from the working tree and from the index</span><br><span class=\"line\"></span><br><span class=\"line\">examine the history and state (see also: git help revisions)</span><br><span class=\"line\">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class=\"line\">   grep       Print lines matching a pattern</span><br><span class=\"line\">   log        Show commit logs</span><br><span class=\"line\">   show       Show various types of objects</span><br><span class=\"line\">   status     Show the working tree status</span><br><span class=\"line\"></span><br><span class=\"line\">grow, mark and tweak your common history</span><br><span class=\"line\">   branch     List, create, or delete branches</span><br><span class=\"line\">   checkout   Switch branches or restore working tree files</span><br><span class=\"line\">   commit     Record changes to the repository</span><br><span class=\"line\">   diff       Show changes between commits, commit and working tree, etc</span><br><span class=\"line\">   merge      Join two or more development histories together</span><br><span class=\"line\">   rebase     Reapply commits on top of another base tip</span><br><span class=\"line\">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class=\"line\"></span><br><span class=\"line\">collaborate (see also: git help workflows)</span><br><span class=\"line\">   fetch      Download objects and refs from another repository</span><br><span class=\"line\">   pull       Fetch from and integrate with another repository or a local branch</span><br><span class=\"line\">   push       Update remote refs along with associated objects</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some</span><br><span class=\"line\">concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;</span><br><span class=\"line\">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<p>小朋友，你以为 git 就这几个命令吗？</p>\n<p>太单纯！！！<br>\n还有很多命令！！ 下篇分享（也分享不完）</p>\n<h3 id=\"git-clone\"><a class=\"markdownIt-Anchor\" href=\"#git-clone\">#</a> git clone</h3>\n<h3 id=\"git-init\"><a class=\"markdownIt-Anchor\" href=\"#git-init\">#</a> git init</h3>\n<h3 id=\"git-add\"><a class=\"markdownIt-Anchor\" href=\"#git-add\">#</a> git add</h3>\n<h3 id=\"git-commit\"><a class=\"markdownIt-Anchor\" href=\"#git-commit\">#</a> git commit</h3>\n<h3 id=\"git-checkout\"><a class=\"markdownIt-Anchor\" href=\"#git-checkout\">#</a> git checkout</h3>\n<h3 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a> git log</h3>\n<h3 id=\"git-tag\"><a class=\"markdownIt-Anchor\" href=\"#git-tag\">#</a> git tag</h3>\n<h3 id=\"git-diff\"><a class=\"markdownIt-Anchor\" href=\"#git-diff\">#</a> git diff</h3>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/20-git%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/20-git%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/",
            "title": "git开发模型 - github-flow",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"github-flow\"><a class=\"markdownIt-Anchor\" href=\"#github-flow\">#</a>  <code>github flow</code></h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndWlkZXMuZ2l0aHViLmNvbS9pbnRyb2R1Y3Rpb24vZmxvdy8=\">参考地址</span></p>\n<p><code>GitHub flow</code>  是一个轻量级的，基于分支的工作流，它支持定期进行部署的团队和项目。</p>\n<p><code>gitHub flow</code>  主要分为以下步骤：</p>\n<h4 id=\"1创建分支\"><a class=\"markdownIt-Anchor\" href=\"#1创建分支\">#</a> 1. 创建分支</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>在你准备进行开发的时候，或者突然有一个想法，想要马上去实现的时候，先创建一个分支。</p>\n<p>分支是 <code>Git</code>  中的核心概念，整个 <code>GitHub</code>  流程都以此为基础。只有一个规则： <code>master</code>  分支中的任何内容始终都是可部署的。因此，在处理功能或修订时，要在主分支之外创建新分支非常重要。您的分支名称应具有描述性（例如，重构身份验证，用户内容缓存密钥， <code>make-retina</code>  头像），以便其他人可以看到正在处理的内容。</p>\n<h4 id=\"2-添加提交\"><a class=\"markdownIt-Anchor\" href=\"#2-添加提交\">#</a> 2. 添加提交</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>创建分支后，就该开始进行更改了。每当添加，编辑或删除文件时，您都在进行提交，并将其添加到分支中。添加提交的过程会使 git 跟踪您在功能分支上工作的进度。提交还会为您的工作创建透明的历史记录，其他人可以参考该历史记录来了解您的工作以及原因。每个提交都有一个关联的提交消息，该消息是说明为什么进行特定更改的说明。此外，每次提交都被视为一个单独的变更单元。如果发现错误或决定朝另一个方向前进，则可以回滚更改。</p>\n<h4 id=\"3打开拉取请求\"><a class=\"markdownIt-Anchor\" href=\"#3打开拉取请求\">#</a> 3. 打开拉取请求</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>将我们本地开发的代码 <code>commit</code>  了之后，在 <code>push</code>  远程仓库之前，我们要 发起一次  <code>pull request</code> . 这最直接的效果就是如果存在冲突，我们就可以现在本地完成冲突的处理。其次，通过 <code>pull request</code>  我们还可以看到团队中其他成员的工作内容，获取该项目中最新的代码。</p>\n<h4 id=\"4讨论并检查您的代码\"><a class=\"markdownIt-Anchor\" href=\"#4讨论并检查您的代码\">#</a> 4. 讨论并检查您的代码</h4>\n<p><img data-src=\"./images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>打开 “拉取请求” 后，审阅您所做更改的人员或团队可能会有疑问或意见。也许编码风格与项目准则不匹配，更改缺少单元测试，或者一切看起来都很不错，并且道具井井有条。提取请求旨在鼓励和捕获这种类型的对话。您还可以根据有关提交的讨论和反馈继续推送到分支机构。如果有人评论您忘记做某事，或者代码中有错误，则可以在分支机构中对其进行修复，然后进行更改。 <code>GitHub</code>  将在统一的 “拉取请求” 视图中显示您的新提交以及您可能收到的任何其他反馈。</p>\n<h4 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\">#</a> 部署</h4>\n<p><img data-src=\"./images/github-flow5.png\" alt=\"github-flow5.png\"></p>\n<p>借助 <code>GitHub</code> ，您可以从分支机构进行部署，以在正式合并之前进行生产中的最终测试。审核拉取请求并且分支机构通过测试后，您可以部署更改以在生产中进行验证。如果您的分支机构引起问题，则可以通过将现有的主服务器部署到生产中来回滚它。</p>\n<h4 id=\"合并到master分支\"><a class=\"markdownIt-Anchor\" href=\"#合并到master分支\">#</a> 合并到 master 分支</h4>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/github-flow6.png\" alt=\"github-flow6.png\"></p>\n<p>现在您的更改已在生产环境中得到验证，是时候将代码合并到 <code>master</code>  分支中了。合并后，拉取请求会保留代码历史更改的记录。因为它们是可搜索的，所以它们使任何人都能及时返回，以了解做出决定的原因和方式。</p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_update-index/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_update-index/",
            "title": "git命令详解之 git update-index",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h3 id=\"官方\"><a class=\"markdownIt-Anchor\" href=\"#官方\">#</a> 官方</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git update-index [&lt;options&gt;] [--] [&lt;file&gt;...]</span><br><span class=\"line\"></span><br><span class=\"line\">    -q                    continue refresh even when index needs update</span><br><span class=\"line\">    --ignore-submodules   refresh: ignore submodules</span><br><span class=\"line\">    --add                 do not ignore new files</span><br><span class=\"line\">    --replace             let files replace directories and vice-versa</span><br><span class=\"line\">    --remove              notice files missing from worktree</span><br><span class=\"line\">    --unmerged            refresh even if index contains unmerged entries</span><br><span class=\"line\">    --refresh             refresh stat information</span><br><span class=\"line\">    --really-refresh      like --refresh, but ignore assume-unchanged setting</span><br><span class=\"line\">    --cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;path&gt;</span><br><span class=\"line\">                          add the specified entry to the index</span><br><span class=\"line\">    --chmod (+/-)x        override the executable bit of the listed files</span><br><span class=\"line\">    --assume-unchanged    mark files as &quot;not changing&quot;</span><br><span class=\"line\">    --no-assume-unchanged</span><br><span class=\"line\">                          clear assumed-unchanged bit</span><br><span class=\"line\">    --skip-worktree       mark files as &quot;index-only&quot;</span><br><span class=\"line\">    --no-skip-worktree    clear skip-worktree bit</span><br><span class=\"line\">    --info-only           add to index only; do not add content to object database</span><br><span class=\"line\">    --force-remove        remove named paths even if present in worktree</span><br><span class=\"line\">    -z                    with --stdin: input lines are terminated by null bytes</span><br><span class=\"line\">    --stdin               read list of paths to be updated from standard input</span><br><span class=\"line\">    --index-info          add entries from standard input to the index</span><br><span class=\"line\">    --unresolve           repopulate stages #2 and #3 for the listed paths</span><br><span class=\"line\">    -g, --again           only update entries that differ from HEAD</span><br><span class=\"line\">    --ignore-missing      ignore files missing from worktree</span><br><span class=\"line\">    --verbose             report actions to standard output</span><br><span class=\"line\">    --clear-resolve-undo  (for porcelains) forget saved unresolved conflicts</span><br><span class=\"line\">    --index-version &lt;n&gt;   write index in this format</span><br><span class=\"line\">    --split-index         enable or disable split index</span><br><span class=\"line\">    --untracked-cache     enable/disable untracked cache</span><br><span class=\"line\">    --test-untracked-cache</span><br><span class=\"line\">                          test if the filesystem supports untracked cache</span><br><span class=\"line\">    --force-untracked-cache</span><br><span class=\"line\">                          enable untracked cache without testing the filesystem</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_ls-files/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/git_ls-files/",
            "title": "git命令详解之 git ls-files",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: git ls-files [&lt;options&gt;] [&lt;file&gt;...]</span><br><span class=\"line\"></span><br><span class=\"line\">    -z                    paths are separated with NUL character</span><br><span class=\"line\">    -t                    identify the file status with tags</span><br><span class=\"line\">    -v                    use lowercase letters for &#x27;assume unchanged&#x27; files</span><br><span class=\"line\">    -c, --cached          show cached files in the output (default)</span><br><span class=\"line\">    -d, --deleted         show deleted files in the output</span><br><span class=\"line\">    -m, --modified        show modified files in the output</span><br><span class=\"line\">    -o, --others          show other files in the output</span><br><span class=\"line\">    -i, --ignored         show ignored files in the output</span><br><span class=\"line\">    -s, --stage           show staged contents&#x27; object name in the output</span><br><span class=\"line\">    -k, --killed          show files on the filesystem that need to be removed</span><br><span class=\"line\">    --directory           show &#x27;other&#x27; directories&#x27; names only</span><br><span class=\"line\">    --eol                 show line endings of files</span><br><span class=\"line\">    --empty-directory     don&#x27;t show empty directories</span><br><span class=\"line\">    -u, --unmerged        show unmerged files in the output</span><br><span class=\"line\">    --resolve-undo        show resolve-undo information</span><br><span class=\"line\">    -x, --exclude &lt;pattern&gt;</span><br><span class=\"line\">                          skip files matching pattern</span><br><span class=\"line\">    -X, --exclude-from &lt;file&gt;</span><br><span class=\"line\">                          exclude patterns are read from &lt;file&gt;</span><br><span class=\"line\">    --exclude-per-directory &lt;file&gt;</span><br><span class=\"line\">                          read additional per-directory exclude patterns in &lt;file&gt;</span><br><span class=\"line\">    --exclude-standard    add the standard git exclusions</span><br><span class=\"line\">    --full-name           make the output relative to the project top directory</span><br><span class=\"line\">    --recurse-submodules  recurse through submodules</span><br><span class=\"line\">    --error-unmatch       if any &lt;file&gt; is not in the index, treat this as an error</span><br><span class=\"line\">    --with-tree &lt;tree-ish&gt;</span><br><span class=\"line\">                          pretend that paths removed since &lt;tree-ish&gt; are still present</span><br><span class=\"line\">    --abbrev[=&lt;n&gt;]        use &lt;n&gt; digits to display SHA-1s</span><br><span class=\"line\">    --debug               show debugging data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/README/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/README/",
            "title": "git命令详解",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<h3 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> <a href=\"./git_update-index.md\">git update-index</a></label></li>\n</ul>\n<h3 id=\"小技巧\"><a class=\"markdownIt-Anchor\" href=\"#小技巧\">#</a> 小技巧</h3>\n<ul>\n<li>某个文件需要被管理，但是要忽略其修改的内容。 <a href=\"./git_update-index.md\">git update-index</a><br>\ngit update-index --no-skip-worktree 同样可以。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMDQzMDQyNg==\">参考文档</span>   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMDM1ODU4OA==\">参考文档 2</span></li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/03-git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%BC%80%E5%A7%8B/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/18/git%E7%B3%BB%E5%88%97/03-git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%BC%80%E5%A7%8B/",
            "title": "从创建仓库开始",
            "date_published": "2021-07-18T06:49:55.000Z",
            "content_html": "<h2 id=\"从创建仓库开始\"><a class=\"markdownIt-Anchor\" href=\"#从创建仓库开始\">#</a> 从创建仓库开始</h2>\n<p>这篇文章分享一下我们在使用 git 进行版本管理时候的常用的操作！我们从创建仓库开始～</p>\n<p>获取代码仓库的方式有两种，一种是从零开始初始化一个 git 仓库，另一种是 clone 他人的仓库。</p>\n<p>首先我们创建一个空目录，然后初始化一个仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ cd</span><br><span class=\"line\"># 创建空目录</span><br><span class=\"line\">~ mkdir gitlearn</span><br><span class=\"line\">~ cd gitlearn</span><br><span class=\"line\"># 初始化仓库</span><br><span class=\"line\">~ git init .</span><br></pre></td></tr></table></figure>\n<p>就这样我们创建一个了<b>本地仓库</b>, 团队合作的时候这样肯定不行的，不行，后面我们后介绍到。<br>\n或者 我们还可以克隆一个<b>远程仓库</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br></pre></td></tr></table></figure>\n<p>我们来看一下新建的仓库目录下都有什么文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) l</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 .</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 ..</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 13 18:25 .git</span><br><span class=\"line\">➜  gitlearn git:(master) cd .git</span><br><span class=\"line\">➜  .git git:(master) l</span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 13 18:30 .</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 ..</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    16B  7 13 20:38 COMMIT_EDITMSG # 存储最新一次的commit信息</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    23B  7 13 18:23 HEAD ## 当前被检出的分支</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 13 18:23 branches # 所有分支</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel   315B  7 13 18:23 config # 包含项目特有的配置选项</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    73B  7 13 18:23 description #Git web页面程序使用</span><br><span class=\"line\">drwxr-xr-x  12 bjhl  wheel   384B  7 13 18:23 hooks # 包含客户端或者服务器端的钩子脚本</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 13 18:23 info # 包含一个全局性排除文件，用以防止那些不希望被纳入版本管理的文件，.gitignore文件中记录的</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel   126B  7 13 20:39 index ## 保存暂存区信息(进行stash操作之后出现的)</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 13 18:23 objects ## 存储所有数据的内容</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 13 18:23 refs ## 存储指向数据（分支，远程仓库和标签等）的提交对象的指针。</span><br></pre></td></tr></table></figure>\n<p>其中有四个条目非常重要，我用  <code>##</code>  进行了标注。 分别是： <code>HEAD</code>  文件， <code>index</code>  文件， <code>objects</code>  目录， <code>refs</code>  目录。</p>\n<p><b>如果你想只是想了解 git 的话，那么下面的内容就可以忽略了。</b></p>\n<p>我们来搞一点有趣的东西。</p>\n<h3 id=\"objects目录下存放的是什么东西-git对象\"><a class=\"markdownIt-Anchor\" href=\"#objects目录下存放的是什么东西-git对象\">#</a>  <code>objects/</code>  目录下存放的是什么东西？–  Git 对象</h3>\n<p>前面说过， <code>git</code>  是一个内容寻址文件系统。==&gt;  <code>git</code>  是一个简单的键值对数据库。</p>\n<p>即，你可以向 <code>git</code>  仓库中插入任务类型的内容，它会返回一个唯一的键。通过该键可以在任意时刻再次取回该内容。</p>\n<p>上面说过， <code>objects</code>  目录下存放的是所有数据的内容。在 <code>git</code>  中，数据是什么呢？是我们工作目录的所有文件的快照！</p>\n<p>这里我们使用两个还没有学习的命令。</p>\n<ul>\n<li><code>git add .</code> ： 将目录中的文件纳入版本库进行管理起来。此时的状态是： <code>已暂存(新建)</code> 。暂存区的目录树会被更新，同时工作区修改 (新增的) 文件内容被写入到对象库中的一个新文件中，而该对象的 id 会被记录在暂存区的文件索引中。</li>\n<li><code>git commit -m 'xxx'</code> ：将目录中的文件提交到本地版本库。此时的状态是： <code>已提交</code> 。这时，暂存区的目录树写到版本库中，对应的分支会进行相应的更新。</li>\n</ul>\n<p>那下面演示一下： <code>objects</code>  目录下存储的文件。</p>\n<p>首先，我们查看下 <code>object</code>  目录下的所有文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看objects下的文件</span></span><br><span class=\"line\">~ l .git/objects </span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 bjhl  wheel   128B  7 14 11:30 .</span><br><span class=\"line\">drwxr-xr-x  10 bjhl  wheel   320B  7 14 11:30 ..</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 14 11:30 info</span><br><span class=\"line\">drwxr-xr-x   2 bjhl  wheel    64B  7 14 11:30 pack</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个文件： test-objects-files-01.txt</span></span><br><span class=\"line\">➜  gitlearn git:(master) sudo touch test-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 root  wheel   128B  7 14 15:10 .</span><br><span class=\"line\">drwxr-xr-x  10 root  wheel   320B  7 14 15:10 ..</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改文件</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sudo vim test-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   4 root  wheel   128B  7 14 15:10 .</span><br><span class=\"line\">drwxr-xr-x  10 root  wheel   320B  7 14 15:10 ..</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxr-xr-x   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ l .git/objects</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx   5 root  wheel   160B  7 14 15:34 .</span><br><span class=\"line\">drwxrwxrwx  11 root  wheel   352B  7 14 15:34 ..</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 14 15:34 37</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 info</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 pack</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # blob类型(文件)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用git cat-file来看下一下文件的内容</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git cat-file -p 3717929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们进行commit</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test-object-files add&quot;</span><br><span class=\"line\">[master (root-commit) 1883fd5] test-object-files add</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ..省略部分提示</span></span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100755 test-objects-files-01.txt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 来看一下objects目录下的文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 表示存储的事blob格式的文件，test-objects-files-01.txt</span></span><br><span class=\"line\">100755 blob 3717929ecb3efabae427dbe3725654b3de1a114b\ttest-objects-files-01.txt</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 存储的是 树对象(后面有介绍)</span></span><br><span class=\"line\">tree 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">author bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594712728 +0800</span><br><span class=\"line\">committer bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594712728 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">test-object-files add</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>git cat-file<br>\n 这个命令可以实现从 <code>git</code>  仓库中取回数据。-p 参数可以自动判断内容的类型。还有一个写入的命令。 <code>git hash-object</code>  . 下面简单演示一下。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) echo &#x27;test hash-object function&#x27; | git hash-object -w --stdin</span><br><span class=\"line\">11a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 11a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">test hash-object function</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d # commit-id </span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br></pre></td></tr></table></figure>\n<p>从上面的例子我们可以看到， <code>git</code>  中含有， <code>blob</code>   <code>commit-id</code> ， <code>tree</code> ，这三种对象。<br>\n这其实就是  <code>Git</code>  的对象：数据对象，提交对象，树对象。</p>\n<p>接下来我们来看一个 <code>git</code>  的对象 - 树对象</p>\n<h3 id=\"树对象\"><a class=\"markdownIt-Anchor\" href=\"#树对象\">#</a> 树对象</h3>\n<p>树对象能够解决文件名保存的问题，也允许多个文件组织到一起。所有内容均以树对象和数据独享的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 <code>inodes</code>  或者文件内容。</p>\n<p>一个树对象包含了一条或多条树对象记录，每条记录含有一个指向数据对象或者子树对象的 <code>SHA-1</code>  指针，以及相应的模式，类型，文件名信息。</p>\n<p>我们再来看一下，刚才的三个 <code>objects</code>  下的校验和。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">tree 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">test-object-files add</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 54500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">100755 blob 3717929ecb3efabae427dbe3725654b3de1a114b\ttest-objects-files-01.txt</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p 3717929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">test - objects - files - 第一行</span><br></pre></td></tr></table></figure>\n<p>我根据 数对象  <code>1883fd</code>  找到了  <code>54500d</code>  (表示对应的 txt 文件)，然后可以根据 txt 文件，看到这次提交的内容 <code>371792</code> . 如下图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%9501.png\" alt=\"git工作目录01.png\"></p>\n<p>这时，我们在尝试从修改一下这个文件，进行提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) sudo vim test-objects-files-01.txt</span><br><span class=\"line\">Password:</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99 # test hash-object function (本次实验可以忽略)</span><br><span class=\"line\">## 下面两行是新增的，本次操作生成的。</span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04 #内容: test - objects - files - 第一行 \\n test - objects - files - 第二行</span><br><span class=\"line\"></span><br><span class=\"line\">## 提交到版本库中。</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test-object-files updated&quot;</span><br><span class=\"line\">[master 200e059] test-object-files updated</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d # commit - id</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b # 文件</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7 # 树对象</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99 # test hash-object function(本次实现忽略) </span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04 # 文件</span><br><span class=\"line\"># 下面两行是新增的，本次操作生成的</span><br><span class=\"line\">./.git/objects/20/0e059f0c0b178378aecd6736f384a74d28df94 # commit-id</span><br><span class=\"line\">./.git/objects/20/db6c4af7677b7509d2b323b503733405e4987e # 树对象</span><br></pre></td></tr></table></figure>\n<p>我们的操作如下：</p>\n<ol>\n<li>在 git 仓库中创建了一个文件，并且将它纳入版本管理，提交到了版本库中</li>\n<li>修改了这个问题，并且再次提交到了版本库中。</li>\n</ol>\n<p>经过这个两个步骤之后，出现了如下图的  <code>git</code>  树对象。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D02.png\" alt=\"git工作目录介绍02.png\"></p>\n<p>这时，我们使用  <code>git log</code>  命令来查看日志。可以发现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br></pre></td></tr></table></figure>\n<p>为了便于大家理解，咱们继续修改这个文件，加上第三行数据:  <code>test - objects - files - 第三行</code> ：</p>\n<p>然后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;test-object-files updated 02&quot;</span><br></pre></td></tr></table></figure>\n<p>然后查看 <code>objects</code>  目录下的文件内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/11/a5f11388c345846bbaa060a98d8e93a1114e99</span><br><span class=\"line\">./.git/objects/18/83fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">./.git/objects/20/0e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">./.git/objects/20/db6c4af7677b7509d2b323b503733405e4987e</span><br><span class=\"line\">./.git/objects/37/17929ecb3efabae427dbe3725654b3de1a114b</span><br><span class=\"line\">./.git/objects/54/500d5d74f828d1a3193fb685084b87aaf419c7</span><br><span class=\"line\">./.git/objects/5b/22ea83f2e8555371b818a7e441d4156795af04</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 以下三行是本次commit产生的。</span></span><br><span class=\"line\">./.git/objects/a6/2a79d99b37bc5c44ca083cd40f9e4c00aae0bd # commit-id，提交对象</span><br><span class=\"line\">./.git/objects/ba/f6b0843a522f8e77f326d2615cb37ed290d06e # 文件，数据对象</span><br><span class=\"line\">./.git/objects/c4/3622f1e8e728f88eb11adfee1ea08d41c792a0 # 树对象</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</span><br><span class=\"line\">tree c43622f1e8e728f88eb11adfee1ea08d41c792a0</span><br><span class=\"line\">parent 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">test-object-files updated 02</span><br><span class=\"line\"></span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p c43622f1e8e728f88eb11adfee1ea08d41c792a0</span><br><span class=\"line\">100755 blob baf6b0843a522f8e77f326d2615cb37ed290d06e\ttest-objects-files-01.txt</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p baf6b0843a522f8e77f326d2615cb37ed290d06e</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\">test - objects - files - 第二行</span><br><span class=\"line\">test - objects - files - 第三行</span><br></pre></td></tr></table></figure>\n<p>做完上面的操作之后，我们来看一下 <code>objects</code>  目录下的树结构图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D03.png\" alt=\"git工作目录介绍03.png\"></p>\n<h4 id=\"objects目录总结\"><a class=\"markdownIt-Anchor\" href=\"#objects目录总结\">#</a> objects 目录总结</h4>\n<ul>\n<li>作用： 存放所有数据的内容。</li>\n<li><code>git</code>  是一个内容存执文件管理系统。也就是一个 <code>KV</code>  数据库，对应的 <code>key-value</code>  放到了 <code>objects</code>  目录下，存储形式是一个 <code>40</code>  位十六机制的校验和。 <code>key</code>  是文件名， <code>value</code>  是文件内容。</li>\n<li>学习了两个底层命令：  <code>git cat-file</code>  和  <code>git hash-object</code> . 更多底层命令可以看下这篇文章。// TODO</li>\n<li><b>演示一个文件的三次更新时变化过程，以及各个版本之间的迭代过程，那么如果是多个文件呢？这里大家可以去试一下，就会更清晰的理解树对象了。（这里演示一个文件并不能完全的解释清树对象这个概念）</b></li>\n</ul>\n<h2 id=\"git引用-git工作目录下的refs目录\"><a class=\"markdownIt-Anchor\" href=\"#git引用-git工作目录下的refs目录\">#</a> Git 引用， git 工作目录下的 refs 目录！</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) l ./.git/refs/</span><br><span class=\"line\">drwxrwxrwx   3 root  wheel    96B  7 14 17:02 heads</span><br><span class=\"line\">drwxrwxrwx   2 root  wheel    64B  7 14 15:10 tags</span><br></pre></td></tr></table></figure>\n<ul>\n<li>heads 目录，存储各个分支的 HEAD 指针指向的版本。</li>\n<li>tags 目录，git tag 命令产生的结果。</li>\n</ul>\n<h4 id=\"heads目录\"><a class=\"markdownIt-Anchor\" href=\"#heads目录\">#</a> heads 目录</h4>\n<p>我们还是根据 objects 部门的操作来演示这部分的内容。<br>\n如下图。</p>\n<p><img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D04-object%E7%9B%AE%E5%BD%95%E6%80%BB%E7%BB%93.png\" alt=\"git工作目录介绍04-object目录总结.png\"></p>\n<p>通过查看我们目前是在  <code>a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</code>  这个版本上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) cat ./.git/refs/heads/master</span><br><span class=\"line\">a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd</span><br></pre></td></tr></table></figure>\n<p>我们可以通过  <code>git update-ref</code>  命令来实现切换版本 (回退到制定的版本上)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们先使用 git log 命令来查看一下提交记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit a62a79d99b37bc5c44ca083cd40f9e4c00aae0bd (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 17:02:46 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated 02</span><br><span class=\"line\"></span><br><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们要回退到第二个版本上。使用 git update-ref,更新引用。</span></span><br><span class=\"line\">➜ .git git:(master) git update-ref refs/heads/master 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 再去查看git的Head目录下的版本号</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ cat ./.git/refs/heads/master</span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 这个时候再使用 git log 去看日志：</span></span><br><span class=\"line\">commit 200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master)</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 16:24:02 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files updated</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">Author: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\">Date:   Tue Jul 14 15:45:28 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test-object-files add</span><br><span class=\"line\"><span class=\"comment\"># 再去看我们的文件: 是不会更新工作区内容的。</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ cat test-objects-files-01.txt</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第一行</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第二行</span><br><span class=\"line\"><span class=\"built_in\">test</span> - objects - files - 第三行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们还可以使用 git update-ref 来创建新的分支。</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ <span class=\"built_in\">cd</span> .git</span><br><span class=\"line\">➜  .git git:(master) git update-ref refs/heads/<span class=\"built_in\">test</span> 200e059f0c0b178378aecd6736f384a74d28df94</span><br><span class=\"line\"><span class=\"comment\"># 查看test分支的日志</span></span><br><span class=\"line\">➜  .git git:(master) git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"built_in\">test</span></span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94 (HEAD -&gt; master, <span class=\"built_in\">test</span>) test-object-files updated</span><br><span class=\"line\">1883fd5aefeb430cb25150e531e92e38f0176f0d test-object-files add</span><br><span class=\"line\"><span class=\"comment\"># 这时我们去查看我们所处的分支, 发现我们仍然处在master上，并没有进行切换。</span></span><br><span class=\"line\">➜  .git git:(master) git branch</span><br><span class=\"line\">* master</span><br><span class=\"line\">  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>上面的演示中，我们发现了，虽然只是修改的记录的文件，但是并没有对我们工作区的文件进行更新。怎么解决呢？</p>\n<h3 id=\"head文件\"><a class=\"markdownIt-Anchor\" href=\"#head文件\">#</a> HEAD 文件</h3>\n<p><code>HEAD</code>  文件通常是一个符号引用，指向目前所在的分支。所谓符号引用，表示它是一个指向其他引用的指针。</p>\n<p>我们查看一下  <code>HEAD</code>  文件中的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) ✗ cat .git/HEAD</span><br><span class=\"line\">ref: refs/heads/master</span><br></pre></td></tr></table></figure>\n<p>这里呢，有一个命令可以帮助我们实现修改  <code>HEAD</code>  文件的内容</p>\n<p><b>git symbolic-ref</b></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在的分支</span></span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git symbolic-ref HEAD</span><br><span class=\"line\">refs/heads/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置当前所在的分支</span></span><br><span class=\"line\">➜  .git git:(master) git symbolic-ref HEAD refs/heads/test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 已经可以看到我们已经把分支切换到了<span class=\"built_in\">test</span></span></span><br><span class=\"line\">➜  .git git:(test)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们去看 工作区里的文件，发现并没有变化！</span></span><br><span class=\"line\">➜  .git git:(test) cat ../test-objects-files-01.txt</span><br><span class=\"line\">test - objects - files - 第一行</span><br><span class=\"line\">test - objects - files - 第二行</span><br><span class=\"line\">test - objects - files - 第三行</span><br></pre></td></tr></table></figure>\n<p>文件的内容的，修改就必须使用  <code>git checkout</code>  /  <code>git reset</code>  了。</p>\n<p>我们回来接着看 refs 目录的另一个目录：tags.</p>\n<p>tags 是 git tag 命令的产物。</p>\n<p>然后，在 git 中，tags 其实是标签对象，包含了一个标签创建者信息，一个日期，一段注释信息，以及一个指针。标签对象通常指向一个提交对象，而不是一个树对象。永远都会指向同一个提交对象。</p>\n<p>标签分为 附注标签 和 轻量标签。</p>\n<p>使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 常见一个轻量标签 -&gt; 一个固定的引用</span><br><span class=\"line\">➜  .git git:(test) git update-ref refs/tags/v1.0 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br></pre></td></tr></table></figure>\n<p>创建一个附注标签的时候，git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向要提交的对象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  .git git:(test) git tag -a v1.1 1883fd5aefeb430cb25150e531e92e38f0176f0d -m &#x27;附注标签&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看标签对象。</span></span><br><span class=\"line\">➜  .git git:(test) cat refs/tags/v1.1</span><br><span class=\"line\">3f224b87d02aa196b0b8331aa28389a172e3f723</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看附注标签详细的内容</span></span><br><span class=\"line\">➜  .git git:(test) git cat-file -p 3f224b87d02aa196b0b8331aa28389a172e3f723</span><br><span class=\"line\">object 1883fd5aefeb430cb25150e531e92e38f0176f0d</span><br><span class=\"line\">type commit</span><br><span class=\"line\">tag v1.1</span><br><span class=\"line\">tagger bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt; 1594727545 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">附注标签</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程引用\"><a class=\"markdownIt-Anchor\" href=\"#远程引用\">#</a> 远程引用</h4>\n<p>在 git 的引用中，还有一个远程引用。</p>\n<p>这个目录会在我们配置远程仓库的时候出现，我们一起配置一下远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置远程仓库</span></span><br><span class=\"line\">➜  gitlearn git:(master) git remote add origin https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push 到远程分支。</span></span><br><span class=\"line\">➜  gitlearn git:(master) git push origin master</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 548 bytes | 548.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class=\"line\">To https://gitee.com/fangjiaxiaobai/gitlearn.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 .git目录下，出现了remotes</span></span><br><span class=\"line\"> ➜  gitlearn git:(master) l ./.git/refs/</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxrwxrwx   6 root  wheel   192B  7 14 19:58 .</span><br><span class=\"line\">drwxrwxrwx  16 root  wheel   512B  7 14 19:58 ..</span><br><span class=\"line\">drwxrwxrwx   4 root  wheel   128B  7 14 19:56 heads</span><br><span class=\"line\">drwxr-xr-x   3 bjhl  wheel    96B  7 14 19:58 remotes</span><br><span class=\"line\">-rw-r--r--   1 bjhl  wheel    41B  7 14 19:56 stash # 进行git stash命令后出现</span><br><span class=\"line\">drwxrwxrwx   4 root  wheel   128B  7 14 19:52 tags</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看对应remote配置文件</span></span><br><span class=\"line\">➜  gitlearn git:(master) cat .git/refs/remotes/origin/master</span><br><span class=\"line\">200e059f0c0b178378aecd6736f384a74d28df94</span><br></pre></td></tr></table></figure>\n<p>这个校验码表示 ，远程版本库中和本地的版本库中最新一次交互的 commit id 。</p>\n<p>远程引用和分支之间最主要的区别，就是远程引用是只读的。Git 永远不会讲 HEAD 引用指向该远程引用，因此，不可能通过 commit 来更新远程引用。</p>\n<h3 id=\"index文件\"><a class=\"markdownIt-Anchor\" href=\"#index文件\">#</a> Index 文件</h3>\n<p>这个文件是  <code>git stage</code>  的文件信息存放地，根据该文件中的内容，可以查看当前哪些文件，或者哪些文件发生了变化，而在 <code>commit</code>  之后，则会把相应的信息存入  <code>.git/objects</code>  文件夹下。通过  <code>git ls-files -s</code>  可以查 看  <code>index</code>  文件中的  <code>stage</code>  文件的信息。</p>\n<p><code>Index</code>  文件是用二进制存储的，包含有  <code>ctime</code>  和  <code>mtime</code>  时间信息，文件存储的设备信息，磁盘的 <code>inode</code>  信息，文件的  <code>mode</code>  信息， <code>UID</code> ， <code>GID</code> ，文件大小，文件的 <code>SHA-1</code>  码， <code>flag</code> ，文件的 <code>file path</code>  等信息。</p>\n<p>各个文件的信息按照一定的排列顺序进行排布。提交的时候，按照这种约定进行解析。</p>\n<h2 id=\"包文件\"><a class=\"markdownIt-Anchor\" href=\"#包文件\">#</a> 包文件</h2>\n<p>在文章一开始，我们就说过，git 是基于快照的方式来进行版本控制的。这就意味着，我们每进行一次 commit 操作，git 就是存储一份我们所有的文件。那么，一个大项目，那岂不是会占用很大的存储空间？？</p>\n<p>我们先做个实验。看看 git 会不会占用很大的存储空间？</p>\n<p><b>首先，我们新建一个仓库</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建仓库</span><br><span class=\"line\">➜  gitlearn git init .</span><br><span class=\"line\">Initialized empty Git repository in /private/tmp/gitlearn/.git/</span><br><span class=\"line\"># 添加文件</span><br><span class=\"line\">➜  gitlearn git:(master) touch test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 1&quot;</span><br><span class=\"line\">[master (root-commit) 12cbb50] test package file 1</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test-package-file</span><br><span class=\"line\"># 查看数据对象的id</span><br><span class=\"line\">➜  gitlearn git:(master)  git cat-file -p master^&#123;tree&#125;</span><br><span class=\"line\">100644 blob c2e8644a8379ab0cf4f2bc5a14160d94608502f7\ttest-package-file</span><br><span class=\"line\"># 修改 test ,添加 test package file * 700</span><br><span class=\"line\">➜  gitlearn git:(master) vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 2&quot;</span><br><span class=\"line\">[master 421177c] test package file 2</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 740 insertions(+)</span><br><span class=\"line\"># 查看第二次提交的数据对象的id</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -p master^&#123;tree&#125;</span><br><span class=\"line\">100644 blob 363980e2f742592594e01648888a661d2d0479b9\ttest-package-file</span><br><span class=\"line\">### 查看两次数据对象的大小</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -s c2e8644a8379ab0cf4f2bc5a14160d94608502f7</span><br><span class=\"line\">18</span><br><span class=\"line\">➜  gitlearn git:(master) git cat-file -s 363980e2f742592594e01648888a661d2d0479b9</span><br><span class=\"line\">13338</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看一下这两次文件存储的文件。</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/12/cbb50359469eb29efe29945a3b18e262f6e862</span><br><span class=\"line\">./.git/objects/36/3980e2f742592594e01648888a661d2d0479b9</span><br><span class=\"line\">./.git/objects/42/1177c9026e757e7e123b6ee589bcffa067eb96</span><br><span class=\"line\">./.git/objects/8e/0703665933215a57787a3117b079d4c8cb1921</span><br><span class=\"line\">./.git/objects/c2/e8644a8379ab0cf4f2bc5a14160d94608502f7</span><br><span class=\"line\">./.git/objects/c3/1d0ebb18efdfc791a254ab58a01ff2ed0136e4</span><br></pre></td></tr></table></figure>\n<p>现在 <code>git</code>  中存储了两个文件，分别是我们第一次提交和第二次提交的内容。</p>\n<p>如果 <code>git</code>  像 <code>SVN</code>  一样记录变更的内容的话，是不是更好呢？</p>\n<p><code>git</code>  上本来可以那么做。  <code>git</code>  最初向磁盘中存储对象时所使用的格式称为 松散对象格式。 但是， <code>git</code>  会时不时的将多个对象打包成一个 称为 “包文件” 的二进制文件。来节省空间和效率。</p>\n<p>当仓库中有太多的 松散对象，或者手动执行  <code>git gc</code>  命令，或者向远程服务器执行推送时， <code>git</code>  都会这么做。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行一下 git gc</span><br><span class=\"line\">➜  gitlearn git:(master) git gc</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack</span><br></pre></td></tr></table></figure>\n<p>这里生成了一个包文件 ( <code>.pack</code> ) 和一个索引文件 ( <code>.idx</code> )。包文件抱愧了刚才从一个文件系统中移除的所有对象的内容，索引文件包含了文件的偏移信息。我们可以通过偏移文件快速的定位任意一个指定对象。</p>\n<p><code>git</code>  打包对象时，会查找命名以及大小相近的文件，并只保存文件不同版本之间的差异内容。可以使用  <code>git verify-pack</code>  这个底层命令查看已经打包内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  gitlearn git:(master) git verify-pack -v .git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">421177c9026e757e7e123b6ee589bcffa067eb96 commit 238 160 12</span><br><span class=\"line\">12cbb50359469eb29efe29945a3b18e262f6e862 commit 190 131 172</span><br><span class=\"line\">363980e2f742592594e01648888a661d2d0479b9 blob   13338 80 303</span><br><span class=\"line\">c31d0ebb18efdfc791a254ab58a01ff2ed0136e4 tree   45 55 383</span><br><span class=\"line\">8e0703665933215a57787a3117b079d4c8cb1921 tree   45 56 438</span><br><span class=\"line\">c2e8644a8379ab0cf4f2bc5a14160d94608502f7 blob   18 28 494</span><br><span class=\"line\">non delta: 6 objects</span><br><span class=\"line\">.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack: ok</span><br></pre></td></tr></table></figure>\n<p>其中第三列是在包文件中各个对象的大小，可以看到，树对象是 <code>45</code>  字节，数据对象和提交对象，都是原来的大小。</p>\n<p>显然这次并没有进行压缩。 我们再次修改文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改文件： 最后一行添加 test package file</span><br><span class=\"line\">➜  gitlearn git:(master) vim test-package-file</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git add .</span><br><span class=\"line\">➜  gitlearn git:(master) ✗ git commit -m &quot;test package file 3&quot;</span><br><span class=\"line\">[master 2ab3a27] test package file 3</span><br><span class=\"line\"> Committer: bjhl &lt;bjhl@bjhldeMacBook-Pro.local&gt;</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> # 查看目录下的文件</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/2a/b3a275bf16a86f77e632127ccf62bcecf98579</span><br><span class=\"line\">./.git/objects/84/003569b2725d79bc209821c9c3dbb5c2ef8a8d</span><br><span class=\"line\">./.git/objects/df/e088f704e98a835ed3ca2ce31919947d63f884</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.idx</span><br><span class=\"line\">./.git/objects/pack/pack-275c7b3d69b1acacc114c081d6ffa61d6683e8a1.pack</span><br><span class=\"line\"># 进行打包</span><br><span class=\"line\">➜  gitlearn git:(master) git gc</span><br><span class=\"line\">Counting objects: 9, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (9/9), done.</span><br><span class=\"line\">Total 9 (delta 1), reused 5 (delta 0)</span><br><span class=\"line\">➜  gitlearn git:(master) sh /opt/util/dirfile.sh ./.git/objects</span><br><span class=\"line\">./.git/objects/info/packs</span><br><span class=\"line\">./.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.idx</span><br><span class=\"line\">./.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.pack</span><br><span class=\"line\"># 查看打包的内容</span><br><span class=\"line\">➜  gitlearn git:(master) git verify-pack -v .git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.idx</span><br><span class=\"line\">2ab3a275bf16a86f77e632127ccf62bcecf98579 commit 238 160 12</span><br><span class=\"line\">421177c9026e757e7e123b6ee589bcffa067eb96 commit 238 160 172</span><br><span class=\"line\">12cbb50359469eb29efe29945a3b18e262f6e862 commit 190 131 332</span><br><span class=\"line\">84003569b2725d79bc209821c9c3dbb5c2ef8a8d tree   45 56 555</span><br><span class=\"line\">c31d0ebb18efdfc791a254ab58a01ff2ed0136e4 tree   45 55 611</span><br><span class=\"line\">8e0703665933215a57787a3117b079d4c8cb1921 tree   45 56 684</span><br><span class=\"line\">dfe088f704e98a835ed3ca2ce31919947d63f884 blob   13356 92 463 # 第三次提交</span><br><span class=\"line\">363980e2f742592594e01648888a661d2d0479b9 blob   7 18 666 1 dfe088f704e98a835ed3ca2ce31919947d63f884 # 第二次提交</span><br><span class=\"line\">c2e8644a8379ab0cf4f2bc5a14160d94608502f7 blob   18 28 740 # 第一次提交</span><br><span class=\"line\">non delta: 8 objects</span><br><span class=\"line\">chain length = 1: 1 object</span><br><span class=\"line\">.git/objects/pack/pack-a30aa1dcd93c0fadc605cf3fb5828e8cf186ef29.pack: ok</span><br></pre></td></tr></table></figure>\n<p>我们可以到看到 第三次提交的内容是  <code>13356</code>  字节，而第二次提交的内容只有  <code>7</code>  个字节。显然， <code>git</code>  这次进行压缩。另外，第三个版本是保存了最新的文件内容，原始版本是以差异方式存在的 -- 这是因为大部分情况下，需要快速的访问文件的最新版本。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><code>git</code>  创建仓库两种方式：本地创建， <code>clone</code>  仓库</li>\n<li><code>git</code>  仓库的目录结构\n<ul>\n<li><code>objects</code>  目录<br>\n我们通过一个最简单的三次提交来看了一下 <code>git</code>  仓库是如何存储数据的。<br>\n这里，我贴上这张我们操作过程的图，加深一下印象.<br>\n<img data-src=\"/images/git%E7%B3%BB%E5%88%97/images/git%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D04-object%E7%9B%AE%E5%BD%95%E6%80%BB%E7%BB%93.png\" alt=\"git工作目录介绍04-object目录总结.png\"></li>\n<li><code>refs</code> : 引用\n<ul>\n<li>四种对象：提交对象，数据对象，树对象，标签对象。</li>\n<li>树对象:  <code>commit-&gt;tree-&gt;blob</code>  (文件)  <span class=\"spoiler\" title=\"...\">课后作业：多文件的提交记录</span></li>\n<li><code>heads/master</code> ,  <code>heads/test/</code> , <code>tags/</code> . 这几个文件的作用</li>\n<li><code>git symbolic</code>  命令，</li>\n</ul>\n</li>\n<li><code>Index</code>  文件。记录当前哪些文件被修改，新增。</li>\n<li>包文件： 解决 git 工作目录过大的问题。压缩。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "git"
            ]
        }
    ]
}