<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fangjiaxiaobai.github.io</id>
    <title>方家小白 • Posts by &#34;rocketmq&#34; tag</title>
    <link href="https://fangjiaxiaobai.github.io" />
    <updated>2021-09-28T11:26:00.000Z</updated>
    <category term="MySQL" />
    <category term="雪花算法" />
    <category term="算法" />
    <category term="Elastic Search" />
    <category term="搜索" />
    <category term="全站地图" />
    <category term="导航" />
    <category term="目录" />
    <category term="Redis" />
    <category term="git" />
    <category term="数据结构" />
    <category term="MachineLearn" />
    <category term="源码" />
    <category term="RocketMQ" />
    <category term="消息队列" />
    <category term="线程池" />
    <category term="面经" />
    <category term="leetCode" />
    <category term="面经之算法题" />
    <category term="链表" />
    <category term="数组" />
    <category term="有点难的算法题" />
    <category term="不做也罢的算法题" />
    <category term="动态规划" />
    <category term="HD" />
    <category term="BQ" />
    <category term="AC" />
    <category term="数据结构与算法" />
    <category term="哈希算法" />
    <category term="递归" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="分支思想排序" />
    <category term="冒泡排序" />
    <category term="交换排序" />
    <category term="分治思想排序" />
    <category term="桶排序" />
    <category term="线性思想排序" />
    <category term="选择排序" />
    <category term="模型评估" />
    <category term="HashMap" />
    <category term="JDK" />
    <category term="JDK8" />
    <category term="String" />
    <category term="Java" />
    <category term="dubbo" />
    <category term="KNN" />
    <category term="Stream" />
    <category term="OOM" />
    <category term="JVM" />
    <category term="JDK版本" />
    <category term="JDK11" />
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ系列-架构设计之消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;p&gt;上一篇文章&lt;a href=&#34;/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/&#34;&gt; RocketMQ 架构设计之启动过程解析&lt;/a&gt; 分析了  &lt;code&gt;NameServer&lt;/code&gt; ,  &lt;code&gt;Broker&lt;/code&gt; ,  &lt;code&gt;Producer&lt;/code&gt; ,  &lt;code&gt;Consumer&lt;/code&gt;  四个部分的启动过程，这边文章我们分析 &lt;b&gt;消息的收发过程&lt;/b&gt;.&lt;/p&gt;
&lt;h2 id=&#34;生产者发送消息过程解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者发送消息过程解析&#34;&gt;#&lt;/a&gt; 生产者发送消息过程解析&lt;/h2&gt;
&lt;p&gt;我们还是看上篇文章中的例子:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用GroupName初始化Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 指定NameSrv的地址: 也可以通过环境变量NAMESRV_ADDR来指定，则不需要下面这一行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;name-server1-ip:9876;name-server2-ip:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 启动实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建消息实例,指定 topic, tag, message body.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Topic */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Tag */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ !!&amp;quot;&lt;/span&gt;).getBytes(RemotingHelper.DEFAULT_CHARSET) &lt;span class=&#34;comment&#34;&gt;/* Message body */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 发送消息给Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SendResult sendResult = producer.send(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, sendResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 关闭生产者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上一篇文中，我们是看到了  &lt;code&gt;producer.start();&lt;/code&gt; , 现在我们接着来看  &lt;code&gt;producer.send(msg);&lt;/code&gt;  的过程。上一篇文章中，有简单的介绍过消息的发送分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取  &lt;code&gt;topic&lt;/code&gt;  的元数据信息，包括：路由信息，是否为有序队列， &lt;code&gt;MessageQueue&lt;/code&gt;  列表，消息会发送的队列的索引。&lt;/li&gt;
&lt;li&gt;选择  &lt;code&gt;MessageQueue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;发送消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现的代码在  &lt;code&gt;org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl#sendDefaultImpl&lt;/code&gt;  方法中。&lt;/p&gt;
&lt;p&gt;在消息的发送过程中，首先会校验当前 &lt;code&gt;Producer&lt;/code&gt;  的运行状态，然后判断消息的 &lt;code&gt;group&lt;/code&gt; , &lt;code&gt;topic&lt;/code&gt;  等等是否为空。 合法之后，会获取 &lt;code&gt;topic&lt;/code&gt;  的 &lt;code&gt;MessageQueue&lt;/code&gt;  列表。从 &lt;code&gt;messageQueue&lt;/code&gt;  列表中查找出一个发送的 &lt;code&gt;messageQueue&lt;/code&gt; . 通过什么的机制选取 &lt;code&gt;MessageQueue&lt;/code&gt;  呢？这里会涉及到一个  &lt;code&gt;Broker&lt;/code&gt;  的延迟容错机制，下面我们会详解的介绍这个机制。当消息第一次过来的时候，会通过 &lt;code&gt;Random&lt;/code&gt;  随机选择一个 &lt;code&gt;messageQueue&lt;/code&gt; ，进行发送，如果发送失败，会将该 &lt;code&gt;messageQueue&lt;/code&gt;  隔离起来，重试的时候，不会给这个  &lt;code&gt;messageQueue&lt;/code&gt;  投递消息。选择出来了 &lt;code&gt;MessageQueue&lt;/code&gt;  之后，进行发送消息，发送消息首先会根据 &lt;code&gt;BrokerName&lt;/code&gt;  获取 &lt;code&gt;broker&lt;/code&gt;  的地址，执行几个  &lt;code&gt;RpcHook&lt;/code&gt; , 然后封装请求头，根据我们发送方式的不同，会选择对应的请求命令 ( &lt;code&gt;Send_Message&lt;/code&gt; , &lt;code&gt;Send_Reply_Message&lt;/code&gt; , &lt;code&gt;Send_Reply_Message_V2&lt;/code&gt;  等等) 发送，消息发送完成之后，会更新 &lt;code&gt;Producer&lt;/code&gt;  端的  &lt;code&gt;broker容错表&lt;/code&gt; 。这样消息就发送出去了。&lt;/p&gt;
&lt;h3 id=&#34;延迟容错机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#延迟容错机制&#34;&gt;#&lt;/a&gt; 延迟容错机制&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  发送消息的时候，由于  &lt;code&gt;nameServer&lt;/code&gt;  检测  &lt;code&gt;Broker&lt;/code&gt;  是否存活是有延迟的，在 选择消息队列的时候，也可能遇到宕机的 &lt;code&gt;Broker&lt;/code&gt; , 因网络问题发送失败的不时会发生，因次  &lt;code&gt;RocketMQ&lt;/code&gt;  实现这种 高可用的设计方案。&lt;/p&gt;
&lt;p&gt;到底是怎么回事儿呢？&lt;/p&gt;
&lt;p&gt;我们从代码中看看端倪。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%99.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;文中图片我标注了两处代码&lt;/p&gt;
&lt;h4 id=&#34;重试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重试&#34;&gt;#&lt;/a&gt; 重试&lt;/h4&gt;
&lt;p&gt;当消息是 同步方式发送的时候，根据配置的属性进行重试，默认为 3 次。 如果是单向方式或者异步的方式进行发送时，则就会发送一次，不会重试。 可以看到确实可以从一定程度上提高消息发送成功的几率，但是，如果是 &lt;code&gt;broker&lt;/code&gt;  宕机，重试只会增加时长。&lt;/p&gt;
&lt;p&gt;先不急着解决，我们看一下消息第一次发送是怎样的过程。 图中 2 处，会根据  &lt;code&gt;topicPublishInfo&lt;/code&gt;  取出一个 &lt;code&gt;MessageQueue&lt;/code&gt; 。 跟进代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%992.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后接着进入代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%993.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们先假设  &lt;code&gt;sendLatencyFaultEnable = false&lt;/code&gt; . 我们再看一下具体实现:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%994.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;sendWhichQueue&lt;/code&gt;  字段就是上一次消息发送的 &lt;code&gt;MessageQueue List&lt;/code&gt;  的下标。&lt;/p&gt;
&lt;p&gt;最后就是根据  &lt;code&gt;selectOneMessage()&lt;/code&gt;  方法通过轮询的方式来选 &lt;code&gt;MessageQueue&lt;/code&gt;  了。第一次是通过随机的方式来选出第一个  &lt;code&gt;MessageQueue&lt;/code&gt;  的，重试的都是 轮询的去取了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%995.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那当:  &lt;code&gt;sendLatencyFaultEnable = true&lt;/code&gt;  的时候呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendLatencyFaultEnable&lt;/code&gt;  是什么意思呢？ 它表示是否启用  &lt;code&gt;Broker&lt;/code&gt;  故障延迟机制。 看下图中的代码，我们假设 启用了  &lt;code&gt;Broker&lt;/code&gt;  故障延迟机制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%996.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中标注的部分上面的逻辑 和刚才 选择 &lt;code&gt;MessageQueue的&lt;/code&gt; 机制是一样的。 那奥秘肯定是在下面的代码中了 (图中框选的部分)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;latencyFaultTolerance&lt;/code&gt;  是什么呢？ &lt;code&gt;latencyFaultTolerance&lt;/code&gt;  是一个接口，直译就是：延迟容错。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 延迟容错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LatencyFaultTolerance&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 更新失败的Broker。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; name                 brokerName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; currentLatency       本次消息发送的时长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; notAvailableDuration 规避broker的时长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;updateFaultItem&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; T name, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; currentLatency, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; notAvailableDuration)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 判断Broker是否可以用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; name broker的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isAvailable&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; T name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 从Broker故障列表中移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; T name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 弹出最后一个 Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;T &lt;span class=&#34;title&#34;&gt;pickOneAtLeast&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看一下  &lt;code&gt;latencyFaultTolerance.isAvailable(mq.getBrokerName())&lt;/code&gt;  的实现&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isAvailable&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// faultItemTable 是一个 ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; FaultItem faultItem = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.faultItemTable.get(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (faultItem != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 判断该Broker(messageQueue)是否在规避时间内。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; faultItem.isAvailable();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;faultItem.isAvailable()&lt;/code&gt;  的实现如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isAvailable&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (System.currentTimeMillis() - startTimestamp) &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从这两段代码中可以看出，判断  &lt;code&gt;Broker&lt;/code&gt;  是否可用的判断依据就是：当前时间是否大于  &lt;code&gt;startTimeStamp&lt;/code&gt; 。  &lt;code&gt;startTimeStamp&lt;/code&gt;  标识 该 &lt;code&gt;Broker&lt;/code&gt;  可以开始使用的时间。&lt;/p&gt;
&lt;p&gt;看到这里，一头雾水。  分区容错到底是什么东西呢？&lt;/p&gt;
&lt;p&gt;我们返回上一层，从框选的下面接着看：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%996.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果还没有选出一个可用  &lt;code&gt;MessageQueue&lt;/code&gt; ，则会中 故障的 &lt;code&gt;Broker&lt;/code&gt;  列表中选出一个 &lt;code&gt;Broker&lt;/code&gt; ，判断这个 broker 是否有 &lt;code&gt;MessageQueue&lt;/code&gt; ，如果有则随机 (轮询) 的选一个，如果没有则从故障的 &lt;code&gt;Broker&lt;/code&gt;  列表中移除一个，使用默认的机制选择一个 &lt;code&gt;MessageQueue&lt;/code&gt;  投送消息。&lt;/p&gt;
&lt;p&gt;选择出来 &lt;code&gt;MessageQueue&lt;/code&gt;  之后，就会发送消息了。&lt;/p&gt;
&lt;p&gt;发送完消息 还进行了一个操作&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// 更新topic的一个MessageQueue 是否可用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是干什么呢？ 我们直译过来 更新故障 (错误) 的条目。去看一下代码实现:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%997.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到最终是调用了  &lt;code&gt;MqFaultStrategty&lt;/code&gt;  的  &lt;code&gt;updateFaultItem()&lt;/code&gt;  方法。 这个方法中执行了两个方法， &lt;code&gt;computeNotAvailableDuration&lt;/code&gt;  计算不可用的时长， 和   &lt;code&gt;latencyFaultTolerance&lt;/code&gt;  的 &lt;code&gt;updateFaultItem&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;上图中贴出了  &lt;code&gt;computeNotAvailableDuration&lt;/code&gt;  方法的实现。方法中使用了两个数组  &lt;code&gt;latencyMax&lt;/code&gt;  和  &lt;code&gt;notAvailableDuration&lt;/code&gt;  , 这两个数组就是延迟机制的核心了。数组的定义如下:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 延迟机制 - 本次消息发送时长区间，用于映射计算出需要规避Broker的时长。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt;[] latencyMax = &amp;#123;&lt;span class=&#34;number&#34;&gt;50L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;550L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;15000L&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 延迟机制 - 规避Broker的时长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt;[] notAvailableDuration = &amp;#123;&lt;span class=&#34;number&#34;&gt;0L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;120000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180000L&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;600000L&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法中的形参  &lt;code&gt;currentlatency&lt;/code&gt;  为本次消息发送的延迟时间。&lt;/p&gt;
&lt;p&gt;调用 &lt;code&gt;computeNotAvailableDuration&lt;/code&gt;  方法的实参  &lt;code&gt;isolation&lt;/code&gt;  表示该 &lt;code&gt;Broker&lt;/code&gt;  是否需要规避。如果消息发送成功， &lt;code&gt;isolation&lt;/code&gt;  就是 &lt;code&gt;false&lt;/code&gt; , 反之，就是代表 &lt;code&gt;Broker&lt;/code&gt;  需要被规避。从  &lt;code&gt;computeNotAvailableDuration&lt;/code&gt;  方法的实现可以看出：其会根据 本校消息发送的延迟时间 从  &lt;code&gt;latencyMax&lt;/code&gt;  数组尾部找到第一个 比  &lt;code&gt;currentlatency&lt;/code&gt;  小的数组下标 &lt;code&gt;i&lt;/code&gt; ，没有则返回 &lt;code&gt;0&lt;/code&gt; ， 将  &lt;code&gt;notAvailableDuration[i]&lt;/code&gt;  进行返回。 当 &lt;code&gt;isolation=true&lt;/code&gt;  的时候，就会默认有 &lt;code&gt;10&lt;/code&gt;  分钟的规避时长，反之，规避时长就会消息发送的延时是多少了。&lt;/p&gt;
&lt;p&gt;我们接着看  &lt;code&gt;latencyFaultTolerance&lt;/code&gt;  的 &lt;code&gt;updateFaultItem&lt;/code&gt;  方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-%20broker%E5%AE%B9%E9%94%998.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中对代码进行注释，不过多解释了。其中  &lt;code&gt;FaultItem&lt;/code&gt;  是 存储故障 &lt;code&gt;broker&lt;/code&gt;  的类，可以称为 失败条目，每个 &lt;code&gt;FaultItem&lt;/code&gt;  存储了 &lt;code&gt;broker&lt;/code&gt;  的名称，消息发送延迟的时长，故障规避结束的开始时间。&lt;/p&gt;
&lt;p&gt;那么更新这两个字段的值有什么作用呢？不知你是否有印象，刚才说有一头雾水的地方。&lt;/p&gt;
&lt;p&gt;在选择 &lt;code&gt;MessageQueue&lt;/code&gt;  的时候，会判断 &lt;code&gt;messageQueue&lt;/code&gt;  是否可用，调用了 故障容器接口的  &lt;code&gt;isAvalilable&lt;/code&gt;  方法，方法就是根据  &lt;code&gt;startTimestamp&lt;/code&gt;  来进行判断改队列是否可用的。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isAvailable&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (System.currentTimeMillis() - startTimestamp) &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果当前的系统时间大于故障规避开始时间，说明 &lt;code&gt;broker&lt;/code&gt;  可以加入轮询的队伍里。&lt;/p&gt;
&lt;p&gt;以上就是 生产者发送消息 整个过程了。&lt;/p&gt;
&lt;h3 id=&#34;生产者总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者总结&#34;&gt;#&lt;/a&gt; 生产者总结&lt;/h3&gt;
&lt;p&gt;我们知道了 生产者发送消息，三步完成，1. 获取 &lt;code&gt;topic&lt;/code&gt;  的元数据信息，比如路由信息， &lt;code&gt;MessageQueue&lt;/code&gt;  队列列表等， 2. 选择合适的 &lt;code&gt;MessageQueue&lt;/code&gt; ，我们也着重介绍了  &lt;code&gt;Broker&lt;/code&gt;  的故障延迟机制，这也是 &lt;code&gt;RocketMQ&lt;/code&gt;  实现高可用的方式之一。 3. 发送消息，这里我们并没有过多的介绍，使用 &lt;code&gt;nettyClient&lt;/code&gt;  将  &lt;code&gt;Message&lt;/code&gt;  发送过  &lt;code&gt;Broker&lt;/code&gt;  端。&lt;/p&gt;
&lt;h2 id=&#34;broker-存储消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker-存储消息&#34;&gt;#&lt;/a&gt; Broker 存储消息&lt;/h2&gt;
&lt;p&gt;上面我们分析了生产者发送消息的整体过程，尤其着重的分析了 生产者选择 &lt;code&gt;MessageQueue&lt;/code&gt;  时候的容错机制。生产者会把消息发送给 &lt;code&gt;Broker&lt;/code&gt; ，进行存储，存储是一个怎样的流程呢？&lt;/p&gt;
&lt;p&gt;我直接进入主题，从  &lt;code&gt;SendMessageProcessor&lt;/code&gt;  说起。&lt;/p&gt;
&lt;p&gt;为什么上来就说 这个类呢？上篇文章中，我们分析了 &lt;code&gt;Broker&lt;/code&gt;  的启动过程中，可以知道的  &lt;code&gt;Broker&lt;/code&gt;  启动了 &lt;code&gt;NettyServer&lt;/code&gt;  等待生产者，消费者发送来请求。这个  &lt;code&gt;SendMessageProcessor&lt;/code&gt;  就是 &lt;code&gt;Broker&lt;/code&gt;  接受生产者发送消息的处理器。&lt;/p&gt;
&lt;p&gt;具体的代码在  &lt;code&gt;org.apache.rocketmq.broker.BrokerController#registerProcessor&lt;/code&gt;  中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据之前的内容，我们已知 发送的消息有 事务消息，批量消息，单条的普通消息三种类型，并且  &lt;code&gt;RocketMQ&lt;/code&gt;  支持同步存储和异步存储两种方式。所以 肯定是 &lt;code&gt;Broker&lt;/code&gt;  端提供了这六种消息的存储方式。&lt;/p&gt;
&lt;p&gt;实际上，也确实支持了这 6 种方式。我们先从  &lt;code&gt;SendMessageProcessor&lt;/code&gt;  的类继承关系来看一下  &lt;code&gt;Broker&lt;/code&gt;  是如何进行消息存储，我也会按照这样的思路来行文。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;接收同步消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接收同步消息&#34;&gt;#&lt;/a&gt; 接收同步消息&lt;/h3&gt;
&lt;p&gt;同步消息处理的本质上还是异步的处理方式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;response = asyncProcessRequest(ctx, request).get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着往下看&lt;/p&gt;
&lt;h3 id=&#34;异步消息处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步消息处理&#34;&gt;#&lt;/a&gt; 异步消息处理&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;RemotingCommand&amp;gt; &lt;span class=&#34;title&#34;&gt;asyncProcessRequest&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ChannelHandlerContext ctx,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;        RemotingCommand request)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; RemotingCommandException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SendMessageContext mqtraceContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (request.getCode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 消费者发送回来的消息(可能是消费失败之后的?)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.CONSUMER_SEND_MSG_BACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.asyncConsumerSendMsgBack(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 处理生产者发送来的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SendMessageRequestHeader requestHeader = parseRequestHeader(request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (requestHeader == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CompletableFuture.completedFuture(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                mqtraceContext = buildMsgContext(ctx, requestHeader);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 消息发送前的钩子。在消息发送之前，执行一些操作。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.executeSendMessageHookBefore(ctx, request, mqtraceContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (requestHeader.isBatch()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果是批量消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 不是批量消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到， &lt;code&gt;Broker&lt;/code&gt;  不仅处理来自 生产者发送来的消息，还需要处理 消费者 消费失败重试的消息。消费者重试的消息这部分比较复杂，我们后面再分析。我们先看处理生产者发送来的消息这部分。&lt;/p&gt;
&lt;p&gt;代码中显示，会判断消息的类型，是否是批量消息，分别调用不同的方法，进行存储。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中不是完整的代码，我删除了一些不重要的代码，可以看出来，不管是批量消息还是单条消息 (除事务消息) 都是交给了  &lt;code&gt;MessageStore&lt;/code&gt;  进行存储的。 当然，事务消息是交给了  &lt;code&gt;TransactionalMessageService&lt;/code&gt;  进行存储的，这个内容我们在分析 &lt;code&gt;RocketMQ&lt;/code&gt;  事务消息的时候，会着重的分析，本文中就不做分析了。&lt;/p&gt;
&lt;p&gt;继续跟进代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessageStore&lt;/code&gt;  只是对消息 和  &lt;code&gt;Broker&lt;/code&gt;  进行了简单的校验，并没有真正的去存储消息。 而是把消息交给了  &lt;code&gt;commitLog&lt;/code&gt;  进行存储消息。&lt;/p&gt;
&lt;p&gt;我们以单条消息为例，来看一下  &lt;code&gt;commitLog&lt;/code&gt;  将消息存储到文件中的具体流程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图中，  &lt;code&gt;commitLog&lt;/code&gt;  收到消息，首先会选择一个 &lt;code&gt;MappedFile&lt;/code&gt; , 这个  &lt;code&gt;MappedFile&lt;/code&gt;  代表 磁盘上的物理文件在内容中的映射。指代  &lt;code&gt;$HOME/store/commitlog&lt;/code&gt;  目录下的文件。也代表了消息要写入的文件。  &lt;code&gt;MappedFile&lt;/code&gt;  会把消息写到缓冲区中 (即右上图)， 消息顺利写完之后，就触发刷盘动作，刷盘有两种方式： 同步写盘和异步刷盘。 同步写盘是指等待  &lt;code&gt;FlushCommitLogService&lt;/code&gt;  把消息真正写到物理磁盘上，然后再返回。异步刷盘是指 唤醒  &lt;code&gt;FlushCommitLogService&lt;/code&gt;  执行的线程，不等待其是否真正把消息写入了物理磁盘中。 最后，会把消息同步到其他的副本服务中。&lt;/p&gt;
&lt;h3 id=&#34;存储消息流程总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储消息流程总结&#34;&gt;#&lt;/a&gt; 存储消息流程总结&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Broker&lt;/code&gt;  收到生产者发送的消息，会由  &lt;code&gt;SendMessageProcessor&lt;/code&gt;  进行接收，然后会根据消息的类型单条消息，批量消息，还是事务消息，分别进行不同的处理。当然也会区分异步存储还是同步的存储消息。方法实现上本质还是调用 异步的方法来实现的， &lt;code&gt;SendMessageProcessor&lt;/code&gt;  会把消息转交给  &lt;code&gt;CommitLog&lt;/code&gt;  进行校验，会检查当前 &lt;code&gt;Broker&lt;/code&gt;  和当前消息的状态，然后交给 &lt;code&gt;MappedFile&lt;/code&gt;  真正的存储消息， &lt;code&gt;MappedFile&lt;/code&gt;  表示存储消息的物理文件在内存中的映射，首先会把消息的内容写到缓冲区中，然后调用刷盘的方式 (同步写盘或者异步刷盘) 将消息真正的写到物理磁盘上。然后，将消息同步给其他副本。&lt;/p&gt;
&lt;h3 id=&#34;再探讨一点细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再探讨一点细节&#34;&gt;#&lt;/a&gt; 再探讨一点细节&lt;/h3&gt;
&lt;h4 id=&#34;获取mappedfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取mappedfile&#34;&gt;#&lt;/a&gt; 获取 MappedFile&lt;/h4&gt;
&lt;p&gt;在 Broker 将消息写入 MappedFile 之前，就需要需要获取到一个 MappedFile 进行写入。如何获取的呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 asyncPutMessages 方法中，有两处获取 MappedFile 的代码。&lt;/p&gt;
&lt;p&gt;第一处代码，倒是没有复杂的逻辑&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MappedFile &lt;span class=&#34;title&#34;&gt;getLastMappedFile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MappedFile mappedFileLast = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.mappedFiles.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mappedFileLast = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.mappedFiles.get(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.mappedFiles.size() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//continue;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;getLastMappedFile has exception.&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mappedFileLast;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二处代码，稍有猫腻。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MappedFile &lt;span class=&#34;title&#34;&gt;getLastMappedFile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; startOffset)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getLastMappedFile(startOffset, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建文件的代码和执行过程如上图所示，代码有删减。&lt;/p&gt;
&lt;p&gt;解释一下猫腻：创建  &lt;code&gt;MappedFile&lt;/code&gt;  的时候，一次会创建两个 &lt;code&gt;MappedFile&lt;/code&gt; , 这样下次就可以直接通过 一处的代码获取到  &lt;code&gt;MappedFile&lt;/code&gt; ，而不用再去创建  &lt;code&gt;MappedFile&lt;/code&gt;  了。 由于 真实的创建 &lt;code&gt;MappedFile&lt;/code&gt;  是由 后台  &lt;code&gt;AllocateMappedFileService&lt;/code&gt;  线程来创建的，所以也不会浪费时间。&lt;/p&gt;
&lt;p&gt;代码显示，会把  &lt;code&gt;AllocateRequest&lt;/code&gt;  分别放到  &lt;code&gt;requestTable&lt;/code&gt;  和  &lt;code&gt;requestQueue&lt;/code&gt;  中。  &lt;code&gt;AllocateRequest&lt;/code&gt;  是 创建  &lt;code&gt;MappedFile&lt;/code&gt;  文件请求，  &lt;code&gt;requesetTable&lt;/code&gt;  是一个  &lt;code&gt;concurrentHashMap&lt;/code&gt;  ,  &lt;code&gt;key&lt;/code&gt;  是文件的路径， &lt;code&gt;Value&lt;/code&gt;  是  &lt;code&gt;AllocateRequest&lt;/code&gt; 。 存储了 路径和 &lt;code&gt;AllocateRequest&lt;/code&gt;  的映射关系。  &lt;code&gt;requestQueue&lt;/code&gt; ，是请求的队列， &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; ，后台 &lt;code&gt;AllocateMappedFileService&lt;/code&gt;  线程会 &lt;code&gt;requestQueue&lt;/code&gt;  取出一个请求，分配的时候有两种策略，一种是使用 &lt;code&gt;Mmap&lt;/code&gt;  的方式来构建 &lt;code&gt;MappedFile&lt;/code&gt;  实例，另外一种是从 &lt;code&gt;TransientStorePool&lt;/code&gt;  堆外内存池中获取相应的 &lt;code&gt;DirectByteBuffer&lt;/code&gt;  来构建 &lt;code&gt;MappedFile&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&#34;consumer-消费消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#consumer-消费消息&#34;&gt;#&lt;/a&gt; Consumer 消费消息&lt;/h2&gt;
&lt;p&gt;在上一篇文章中，我们介绍了 消费者有两种实现:  &lt;code&gt;DefaultLitePullConsumerImpl&lt;/code&gt;  和  &lt;code&gt;DefaultMQPushConsumerImpl&lt;/code&gt; . 我们先暂时抛开这两种具体的实现方式。 从稍微高一点的角度来看一下消息者消费消息的逻辑。从 &lt;b&gt;消费者注册&lt;/b&gt;, &lt;b&gt;负载均衡&lt;/b&gt;，&lt;b&gt;拉取消息&lt;/b&gt;，&lt;b&gt;消费消息&lt;/b&gt; 这个思路来行文。&lt;/p&gt;
&lt;h3 id=&#34;消息者注册&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息者注册&#34;&gt;#&lt;/a&gt; 消息者注册&lt;/h3&gt;
&lt;p&gt;消费者启动后，每隔 &lt;code&gt;10ms&lt;/code&gt;  会从  &lt;code&gt;NameServer&lt;/code&gt;  查询一次用户订阅的所有话题路由信息.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/** 每10ms从NameServer拉取一下 TopicRouteInfo*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.scheduledExecutorService.scheduleAtFixedRate(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            MQClientInstance.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.updateTopicRouteInfoFromNameServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;ScheduledTask updateTopicRouteInfoFromNameServer exception&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更新 &lt;code&gt;topic&lt;/code&gt;  路由信息在上篇文中已经介绍过了，这里就不详细的去介绍了，只是简单的串一下消息者消费消息的流程。&lt;/p&gt;
&lt;p&gt;除此之外，还有一下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每秒发送一次心跳检测.&lt;/li&gt;
&lt;li&gt;每 10s 持久化一次  &lt;code&gt;Consumer&lt;/code&gt;  的 &lt;code&gt;offset&lt;/code&gt; . 说到这类， 在启动的时候也会加载指定目录下的  &lt;code&gt;consumeOffset&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;每分钟 扫描  &lt;code&gt;consumerTable&lt;/code&gt;  自动调整线程池大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消费者负载均衡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者负载均衡&#34;&gt;#&lt;/a&gt; 消费者负载均衡&lt;/h3&gt;
&lt;p&gt;在消费者启动过程中，会启动  &lt;code&gt;RebalenceService&lt;/code&gt; . 看名字就知道这是一个负载均衡服务。 什么作用呢？在任何一个消费者 启动，关闭，重置消费偏移 的时候，都会触发这个这个服务的重平衡操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 本机 启动时=&amp;gt;其他的消费者会受到 consumerIds发生变更的请求。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/** 5.启动负载均衡服务 org.apache.rocketmq.client.impl.factory.MQClientInstance#start*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.rebalanceService.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 其他的消息者启动或者关闭时,即 consumerId 发生变动的时候 org.apache.rocketmq.client.impl.ClientRemotingProcessor#processRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.NOTIFY_CONSUMER_IDS_CHANGED:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.notifyConsumerIdsChanged(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 控制端 重置消费偏移量时 org.apache.rocketmq.client.impl.ClientRemotingProcessor#processRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.RESET_CONSUMER_CLIENT_OFFSET:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.resetOffset(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重平衡操作发生了什么？&lt;/p&gt;
&lt;p&gt;我们都知道 在 &lt;code&gt;Broker&lt;/code&gt;  端管理消息的最小单位是 &lt;code&gt;MessageQueue&lt;/code&gt;  , 而不是  &lt;code&gt;topic&lt;/code&gt; 。比如 当你发送了  &lt;code&gt;10&lt;/code&gt;  条相同话题的消息，这  &lt;code&gt;10&lt;/code&gt;  条话题可能存储在了不同  &lt;code&gt;Broker&lt;/code&gt;  服务器的不同队列中。所以 当我们讨论消息队列负载均衡的时候，就是在讨论服务器端的所有队列如何给所有消费者消费的问题。在  &lt;code&gt;RocketMQ&lt;/code&gt;  中，客户端有两种消费模式，一种是&lt;b&gt;广播模式&lt;/b&gt;，另外一种是&lt;b&gt;集群模式&lt;/b&gt;。&lt;/p&gt;
&lt;p&gt;我们现在假设总共有两台  &lt;code&gt;Broker&lt;/code&gt;  服务器，假设用户使用  &lt;code&gt;Producer&lt;/code&gt;  已经发送了  &lt;code&gt;8&lt;/code&gt;  条消息，这  &lt;code&gt;8&lt;/code&gt;  条消息现在均衡的分布在两台 Broker 服务器的  &lt;code&gt;8&lt;/code&gt;  个队列中，每个队列中有一个消息。现在有  &lt;code&gt;3&lt;/code&gt;  台消费者都订阅了  &lt;code&gt;Test&lt;/code&gt;  话题的消费者实例，我们来看在不同消费模式下，不同的消费者会收到哪几条消息。&lt;/p&gt;
&lt;h4 id=&#34;广播模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#广播模式&#34;&gt;#&lt;/a&gt; 广播模式&lt;/h4&gt;
&lt;p&gt;这种方式下，每台消费者都会收到 &lt;code&gt;8&lt;/code&gt;  条消息。所以，在广播的模式下，重平衡操作执行如下所示:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 消费者的模式: 广播还是集群模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (messageModel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 广播方式。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; BROADCASTING: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// topicSubscribeInfoTable: 存储topic 对应的 MessageQueue 列表.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Set&amp;lt;MessageQueue&amp;gt; mqSet = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.topicSubscribeInfoTable.get(topic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mqSet != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 更新 消费者消费订阅表。返回是否发生了变动。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; changed = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (changed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果发生了变动，则根据不同的消费消费方式处理：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// push,则需要通知给Broker，更新各个消费者的订阅关系。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// pull,则会通知消费者，执行消费逻辑。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueueChanged(topic, mqSet, mqSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;messageQueueChanged &amp;#123;&amp;#125; &amp;#123;&amp;#125; &amp;#123;&amp;#125; &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, consumerGroup, topic, mqSet, mqSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.warn(&lt;span class=&#34;string&#34;&gt;&amp;quot;doRebalance, &amp;#123;&amp;#125;, but the topic[&amp;#123;&amp;#125;] not exist.&amp;quot;&lt;/span&gt;, consumerGroup, topic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ....:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 省略..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上面代码中的注释， 主要注意的是，广播模式下， &lt;code&gt;messageQueue&lt;/code&gt;  发生变动，需要根据不同的消费方式 ( &lt;code&gt;pull&lt;/code&gt; / &lt;code&gt;push&lt;/code&gt; ), 执行不同的逻辑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;  方式：会更新消息消费订阅表的版本，然后会通知 &lt;code&gt;Broker&lt;/code&gt; ，触发 &lt;code&gt;consumerId&lt;/code&gt;  变动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;  方式：会重新 &lt;code&gt;pull&lt;/code&gt;  消息，执行 &lt;code&gt;pullTask&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集群模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群模式&#34;&gt;#&lt;/a&gt; 集群模式&lt;/h4&gt;
&lt;p&gt;集群模式是指所有的消息队列会按照某种分配策略来分给不同的消费者客户端。&lt;/p&gt;
&lt;p&gt;集群方式，不就是多个消费者协同的消费一个 &lt;code&gt;topic&lt;/code&gt;  的数据吗，也就是说多个消费者协同的订阅 &lt;code&gt;topic&lt;/code&gt;  下的多个消息队列 ( &lt;code&gt;MessageQueue&lt;/code&gt; ). 那就需要一种策略去分配多个 &lt;code&gt;MessageQueue&lt;/code&gt;  给每个消费者。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RocktMQ&lt;/code&gt;  提供了六种 &lt;code&gt;MessageQueue&lt;/code&gt;  的消费策略。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 当前消费者 需要消费哪几个消息队列中消息的分配策略。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AllocateMessageQueueStrategy strategy = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.allocateMessageQueueStrategy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;MessageQueue&amp;gt; allocateResult = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// mqAll:当前topic和group下的消费队列列表.   cidAll: 所有消费队列的id.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 两者一一对应。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    allocateResult = strategy.allocate(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.consumerGroup, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.mQClientFactory.getClientId(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mqAll, cidAll);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(Throwable e)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据分配策略分配好自己要订阅的 &lt;code&gt;MessageQueue&lt;/code&gt;  之后，就会 更新消费者消费订阅表。然后需要根据不同的消费方式 ( &lt;code&gt;pull&lt;/code&gt; / &lt;code&gt;push&lt;/code&gt; ), 执行不同的逻辑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;  方式：会更新消息消费订阅表的版本，然后会通知 &lt;code&gt;Broker&lt;/code&gt; ，触发 &lt;code&gt;consumerId&lt;/code&gt;  变动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;  方式：会重新 &lt;code&gt;pull&lt;/code&gt;  消息，执行 &lt;code&gt;pullTask&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们就一起看下  &lt;code&gt;AllocateMessageQueueStrategy&lt;/code&gt;  的六种实现。&lt;/p&gt;
&lt;h5 id=&#34;平均哈希队列算法allocatemessagequeueaveragely&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#平均哈希队列算法allocatemessagequeueaveragely&#34;&gt;#&lt;/a&gt; 平均哈希队列算法 (AllocateMessageQueueAveragely)&lt;/h5&gt;
&lt;p&gt;这种策略比较简单。举个例子来说明:&lt;/p&gt;
&lt;p&gt;假设有 &lt;code&gt;5&lt;/code&gt;  个 &lt;code&gt;mq&lt;/code&gt; ,  &lt;code&gt;3&lt;/code&gt;  个消费者，那么消费者 &lt;code&gt;id&lt;/code&gt;  为 &lt;code&gt;1&lt;/code&gt;  的 &lt;code&gt;C1&lt;/code&gt;  会订阅 &lt;code&gt;mq1,mq2&lt;/code&gt; .   &lt;code&gt;C2=&amp;gt;mq3,mq4&lt;/code&gt; .   &lt;code&gt;C3=&amp;gt;mq5&lt;/code&gt; .&lt;br&gt;
 假设有 &lt;code&gt;5&lt;/code&gt;  个 &lt;code&gt;mq&lt;/code&gt; ,  &lt;code&gt;6&lt;/code&gt;  个消费者，那么订阅关系则为:  &lt;code&gt;C1=&amp;gt;mq1&lt;/code&gt; , &lt;code&gt;C2=&amp;gt;mq2&lt;/code&gt; , &lt;code&gt;C3=&amp;gt;mq3&lt;/code&gt; , &lt;code&gt;C4=&amp;gt;mq4&lt;/code&gt; , &lt;code&gt;C5=&amp;gt;mq5&lt;/code&gt; , &lt;code&gt;C6=&amp;gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// cidAll: 消费者id列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index = cidAll.indexOf(currentCID);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// mqAll: 消息队列的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// mod: 表示 有多个队列无法平均分配。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mod = mqAll.size() % cidAll.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 4 &amp;lt;= 5 ? 1 : (4 &amp;gt; 0 &amp;amp;&amp;amp; 1 &amp;lt; 4 ? 4 / 5 + 1 : 4 / 5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; averageSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mqAll.size() &amp;lt;= cidAll.size()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 队列比消费者少，每个消费者最大消费1个队列。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    averageSize = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mod &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; index &amp;lt; mod) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 不能平均分, 并且消费者的id比余数小。那么该消费者要多消费一个MessageQueue.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        averageSize = mqAll.size() / cidAll.size() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 正好平均分 或者 当前消费者的id大于mod, 那么该消费者就平均分.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 会有两种情况: 1、mq有5个,consumer有5个， cid=5,则每个消费者都正好订阅一个mq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 2、mq有5个，consumer有6个,cid=6, 则该消费者不会订阅mq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        averageSize = mqAll.size() / cidAll.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        int averageSize =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//            mqAll.size() &amp;lt;= cidAll.size() ? 1 : (mod &amp;gt; 0 &amp;amp;&amp;amp; index &amp;lt; mod ? mqAll.size() / cidAll.size()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//                + 1 : mqAll.size() / cidAll.size());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 订阅mq 的起始 索引. 比如5个mq，3个consumer, 那么,c1=&amp;gt;m1,m2; c2=&amp;gt;m3,m4; c3=&amp;gt;m5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; startIndex = (mod &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; index &amp;lt; mod) ? index * averageSize : index * averageSize + mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; range = Math.min(averageSize, mqAll.size() - startIndex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; range; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.add(mqAll.get((startIndex + i) % mqAll.size()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;循环平均哈希队列算法allocatemessagequeueaveragelybycircle&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环平均哈希队列算法allocatemessagequeueaveragelybycircle&#34;&gt;#&lt;/a&gt; 循环平均哈希队列算法 (AllocateMessageQueueAveragelyByCircle)&lt;/h5&gt;
&lt;p&gt;这种实现页是很简单的实现。举例来说明，不过多介绍了。&lt;/p&gt;
&lt;p&gt;假设有 &lt;code&gt;5&lt;/code&gt;  个 &lt;code&gt;mq&lt;/code&gt; ,  &lt;code&gt;3&lt;/code&gt;  个消费者，那么订阅关系则为:&lt;br&gt;
 &lt;code&gt;C1=&amp;gt;mq1,mq4&lt;/code&gt; .&lt;br&gt;
 &lt;code&gt;C2=&amp;gt;mq2,mq5&lt;/code&gt; .&lt;br&gt;
 &lt;code&gt;C3=&amp;gt;mq3&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;假设有 &lt;code&gt;5&lt;/code&gt;  个 &lt;code&gt;mq&lt;/code&gt; ,  &lt;code&gt;6&lt;/code&gt;  个消费者，那么订阅关系则为:  &lt;code&gt;C1=&amp;gt;mq1&lt;/code&gt; , &lt;code&gt;C2=&amp;gt;mq2&lt;/code&gt; , &lt;code&gt;C3=&amp;gt;mq3&lt;/code&gt; , &lt;code&gt;C4=&amp;gt;mq4&lt;/code&gt; , &lt;code&gt;C5=&amp;gt;mq5&lt;/code&gt; , &lt;code&gt;C6=&amp;gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// index: 表示第index个消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index = cidAll.indexOf(currentCID);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = index; i &amp;lt; mqAll.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 循环分配给消费者。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i % cidAll.size() == index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result.add(mqAll.get(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;一致性哈希队列算法allocatemessagequeueconsistenthash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一致性哈希队列算法allocatemessagequeueconsistenthash&#34;&gt;#&lt;/a&gt; 一致性哈希队列算法 (AllocateMessageQueueConsistentHash)&lt;/h5&gt;
&lt;p&gt;这个算法实现起来比较复杂，涉及到了一个分布式算法，一致性哈希算法。&lt;/p&gt;
&lt;p&gt;具体的算法实现内容可以参考: &lt;a href=&#34;/2021/09/01/dataStructuresAndAlgorithms/hash/%E7%AE%97%E6%B3%9502-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/&#34;&gt;哈希算法&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 哈希环的节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collection&amp;lt;ClientNode&amp;gt; cidNodes = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String cid : cidAll) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cidNodes.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ClientNode(cid));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一致性哈希的Router&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; ConsistentHashRouter&amp;lt;ClientNode&amp;gt; router;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (customHashFunction != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    router = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConsistentHashRouter&amp;lt;&amp;gt;(cidNodes, virtualNodeCnt, customHashFunction);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    router = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConsistentHashRouter&amp;lt;&amp;gt;(cidNodes, virtualNodeCnt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将MQf通过Router分配给消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;MessageQueue&amp;gt; results = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (MessageQueue mq : mqAll) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ClientNode clientNode = router.routeNode(mq.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (clientNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; currentCID.equals(clientNode.getKey())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        results.add(mq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种算法的好处也特别明显：当有消费者加入或者退出的时候，不会移动跨节点的 &lt;code&gt;MQ&lt;/code&gt;  分配情况。&lt;/p&gt;
&lt;h5 id=&#34;通过配置的属性分配队列allocatemessagequeuebyconfig&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过配置的属性分配队列allocatemessagequeuebyconfig&#34;&gt;#&lt;/a&gt; 通过配置的属性分配队列 (AllocateMessageQueueByConfig)&lt;/h5&gt;
&lt;p&gt;这种算法就是 根据配置的 &lt;code&gt;MQ&lt;/code&gt; , 进行消费。&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;set&lt;/code&gt;  方法设置该消费者要消费的 &lt;code&gt;MQ&lt;/code&gt; ,&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setMessageQueueList&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageQueue&amp;gt; messageQueueList)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueueList = messageQueueList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;分配方法则，直接将  &lt;code&gt;messageQueueList&lt;/code&gt;  返回即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;MessageQueue&amp;gt; &lt;span class=&#34;title&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String consumerGroup, String currentCID, List&amp;lt;MessageQueue&amp;gt; mqAll,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    List&amp;lt;String&amp;gt; cidAll)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueueList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;机房hash队列算法allocatemessagequeuebymachineroom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#机房hash队列算法allocatemessagequeuebymachineroom&#34;&gt;#&lt;/a&gt; 机房 Hash 队列算法 (AllocateMessageQueueByMachineRoom)&lt;/h5&gt;
&lt;p&gt;这个算法 和 循环平均哈希队列算法 是一样的。只不过是根据  &lt;code&gt;brokerName&lt;/code&gt;  进行 &lt;code&gt;Hash&lt;/code&gt;  计算的。&lt;/p&gt;
&lt;p&gt;举个例子来说:&lt;/p&gt;
&lt;p&gt;假设 5 个 &lt;code&gt;mq&lt;/code&gt;  ( &lt;code&gt;fxb-test01@fxb.com&lt;/code&gt; , &lt;code&gt;fxb-test02@fxb.com&lt;/code&gt; , &lt;code&gt;fxb-test03@fxb.com&lt;/code&gt; , &lt;code&gt;fxb-test04@fxb.com&lt;/code&gt; , &lt;code&gt;fxb-test05@fxb.com&lt;/code&gt; ),3 个消费者。则订阅关系如下:&lt;br&gt;
 &lt;code&gt;C1=&amp;gt;mq1,mq4&lt;/code&gt; .&lt;br&gt;
 &lt;code&gt;C2=&amp;gt;mq2,mq5&lt;/code&gt; .&lt;br&gt;
 &lt;code&gt;C3=&amp;gt;mq3&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;代码实现如下:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;MessageQueue&amp;gt; premqAll = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;MessageQueue&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (MessageQueue mq : mqAll) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String[] temp = mq.getBrokerName().split(&lt;span class=&#34;string&#34;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (temp.length == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; consumeridcs.contains(temp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        premqAll.add(mq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mod = premqAll.size() / cidAll.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; rem = premqAll.size() % cidAll.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; startIndex = mod * currentIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; endIndex = startIndex + mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = startIndex; i &amp;lt; endIndex; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.add(premqAll.get(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rem &amp;gt; currentIndex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.add(premqAll.get(currentIndex + mod * cidAll.size()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;基于机房远近优先allocatemachineroomnearby&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于机房远近优先allocatemachineroomnearby&#34;&gt;#&lt;/a&gt; 基于机房远近优先 (AllocateMachineRoomNearby)&lt;/h5&gt;
&lt;p&gt;这种算法会根据消费者的命名来区分。比如相同机房的消费者有相同的命名格式: &lt;code&gt;beijing-mxy-001&lt;/code&gt; , &lt;code&gt;beijing-mxy-002...&lt;/code&gt;  ，那么这类的消费者和 &lt;code&gt;MQ&lt;/code&gt;  会被认为属于同一个机房。&lt;b&gt;在同一个机房内的 &lt;code&gt;MQ&lt;/code&gt;  会优先被本机房的消费者进行消费&lt;/b&gt; 如果本机房内没有存活的消费者，那该机房中的 &lt;code&gt;MQ&lt;/code&gt;  会被所有的消费者所共享。  至于某一个消费者会订阅哪个 &lt;code&gt;MQ&lt;/code&gt; ，则由具体指定的分配策略来分配。具体如下代码。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//  根据机房分组 broker,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String&lt;span class=&#34;comment&#34;&gt;/*machine room */&lt;/span&gt;, List&amp;lt;MessageQueue&amp;gt;&amp;gt; mr2Mq = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TreeMap&amp;lt;String, List&amp;lt;MessageQueue&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (MessageQueue mq : mqAll) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String brokerMachineRoom = machineRoomResolver.brokerDeployIn(mq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNoneEmpty(brokerMachineRoom)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mr2Mq.get(brokerMachineRoom) == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mr2Mq.put(brokerMachineRoom, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;MessageQueue&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mr2Mq.get(brokerMachineRoom).add(mq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&#34;string&#34;&gt;&amp;quot;Machine room is null for mq &amp;quot;&lt;/span&gt; + mq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//根据机房分组consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String&lt;span class=&#34;comment&#34;&gt;/*machine room */&lt;/span&gt;, List&amp;lt;String&lt;span class=&#34;comment&#34;&gt;/*clientId*/&lt;/span&gt;&amp;gt;&amp;gt; mr2c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TreeMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String cid : cidAll) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据cid判断出所属的机房==&amp;gt; 相同机房的消费需要有相同的命名格式.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String consumerMachineRoom = machineRoomResolver.consumerDeployIn(cid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNoneEmpty(consumerMachineRoom)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mr2c.get(consumerMachineRoom) == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mr2c.put(consumerMachineRoom, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mr2c.get(consumerMachineRoom).add(cid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&#34;string&#34;&gt;&amp;quot;Machine room is null for consumer id &amp;quot;&lt;/span&gt; + cid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;MessageQueue&amp;gt; allocateResults = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;MessageQueue&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 计算当前consumer可以消费的MQ. 当前机房有多个消费者的时候，则使用真正分配策略(其他的分配策略)进行分配。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 1.allocate the mq that deploy in the same machine room with the current consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String currentMachineRoom = machineRoomResolver.consumerDeployIn(currentCID);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;MessageQueue&amp;gt; mqInThisMachineRoom = mr2Mq.remove(currentMachineRoom);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; consumerInThisMachineRoom = mr2c.get(currentMachineRoom);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mqInThisMachineRoom != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !mqInThisMachineRoom.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    allocateResults.addAll(allocateMessageQueueStrategy.allocate(consumerGroup, currentCID, mqInThisMachineRoom, consumerInThisMachineRoom));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 2.allocate the rest mq to each machine room if there are no consumer alive in that machine room&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 如果当前机房没有存活的消费者，那么当前机房的MQ会被所有的消费者共享。根据真实的分配策略进行分配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String machineRoom : mr2Mq.keySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!mr2c.containsKey(machineRoom)) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// no alive consumer in the corresponding machine room, so all consumers share these queues&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        allocateResults.addAll(allocateMessageQueueStrategy.allocate(consumerGroup, currentCID, mr2Mq.get(machineRoom), cidAll));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; allocateResults;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就是 &lt;code&gt;RocketMQ&lt;/code&gt;  使用的负载均衡的内容了，当然，我们也可以自定义 分配策略。只需要实现  &lt;code&gt;AllocateMessageQueueStrategy&lt;/code&gt;  , 在创建消费者实例的时候使用就好了。&lt;/p&gt;
&lt;h3 id=&#34;拉取消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取消息&#34;&gt;#&lt;/a&gt; 拉取消息&lt;/h3&gt;
&lt;p&gt;我们知道的是， RocketMQ 支持两种消费者类型，一种是推送方式的，一种是主动拉取消息。&lt;/p&gt;
&lt;p&gt;这里我们先从拉取消息说起。  你懂的，我们是要讲的是:  &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt; .&lt;/p&gt;
&lt;h4 id=&#34;defaultlitepullconsumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#defaultlitepullconsumer&#34;&gt;#&lt;/a&gt; DefaultLitePullConsumer&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DefaultLitePullConsumer&lt;/code&gt; ，会为每个  &lt;code&gt;messageQueue&lt;/code&gt;  创建一个 &lt;code&gt;PullTaskImpl&lt;/code&gt; .  它会定时的从  &lt;code&gt;Broker&lt;/code&gt;  端拉取消息。然后封装成  &lt;code&gt;PullRequest&lt;/code&gt; , 放到  &lt;code&gt;consumeRequestCache&lt;/code&gt;  这个阻塞队列中， 然 后  &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  会调用 &lt;code&gt;poll&lt;/code&gt;  方法，获取 List&lt;MessageExt&gt;, 这样就算是消费完成了。&lt;/p&gt;
&lt;p&gt;是客户端 定时任务主动想 &lt;code&gt;Broker&lt;/code&gt;  端发送请求，拉取消息。&lt;/p&gt;
&lt;p&gt;而 推的方式，就不是这么简单了。&lt;/p&gt;
&lt;h4 id=&#34;defaultmqpushconsumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#defaultmqpushconsumer&#34;&gt;#&lt;/a&gt; DefaultMQPushConsumer&lt;/h4&gt;
&lt;p&gt;这还是要从 &lt;code&gt;Broker&lt;/code&gt;  端存储完消息之后说起，Broker 会运行一个  &lt;code&gt;ReputMessageService&lt;/code&gt; . 这是一个线程，有什么作用呢？&lt;br&gt;
 它是推送消息的线程，负责将写入 &lt;code&gt;CommitLog&lt;/code&gt;  的消息推送给对应的消费者。&lt;/p&gt;
&lt;p&gt;这里会有两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、 &lt;code&gt;ReputMessageService&lt;/code&gt;  怎么知道要去推送消息给消费者呢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ReputMessageService&lt;/code&gt;  每隔 1 秒会检查一下这个  &lt;code&gt;CommitLog&lt;/code&gt;  是否有新的数据写入。 &lt;code&gt;ReputMessageService&lt;/code&gt;  自身维护了一个偏移量  &lt;code&gt;reputFromOffset&lt;/code&gt; ，用以对比和  &lt;code&gt;CommitLog&lt;/code&gt;  文件中的消息总偏移量的差距。当这两个偏移量不同的时候，就代表有新的消息到来了。&lt;/p&gt;
&lt;p&gt;如下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-03-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReputMessageService&lt;/code&gt;  是怎样推送消息的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上图中可以看见，  &lt;code&gt;ReputMessageService&lt;/code&gt;  封装了一个  &lt;code&gt;DispatchRequest&lt;/code&gt; ，然后通过  &lt;code&gt;DefaultMessageStore.doDispatch&lt;/code&gt;  方法，转发了出去。虽说是转发了出去，但是并非直接发送给了消费者。&lt;/p&gt;
&lt;p&gt;而是转发给了  &lt;code&gt;CommitLogDispatcherBuildConsumeQueue&lt;/code&gt; . 它主要是根据这条请求按照不同的队列  &lt;code&gt;ID&lt;/code&gt;  创建不同的消费队列文件，并在内存中维护一份消费队列列表。然后将  &lt;code&gt;DispatchRequest&lt;/code&gt;  请求中这条消息的消息偏移量、消息大小以及消息在发送时候附带的标签的  &lt;code&gt;Hash&lt;/code&gt;  值写入到相应的消费队列文件中去。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;putMessagePositionInfo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DispatchRequest dispatchRequest)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ConsumeQueue cq = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.findConsumeQueue(dispatchRequest.getTopic(), dispatchRequest.getQueueId());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cq.putMessagePositionInfoWrapper(dispatchRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后台通过 &lt;code&gt;FlushConsumeQueueService&lt;/code&gt;  线程来定时的持久化到磁盘中，写文件和  &lt;code&gt;Broker&lt;/code&gt;  写入 &lt;code&gt;MappedLogFile&lt;/code&gt;  一样。只是位置不同。&lt;/p&gt;
&lt;p&gt;好家伙，到现在还没有给消息推送消息，自己先存起来了。&lt;/p&gt;
&lt;p&gt;而事实上，RocketMQ 并没有实现 Broker 端 发送消息给 消费者。 推模型的消息消费模式，是通过拉模式实现的。&lt;/p&gt;
&lt;p&gt;这里需要区分 广播模式 和 集群模型分开来说了。&lt;/p&gt;
&lt;h5 id=&#34;广播模式-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#广播模式-2&#34;&gt;#&lt;/a&gt; 广播模式&lt;/h5&gt;
&lt;p&gt;每个消费队列的偏移量肯定不能存储在  &lt;code&gt;Broker&lt;/code&gt;  服务器端，因为多个消费者对于同一个队列的消费可能不一致，偏移量会互相覆盖掉。因此，在广播模式下，每个客户端的消费偏移量是存储在本地的，然后每隔  &lt;code&gt;5&lt;/code&gt;  秒将内存中的  &lt;code&gt;offsetTable&lt;/code&gt;  持久化到磁盘中。当首次从服务器获取可消费队列的时候，偏移量是直接从本地文件中读取的。&lt;/p&gt;
&lt;h5 id=&#34;集群模式-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群模式-2&#34;&gt;#&lt;/a&gt; 集群模式&lt;/h5&gt;
&lt;p&gt;在集群模式下，由于每个客户端所消费的消息队列不同，所以每个消息队列已经消费到哪里的消费偏移量是记录在  &lt;code&gt;Broker&lt;/code&gt;  服务器端的。&lt;/p&gt;
&lt;p&gt;消费者客户端在内存中维护了一个  &lt;code&gt;offsetTable&lt;/code&gt;  表，在  &lt;code&gt;Broker&lt;/code&gt;  服务器端也维护了一个偏移量表。在消费者客户端， &lt;code&gt;RebalanceService&lt;/code&gt;  服务会定时地 (默认 20 秒) 从  &lt;code&gt;Broker&lt;/code&gt;  服务器获取当前客户端所需要消费的消息队列，并与当前消费者客户端的消费队列进行对比，看是否有变化。对于每个消费队列，会从  &lt;code&gt;Broker&lt;/code&gt;  服务器查询这个队列当前的消费偏移量。然后根据这几个消费队列，创建对应的拉取请求  &lt;code&gt;PullRequest&lt;/code&gt;  准备从  &lt;code&gt;Broker&lt;/code&gt;  服务器拉取消息。当从  &lt;code&gt;Broker&lt;/code&gt;  服务器拉取下来消息以后，只有当用户成功消费的时候，才会更新本地的偏移量表。本地的偏移量表再通过定时服务每隔  &lt;code&gt;5&lt;/code&gt;  秒同步到  &lt;code&gt;Broker&lt;/code&gt;  服务器端，维护在  &lt;code&gt;Broker&lt;/code&gt;  服务器端的偏移量表也会每隔  &lt;code&gt;5&lt;/code&gt;  秒钟序列化到磁盘中.&lt;/p&gt;
&lt;p&gt;那么重点来了，创建的 &lt;code&gt;PullRequest&lt;/code&gt;  就会被放到  &lt;code&gt;pullRequestQueue&lt;/code&gt;  中。&lt;/p&gt;
&lt;h4 id=&#34;拉取消息-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取消息-2&#34;&gt;#&lt;/a&gt; 拉取消息&lt;/h4&gt;
&lt;p&gt;在 消费者启动 一文中，可以知道 消费者启动后，后台会一直运行一个  &lt;code&gt;PullMessageService&lt;/code&gt;  线程。它会阻塞的从  &lt;code&gt;pullRequestQueue&lt;/code&gt;  中获取  &lt;code&gt;PullRequest&lt;/code&gt;  向 &lt;code&gt;Broker&lt;/code&gt;  端发送请求。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.isStopped()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            PullRequest pullRequest = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.pullRequestQueue.take();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 拉取消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.pullMessage(pullRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pullRequestQueue&lt;/code&gt;  便是  &lt;code&gt;pull Message Request Queue&lt;/code&gt;  了。(拉取消息请求的队列了)&lt;/p&gt;
&lt;p&gt;当真正尝试拉取消息之前，其会检查当前请求的内部缓存的消息数量、消息大小、消息阈值跨度是否超过了某个阈值，如果超过某个阈值，则推迟  &lt;code&gt;50&lt;/code&gt;  毫秒重新执行这个请求，当执行完一些必要的检查之后，客户端会将用户指定的过滤信息以及一些其它必要消费字段封装到请求信息体中，然后才开始从  &lt;code&gt;Broker&lt;/code&gt;  服务器拉取这个请求从当前偏移量开始的消息，默认一次性最多拉取  &lt;code&gt;32&lt;/code&gt;  条，服务器返回的响应会告诉客户端这个队列下次开始拉取时的偏移量。客户端每次都会注册一个  &lt;code&gt;PullCallback&lt;/code&gt;  回调，用以接受服务器返回的响应信息，根据响应信息的不同状态信息，然后修正这个请求的偏移量，并进行下次请求。&lt;/p&gt;
&lt;p&gt;对了，都有些什么时候会将  &lt;code&gt;PullRequest&lt;/code&gt;  放入  &lt;code&gt;pullRequestQueue&lt;/code&gt;  中的呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重平衡的时候
&lt;ul&gt;
&lt;li&gt;有消费者加入，发生重平衡&lt;/li&gt;
&lt;li&gt;定时任务，发送重平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息消费失败，重试。&lt;/li&gt;
&lt;li&gt;启动的时候。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是会触发拉取消息的。&lt;/p&gt;
&lt;p&gt;最后，终于到最后一步了，消费消息。&lt;/p&gt;
&lt;h4 id=&#34;消费消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费消息&#34;&gt;#&lt;/a&gt; 消费消息&lt;/h4&gt;
&lt;p&gt;当把消息放在  &lt;code&gt;PullRequestQueue&lt;/code&gt;  这个阻塞队列中之后，后台线程会不断从这个阻塞队列中获取  &lt;code&gt;PullRequest&lt;/code&gt; . 如下图代码中所示。拿到了  &lt;code&gt;PullRequest&lt;/code&gt;  则会提交了一个  &lt;code&gt;ConsumeRequest&lt;/code&gt; . 我想这又被你猜到了。哈哈。这里将  &lt;code&gt;ConsumeRequest&lt;/code&gt;   &lt;code&gt;submit&lt;/code&gt;  给了一个后台线程  &lt;code&gt;consumeExecutor&lt;/code&gt; 。接着往下看吧。该线程会每分钟执行一次。进行消息消费。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;依赖于用户指定的消息回调函数的不同，消息的消费分为两种：并发消费和有序消费。&lt;/p&gt;
&lt;p&gt;并发消费没有考虑消息发送的顺序，客户端从服务器获取到消息就会直接回调给用户。而有序消费会考虑每个队列消息发送的顺序，注意此处并不是每个话题消息发送的顺序，一定要记住  &lt;code&gt;RocketMQ&lt;/code&gt;  控制消息的最细粒度是消息队列。当我们讲有序消费的时候，就是在说对于某个话题的某个队列，发往这个队列的消息，客户端接受消息的顺序与发送的顺序完全一致。&lt;/p&gt;
&lt;h5 id=&#34;并发消费&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发消费&#34;&gt;#&lt;/a&gt; 并发消费&lt;/h5&gt;
&lt;p&gt;当用户注册消息回调类的时候，如果注册的是  &lt;code&gt;MessageListenerConcurrently&lt;/code&gt;  回调类，那么就认为用户不关心消息的顺序问题。我们在上文提到过每个  &lt;code&gt;PullRequest&lt;/code&gt;  都关联了一个处理队列  &lt;code&gt;ProcessQueue&lt;/code&gt; ，而每个处理队列又都关联了一颗消息树  &lt;code&gt;msgTreeMap&lt;/code&gt; 。当客户端拉取到新的消息以后，其先将消息放入到这个请求所关联的处理队列的消息树中，然后提交一个消息消费请求，用以回调用户端的代码消费消息.&lt;/p&gt;
&lt;p&gt;提交给  &lt;code&gt;consumeExecutor&lt;/code&gt;  之后，  &lt;code&gt;ConsumeRequest&lt;/code&gt;  实现逻辑如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;有序消费&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有序消费&#34;&gt;#&lt;/a&gt; 有序消费&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  的有序消费主要依靠两把锁，一把是维护在  &lt;code&gt;Broker&lt;/code&gt;  端，一把维护在消费者客户端。 &lt;code&gt;Broker&lt;/code&gt;  端有一个  &lt;code&gt;RebalanceLockManager&lt;/code&gt;  服务，其内部维护了一个  &lt;code&gt;mqLockTable&lt;/code&gt;  消息队列锁表:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-02-Broker%E6%B6%88%E6%81%AF10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在有序消费的时候， &lt;code&gt;Broker&lt;/code&gt;  需要确保任何一个队列在任何时候都只有一个客户端在消费它，都在被一个客户端所锁定。当客户端在本地根据消息队列构建  &lt;code&gt;PullRequest&lt;/code&gt;  之前，会与  &lt;code&gt;Broker&lt;/code&gt;  沟通尝试锁定这个队列，另外当进行有序消费的时候，客户端也会周期性地 (默认是  &lt;code&gt;20&lt;/code&gt;  秒) 锁定所有当前需要消费的消息队列.&lt;/p&gt;
&lt;p&gt;代码逻辑如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 顺序消费&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 每秒 定时多实例消费的所有队列，上锁成功将 ProcessQueue的lock属性设置为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.defaultMQPushConsumerImpl.messageModel())) &amp;#123; &lt;span class=&#34;comment&#34;&gt;/// 只支持集群模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.scheduledExecutorService.scheduleAtFixedRate(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.lockMQPeriodically();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ProcessQueue.REBALANCE_LOCK_INTERVAL, TimeUnit.MILLISECONDS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在  &lt;code&gt;Broker&lt;/code&gt;  这端，每个客户端所锁定的消息队列对应的锁项  &lt;code&gt;LogEntry&lt;/code&gt;  有一个上次锁定时的时间戳，当超过锁的超时时间 (默认是 60 秒) 后，也会判定这个客户端已经不再持有这把锁，以让其他客户端能够有序消费这个队列。&lt;/p&gt;
&lt;p&gt;在前面我们说到过  &lt;code&gt;RebalanceService&lt;/code&gt;  均衡服务会定时地依据不同消费者数量分配消费队列。我们假设  &lt;code&gt;Consumer-1&lt;/code&gt;  消费者客户端一开始需要消费  &lt;code&gt;3&lt;/code&gt;  个消费队列，这个时候又加入了  &lt;code&gt;Consumer-2&lt;/code&gt;  消费者客户端，并且分配到了  &lt;code&gt;MessageQueue-2&lt;/code&gt;  消费队列。当  &lt;code&gt;Consumer-1&lt;/code&gt;  内部的均衡服务检测到当前消费队列需要移除  &lt;code&gt;MessageQueue-2&lt;/code&gt;  队列，这个时候，会首先解除  &lt;code&gt;Broker&lt;/code&gt;  端的锁，确保新加入的  &lt;code&gt;Consumer-2&lt;/code&gt;  消费者客户端能够成功锁住这个队列，以进行有序消费。&lt;/p&gt;
&lt;p&gt;消费者客户端每一次拉取消息请求，如果有发现新的消息，那么都会将这些消息封装为  &lt;code&gt;ConsumeRequest&lt;/code&gt;  来喂给消费线程池，等待消费。如果消息特别多，这样一个队列可能有多个消费请求正在等待客户端消费，用户可能会先消费偏移量大的消息，后消费偏移量小的消息。所以消费同一队列的时候，需要一把锁以消费请求顺序化。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumeMessageOrderlyService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumeMessageService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumeRequest&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; ProcessQueue processQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; MessageQueue messageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumeRequest&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProcessQueue processQueue, MessageQueue messageQueue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue = processQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueue = messageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ProcessQueue &lt;span class=&#34;title&#34;&gt;getProcessQueue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; processQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MessageQueue &lt;span class=&#34;title&#34;&gt;getMessageQueue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; messageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Object objLock = messageQueueLock.fetchLockObject(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt; (objLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.defaultMQPushConsumerImpl.messageModel())|| (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue.isLocked() &amp;amp;&amp;amp; !&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue.isLockExpired())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; continueConsume = &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;; continueConsume; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 每次获取消息的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; consumeBatchSize =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 拿到可以消费的消息列表。默认为 1 条。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        List&amp;lt;MessageExt&amp;gt; msgs = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue.takeMessages(consumeBatchSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        defaultMQPushConsumerImpl.resetRetryAndNamespace(msgs, defaultMQPushConsumer.getConsumerGroup());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!msgs.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; ConsumeOrderlyContext context = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConsumeOrderlyContext(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ConsumeOrderlyStatus status = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ConsumeMessageContext consumeMessageContext = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;comment&#34;&gt;// 消费者加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue.getConsumeLock().lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;comment&#34;&gt;// 回调消费者消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue.getConsumeLock().unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            continueConsume = ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processConsumeResult(msgs, status, context, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            continueConsume = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ConsumeMessageOrderlyService.&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.tryLockLaterAndReconsume(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messageQueue, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.processQueue, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样消息就消费完了。不得不说，这个消费的整体消费的逻辑是真的复杂。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;我们从生产者发送消息，到  &lt;code&gt;Broker&lt;/code&gt;  端存储消息， 再到 消费者消费消息。将整个流程都跑通了。&lt;br&gt;
每个过程都不是我们想象的那样直接发送消息给 &lt;code&gt;Broker&lt;/code&gt; ， &lt;code&gt;Broker&lt;/code&gt;  将消息直接写入硬盘， 消费者直接去 &lt;code&gt;Broker&lt;/code&gt;  中拉取消息，拉取到之后直接调用客户端进行消费。&lt;/p&gt;
&lt;p&gt;接下来，我们会深入到  &lt;code&gt;RocketMQ&lt;/code&gt;  某个特性的具体实现中去。会逐一分析 事务消息，延时消息，消息可靠性措施，载均衡，消息重放，消息过滤等功能的实现。&lt;/p&gt;
&lt;p&gt;下一篇文章：事务消息。请期待～&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-28T11:26:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/</id>
        <title>RocketMQ系列-架构设计之启动</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/"/>
        <content type="html">&lt;p&gt;之前我们已经学习了 &lt;code&gt;RocketMQ&lt;/code&gt;  是由四个部分组成的。这篇文章更加深入的来看看这个四个部分。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NameServer&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来，我们来看  &lt;code&gt;NameServer&lt;/code&gt;  的相关内容，我们都知道  &lt;code&gt;NameServer&lt;/code&gt;  是  &lt;code&gt;RocketMQ&lt;/code&gt;  的注册中心。那它肯定会有 服务发现，检查检查，路由等等功能， 我们就按照这个思路去看看  &lt;code&gt;NameServer&lt;/code&gt;  是如何启动的。&lt;/p&gt;
&lt;h3 id=&#34;namesrv-的启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#namesrv-的启动过程&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NameSrv&lt;/code&gt;  的启动过程&lt;/h3&gt;
&lt;p&gt;我们在部署  &lt;code&gt;RocketMQ&lt;/code&gt;  的时候，使用下面的命令启动了 &lt;code&gt;RocketMQ&lt;/code&gt;  的 &lt;code&gt;NameServer&lt;/code&gt; .&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nohup sh mqnamesrv &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这条命令其实执行的是：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sh &lt;span class=&#34;variable&#34;&gt;$&amp;#123;ROCKETMQ_HOME&amp;#125;&lt;/span&gt;/bin/runserver.sh org.apache.rocketmq.namesrv.NamesrvStartup &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就说，这条命令执行运行的  &lt;code&gt;NamesrvStartup&lt;/code&gt;  类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NameSrv&lt;/code&gt;  的启动其实就两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装配置参数： 根据命令行参数封装  &lt;code&gt;NameSrvConfig&lt;/code&gt;  配置。 可以执行配置文件，会解析配置文件中的相关配置。&lt;/li&gt;
&lt;li&gt;初始化并启动  &lt;code&gt;NamesrvController&lt;/code&gt; .
&lt;ul&gt;
&lt;li&gt;初始化:
&lt;ul&gt;
&lt;li&gt;对  &lt;code&gt;NameSrvController&lt;/code&gt;  进行配置，&lt;/li&gt;
&lt;li&gt;创建远程  &lt;code&gt;netty Server&lt;/code&gt; ,&lt;/li&gt;
&lt;li&gt;注册  &lt;code&gt;DefaultRequestProcessor&lt;/code&gt;  ，处理各种连接请求，&lt;/li&gt;
&lt;li&gt;创建了两个定时任务：每  &lt;code&gt;10s&lt;/code&gt;  扫描一次  &lt;code&gt;Broker&lt;/code&gt;  列表，移除不存活的  &lt;code&gt;Broker&lt;/code&gt;  。每 &lt;code&gt;10s&lt;/code&gt;  打印一次配置属性。&lt;/li&gt;
&lt;li&gt;创建配置文件监听器，监听配置文件是否有变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动：
&lt;ul&gt;
&lt;li&gt;启动  &lt;code&gt;netty Server&lt;/code&gt;  : 实际上启动一个 Netty 服务。&lt;/li&gt;
&lt;li&gt;启动文件监听器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在启动过程中， &lt;code&gt;Broker&lt;/code&gt;  的健康检测是通过定时任务来实现的。那路由功能是怎么实现的呢？&lt;/p&gt;
&lt;p&gt;这就要看 在  &lt;code&gt;NameServer&lt;/code&gt;  中最重要的一个类了：  &lt;code&gt;DefaultRequetProcessor&lt;/code&gt;  .  &lt;code&gt;DefaultRequestProcessor&lt;/code&gt;  封装了各种连接请求的处理。比如 &lt;code&gt;Broker&lt;/code&gt;  的注册，根据 &lt;code&gt;Topic&lt;/code&gt;  获取路由信息等等。具体可以参考如下代码:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RemotingCommand &lt;span class=&#34;title&#34;&gt;processRequest&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ChannelHandlerContext ctx,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;        RemotingCommand request)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; RemotingCommandException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ctx != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.debug(&lt;span class=&#34;string&#34;&gt;&amp;quot;receive request, &amp;#123;&amp;#125; &amp;#123;&amp;#125; &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                request.getCode(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (request.getCode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.PUT_KV_CONFIG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.putKVConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_KV_CONFIG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getKVConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.DELETE_KV_CONFIG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.deleteKVConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.QUERY_DATA_VERSION:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; queryBrokerTopicConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.REGISTER_BROKER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Version brokerVersion = MQVersion.value2Version(request.getVersion());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (brokerVersion.ordinal() &amp;gt;= MQVersion.Version.V3_0_11.ordinal()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.registerBrokerWithFilterServer(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.registerBroker(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.UNREGISTER_BROKER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.unregisterBroker(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_ROUTEINFO_BY_TOPIC:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getRouteInfoByTopic(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_BROKER_CLUSTER_INFO:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getBrokerClusterInfo(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.WIPE_WRITE_PERM_OF_BROKER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.wipeWritePermOfBroker(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_ALL_TOPIC_LIST_FROM_NAMESERVER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getAllTopicListFromNameserver(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.DELETE_TOPIC_IN_NAMESRV:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; deleteTopicInNamesrv(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_KVLIST_BY_NAMESPACE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getKVListByNamespace(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_TOPICS_BY_CLUSTER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getTopicsByCluster(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_NS:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getSystemTopicListFromNs(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_UNIT_TOPIC_LIST:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getUnitTopicList(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_HAS_UNIT_SUB_TOPIC_LIST:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getHasUnitSubTopicList(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getHasUnitSubUnUnitTopicList(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.UPDATE_NAMESRV_CONFIG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.updateConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; RequestCode.GET_NAMESRV_CONFIG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.getConfig(ctx, request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码里实现了所有的 &lt;code&gt;Broker&lt;/code&gt; ， &lt;code&gt;Producer&lt;/code&gt; ， &lt;code&gt;Customer&lt;/code&gt;  和 &lt;code&gt;NameServer&lt;/code&gt;  交互的处理逻辑，包括路由功能等等。&lt;/p&gt;
&lt;h3 id=&#34;nameserver的关闭&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver的关闭&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NameServer&lt;/code&gt;  的关闭&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NameServer&lt;/code&gt;  的关闭就非常简单了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NameSrvStartUp&lt;/code&gt;  在  &lt;code&gt;initialize&lt;/code&gt;  和  &lt;code&gt;start&lt;/code&gt;  之间，加入了 一个 关闭事件的监听器.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 添加关闭的回调。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Runtime.getRuntime().addShutdownHook(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ShutdownHookThread(log, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Callable&amp;lt;Void&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Void &lt;span class=&#34;title&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        controller.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内部是使用  &lt;code&gt;NameSrvController&lt;/code&gt;  的 &lt;code&gt;shutdown&lt;/code&gt;  方法。&lt;br&gt;
主要进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭 &lt;code&gt;Netty&lt;/code&gt;  服务&lt;/li&gt;
&lt;li&gt;关闭线程池&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;scheduledExecutorService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关闭文件监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;broker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker&#34;&gt;#&lt;/a&gt; Broker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Broker&lt;/code&gt;  的启动过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Broker&lt;/code&gt;  怎么样进行消息存储的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Broker&lt;/code&gt;  的内部运行原理是什么样的？&lt;/li&gt;
&lt;li&gt;关闭流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;RocketMQ&lt;/code&gt;  的  &lt;code&gt;Broker&lt;/code&gt;  这个启动环节下，我们可以直接找到 &lt;a href=&#34;https://gitee.com/fangjiaxiaobai/source_code_read/blob/master/rocketmq/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java&#34;&gt; &lt;code&gt;BrokerStartUp.java&lt;/code&gt; &lt;/a&gt; 这个类。&lt;/p&gt;
&lt;h3 id=&#34;broker的启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker的启动过程&#34;&gt;#&lt;/a&gt; Broker 的启动过程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Broker&lt;/code&gt;  的启动本质上是启动了 一个 &lt;code&gt;Netty&lt;/code&gt;  服务端和一个 &lt;code&gt;Netty&lt;/code&gt;  客户端。 使用 &lt;code&gt;Netty&lt;/code&gt;  客户端完成向 &lt;code&gt;NameSrv&lt;/code&gt;  的注册，心跳检测，等数据交互。 使用 &lt;code&gt;Netty&lt;/code&gt;  服务端处理  &lt;code&gt;Producer&lt;/code&gt;  发送的消息，并将消息按照不同的消息类型存储下来。&lt;/p&gt;
&lt;p&gt;首先  &lt;code&gt;Broker&lt;/code&gt;  依然还是会加载  &lt;code&gt;Broker&lt;/code&gt;  的相关配置，包括：a. 命令行中指定的参数，比如 &lt;code&gt;mqbroker&lt;/code&gt; ,-c 等， b. &lt;code&gt;-c&lt;/code&gt;  指定的文件中的 &lt;code&gt;Broker&lt;/code&gt;  属性。然后根据加载的 &lt;code&gt;NettyServerConfig&lt;/code&gt;  (启动的 &lt;code&gt;Netty&lt;/code&gt;  服务端的配置), &lt;code&gt;NettyClientConfig&lt;/code&gt;  (启动的 &lt;code&gt;Netty&lt;/code&gt;  客户端的配置),  &lt;code&gt;BrokerConfig&lt;/code&gt; ( &lt;code&gt;Broker&lt;/code&gt;  的配置),  &lt;code&gt;messageStoreConfig&lt;/code&gt;  (存储消息的配置) 创建  &lt;code&gt;BrokerController&lt;/code&gt; .  之后及时初始化 &lt;code&gt;BrokerController&lt;/code&gt; ，注册 &lt;code&gt;Shutdown&lt;/code&gt;  回调。最后启动 &lt;code&gt;BrokerController&lt;/code&gt; 。   &lt;code&gt;shutdown&lt;/code&gt;  回调其实没有什么可说的。我们再简单的看看初始化过程。&lt;/p&gt;
&lt;h4 id=&#34;初始化过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化过程&#34;&gt;#&lt;/a&gt; 初始化过程&lt;/h4&gt;
&lt;p&gt;初始化过程是一个  &lt;code&gt;&amp;quot;漫长&amp;quot;&lt;/code&gt;  的过程。一开始是在去加载一些数据，初始化会去加载 创建的 &lt;code&gt;topic&lt;/code&gt;  数据，消息的消费偏移量，广播组，消费过滤数据等的数据，然后创建  &lt;code&gt;MessageStore&lt;/code&gt;  对象，作用是存储消息。注意这个  &lt;code&gt;MessageStore&lt;/code&gt;  是支持插件的形式扩展的。 如果数据加载成功之后，就会启动  &lt;code&gt;netty&lt;/code&gt;  服务端。 代码中 启动了两个 netty 服务端:  &lt;code&gt;remotingServer&lt;/code&gt;  和  &lt;code&gt;fastRemotingServer&lt;/code&gt; 。然后就是初始化了一些线程池 用于注册 &lt;code&gt;Processor&lt;/code&gt; 。 在注册  &lt;code&gt;Processor&lt;/code&gt;  的过程中，可以看到  &lt;code&gt;fastRemotingServer&lt;/code&gt;  和  &lt;code&gt;remotingServer&lt;/code&gt;  除了端口不一样之外，  &lt;code&gt;fastRemotingServer&lt;/code&gt;  没有 注册  &lt;code&gt;PullMessageProcessor&lt;/code&gt;  . 也就是说  &lt;code&gt;fastRemotingServer&lt;/code&gt;  不支持  &lt;code&gt;pullMessage&lt;/code&gt;  请求。然后  &lt;code&gt;BrokerController&lt;/code&gt;  创建很多的定时任务，比如：定时记录每天的消息数据，定时持久化消费者消息。定时持久化 消费者过滤时的数据情况 等。再就是 更新 &lt;code&gt;Broker&lt;/code&gt;  的 &lt;code&gt;NameServer&lt;/code&gt;  地址。 最后初始化事务，初始化权限，初始化 &lt;code&gt;RPC&lt;/code&gt;  钩子。&lt;/p&gt;
&lt;h4 id=&#34;启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动过程&#34;&gt;#&lt;/a&gt; 启动过程&lt;/h4&gt;
&lt;p&gt;在完了初识话之后，下一步就是启动了。和 &lt;code&gt;NameServer&lt;/code&gt;  一样的流程，先初始化，在 &lt;code&gt;start&lt;/code&gt; . 启动过程分为以下几步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动  &lt;code&gt;messageStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;remotingServer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;fastRemotingServer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动文件监听器&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;BrokerOutAPI&lt;/code&gt;  , 向  &lt;code&gt;NameServer&lt;/code&gt;  服务端发送相关请求的连接与断开等，定时扫描 &lt;code&gt;ResponseTable&lt;/code&gt;  并触发回调。&lt;/li&gt;
&lt;li&gt;启动 &lt;code&gt;PullRequestHoldService&lt;/code&gt; : 存储  &lt;code&gt;pull Message&lt;/code&gt;  的请求，并触发执行 &lt;code&gt;pull Message&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;启动定时任务，定时扫描不存活的生产者，消费者，消息过滤服务 (非 &lt;code&gt;tag&lt;/code&gt;  过滤)。&lt;/li&gt;
&lt;li&gt;启动消息过滤服务。 消息过滤服务并非是基于 &lt;code&gt;tag&lt;/code&gt;  的消息的过滤，而是在 &lt;code&gt;Broker&lt;/code&gt;  端提供了一种更加细粒度的消息过滤控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Broker&lt;/code&gt;  的容灾处理&lt;/li&gt;
&lt;li&gt;定时任务：注册  &lt;code&gt;Broker&lt;/code&gt;  到  &lt;code&gt;NameServer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动 &lt;code&gt;broker&lt;/code&gt;  统计，无动作&lt;/li&gt;
&lt;li&gt;清理过期请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关闭过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关闭过程&#34;&gt;#&lt;/a&gt; 关闭过程&lt;/h4&gt;
&lt;p&gt;这个关闭流程这里就不多说了，就是把上面启动的过程挨个关闭就好了。具体细节可以参考  &lt;code&gt;org.apache.rocketmq.broker.BrokerController#shutdown()&lt;/code&gt;  我们后面也会分析这部分的代码。 除了关闭上面启动的服务之外，在关闭的时候，需要将消息进行持久化。 比如  &lt;code&gt;ConsumerOffset&lt;/code&gt; ,  &lt;code&gt;ConsumerFilter&lt;/code&gt; , 这也是当服务再次启动时保证消息能够正常被消费的保障。&lt;/p&gt;
&lt;h2 id=&#34;producer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#producer&#34;&gt;#&lt;/a&gt; Producer&lt;/h2&gt;
&lt;p&gt;消息发布的角色，支持分布式集群方式部署。 &lt;code&gt;Producer&lt;/code&gt;  通过 MQ 的负载均衡模块选择相应的 &lt;code&gt;Broker&lt;/code&gt;  集群队列进行消息投递，投递的过程支持快速失败并且低延迟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们从最简单的一个示例来看，生产者的启动流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用GroupName初始化Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 指定NameSrv的地址: 也可以通过环境变量NAMESRV_ADDR来指定，则不需要下面这一行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;name-server1-ip:9876;name-server2-ip:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 启动实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建消息实例,指定 topic, tag, message body.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Topic */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Tag */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ !!&amp;quot;&lt;/span&gt;).getBytes(RemotingHelper.DEFAULT_CHARSET) &lt;span class=&#34;comment&#34;&gt;/* Message body */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 发送消息给Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SendResult sendResult = producer.send(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, sendResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 关闭生产者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 生产者角色，我们应该了解什么？或者说，看到上面的代码，你想更深入的知道些什么吗？(我听到了你说，不想…)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者是如何启动？启动过程中生产者都做了哪些事情？&lt;/li&gt;
&lt;li&gt;生产者是如何和 &lt;code&gt;Namesrv&lt;/code&gt;  进行交互的？交互是什么信息？生产者是如何和 &lt;code&gt;NameSrv&lt;/code&gt;  进行健康检查的？&lt;/li&gt;
&lt;li&gt;生产者是怎么样发送消息的？发送消息的过程是什么样的？&lt;/li&gt;
&lt;li&gt;生产者的关闭流程是什么样的？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生产者启动流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者启动流程&#34;&gt;#&lt;/a&gt; 生产者启动流程&lt;/h3&gt;
&lt;h4 id=&#34;封装生产者的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装生产者的属性&#34;&gt;#&lt;/a&gt; 封装生产者的属性&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过  &lt;code&gt;DefaultMQProducer&lt;/code&gt;  类创建一个生产者对象。 这个类我们打算发送消息的程序入口。需要注意的是：这个类的实例是&lt;strong&gt;线程安全&lt;/strong&gt;的：在配置并启动进程后，该类可以被视为线程安全的，可以在多个线程上下文中使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DefaultMQProducer&lt;/code&gt;  提供了 &lt;code&gt;5&lt;/code&gt;  个构造参数 ( &lt;code&gt;4.9.1&lt;/code&gt;  版本，并非在一个构造方式中)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String namespace&lt;/code&gt; : 生产者实例的命名空间。可以理解为 MQ 生产者的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String producerGroup&lt;/code&gt; : 生产者组。 生产者组在概念上聚合了完全相同角色的生产者实例。 这对事务消息非常重要。对非事务性消息就没有太大关系了。(=&amp;gt; 小白说：一类生产者。)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RPCHook rpcHook&lt;/code&gt; : 每个远程命令执行要执行的 RPC 回调。RPCHook 是一个接口，提供了两个方法 doBeforeRequest 和 doAfterResponse，表示在执行请求之前和接收返回之后分别执行相关逻辑；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean enableMsgTrace&lt;/code&gt; : 是否开启消息追踪&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String customizedTraceTopic&lt;/code&gt; : 消息追踪日志使用的队列名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String nameSrvAddr&lt;/code&gt; : 这个字段没有在构造方法中，我们可以手动调用 set 方法进行设置，也可以通过系统变量的形式进行设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生产者在设置完对应的参数之后，就会调用 &lt;code&gt;Start()&lt;/code&gt;  方法。  &lt;code&gt;start&lt;/code&gt;  方法会设置 &lt;code&gt;group&lt;/code&gt; , 然后调用在 构造方法中初始化的  &lt;code&gt;defaultMQProducerImpl&lt;/code&gt;  实例。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-DefaultProducerImpl%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者首先会检查  &lt;code&gt;producerGroup&lt;/code&gt;  的合法性。&lt;/li&gt;
&lt;li&gt;然后设置 &lt;code&gt;ProducerGroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建  &lt;code&gt;MQClientFactory&lt;/code&gt; . 将 &lt;code&gt;producer&lt;/code&gt;  注册到 &lt;code&gt;MQClientInstance&lt;/code&gt;  中，&lt;/li&gt;
&lt;li&gt;初始化 &lt;code&gt;topicPushlishInfo&lt;/code&gt; .  &lt;code&gt;topicPushlishInfo&lt;/code&gt;  主要用于存放消息的路由信息。&lt;/li&gt;
&lt;li&gt;然后通过  &lt;code&gt;mQClientFactory.start()&lt;/code&gt;  完成启动，这一步骤很重要，我们来看一下里面的具体实现.&lt;br&gt;
&lt;img data-src=&#34;/images/rocketmq/2-01-MQInstance%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png&#34; alt=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;1. 首先会设置  &lt;code&gt;NameServerAddr&lt;/code&gt; 。前面有说过可以通过  &lt;code&gt;DefaultProducer&lt;/code&gt;  的 &lt;code&gt;setNameSrvAddr&lt;/code&gt;  方法手动设置，也可以通过系统变量的方式进行设置 &lt;code&gt;NameServer&lt;/code&gt;  的地址： &lt;code&gt;System.setProperty(&amp;quot;rocketmq.namesrv.domain&amp;quot;, &amp;quot;localhost&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2. 开启定时任务：总共启动了 &lt;code&gt;5&lt;/code&gt;  个定时器任务，分别是：定时更新 &lt;code&gt;NameServerAddr&lt;/code&gt;  信息，定时更新 &lt;code&gt;topic&lt;/code&gt;  的路由信息，定时清理下线的 &lt;code&gt;broker&lt;/code&gt; ，定时持久化 &lt;code&gt;Consumer&lt;/code&gt;  的 &lt;code&gt;Offset&lt;/code&gt;  信息，定时调整线程池；&lt;/li&gt;
&lt;li&gt;3. &lt;code&gt;pullMessageService&lt;/code&gt;  和 &lt;code&gt;rebalanceService&lt;/code&gt;  被用在消费端的两个服务类，分别是：从 &lt;code&gt;broker&lt;/code&gt;  拉取消息的服务和均衡消息队列服务，负责分配消费者可消费的消息队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步的发送心跳给所有的 &lt;code&gt;Broker&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;开启定时任务：定时扫描过期的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生产者发送消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者发送消息&#34;&gt;#&lt;/a&gt; 生产者发送消息&lt;/h3&gt;
&lt;p&gt;生产者启动完成之后，我们再看一下发送消息的过程:&lt;br&gt;
 发送消息的逻辑主要是在  &lt;code&gt;sendDefaultImpl&lt;/code&gt;  方法中。主要逻辑分成三步：1. 获取队列的路由信息，2. 获取  &lt;code&gt;MessageQueue&lt;/code&gt; , 3. 发送消息。&lt;/p&gt;
&lt;h4 id=&#34;获取队列路由信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取队列路由信息&#34;&gt;#&lt;/a&gt; 获取队列路由信息&lt;/h4&gt;
&lt;p&gt;在 启动生产者流程中，已经将 &lt;code&gt;topic&lt;/code&gt;  的路由信息存储到了  &lt;code&gt;topicPushlishInfo&lt;/code&gt;  中，并以  &lt;code&gt;producerGroup&lt;/code&gt;  为  &lt;code&gt;key&lt;/code&gt; ,  &lt;code&gt;topicPushlishInfo&lt;/code&gt;  为 Value ，存储到  &lt;code&gt;topicPublishInfoTable&lt;/code&gt;  这个 &lt;code&gt;Map&lt;/code&gt;  中。&lt;/p&gt;
&lt;p&gt;获取路由信息则是通过  &lt;code&gt;mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer)&lt;/code&gt;  获取的。此方法根据 &lt;code&gt;topic&lt;/code&gt;  获取路由信息，具体连接哪台 &lt;code&gt;nameServer&lt;/code&gt; ，会从列表中顺序的选择 &lt;code&gt;nameServer&lt;/code&gt; ，实现负载均衡；&lt;/p&gt;
&lt;h4 id=&#34;获取messagequeue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取messagequeue&#34;&gt;#&lt;/a&gt; 获取 &lt;code&gt;MessageQueue&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;获取  &lt;code&gt;MessageQueue&lt;/code&gt;  则是通过  &lt;code&gt;this.mqFaultStrategy.selectOneMessageQueue(tpInfo, lastBrokerName)&lt;/code&gt;  来实现的。  &lt;code&gt;MQFaultStrategy&lt;/code&gt;  这个类实现了选择  &lt;code&gt;MessageQueue&lt;/code&gt;  的策略。主要有四种策略:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;latencyFaultTolerance&lt;/code&gt; ：延迟容错对象，维护 &lt;code&gt;brokers&lt;/code&gt;  的延迟信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sendLatencyFaultEnable&lt;/code&gt; ：延迟容错开关，默认不开启；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latencyMax&lt;/code&gt; ：延迟级别数组；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notAvailableDuration&lt;/code&gt;  ：根据延迟级别，对应 &lt;code&gt;broker&lt;/code&gt;  不可用的时长；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获取 &lt;code&gt;MessageQueue&lt;/code&gt;  之后需要判定其对应的 &lt;code&gt;Broker&lt;/code&gt;  是否可用，同时也需要和当前指定的 &lt;code&gt;brokerName&lt;/code&gt;  进行匹配；如果没有获取到就选择一个延迟相对小的， &lt;code&gt;pickOneAtLeast&lt;/code&gt;  会做排序处理；如果都不行就直接获取一个 &lt;code&gt;MessageQueue&lt;/code&gt; ，不管其他条件了&lt;/p&gt;
&lt;h4 id=&#34;发送消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送消息&#34;&gt;#&lt;/a&gt; 发送消息&lt;/h4&gt;
&lt;p&gt;首先需要获取指定 &lt;code&gt;broker&lt;/code&gt;  的地址，这要才能创建 &lt;code&gt;channel&lt;/code&gt;  与 &lt;code&gt;broker&lt;/code&gt;  连接；然后就是一些 &lt;code&gt;hook&lt;/code&gt;  处理；接下来就是准备发送的消息头 &lt;code&gt;SendMessageRequestHeader&lt;/code&gt; ，最后根据不同的发送策略执行发送消息。&lt;/p&gt;
&lt;p&gt;之前的文章中说过， &lt;code&gt;RocketMQ&lt;/code&gt;  发送消息有三种方式：同步，异步和单向。具体的使用方法可以参考&lt;a href=&#34;./1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B.md&#34;&gt;这篇文章&lt;/a&gt;。在 &lt;code&gt;RocketMQ&lt;/code&gt;  的生产者端可以发送多种类型的消息包括：延迟消息，顺序消息以及事务消息， 各种消息的发送过程我会在后面通过源码仔细和大家一起学习～。&lt;/p&gt;
&lt;h3 id=&#34;生产者关闭流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者关闭流程&#34;&gt;#&lt;/a&gt; 生产者关闭流程&lt;/h3&gt;
&lt;p&gt;生产者的关闭主要有四步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消生产者的注册.&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;MqClient&lt;/code&gt; =&amp;gt; 主要是关闭生产者，关闭拉取消息服务，关闭定时任务服务，关闭远程 client，关闭负载均衡服务这 5 种服务。&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;Producer&lt;/code&gt;  的定时任务&lt;/li&gt;
&lt;li&gt;修改状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就完成了生产者的关闭流程。&lt;/p&gt;
&lt;h3 id=&#34;生产者总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者总结&#34;&gt;#&lt;/a&gt; 生产者总结&lt;/h3&gt;
&lt;p&gt;生产者首先需要设置 &lt;code&gt;namesrv&lt;/code&gt; ，或者指定其他方式更新 &lt;code&gt;namesrv&lt;/code&gt; ；然后从 &lt;code&gt;namesrv&lt;/code&gt;  获取 &lt;code&gt;topic&lt;/code&gt;  的路由信息，路由信息包括 &lt;code&gt;broker&lt;/code&gt;  以及 &lt;code&gt;Message Queue&lt;/code&gt;  等信息，同时将路由信息保存在本地内存中，方便下次使用；最后从 &lt;code&gt;Message Queue&lt;/code&gt;  列表中选择合适的 &lt;code&gt;Queue&lt;/code&gt;  发送消息，实现负载均衡；&lt;/p&gt;
&lt;h2 id=&#34;consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#consumer&#34;&gt;#&lt;/a&gt; Consumer&lt;/h2&gt;
&lt;p&gt;现在我们还剩下 消费者 的启动流程了。从一个简单的例子说起:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到使用 MQ 的消费者主要分成三部分： 1. 创建消费者对象，2. 配置消费的属性 nameServer, 消费起点，订阅主题，回调事件等。3. 启动消费者。&lt;/p&gt;
&lt;h3 id=&#34;consumer的启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#consumer的启动过程&#34;&gt;#&lt;/a&gt; Consumer 的启动过程&lt;/h3&gt;
&lt;p&gt;正如上文所说， 启动 &lt;code&gt;MQ&lt;/code&gt;  消费者主要分为三部分，我们主要讲述第一部分和第三部分：创建 &lt;code&gt;Consumer&lt;/code&gt;  对象，启动。&lt;/p&gt;
&lt;h4 id=&#34;创建-consumer-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建-consumer-对象&#34;&gt;#&lt;/a&gt; 创建 Consumer 对象&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  支持两种消息消费模式， &lt;code&gt;pull&lt;/code&gt;  模式 和  &lt;code&gt;push&lt;/code&gt;  模式。  &lt;code&gt;pull&lt;/code&gt;  模式是消费者主动拉取消息， &lt;code&gt;push&lt;/code&gt;  模式是  &lt;code&gt;broker&lt;/code&gt;  端主动推送消息给消息者端。可想而知， &lt;code&gt;push&lt;/code&gt;  模式是不管消费者端死活的，只要有消息就会推给消费者端，不管消费者是否能消费完。而 &lt;code&gt;pull&lt;/code&gt;  模式是不管 &lt;code&gt;Broker&lt;/code&gt;  端的，可能会造成消息积压的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  分别提供了 &lt;code&gt;pull&lt;/code&gt;  模式 和  &lt;code&gt;push&lt;/code&gt;  模式的消费者的支持。类结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-Consuomer%E7%B1%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中  &lt;code&gt;push&lt;/code&gt;  模式，提供了  &lt;code&gt;MQPushConsumer&lt;/code&gt; ( &lt;code&gt;DefaultMQPushConsumer&lt;/code&gt; ) 类来实现。  &lt;code&gt;pull&lt;/code&gt;  模式提供  &lt;code&gt;MQPullConsumer&lt;/code&gt; ( &lt;code&gt;DefaultMQPullConsumer&lt;/code&gt; ) 类来实现。但是这个已经标记为废弃，并在 &lt;code&gt;2022&lt;/code&gt;  年会移除，提供了  &lt;code&gt;LitePullConsumer&lt;/code&gt; ( &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt; ) 来实现 &lt;code&gt;Pull&lt;/code&gt;  模式。&lt;/p&gt;
&lt;h5 id=&#34;创建-defaultmqpushconsumer-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建-defaultmqpushconsumer-对象&#34;&gt;#&lt;/a&gt; 创建 DefaultMQPushConsumer 对象&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;DefaultMQPullConsumer&lt;/code&gt;  对象的构造参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;consumerGroup&lt;/code&gt; : 消费者组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; : 生产者的  &lt;code&gt;Namespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocateMessageQueueStrategy&lt;/code&gt; : 消息队列分配算法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rpcHook&lt;/code&gt; :  &lt;code&gt;rpc&lt;/code&gt;  的钩子，用在远程调用之前执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enableMsgTrace&lt;/code&gt; : 是否跟踪消息轨迹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customizedTraceTopic&lt;/code&gt; : 跟踪消息轨迹使用 &lt;code&gt;topic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;DefaultMQPushConsumer&lt;/code&gt;  的构造方法中会创建  &lt;code&gt;DefaultMQPushConsumerImpl&lt;/code&gt;  对象，我们后面所说的启动过程，其实就是  &lt;code&gt;DefaultMQPushConsumerImpl&lt;/code&gt;  的启动过程，即  &lt;code&gt;DefaultMQPushConsumerImpl.start()&lt;/code&gt; .&lt;/p&gt;
&lt;h5 id=&#34;创建-defaultlitepullconsumer-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建-defaultlitepullconsumer-对象&#34;&gt;#&lt;/a&gt; 创建  &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  对象的参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; : 生产者的命名空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;consumerGroup&lt;/code&gt; :  消费者组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rpcHook&lt;/code&gt; : RPC 的回调钩子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  的构造方法中会创建  &lt;code&gt;defaultLitePullConsumerImpl&lt;/code&gt;  对象。而后面的启动过程，即是  &lt;code&gt;DefaultLitePullConsumerImpl&lt;/code&gt;  的启动过程。即  &lt;code&gt;DefaultLitePullConsumerImpl.start()&lt;/code&gt; .&lt;/p&gt;
&lt;h4 id=&#34;启动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动&#34;&gt;#&lt;/a&gt; 启动&lt;/h4&gt;
&lt;p&gt;这里我再把使用 DefaultMQPushConsumer 消费消息的案例 粘贴到这里&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们主要看  &lt;code&gt;consumer.start()&lt;/code&gt;  内部的具体实现。&lt;/p&gt;
&lt;h5 id=&#34;push模式-defaultmqpushconsumerimplstart&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push模式-defaultmqpushconsumerimplstart&#34;&gt;#&lt;/a&gt; push 模式: DefaultMQPushConsumerImpl.start ()&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;检查必要的参数 &lt;code&gt;consumerGroup&lt;/code&gt; , 消费模式，消费起点，负载策略等。&lt;/li&gt;
&lt;li&gt;拷贝订阅关系，绑定到重试 &lt;code&gt;topic&lt;/code&gt; , 以防止消费者  &lt;code&gt;ack&lt;/code&gt;  失败。&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;MQClientInstance&lt;/code&gt;  实例。这里是一种单例模式。&lt;/li&gt;
&lt;li&gt;配置消费者再平衡的消费者组，消息模式，消息的分配策略，  &lt;code&gt;MQClientInstance&lt;/code&gt;  实例。&lt;/li&gt;
&lt;li&gt;实例化消息拉取的包装类 并注册消息过滤的钩子&lt;/li&gt;
&lt;li&gt;加载消息的消费偏移量。 如果是广播消息从本地获取偏移数据，如果是集群消息的话，则从远程获取偏移数据&lt;/li&gt;
&lt;li&gt;启动消息消费服务。这里只是启动消费服务，但是没有启动开始消费消息。&lt;/li&gt;
&lt;li&gt;绑定消费者  &lt;code&gt;group&lt;/code&gt;  和 消费者&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;MQ Client Instance&lt;/code&gt; . 这里，在生产者中也调用了  &lt;code&gt;mQClientFactory.start()&lt;/code&gt; ; 方法。有个疑问，为什么消费者会启动消息推送服务呢？因为在 &lt;code&gt;push&lt;/code&gt;  模式下，消费超时的消息会重新发送给 &lt;code&gt;Broker&lt;/code&gt; 。所以是会使用消息推送服务的.&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;NameServer&lt;/code&gt;  拉取 &lt;code&gt;topic&lt;/code&gt;  的订阅信息&lt;/li&gt;
&lt;li&gt;向 &lt;code&gt;Broker&lt;/code&gt;  校验客户端&lt;/li&gt;
&lt;li&gt;向所有的 &lt;code&gt;Broker&lt;/code&gt;  的 &lt;code&gt;master&lt;/code&gt;  节点发送心跳包，并上传 &lt;code&gt;FilterClass&lt;/code&gt;  源文件给 &lt;code&gt;FilterServer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;立即消费消息： 将当前 &lt;code&gt;consumer&lt;/code&gt;  负载得到的 &lt;code&gt;MessageQueue&lt;/code&gt;  全部添加到 &lt;code&gt;PullMessageService.pullRequestQueue&lt;/code&gt;  (阻塞队列) 然后 &lt;code&gt;PullMessageService&lt;/code&gt;  服务会开始拉取消息。消费消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;pull模式-defaultlitepullconsumerimplstart&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull模式-defaultlitepullconsumerimplstart&#34;&gt;#&lt;/a&gt;  &lt;code&gt;pull&lt;/code&gt;  模式:  &lt;code&gt;DefaultLitePullConsumerImpl.start()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;先看下  &lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  的一个简单使用:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/2-01-DefaultLitePullConsumer%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DefaultLitePullConsumer&lt;/code&gt;  的实现代码要比   &lt;code&gt;DefaultMQPushConsumer&lt;/code&gt;  的代码 规整很多。在  &lt;code&gt;start()&lt;/code&gt;  方法中定义了很多的子方法进行调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查属性配置是否合法。&lt;/li&gt;
&lt;li&gt;初始化  &lt;code&gt;MqClientInstance&lt;/code&gt; .
&lt;ul&gt;
&lt;li&gt;创建  &lt;code&gt;MQClientInstance&lt;/code&gt;  实例&lt;/li&gt;
&lt;li&gt;注册  &lt;code&gt;consumerGroup&lt;/code&gt;  和 当前消费者的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化 消息消费的 再平衡 服务。&lt;/li&gt;
&lt;li&gt;配置消费者再平衡的消费者组，消息模式，消息的分配策略，  &lt;code&gt;MQClientInstance&lt;/code&gt;  实例。&lt;/li&gt;
&lt;li&gt;实例化消息拉取的包装类 并注册消息过滤的钩子&lt;/li&gt;
&lt;li&gt;加载消息的消费偏移量。 如果是广播消息从本地获取偏移数据，如果是集群消息的话，则从远程获取偏移数据&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;MqClientInstance&lt;/code&gt;  实例
&lt;ul&gt;
&lt;li&gt;设置  &lt;code&gt;NameServer&lt;/code&gt;  的地址&lt;/li&gt;
&lt;li&gt;启动  &lt;code&gt;remoteClient&lt;/code&gt; . 底层使用的通讯框架是 &lt;code&gt;Netty&lt;/code&gt; ，提供了实现类 &lt;code&gt;NettyRemotingClient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启定时任务&lt;/li&gt;
&lt;li&gt;启动拉取消息的服务&lt;/li&gt;
&lt;li&gt;启动负载均衡服务&lt;/li&gt;
&lt;li&gt;启动推送消息的服务&lt;/li&gt;
&lt;li&gt;修改服务的状态为启动成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动后操作
&lt;ul&gt;
&lt;li&gt;如果是广播的模式：更新 &lt;code&gt;topic&lt;/code&gt;  的订阅关系&lt;/li&gt;
&lt;li&gt;更新消息拉取任务&lt;/li&gt;
&lt;li&gt;拉取 &lt;code&gt;Topic&lt;/code&gt;  的 &lt;code&gt;messageQueue&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;检查  &lt;code&gt;Broker Client&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;pull-模式-和-push-模式的对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull-模式-和-push-模式的对比&#34;&gt;#&lt;/a&gt; Pull 模式 和 push 模式的对比&lt;/h5&gt;
&lt;p&gt;现在去谈 push 和 pull 两种模式的对比，还为时尚早，我就先从启动上来看下，两种方式启动的不同点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;  模式没有拷贝订阅关系，也就是说  &lt;code&gt;pull&lt;/code&gt;  模式下， &lt;code&gt;RocketMQ&lt;/code&gt;  是没有提供重投机制的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;  模式没有和  &lt;code&gt;Broker&lt;/code&gt;  保持心跳包。 如果消费者过多的时候，push 模式必然会对 Broker 造成比较啊的压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消费者总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者总结&#34;&gt;#&lt;/a&gt; 消费者总结&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  对  &lt;code&gt;pull&lt;/code&gt;  和  &lt;code&gt;push&lt;/code&gt;  两种消息的消费模式提供了支持。 &lt;code&gt;pull&lt;/code&gt;  模式，对应的实现是  &lt;code&gt;DefaultMqLitePullConsumer&lt;/code&gt; 。  &lt;code&gt;push&lt;/code&gt;  模式对应的实现是  &lt;code&gt;DefaultMqPushConsumer&lt;/code&gt; . 仅仅对启动过程，两者的启动过程稍有不同。 &lt;code&gt;Push&lt;/code&gt;  模式下， &lt;code&gt;RocketMQ&lt;/code&gt;  封装了 消息消费的重投机制， &lt;code&gt;pull&lt;/code&gt;  模式则没有，一切都需要消费者自己去实现。  &lt;code&gt;push&lt;/code&gt;  模式会把 根据  &lt;code&gt;MessageQueue&lt;/code&gt;  的分配策略，将 &lt;code&gt;MessageQueue&lt;/code&gt;  拉取到本地，存储到阻塞队列中，然后通过回调消费者注册监听器进行消费。  &lt;code&gt;pull&lt;/code&gt;  模式则通过在消费逻辑中定时的轮询获取消息进行消费。  下一篇文章，我会仔细的分析消息消费的过程。&lt;/p&gt;
&lt;p&gt;不管是 &lt;code&gt;Pull&lt;/code&gt;  模式，还是 &lt;code&gt;push&lt;/code&gt;  模式，在启动过程都是 创建  &lt;code&gt;MqClientInstance&lt;/code&gt;  实例，并启动。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-28T02:26:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ样例:事务消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;p&gt;事务消息共有三种状态，提交状态、回滚状态、中间状态：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TransactionStatus.CommitTransaction&lt;/code&gt; : 提交事务，它允许消费者消费此消息。&lt;br&gt;
 &lt;code&gt;TransactionStatus.RollbackTransaction&lt;/code&gt; : 回滚事务，它代表该消息将被删除，不允许被消费。&lt;br&gt;
 &lt;code&gt;TransactionStatus.Unknown&lt;/code&gt; : 中间状态，它代表需要检查消息队列来确定状态。&lt;/p&gt;
&lt;h2 id=&#34;发送事务消息样例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送事务消息样例&#34;&gt;#&lt;/a&gt; 发送事务消息样例&lt;/h2&gt;
&lt;h3 id=&#34;创建事务性生产者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建事务性生产者&#34;&gt;#&lt;/a&gt; 创建事务性生产者&lt;/h3&gt;
&lt;p&gt;使用  &lt;code&gt;TransactionMQProducer&lt;/code&gt;  类创建生产者，并指定唯一的  &lt;code&gt;ProducerGroup&lt;/code&gt; ，就可以设置自定义线程池来处理这些检查请求。执行本地事务后、需要根据执行结果对消息队列进行回复。回传的事务状态在请参考前一节。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageExt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TransactionProducer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; MQClientException, InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       TransactionListener transactionListener = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TransactionListenerImpl();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       TransactionMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TransactionMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       ExecutorService executorService = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, TimeUnit.SECONDS, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Runnable&amp;gt;(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ThreadFactory() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Thread &lt;span class=&#34;title&#34;&gt;newThread&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Runnable r)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Thread thread = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Thread(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               thread.setName(&lt;span class=&#34;string&#34;&gt;&amp;quot;client-transaction-msg-check-thread&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.setExecutorService(executorService);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.setTransactionListener(transactionListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       String[] tags = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagB&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagC&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagD&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagE&amp;quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Message msg =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest1234&amp;quot;&lt;/span&gt;, tags[i % tags.length], &lt;span class=&#34;string&#34;&gt;&amp;quot;KEY&amp;quot;&lt;/span&gt; + i,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ &amp;quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               SendResult sendResult = producer.sendMessageInTransaction(msg, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, sendResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Thread.sleep(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (MQClientException | UnsupportedEncodingException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、实现事务的监听接口&lt;br&gt;
当发送半消息成功时，我们使用  &lt;code&gt;executeLocalTransaction&lt;/code&gt;  方法来执行本地事务。它返回前一节中提到的三个事务状态之一。 &lt;code&gt;checkLocalTransaction&lt;/code&gt;  方法用于检查本地事务状态，并回应消息队列的检查请求。它也是返回前一节中提到的三个事务状态之一。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TransactionListenerImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TransactionListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; AtomicInteger transactionIndex = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; AtomicInteger(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ConcurrentHashMap&amp;lt;String, Integer&amp;gt; localTrans = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LocalTransactionState &lt;span class=&#34;title&#34;&gt;executeLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg, Object arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; value = transactionIndex.getAndIncrement();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; status = value % &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      localTrans.put(msg.getTransactionId(), status);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; LocalTransactionState.UNKNOW;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LocalTransactionState &lt;span class=&#34;title&#34;&gt;checkLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MessageExt msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Integer status = localTrans.get(msg.getTransactionId());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; != status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; LocalTransactionState.UNKNOW;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; LocalTransactionState.COMMIT_MESSAGE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; LocalTransactionState.ROLLBACK_MESSAGE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; LocalTransactionState.COMMIT_MESSAGE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;事务消息使用上的限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务消息使用上的限制&#34;&gt;#&lt;/a&gt; 事务消息使用上的限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;事务消息不支持延时消息和批量消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为  &lt;code&gt;15&lt;/code&gt;  次，但是用户可以通过  &lt;code&gt;Broker&lt;/code&gt;  配置文件的  &lt;code&gt;transactionCheckMax&lt;/code&gt;  参数来修改此限制。如果已经检查某条消息超过  &lt;code&gt;N&lt;/code&gt;  次的话（  &lt;code&gt;N = transactionCheckMax&lt;/code&gt;  ） 则  &lt;code&gt;Broker&lt;/code&gt;  将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写  &lt;code&gt;AbstractTransactionalMessageCheckListener&lt;/code&gt;  类来修改这个行为。&lt;/p&gt;
&lt;p&gt;事务消息将在  &lt;code&gt;Broker&lt;/code&gt;  配置文件中的参数  &lt;code&gt;transactionTimeout&lt;/code&gt;  这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性  &lt;code&gt;CHECK_IMMUNITY_TIME_IN_SECONDS&lt;/code&gt;  来改变这个限制，该参数优先于  &lt;code&gt;transactionTimeout&lt;/code&gt;  参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务性消息可能不止一次被检查或消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过  &lt;code&gt;RocketMQ&lt;/code&gt;  本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。&lt;br&gt;
事务消息的生产者  &lt;code&gt;ID&lt;/code&gt;  不能与其他类型消息的生产者  &lt;code&gt;ID&lt;/code&gt;  共享。与其他类型的消息不同，事务消息允许反向查询、 &lt;code&gt;MQ&lt;/code&gt;  服务器能通过它们的生产者  &lt;code&gt;ID&lt;/code&gt;  查询到消费者。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-23T09:50:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ样例:过滤消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;p&gt;在大多数情况下， &lt;code&gt;TAG&lt;/code&gt;  是一个简单而有用的设计，其可以来选择您想要的消息。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;CID_EXAMPLE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TOPIC&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TAGA || TAGB || TAGC&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;消费者将接收包含 &lt;code&gt;TAGA&lt;/code&gt;  或 &lt;code&gt;TAGB&lt;/code&gt;  或 &lt;code&gt;TAGC&lt;/code&gt;  的消息。但是限制是一个消息只能有一个标签，这对于复杂的场景可能不起作用。在这种情况下，可以使用 &lt;code&gt;SQL&lt;/code&gt;  表达式筛选消息。SQL 特性可以通过发送消息时的属性来进行计算。在 &lt;code&gt;RocketMQ&lt;/code&gt;  定义的语法下，可以实现一些简单的逻辑。下面是一个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| message  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|----------|  a &amp;gt; 5 AND b = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| a = 10   |  --------------------&amp;gt; Gotten&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| b = &amp;#x27;abc&amp;#x27;|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| c = true |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| message  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|----------|   a &amp;gt; 5 AND b = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| a = 1    |  --------------------&amp;gt; Missed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| b = &amp;#x27;abc&amp;#x27;|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| c = true |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;基本语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本语法&#34;&gt;#&lt;/a&gt; 基本语法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;  只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数值比较，比如： &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;=&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;=&lt;/code&gt; ， &lt;code&gt;BETWEEN&lt;/code&gt; ， &lt;code&gt;=&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;字符比较，比如： &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;IN&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IS NULL &lt;/code&gt; 或者  &lt;code&gt;IS NOT NUL&lt;/code&gt; L；&lt;/li&gt;
&lt;li&gt;逻辑符号  &lt;code&gt;AND&lt;/code&gt; ， &lt;code&gt;OR&lt;/code&gt; ， &lt;code&gt;NOT&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;常量支持类型为：&lt;/li&gt;
&lt;li&gt;数值，比如： &lt;code&gt;123&lt;/code&gt; ， &lt;code&gt;3.1415&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;字符，比如： &lt;code&gt;&#39;abc&#39;&lt;/code&gt; ，必须用单引号包裹起来；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt; ，特殊的常量&lt;/li&gt;
&lt;li&gt;布尔值， &lt;code&gt;TRUE&lt;/code&gt;  或  &lt;code&gt;FALSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只有使用 &lt;code&gt;push&lt;/code&gt;  模式的消费者才能用使用 &lt;code&gt;SQL92&lt;/code&gt;  标准的 &lt;code&gt;sql&lt;/code&gt;  语句，接口如下： &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(finalString topic, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; MessageSelector messageSelector)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用样例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用样例&#34;&gt;#&lt;/a&gt; 使用样例&lt;/h2&gt;
&lt;h3 id=&#34;生产者样例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者样例&#34;&gt;#&lt;/a&gt; 生产者样例&lt;/h3&gt;
&lt;p&gt;发送消息时，你能通过 &lt;code&gt;putUserProperty&lt;/code&gt;  来设置消息的属性&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   tag,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ &amp;quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 设置一些属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;msg.putUserProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, String.valueOf(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SendResult sendResult = producer.send(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;消费者样例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者样例&#34;&gt;#&lt;/a&gt; 消费者样例&lt;/h3&gt;
&lt;p&gt;用 &lt;code&gt;MessageSelector.bySql&lt;/code&gt;  来使用 &lt;code&gt;sql&lt;/code&gt;  筛选消息&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name_4&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 只有订阅的消息有这个属性a, a &amp;gt;=0 and a &amp;lt;= 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, MessageSelector.bySql(&lt;span class=&#34;string&#34;&gt;&amp;quot;a between 0 and 3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;consumer.registerMessageListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageListenerConcurrently() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ConsumeConcurrentlyStatus &lt;span class=&#34;title&#34;&gt;consumeMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeConcurrentlyContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;consumer.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-23T09:30:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ样例:批量消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;h2 id=&#34;批量消息样例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#批量消息样例&#34;&gt;#&lt;/a&gt; 批量消息样例&lt;/h2&gt;
&lt;p&gt;批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的 &lt;code&gt;topic&lt;/code&gt; ，相同的 &lt;code&gt;waitStoreMsgOK&lt;/code&gt; ，而且不能是延时消息。此外，这一批消息的总大小不应超过 &lt;code&gt;4MB&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;发送批量消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送批量消息&#34;&gt;#&lt;/a&gt; 发送批量消息&lt;/h2&gt;
&lt;p&gt;如果您每次只发送不超过 &lt;code&gt;4MB&lt;/code&gt;  的消息，则很容易使用批处理，样例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String topic = &lt;span class=&#34;string&#34;&gt;&amp;quot;BatchTest&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Message&amp;gt; messages = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;messages.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(topic, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;OrderID001&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world 0&amp;quot;&lt;/span&gt;.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;messages.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(topic, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;OrderID002&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world 1&amp;quot;&lt;/span&gt;.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;messages.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(topic, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;OrderID003&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world 2&amp;quot;&lt;/span&gt;.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   producer.send(messages);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;//处理error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;消息列表分割&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息列表分割&#34;&gt;#&lt;/a&gt; 消息列表分割&lt;/h2&gt;
&lt;p&gt;复杂度只有当你发送大批量时才会增长，你可能不确定它是否超过了大小限制（ &lt;code&gt;4MB&lt;/code&gt; ）。这时候你最好把你的消息列表分割一下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ListSplitter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Iterator&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;Message&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; SIZE_LIMIT = &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; List&amp;lt;Message&amp;gt; messages;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; currIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ListSplitter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;Message&amp;gt; messages)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.messages = messages;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; currIndex &amp;lt; messages.size(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Message&amp;gt; &lt;span class=&#34;title&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; startIndex = getStartIndex();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; nextIndex = startIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; totalSize = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; nextIndex &amp;lt; messages.size(); nextIndex++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Message message = messages.get(nextIndex); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; tmpSize = calcMessageSize(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (tmpSize + totalSize &amp;gt; SIZE_LIMIT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                totalSize += tmpSize; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Message&amp;gt; subList = messages.subList(startIndex, nextIndex); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        currIndex = nextIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; subList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getStartIndex&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Message currMessage = messages.get(currIndex); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; tmpSize = calcMessageSize(currMessage); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(tmpSize &amp;gt; SIZE_LIMIT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            currIndex += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Message message = messages.get(curIndex); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmpSize = calcMessageSize(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; currIndex; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;calcMessageSize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; tmpSize = message.getTopic().length() + message.getBody().length(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Map&amp;lt;String, String&amp;gt; properties = message.getProperties();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, String&amp;gt; entry : properties.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmpSize += entry.getKey().length() + entry.getValue().length(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmpSize = tmpSize + &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 增加⽇日志的开销20字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; tmpSize; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//把大的消息分裂成若干个小的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ListSplitter splitter = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListSplitter(messages);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (splitter.hasNext()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      List&amp;lt;Message&amp;gt;  listItem = splitter.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      producer.send(listItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;//处理error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-23T09:19:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ样例:延时消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;h2 id=&#34;启动消费者等待传入订阅消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动消费者等待传入订阅消息&#34;&gt;#&lt;/a&gt; 启动消费者等待传入订阅消息&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageExt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ScheduledMessageConsumer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 实例化消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExampleConsumer&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 订阅Topics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TestTopic&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 注册消息监听者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      consumer.registerMessageListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageListenerConcurrently() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ConsumeConcurrentlyStatus &lt;span class=&#34;title&#34;&gt;consumeMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageExt&amp;gt; messages, ConsumeConcurrentlyContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (MessageExt message : messages) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;comment&#34;&gt;// Print approximate delay time period&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Receive message[msgId=&amp;quot;&lt;/span&gt; + message.getMsgId() + &lt;span class=&#34;string&#34;&gt;&amp;quot;] &amp;quot;&lt;/span&gt; + (System.currentTimeMillis() - message.getBornTimestamp()) + &lt;span class=&#34;string&#34;&gt;&amp;quot;ms later&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 启动消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      consumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;发送延时消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送延时消息&#34;&gt;#&lt;/a&gt; 发送延时消息&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.producer.DefaultMQProducer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.Message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ScheduledMessageProducer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 实例化一个生产者来产生延时消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExampleProducerGroup&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 启动生产者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; totalMessagesToSend = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; totalMessagesToSend; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          Message message = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TestTopic&amp;quot;&lt;/span&gt;, (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello scheduled message &amp;quot;&lt;/span&gt; + i).getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;comment&#34;&gt;// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          message.setDelayTimeLevel(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;comment&#34;&gt;// 发送消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          producer.send(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;// 关闭生产者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;验证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证&#34;&gt;#&lt;/a&gt; 验证&lt;/h2&gt;
&lt;p&gt;您将会看到消息的消费比存储时间晚 &lt;code&gt;10&lt;/code&gt;  秒。&lt;/p&gt;
&lt;h2 id=&#34;延时消息的使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#延时消息的使用场景&#34;&gt;#&lt;/a&gt; 延时消息的使用场景&lt;/h2&gt;
&lt;p&gt;比如电商里，提交了一个订单就可以发送一个延时消息， &lt;code&gt;1h&lt;/code&gt;  后去检查这个订单的状态，如果还是未付款就取消订单释放库存。&lt;/p&gt;
&lt;h2 id=&#34;延时消息的使用限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#延时消息的使用限制&#34;&gt;#&lt;/a&gt; 延时消息的使用限制&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// org/apache/rocketmq/store/config/MessageStoreConfig.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String messageDelayLevel = &lt;span class=&#34;string&#34;&gt;&amp;quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在 &lt;code&gt;RocketMq&lt;/code&gt;  并不支持任意时间的延时，需要设置几个固定的延时等级，从 &lt;code&gt;1s&lt;/code&gt;  到 &lt;code&gt;2h&lt;/code&gt;  分别对应着等级 1 到 18 消息消费失败会进入延时消息队列，消息发送时间与设置的延时等级和重试次数有关，详见代码 &lt;code&gt;SendMessageProcessor.java&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-23T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/</id>
        <title>RocketMQ样例:全局顺序消息</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/"/>
        <content type="html">&lt;p&gt;消息有序指的是可以按照消息的发送顺序来消费 ( &lt;code&gt;FIFO&lt;/code&gt; )。 &lt;code&gt;RocketMQ&lt;/code&gt;  可以严格的保证消息有序，可以分为分区有序或者全局有序。&lt;/p&gt;
&lt;p&gt;顺序消费的原理解析：在默认的情况下消息发送会采取 &lt;code&gt;Round Robin&lt;/code&gt;  轮询方式把消息发送到不同的 &lt;code&gt;queue&lt;/code&gt;  (分区队列)；而消费消息的时候从多个 &lt;code&gt;queue&lt;/code&gt;  上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个 &lt;code&gt;queue&lt;/code&gt;  中，消费的时候只从这个 &lt;code&gt;queue&lt;/code&gt;  上依次拉取，则就保证了顺序。当发送和消费参与的 &lt;code&gt;queue&lt;/code&gt;  只有一个，则是全局有序；如果多个 &lt;code&gt;queue&lt;/code&gt;  参与，则为分区有序，即相对每个 &lt;code&gt;queue&lt;/code&gt; ，消息都是有序的。&lt;/p&gt;
&lt;p&gt;下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个 OrderId 获取到的肯定是同一个队列。&lt;/p&gt;
&lt;p&gt;2.1 顺序消息生产&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.apache.rocketmq.example.order2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.producer.DefaultMQProducer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.producer.MessageQueueSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.producer.SendResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.Message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* Producer，发送顺序消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Producer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       String[] tags = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagC&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagD&amp;quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;// 订单列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       List&amp;lt;OrderStep&amp;gt; orderList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Producer().buildOrders();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       Date date = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Date();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       SimpleDateFormat sdf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&#34;string&#34;&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       String dateStr = sdf.format(date);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;comment&#34;&gt;// 加个时间前缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           String body = dateStr + &lt;span class=&#34;string&#34;&gt;&amp;quot; Hello RocketMQ &amp;quot;&lt;/span&gt; + orderList.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, tags[i % tags.length], &lt;span class=&#34;string&#34;&gt;&amp;quot;KEY&amp;quot;&lt;/span&gt; + i, body.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           SendResult sendResult = producer.send(msg, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageQueueSelector() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MessageQueue &lt;span class=&#34;title&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageQueue&amp;gt; mqs, Message msg, Object arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   Long id = (Long) arg;  &lt;span class=&#34;comment&#34;&gt;//根据订单id选择发送queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; index = id % mqs.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mqs.get((&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) index);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;, orderList.get(i).getOrderId());&lt;span class=&#34;comment&#34;&gt;//订单id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           System.out.println(String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;SendResult status:%s, queueId:%d, body:%s&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               sendResult.getSendStatus(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               sendResult.getMessageQueue().getQueueId(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               body));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    * 订单的步骤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OrderStep&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; orderId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getOrderId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; orderId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setOrderId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; orderId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.orderId = orderId;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getDesc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setDesc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String desc)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;OrderStep&amp;#123;&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;string&#34;&gt;&amp;quot;orderId=&amp;quot;&lt;/span&gt; + orderId +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;string&#34;&gt;&amp;quot;, desc=&amp;#x27;&amp;quot;&lt;/span&gt; + desc + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    * 生成模拟订单数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; List&amp;lt;OrderStep&amp;gt; &lt;span class=&#34;title&#34;&gt;buildOrders&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       List&amp;lt;OrderStep&amp;gt; orderList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;OrderStep&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       OrderStep orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111039L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;创建&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111065L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;创建&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111039L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;付款&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103117235L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;创建&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111065L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;付款&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103117235L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;付款&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111065L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;完成&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111039L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;推送&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103117235L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;完成&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OrderStep();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setOrderId(&lt;span class=&#34;number&#34;&gt;15103111039L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderDemo.setDesc(&lt;span class=&#34;string&#34;&gt;&amp;quot;完成&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       orderList.add(orderDemo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; orderList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.2 顺序消费消息&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.apache.rocketmq.example.order2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.consumer.ConsumeFromWhere;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageExt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Random;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.concurrent.TimeUnit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 顺序消息消费，带事务方式（应用可控制Offset什么时候提交）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerInOrder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name_3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       consumer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;        * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;        * 如果非第一次启动，那么按照上次消费的位置继续消费&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA || TagC || TagD&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       consumer.registerMessageListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageListenerOrderly() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Random random = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ConsumeOrderlyStatus &lt;span class=&#34;title&#34;&gt;consumeMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeOrderlyContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               context.setAutoCommit(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (MessageExt msg : msgs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;comment&#34;&gt;// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;consumeThread=&amp;quot;&lt;/span&gt; + Thread.currentThread().getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot;queueId=&amp;quot;&lt;/span&gt; + msg.getQueueId() + &lt;span class=&#34;string&#34;&gt;&amp;quot;, content:&amp;quot;&lt;/span&gt; + &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(msg.getBody()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;comment&#34;&gt;//模拟业务逻辑处理中...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   TimeUnit.SECONDS.sleep(random.nextInt(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ConsumeOrderlyStatus.SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       consumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Consumer Started.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h1&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-06T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/</id>
        <title>RocketMQ样例:基本的消息生产和消费</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/"/>
        <content type="html">&lt;p&gt;首先我们来学习一个简单的消费生产和消费的 case.&lt;/p&gt;
&lt;h2 id=&#34;生产消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产消息&#34;&gt;#&lt;/a&gt; 生产消息&lt;/h2&gt;
&lt;p&gt;RocketMQ， 给我们提供了三种简单的消息生产方式，1. 同步发送， 2. 异步发送， 3. 直接发送，不关心发送结果。&lt;/p&gt;
&lt;p&gt;这三种方式，分别对应三种不同的应用场景&lt;/p&gt;
&lt;h3 id=&#34;同步发送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步发送&#34;&gt;#&lt;/a&gt; 同步发送&lt;/h3&gt;
&lt;p&gt;这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。这种发送方式，在发送成功之后，才会返回，否则会一直阻塞，直到抛出异常。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SyncProducer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消息生产者Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.65:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 启动Producer实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	    &lt;span class=&#34;comment&#34;&gt;// 创建消息，并指定Topic，Tag和消息体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	    Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Topic */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Tag */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ &amp;quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET) &lt;span class=&#34;comment&#34;&gt;/* Message body */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;comment&#34;&gt;// 发送消息到一个Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SendResult sendResult = producer.send(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 通过sendResult返回消息是否成功送达&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, sendResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 如果不再发送消息，关闭Producer实例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;异步发送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步发送&#34;&gt;#&lt;/a&gt; 异步发送&lt;/h3&gt;
&lt;p&gt;异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待 Broker 的响应。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncProducer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消息生产者Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.65:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 启动Producer实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.setRetryTimesWhenSendAsyncFailed(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; messageCount = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据消息数量实例化倒计时计算器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CountDownLatch2 countDownLatch = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CountDownLatch2(messageCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; messageCount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            	&lt;span class=&#34;comment&#34;&gt;// 创建消息，并指定Topic，Tag和消息体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;quot;OrderID188&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;.getBytes(RemotingHelper.DEFAULT_CHARSET));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// SendCallback接收异步返回结果的回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                producer.send(msg, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SendCallback() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SendResult sendResult)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%-10d OK %s %n&amp;quot;&lt;/span&gt;, index,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            sendResult.getMsgId());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      	              System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%-10d Exception %s %n&amp;quot;&lt;/span&gt;, index, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      	              e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 等待5s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	countDownLatch.await(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, TimeUnit.SECONDS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 如果不再发送消息，关闭Producer实例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;单向发送消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单向发送消息&#34;&gt;#&lt;/a&gt; 单向发送消息&lt;/h3&gt;
&lt;p&gt;这种方式主要用在不特别关心发送结果的场景，例如日志发送。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnewayProducer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消息生产者Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.65:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 启动Producer实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;comment&#34;&gt;// 创建消息，并指定Topic，Tag和消息体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Topic */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Tag */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                (&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ &amp;quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET) &lt;span class=&#34;comment&#34;&gt;/* Message body */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;comment&#34;&gt;// 发送单向消息，没有任何返回结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	producer.sendOneway(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 如果不再发送消息，关闭Producer实例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;消息消费&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息消费&#34;&gt;#&lt;/a&gt; 消息消费&lt;/h2&gt;
&lt;h3 id=&#34;push-模式-消费&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push-模式-消费&#34;&gt;#&lt;/a&gt; Push 模式 消费&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Consumer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException, MQClientException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.65:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 注册回调实现类来处理从broker拉取回来的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.registerMessageListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageListenerConcurrently() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ConsumeConcurrentlyStatus &lt;span class=&#34;title&#34;&gt;consumeMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeConcurrentlyContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s Receive New Messages: %s %n&amp;quot;&lt;/span&gt;, Thread.currentThread().getName(), msgs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 标记该消息已经被成功消费&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 启动消费者实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;Consumer Started.%n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;pull-模式消费-assign&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull-模式消费-assign&#34;&gt;#&lt;/a&gt; Pull 模式消费 - Assign&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Collection;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageExt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LitePullConsumerAssign&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; running = &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建 LitePullConsumer 实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultLitePullConsumer litePullConsumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultLitePullConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 不自动提交 消息消费的偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.setAutoCommit(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 启动消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 拉取topicTest的MessageQueue列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Collection&amp;lt;MessageQueue&amp;gt; mqSet = litePullConsumer.fetchMessageQueues(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;MessageQueue&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(mqSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;MessageQueue&amp;gt; assignList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; list.size() / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            assignList.add(list.get(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 本消费分配的 MessageQueue 列表。本消费者只会消费assignList中的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.assign(assignList);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 改变下一次拉取时，消息的偏移量。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.seek(assignList.get(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (running) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 消息拉取 API，默认超时时间为 5s。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                List&amp;lt;MessageExt&amp;gt; messageExts = litePullConsumer.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s %n&amp;quot;&lt;/span&gt;, messageExts);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 提交偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                litePullConsumer.commitSync();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            litePullConsumer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;pull-模式消费-subcribe&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull-模式消费-subcribe&#34;&gt;#&lt;/a&gt; Pull 模式消费 - SUBCRIBE&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.consumer.ConsumeFromWhere;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.rocketmq.common.message.MessageExt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LitePullConsumerSubscribe&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; running = &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultLitePullConsumer litePullConsumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultLitePullConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;lite_pull_consumer_test&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        litePullConsumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (running) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                List&amp;lt;MessageExt&amp;gt; messageExts = litePullConsumer.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, messageExts);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            litePullConsumer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h1&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-04T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/</id>
        <title>RocketMQ系列-在Java应用中的使用</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/"/>
        <content type="html">&lt;p&gt;上一篇文章中我们成功地搭建了几种 RocketMQ 的部署方式。&lt;br&gt;
这篇文章，我们就来看一下 RocketMQ 所支持的消息类型在 Java 应用中的使用。&lt;/p&gt;
&lt;h2 id=&#34;加入依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加入依赖&#34;&gt;#&lt;/a&gt; 加入依赖&lt;/h2&gt;
&lt;p&gt;在上一篇文章中，我们已经使用过 RocketMQ 进行收发消息了。这一篇呢，我从头开始来学习使用 RocketMQ.&lt;/p&gt;
&lt;p&gt;首先，引入 Maven 依赖，&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.rocketmq&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;rocketmq-client&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.9.1&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你使用 &lt;code&gt;gradle&lt;/code&gt; ， 则使用  &lt;code&gt;compile &#39;org.apache.rocketmq:rocketmq-client:4.9.1&#39;&lt;/code&gt;  即可。&lt;/p&gt;
&lt;h2 id=&#34;消息类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息类型&#34;&gt;#&lt;/a&gt; 消息类型&lt;/h2&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; &lt;a href=&#34;./1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B.md&#34;&gt;基本样例 - 基本的消息收发案例&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; &lt;a href=&#34;./1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF.md&#34;&gt;顺序消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_2&#34;&gt; &lt;a href=&#34;./1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF.md&#34;&gt;延时消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_3&#34;&gt; &lt;a href=&#34;./1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF.md&#34;&gt;批量消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_4&#34;&gt; &lt;a href=&#34;./1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF.md&#34;&gt;过滤消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_5&#34;&gt; &lt;a href=&#34;./1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF.md&#34;&gt;事务消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h1&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./images/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-04T09:14:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/</id>
        <title>RocketMQ系列-搭建RocketMQ集群</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h1 id=&#34;搭建rocketmq集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搭建rocketmq集群&#34;&gt;#&lt;/a&gt; 搭建 RocketMQ 集群&lt;/h1&gt;
&lt;p&gt;根据之前的了解，我们已经知道了 RocketMQ 可以单机部署，支持集群部署。&lt;/p&gt;
&lt;p&gt;RocketMQ 支持以下集中部署方式  &lt;code&gt;1.单Master模式部署&lt;/code&gt; ， &lt;code&gt;2.多Master模式部署&lt;/code&gt; ， &lt;code&gt;3.多Master多Slaver模式部署&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;单master模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单master模式&#34;&gt;#&lt;/a&gt; 单 Master 模式&lt;/h2&gt;
&lt;p&gt;这种方式风险较大，一旦 Broker 重启或者宕机时，会导致整个服务不可用。不建议线上环境使用，可以用于本地测试。&lt;/p&gt;
&lt;h3 id=&#34;启动-nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-nameserver&#34;&gt;#&lt;/a&gt; 启动 NameServer&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 首先启动Name Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqnamesrv &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 验证Name Server 是否启动成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tail -f ~/logs/rocketmqlogs/namesrv.log&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The Name Server boot success...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;启动-broker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-broker&#34;&gt;#&lt;/a&gt; 启动 Broker&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 启动Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh bin/mqbroker -n localhost:9876 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 验证Name Server 是否启动成功，例如Broker的IP为：192.168.1.2，且名称为broker-a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tail -f ~/logs/rocketmqlogs/broker.log &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The broker[broker-a, 192.169.1.2:10911] boot success...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;验证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证&#34;&gt;#&lt;/a&gt; 验证&lt;/h3&gt;
&lt;p&gt;我们使用 Java 程序来简单的验证下消息的发送和消费，这也是我们第一次去使用 RocketMQ.&lt;/p&gt;
&lt;h4 id=&#34;加入maven依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加入maven依赖&#34;&gt;#&lt;/a&gt; 加入 maven 依赖&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.rocketmq&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;rocketmq-client&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.3.0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;生产消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产消息&#34;&gt;#&lt;/a&gt; 生产消息&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Producer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消息生产者Producer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQProducer producer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQProducer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 启动Producer实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	    &lt;span class=&#34;comment&#34;&gt;// 创建消息，并指定Topic，Tag和消息体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	    Message msg = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Topic */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;string&#34;&gt;&amp;quot;TagA&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* Tag */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello RocketMQ &amp;quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET) &lt;span class=&#34;comment&#34;&gt;/* Message body */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;comment&#34;&gt;// 发送消息到一个Broker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SendResult sendResult = producer.send(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 通过sendResult返回消息是否成功送达&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%n&amp;quot;&lt;/span&gt;, sendResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 如果不再发送消息，关闭Producer实例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	producer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;消费消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费消息&#34;&gt;#&lt;/a&gt; 消费消息&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Consumer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException, MQClientException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DefaultMQPushConsumer consumer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DefaultMQPushConsumer(&lt;span class=&#34;string&#34;&gt;&amp;quot;please_rename_unique_group_name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 设置NameServer的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.setNamesrvAddr(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:9876&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.subscribe(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopicTest&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 注册回调实现类来处理从broker拉取回来的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.registerMessageListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MessageListenerConcurrently() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ConsumeConcurrentlyStatus &lt;span class=&#34;title&#34;&gt;consumeMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeConcurrentlyContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s Receive New Messages: %s %n&amp;quot;&lt;/span&gt;, Thread.currentThread().getName(), msgs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 标记该消息已经被成功消费&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 启动消费者实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        consumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;Consumer Started.%n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;遇到的问题:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照上面的步骤，你运行成功了吗？？？&lt;/p&gt;
&lt;p&gt;我反正是没有成功的生产消息。为什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEuTm8=&#34;&gt;1.No&lt;/span&gt; route info of this topic, TopicTest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是：我们在启动的时候，并没有创建  &lt;code&gt;TopicTest&lt;/code&gt;  这个 Topic.&lt;/p&gt;
&lt;figure class=&#34;highlight cmd&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Exception &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; thread &amp;quot;main&amp;quot; org.apache.rocketmq.client.exception.MQClientException: No route info of this topic, TopicTest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;See http://rocketmq.apache.org/docs/faq/ &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; further details.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;at&lt;/span&gt; org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:&lt;span class=&#34;number&#34;&gt;610&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;at&lt;/span&gt; org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:&lt;span class=&#34;number&#34;&gt;1223&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;at&lt;/span&gt; org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:&lt;span class=&#34;number&#34;&gt;1173&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;at&lt;/span&gt; org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:&lt;span class=&#34;number&#34;&gt;214&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;at&lt;/span&gt; com.fxb.learn_rocketmq.Producer.main(Producer.java:&lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种问题的原因两种。 1. 网络不通，连接不到端口。  2. 没有创建这个 Topic.&lt;br&gt;
 真不巧，我全遇到了。&lt;/p&gt;
&lt;p&gt;第一种呢，使用 telnet 命令，如果通了就解决了。&lt;br&gt;
第二种，使用  &lt;code&gt;sh mqadmin updateTopic -n localhost:9876 -b 192.168.1.63:10911 -t TopicTest&lt;/code&gt;  -n 表示 NameSerer 的地址，-b 表示 Broker 的地址，-t&lt;br&gt;
 后面的就是 topicName 了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.Broker 启动失败，提示 空间不足。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是：在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3J1blNlcnZlci5zaA==&#34;&gt;runServer.sh&lt;/span&gt; 和 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3J1bmJyb2tlci5zaA==&#34;&gt;runbroker.sh&lt;/span&gt; 脚本中配置了启动的内存大小， NameServer 启动的堆内存是 4G, 而 broker 启动的是 8g 所以，回报错因 空间不足，启动失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3. 运行 mqadmin 命令是报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我遇到的问题是因为 宿主机安装的是 openJDK, 导致 脚本没有加载到对应的 ext 包，所以在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2xzLnNo&#34;&gt;tools.sh&lt;/span&gt; 中加入 ext / 包的路径就可以了。 ext/ 就是 jre 下的 ext 包。&lt;/p&gt;
&lt;p&gt;如下图.&lt;br&gt;
&lt;img data-src=&#34;/images/rocketmq/1-03%E5%8D%95master%E9%83%A8%E7%BD%B2mqadmin%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;rocket运行程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocket运行程序&#34;&gt;#&lt;/a&gt; Rocket 运行程序&lt;/h3&gt;
&lt;p&gt;我们先不急着去学习其他的部署方式，我们现在去看下 Rocket 运行程序的目录是什么样的。目的是了解 RocketMQ 是怎么跑起来的。这样遇到问题的时候，我们可以顺藤摸瓜去排查问题是出在什么地方。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/1-03-RocketMQ%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%9B%AE%E5%BD%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;benchmark 包：提供了 Rocket 用于基准测试的工具。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Byb2R1Y2VyLnNo&#34;&gt;producer.sh&lt;/span&gt; ：测试普通 MQ 生产者的性能。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbnN1bWVyLnNo&#34;&gt;consumer.sh&lt;/span&gt; ：测试 MQ 消费者的性能。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rwcm9kdWNlci5zaA==&#34;&gt;tproducer.sh&lt;/span&gt; ：测试事务 MQ 生产者的性能。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhdGNocHJvZHVjZXIuc2g=&#34;&gt;batchproducer.sh&lt;/span&gt;: 测试批量生产者的性能。&lt;/li&gt;
&lt;li&gt;bin: 提供了 启动关闭 NameServer, 启动关闭 Broker，管理 MQ 的工具。
&lt;ul&gt;
&lt;li&gt;mqnamesrv： 启动 NameServer 的脚本&lt;/li&gt;
&lt;li&gt;mqbroker: 启动 Broker 的脚本&lt;/li&gt;
&lt;li&gt;mqadmin: 管理 RocketMQ 的脚本&lt;/li&gt;
&lt;li&gt;mqshutdown: 关闭 MQ 的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;conf: 对 RocketMQ 进行配置的文件目录。
&lt;ul&gt;
&lt;li&gt;broker.conf： broker 的配置&lt;/li&gt;
&lt;li&gt;logback-*.xml: logback 日志的配置，比如 Broker，nameServer,tools 的日志配置&lt;/li&gt;
&lt;li&gt;plain_acl.yml： 权限管理的文件&lt;/li&gt;
&lt;li&gt;tools.yml: 脚本工具的配置&lt;/li&gt;
&lt;li&gt;dledger: 容灾相关的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lib: 这里存放的就是编译之后的 class 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在启动或者使用其他的命令遇到问题的时候，可以到对应的目录中，找到文件，然后看下代码进行处理。&lt;/p&gt;
&lt;p&gt;下面我们接着去看其他的部署方式。&lt;/p&gt;
&lt;h2 id=&#34;多master模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多master模式&#34;&gt;#&lt;/a&gt; 多 Master 模式&lt;/h2&gt;
&lt;p&gt;一个集群无 Slave，全是 Master，例如 2 个 Master 或者 3 个 Master，这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动nameserver&#34;&gt;#&lt;/a&gt; 启动 NameServer&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;NameServer 需要先于 Broker 启动，且如果在生产环境使用，为了保证高可用，建议一般规模的集群启动 3 个 NameServer&lt;/b&gt;，各节点的启动命令相同，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 首先启动Name Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqnamesrv &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 验证Name Server 是否启动成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tail -f ~/logs/rocketmqlogs/namesrv.log&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The Name Server boot success...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;启动broker集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动broker集群&#34;&gt;#&lt;/a&gt; 启动 Broker 集群&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-noslave/broker-a.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-noslave/broker-b.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上启动命令是在单个 NameServer 情况下使用的。对于多个 NameServer 的集群，Broker 启动命令中 &lt;code&gt;-n&lt;/code&gt;  后面的地址列表用分号隔开即可，例如  &lt;code&gt;192.168.1.1:9876;192.161.2:9876&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;13-多master多slave模式-异步复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-多master多slave模式-异步复制&#34;&gt;#&lt;/a&gt; 1.3 多 Master 多 Slave 模式 - 异步复制&lt;/h2&gt;
&lt;p&gt;每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用异步复制方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：Master 宕机，磁盘损坏情况下会丢失少量消息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动nameserver-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动nameserver-2&#34;&gt;#&lt;/a&gt; 启动 NameServer&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 首先启动Name Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqnamesrv &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 验证Name Server 是否启动成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tail -f ~/logs/rocketmqlogs/namesrv.log&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The Name Server boot success...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;启动broker集群-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动broker集群-2&#34;&gt;#&lt;/a&gt; 启动 Broker 集群&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-async/broker-a.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-async/broker-b.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器C，启动第一个Slave，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-async/broker-a-s.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器D，启动第二个Slave，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-async/broker-b-s.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;多master多slave模式-同步双写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多master多slave模式-同步双写&#34;&gt;#&lt;/a&gt; 多 Master 多 Slave 模式 - 同步双写&lt;/h3&gt;
&lt;p&gt;每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：性能比异步复制模式略低（大约低 10% 左右），发送单个消息的 RT 会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动nameserver-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动nameserver-3&#34;&gt;#&lt;/a&gt; 启动 NameServer&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 首先启动Name Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqnamesrv &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 验证Name Server 是否启动成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ tail -f ~/logs/rocketmqlogs/namesrv.log&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The Name Server boot success...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;启动broker集群-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动broker集群-3&#34;&gt;#&lt;/a&gt; 启动 Broker 集群&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器A，启动第一个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-sync/broker-a.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器B，启动第二个Master，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-sync/broker-b.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器C，启动第一个Slave，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-sync/broker-a-s.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;### 在机器D，启动第二个Slave，例如NameServer的IP为：192.168.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ nohup sh mqbroker -n 192.168.1.1:9876 -c &lt;span class=&#34;variable&#34;&gt;$ROCKETMQ_HOME&lt;/span&gt;/conf/2m-2s-sync/broker-b-s.properties &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上 Broker 与 Slave 配对是通过指定相同的 BrokerName 参数来配对，Master 的 BrokerId 必须是 0，Slave 的 BrokerId 必须是大于 0 的数。另外一个 Master 下面可以挂载多个 Slave，同一 Master 下的多个 Slave 通过指定不同的 BrokerId 来区分。$ROCKETMQ_HOME 指的 RocketMQ 安装目录，需要用户自己设置此环境变量。&lt;/p&gt;
&lt;h1 id=&#34;mqadmin管理工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mqadmin管理工具&#34;&gt;#&lt;/a&gt; mqadmin 管理工具&lt;/h1&gt;
&lt;p&gt;关于 mqadmin 命令的使用，我们可以通过  &lt;code&gt;sh mqadmin&lt;/code&gt;  命令来查看命令的选项，用的多自然就记住了，后面我们也不会通过这种方式来管理 RocketMQ 集群。但是在我们学习的过程中，我们还是会非常频繁的使用这个命令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行命令方法： &lt;code&gt;./mqadmin &amp;#123;command&amp;#125; &amp;#123;args&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;几乎所有命令都需要配置 - n 表示 NameServer 地址，格式为 ip:port&lt;/li&gt;
&lt;li&gt;几乎所有命令都可以通过 - h 获取帮助&lt;/li&gt;
&lt;li&gt;如果既有 Broker 地址（-b）配置项又有 clusterName（-c）配置项，则优先以 Broker 地址执行命令，如果不配置 Broker 地址，则对集群中所有主机执行命令，只支持一个 Broker 地址。-b 格式为 ip:port，port 默认是 10911&lt;/li&gt;
&lt;li&gt;在 tools 下可以看到很多命令，但并不是所有命令都能使用，只有在 MQAdminStartup 中初始化的命令才能使用，你也可以修改这个类，增加或自定义命令&lt;/li&gt;
&lt;li&gt;由于版本更新问题，少部分命令可能未及时更新，遇到错误请直接阅读相关命令源码&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h1&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-03T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/</id>
        <title>RocketMQ系列-RocketMQ概念</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/"/>
        <content type="html">&lt;h2 id=&#34;rocketmq概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmq概念&#34;&gt;#&lt;/a&gt; RocketMQ 概念&lt;/h2&gt;
&lt;p&gt;我在学习 RocketMQ 的时候，看到文档中介绍了很多的概念。我非常反感，但是又没有办法，没有这些概念，就没办法更好的去学习后面的内容，当后面使用很多名词来梳理实现原理的时候，就会一头雾水。&lt;/p&gt;
&lt;p&gt;上一篇文章中，我们知道了 RocketMQ 由四部分构成。&lt;/p&gt;
&lt;h3 id=&#34;消息模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息模型&#34;&gt;#&lt;/a&gt; 消息模型&lt;/h3&gt;
&lt;p&gt;Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息，NameServer 负责对 Producer 和 Customer 的服务发现，还有路由这两个功能。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个 Topic 中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个 Consumer 实例构成。&lt;/p&gt;
&lt;h3 id=&#34;消息生产者producer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息生产者producer&#34;&gt;#&lt;/a&gt; 消息生产者（Producer）&lt;/h3&gt;
&lt;p&gt;负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到 broker 服务器。RocketMQ 提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要 Broker 返回确认信息，单向发送不需要。&lt;/p&gt;
&lt;h3 id=&#34;消息消费者consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息消费者consumer&#34;&gt;#&lt;/a&gt; 消息消费者（Consumer）&lt;/h3&gt;
&lt;p&gt;负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从 Broker 服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费 (pull)、推动式消费 (push)。&lt;/p&gt;
&lt;h3 id=&#34;生产者组producer-group&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者组producer-group&#34;&gt;#&lt;/a&gt; 生产者组（Producer Group）&lt;/h3&gt;
&lt;p&gt;同一类 Producer 的集合，这类 Producer 发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则 Broker 服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。&lt;/p&gt;
&lt;h3 id=&#34;消费者组consumer-group&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者组consumer-group&#34;&gt;#&lt;/a&gt; 消费者组（Consumer Group）&lt;/h3&gt;
&lt;p&gt;同一类 Consumer 的集合，这类 Consumer 通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的 Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。&lt;/p&gt;
&lt;h3 id=&#34;拉取式消费pull-consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取式消费pull-consumer&#34;&gt;#&lt;/a&gt; 拉取式消费（Pull Consumer）&lt;/h3&gt;
&lt;p&gt;Consumer 消费的一种类型，应用通常主动调用 Consumer 的拉消息方法从 Broker 服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。&lt;/p&gt;
&lt;h3 id=&#34;推动式消费push-consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推动式消费push-consumer&#34;&gt;#&lt;/a&gt; 推动式消费（Push Consumer）&lt;/h3&gt;
&lt;p&gt;Consumer 消费的一种类型，该模式下 Broker 收到数据后会主动推送给消费端，该消费模式一般实时性较高。&lt;/p&gt;
&lt;h3 id=&#34;主题topic&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主题topic&#34;&gt;#&lt;/a&gt; 主题（Topic）&lt;/h3&gt;
&lt;p&gt;表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是 RocketMQ 进行消息订阅的基本单位。&lt;/p&gt;
&lt;h3 id=&#34;代理服务器broker-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代理服务器broker-server&#34;&gt;#&lt;/a&gt; 代理服务器（Broker Server）&lt;/h3&gt;
&lt;p&gt;消息中转角色，负责存储消息、转发消息。代理服务器在 RocketMQ 系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。&lt;/p&gt;
&lt;h3 id=&#34;nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver&#34;&gt;#&lt;/a&gt; NameServer&lt;/h3&gt;
&lt;p&gt;NameServer 充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的 Broker IP 列表。多个 Nameserver 实例组成集群，但相互独立，没有信息交换。&lt;/p&gt;
&lt;h3 id=&#34;集群消费clustering&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群消费clustering&#34;&gt;#&lt;/a&gt; 集群消费（Clustering）&lt;/h3&gt;
&lt;p&gt;集群消费模式下，相同 Consumer Group 的每个 Consumer 实例平均分摊消息。&lt;/p&gt;
&lt;h3 id=&#34;广播消费broadcasting&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#广播消费broadcasting&#34;&gt;#&lt;/a&gt; 广播消费（Broadcasting）&lt;/h3&gt;
&lt;p&gt;广播消费模式下，相同 Consumer Group 的每个 Consumer 实例都接收全量的消息。&lt;/p&gt;
&lt;h3 id=&#34;普通顺序消息normal-ordered-message&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#普通顺序消息normal-ordered-message&#34;&gt;#&lt;/a&gt; 普通顺序消息（Normal Ordered Message）&lt;/h3&gt;
&lt;p&gt;普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。&lt;/p&gt;
&lt;h3 id=&#34;严格顺序消息strictly-ordered-message&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#严格顺序消息strictly-ordered-message&#34;&gt;#&lt;/a&gt; 严格顺序消息（Strictly Ordered Message）&lt;/h3&gt;
&lt;p&gt;严格顺序消息模式下，消费者收到的所有消息均是有顺序的。&lt;/p&gt;
&lt;h3 id=&#34;消息message&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息message&#34;&gt;#&lt;/a&gt; 消息（Message）&lt;/h3&gt;
&lt;p&gt;消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ 中每个消息拥有唯一的 Message ID，且可以携带具有业务标识的 Key。系统提供了通过 Message ID 和 Key 查询消息的功能。&lt;/p&gt;
&lt;h3 id=&#34;标签tag&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标签tag&#34;&gt;#&lt;/a&gt; 标签（Tag）&lt;/h3&gt;
&lt;p&gt;为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化 RocketMQ 提供的查询系统。消费者可以根据 Tag 实现对不同子主题的不同消费逻辑，实现更好的扩展性。&lt;/p&gt;
&lt;p&gt;这是一篇极为枯燥的文章。从下篇文章开始，我们开始对 &lt;code&gt;RocketMQ&lt;/code&gt;  进行实践。从零搭建 &lt;code&gt;RocketMQ&lt;/code&gt;  集群.&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-02T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/</id>
        <title>Rocket系列-入门</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;h1 id=&#34;rocketmq-介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmq-介绍&#34;&gt;#&lt;/a&gt; RocketMQ 介绍&lt;/h1&gt;
&lt;p&gt;截止 2021 年 9 月 1 日， RocketMQ 最新版本是 4.9.1。&lt;/p&gt;
&lt;p&gt;最新 Star 数为 1.5w. fork 数量是 8.4k.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/RocketMQ-title-pic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;发展历程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发展历程&#34;&gt;#&lt;/a&gt; 发展历程&lt;/h2&gt;
&lt;p&gt;RocketMQ 的发展历程分为两部分，2001 年开始 RocketMQ 的前身 Notify，在 2016 年阿里将 RocketMQ 捐赠给 Apache 基金会中进行孵化。&lt;/p&gt;
&lt;h3 id=&#34;在阿里&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在阿里&#34;&gt;#&lt;/a&gt; 在阿里&lt;/h3&gt;
&lt;p&gt;阿里巴巴消息中间件起源于 2001 年的五彩石项目，Notify 在这期间应运而生，用于交易核心消息的流转。&lt;/p&gt;
&lt;p&gt;至 2010 年，B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件，MetaQ 1.0 在 2011 年诞生。&lt;/p&gt;
&lt;p&gt;到 2012 年，MetaQ 已经发展到了 MetaQ 3.0，并抽象出了通用的消息引擎 RocketMQ。随后，将 RocketMQ 进行了开源，阿里的消息中间件正式走入了公众的视野。&lt;/p&gt;
&lt;p&gt;到 2015 年，RocketMQ 已经经历了多年双十一的洗礼，在可用性、可靠性以及稳定性等方面都有出色的表现。与此同时，云计算大行其道，阿里消息中间件基于 RocketMQ 推出了 Aliware MQ 1.0，开始为阿里云上成千上万家企业提供消息服务。&lt;/p&gt;
&lt;p&gt;到今年，MetaQ 在 2016 年双十一承载了万亿级消息的流转，跨越了一个新的里程碑，同时 RocketMQ 进入 Apache 孵化。&lt;/p&gt;
&lt;h3 id=&#34;apache&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apache&#34;&gt;#&lt;/a&gt; Apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2017 年 2 月 7 日 4.0.0 版本，成为 Apache 项目之后的第一个版本。属于 Apache 的孵化项目。&lt;/li&gt;
&lt;li&gt;2017 年 6 月 8 日 4.1.0 版本，&lt;/li&gt;
&lt;li&gt;2017 年 12 月 13 日 4.2.0&lt;/li&gt;
&lt;li&gt;2018 年 7 月 26 日 4.3.0&lt;/li&gt;
&lt;li&gt;2019 年 1 月 17 日 4.4.0 版本&lt;/li&gt;
&lt;li&gt;2019 年 5 月 21 日 4.5.1 版本&lt;/li&gt;
&lt;li&gt;2019 年 11 月 19 日 4.6.0 版本&lt;/li&gt;
&lt;li&gt;2020 年 3 月 5 日 4.7.0 版本&lt;/li&gt;
&lt;li&gt;2020 年 12 月 9 日 4.8.0 版本&lt;/li&gt;
&lt;li&gt;2021 年 6 月 17 日 4.9.0 版本&lt;/li&gt;
&lt;li&gt;2021 年 8 月 27 日  4.9.1 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;截止目前，RocketMQ 先后经历了 20 年的发展，承载这淘宝双十一万亿级消息的处理。&lt;/p&gt;
&lt;h2 id=&#34;rocket特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocket特性&#34;&gt;#&lt;/a&gt; Rocket 特性&lt;/h2&gt;
&lt;p&gt;RocketMQ 具有下面的功能特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订阅发布：这个是消息队里产品的基础功能。&lt;/li&gt;
&lt;li&gt;支持事务型消息：指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。&lt;/li&gt;
&lt;li&gt;支持延时消息：指消息发送到 broker 后，不会立即被消费，等待特定时间投递给真正的 topic&lt;/li&gt;
&lt;li&gt;支持消息重试: Consumer 消费消息失败后，要提供一种重试机制，令消息再消费一次&lt;/li&gt;
&lt;li&gt;支持消息过滤: RocketMQ 的消费者可以根据 Tag 进行消息过滤，也支持自定义属性过滤。&lt;/li&gt;
&lt;li&gt;支持消息重放：生产者在发送消息时，同步消息失败会重投，异步消息有重试，oneway 没有任何保证。&lt;/li&gt;
&lt;li&gt;支持流量控制： 分为生产者流控和消费者流控。生产者流控因为 broker 处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈。&lt;/li&gt;
&lt;li&gt;支持死信队列：死信队列用于处理无法被正常消费的消息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在后面的学习中，我们也会着重的学习这几中特性。&lt;/p&gt;
&lt;h2 id=&#34;rocketmq的组成部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmq的组成部分&#34;&gt;#&lt;/a&gt; RocketMQ 的组成部分&lt;/h2&gt;
&lt;p&gt;Apache RocketMQ 是一个分布式消息和流媒体平台，具有低延迟、高性能和可靠性、万亿级容量和灵活的可伸缩性。它由四部分组成: NameServer、Broker、Producer 和 Cu] onsumer。它们中的每一个都是可以集群方式部署，都可以水平地扩展，而不需要单个故障点。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/1-01-rmq-basic-arc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;nameserver-cluster&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver-cluster&#34;&gt;#&lt;/a&gt; NameServer cluster&lt;/h3&gt;
&lt;p&gt;NameServer 提供轻量级服务发现功能和消息路由功能。 每个 Name Server 记录完整的路由信息​​，提供相应的读写服务，并支持快速存储扩展。&lt;/p&gt;
&lt;h3 id=&#34;broker-cluster&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker-cluster&#34;&gt;#&lt;/a&gt; Broker Cluster&lt;/h3&gt;
&lt;p&gt;Broker 通过提供轻量级的 TOPIC 和 QUEUE 机制来处理消息存储。它们支持 Push 和 Pull 模型，包含容错机制 (2 个或 3 个副本)，并提供强大的峰值填充和以原始时间顺序积累数千亿条消息的能力。此外，broker 还提供了灾难恢复、丰富的指标统计信息和警报机制，这些都是传统消息传递系统所缺乏的。&lt;/p&gt;
&lt;h3 id=&#34;producer-cluster&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#producer-cluster&#34;&gt;#&lt;/a&gt; Producer Cluster&lt;/h3&gt;
&lt;p&gt;生产者支持分布式部署。分布式生产者通过多种负载平衡模式向 Broker 集群发送消息。发送进程支持快速故障和低延迟。&lt;/p&gt;
&lt;h3 id=&#34;consumer-cluster&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#consumer-cluster&#34;&gt;#&lt;/a&gt; Consumer Cluster&lt;/h3&gt;
&lt;p&gt;消费者也支持 Push 和 Pull 模型中的分布式部署。它还支持集群消费和消息广播。它提供了实时消息订阅机制，可以满足大多数用户的需求。&lt;/p&gt;
&lt;p&gt;下一篇文章我们一期学习一下 关于 RocketMQ 的相关概念。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-01T09:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/README/</id>
        <title>RocketMQ系列-开篇</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/01/rocketMQ/README/"/>
        <content type="html">&lt;h2 id=&#34;开篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开篇&#34;&gt;#&lt;/a&gt; 开篇&lt;/h2&gt;
&lt;p&gt;写这篇文章的时间是 &lt;code&gt;2021&lt;/code&gt;  年 &lt;code&gt;9&lt;/code&gt;  月 &lt;code&gt;1&lt;/code&gt;  日，不知道是否有勇气写完全部系列之后再发布给大家，这只能算是自己学习 &lt;code&gt;RocketMQ&lt;/code&gt;  的笔记吧。希望在 2021 年的年底能够将整个系列完整的发布到方家小白公众号和 &lt;a href=&#34;https://fangjiaxiaobai.github.io/&#34;&gt;fangjiaxiaobai.github.io&lt;/a&gt; 博客中。想写的文章也还有很多，同时在写的有 《Java 的 Stream 并行流设计》 和  《聊聊面试那点事》。&lt;/p&gt;
&lt;p&gt;2021 年国家发布了很多政策，尤其是互联网行业，特别是 在线教育，我前些日子里也是一名在线教育从业者。&lt;/p&gt;
&lt;p&gt;而写这个系列的最根本的原因，也是因为被人常问的就是  &lt;code&gt;RocketMQ&lt;/code&gt;  的底层原理，可想而知，我并答不上来。所以，欠自己的债，总是需要还的。&lt;/p&gt;
&lt;p&gt;趁着空档期，所以从零到一的去聊聊这 &lt;code&gt;RocketMQ&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;相信很多同学都是或多或少的使用过 &lt;code&gt;RocketMQ&lt;/code&gt; , 这里呢，我们还是从零到一的去学习。第一篇，第二篇都是比较枯燥的内容，本着理论先行的原则，我们会去了解  &lt;code&gt;RoctMQ&lt;/code&gt;  的发展历程，和  &lt;code&gt;RocketMQ&lt;/code&gt;  中使用的概念。 第三篇我们就会 自己搭建 &lt;code&gt;RocketMQ&lt;/code&gt;  集群，为我们后面的案例和原理学习迈出具有里程碑意义的一步。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录&#34;&gt;#&lt;/a&gt; 目录&lt;/h2&gt;
&lt;h3 id=&#34;入门&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#入门&#34;&gt;#&lt;/a&gt; 入门&lt;/h3&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; &lt;a href=&#34;/2021/09/01/rocketMQ/1-01-RocketMQ%E7%AE%80%E4%BB%8B/&#34;&gt;Rocket 系列 - 入门&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; &lt;a href=&#34;/2021/09/02/rocketMQ/1-02-RocketMQ%E6%A6%82%E5%BF%B5/&#34;&gt;概念&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_2&#34;&gt; &lt;a href=&#34;/2021/09/03/rocketMQ/1-03-RocketMQ%E6%90%AD%E5%BB%BA/&#34;&gt;安装&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_3&#34;&gt; &lt;a href=&#34;/2021/09/04/rocketMQ/1-04-00.RocketMQ%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/&#34;&gt;使用&lt;/a&gt;&lt;/label&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_4&#34;&gt; &lt;a href=&#34;/2021/09/04/rocketMQ/1-04-01.%E5%9F%BA%E6%9C%AC%E6%A0%B7%E4%BE%8B/&#34;&gt;基本样例&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_5&#34;&gt; &lt;a href=&#34;/2021/09/06/rocketMQ/1-04-02.%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/&#34;&gt;顺序消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_6&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_6&#34;&gt; &lt;a href=&#34;/2021/09/23/rocketMQ/1-04-03.%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/&#34;&gt;延时消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_7&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_7&#34;&gt; &lt;a href=&#34;/2021/09/23/rocketMQ/1-04-04.%E6%89%B9%E9%87%8F%E6%B6%88%E6%81%AF/&#34;&gt;批量消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_8&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_8&#34;&gt; &lt;a href=&#34;/2021/09/23/rocketMQ/1-04-05.%E8%BF%87%E6%BB%A4%E6%B6%88%E6%81%AF/&#34;&gt;过滤消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_9&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_9&#34;&gt; &lt;a href=&#34;/2021/09/23/rocketMQ/1-04-06.%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/&#34;&gt;事务消息&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进阶架构设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进阶架构设计&#34;&gt;#&lt;/a&gt; 进阶 (架构设计)&lt;/h3&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_10&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_10&#34;&gt; &lt;a href=&#34;/2021/09/28/rocketMQ/2-01-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%90%AF%E5%8A%A8/&#34;&gt;架构设计之启动过程详解&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_11&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_11&#34;&gt; &lt;a href=&#34;/2021/09/28/rocketMQ/2-02-RocketMQ%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF/&#34;&gt;架构设计之消息的收发过程详解&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高手细节设计-解读源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高手细节设计-解读源码&#34;&gt;#&lt;/a&gt; 高手 (细节设计，解读源码)&lt;/h3&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_12&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_12&#34;&gt; 事务消息实现原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_13&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_13&#34;&gt; 延时消息实现原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_14&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_14&#34;&gt; 消息可靠性实现原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_15&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_15&#34;&gt; 负载均衡原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_16&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_16&#34;&gt; 消息过滤原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_17&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_17&#34;&gt; 消息重放原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_18&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_18&#34;&gt; 延时消息实现原理&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_19&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_19&#34;&gt; 消费者的 &lt;code&gt;Rebalance&lt;/code&gt;  机制&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;宗师&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#宗师&#34;&gt;#&lt;/a&gt; 宗师&lt;/h3&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_20&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_20&#34;&gt; 容灾&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_21&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_21&#34;&gt; 运维工具 &lt;code&gt;mqadmin&lt;/code&gt;  的使用&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_22&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_22&#34;&gt; 最佳实践（ &lt;code&gt;Best Practice&lt;/code&gt; ）&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_23&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_23&#34;&gt; 如何处理消息丢失保证消息的可靠性&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_24&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_24&#34;&gt; 如何避免消息重复消费&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_25&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_25&#34;&gt; 如何实现事务消息，保证数据一致性&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/rocketmq/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="RocketMQ" />
        <category term="消息队列" />
        <updated>2021-09-01T09:16:00.000Z</updated>
    </entry>
</feed>
