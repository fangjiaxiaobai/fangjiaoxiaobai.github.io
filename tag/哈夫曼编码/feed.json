{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"哈夫曼编码\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2024/03/18/dataStructuresAndAlgorithms/huffman/huffman/",
            "url": "https://fangjiaxiaobai.github.io/2024/03/18/dataStructuresAndAlgorithms/huffman/huffman/",
            "title": "深入解析 Huffman 编码：原理与应用",
            "date_published": "2024-03-18T10:18:18.000Z",
            "content_html": "<p><code>Huffman</code>  编码，作为一种高效的前缀编码方式，由美国计算机科学家 <code>戴维·A·哈夫曼</code> 于 1952 年提出。它在数据压缩领域具有重要地位，尤其适用于文本、音频、视频等数据的压缩处理，其核心优势在于能够根据字符出现频率动态生成最优的编码方案。</p>\n<h1 id=\"huffman编码原理\"><a class=\"markdownIt-Anchor\" href=\"#huffman编码原理\">#</a>  <code>Huffman</code>  编码原理</h1>\n<p><code>Huffman</code>  编码的基本思想是基于字符出现的频率来构造一种变长编码。对于出现频率高的字符，赋予较短的编码；反之，对出现频率低的字符赋予较长的编码。这种策略确保了整体编码长度最小化，从而实现高效的数据压缩。<br>\n具体实现步骤如下：</p>\n<ul>\n<li>计算每个字符的出现频率。</li>\n<li>将每个字符及对应的频率视为一个节点，构建一颗赫夫曼树（ <code>Huffman Tree</code> ）。通过不断合并频率最低的两个节点，直到树中只剩下一个根节点为止，这个过程保证了频率越高的字符其路径长度越短。</li>\n<li>从根节点到每个字符节点的路径所经过的 “左”、“右” 分支定义了该字符的二进制编码，频率较高的字符对应较短的编码。</li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<h2 id=\"huffmanh\"><a class=\"markdownIt-Anchor\" href=\"#huffmanh\">#</a> huffman.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> HFTREE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HFTREE_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * huffman树的节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    std::string character; <span class=\"comment\">//字符串(字符or字符组合)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> freq;  <span class=\"comment\">//频率</span></span><br><span class=\"line\">    Node *left;  <span class=\"comment\">//左子树</span></span><br><span class=\"line\">    Node *right; <span class=\"comment\">// 左子树</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isLeaf; <span class=\"comment\">// 是否为叶子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(std::string ch, <span class=\"keyword\">int</span> freg);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(std::string ch, <span class=\"keyword\">int</span> freg, <span class=\"keyword\">bool</span> isLeaf);</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Node</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于入堆时的排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compare</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(Node *a, Node *b)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hfTree</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">()</span></span>; <span class=\"comment\">// huffman编码执行入口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    std::string text;</span><br><span class=\"line\">    Node *root;</span><br><span class=\"line\">    std::unordered_map&lt;std::string, <span class=\"keyword\">int</span>&gt; frequencyMap;  <span class=\"comment\">// 各字符(组合)的频率表</span></span><br><span class=\"line\">    std::map&lt;std::string, std::string&gt; huffmanCodeMap;  <span class=\"comment\">// 编码表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calculateFrequency</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildHuffmanTree</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generateCodes</span><span class=\"params\">(Node *node, <span class=\"keyword\">const</span> std::string &amp;str)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteTree</span><span class=\"params\">(Node *node)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">Option</span> &#123;</span></span><br><span class=\"line\">        SingleChar,</span><br><span class=\"line\">        MultiChar</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Option op;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">hfTree</span>(<span class=\"keyword\">const</span> std::string &amp;text, Option op);</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">hfTree</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">getEncodedText</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::map&lt;std::string, std::string&gt; <span class=\"title\">getCodingTable</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"huffmancpp\"><a class=\"markdownIt-Anchor\" href=\"#huffmancpp\">#</a> huffman.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;hftree.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INFO 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OFF 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG_LEVEL OFF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">contains</span><span class=\"params\">(std::vector&lt;std::string&gt; container, std::string v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = std::<span class=\"built_in\">find</span>(container.<span class=\"built_in\">begin</span>(), container.<span class=\"built_in\">end</span>(), v);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != container.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Node 构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ch 字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param freq 频率</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Node::<span class=\"built_in\">Node</span>(std::string ch, <span class=\"keyword\">int</span> freq) : <span class=\"built_in\">character</span>(ch), <span class=\"built_in\">freq</span>(freq), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">isLeaf</span>(<span class=\"literal\">false</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Node 构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ch 字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param freq 频率</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Node::<span class=\"built_in\">Node</span>(std::string ch, <span class=\"keyword\">int</span> freq, <span class=\"keyword\">bool</span> isLeaf) : <span class=\"built_in\">character</span>(ch), <span class=\"built_in\">freq</span>(freq), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">isLeaf</span>(isLeaf) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Node 析构函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Node::~<span class=\"built_in\">Node</span>() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Compare::operator</span><span class=\"params\">()</span><span class=\"params\">(Node *a, Node *b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a-&gt;freq == b-&gt;freq) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-&gt;character &gt; b-&gt;character;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-&gt;freq &gt; b-&gt;freq;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hfTree::<span class=\"built_in\">hfTree</span>(<span class=\"keyword\">const</span> std::string &amp;text, Option op) : <span class=\"built_in\">op</span>(op), <span class=\"built_in\">root</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">text</span>(text) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">encode</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hfTree::~<span class=\"built_in\">hfTree</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">deleteTree</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hfTree::deleteTree</span><span class=\"params\">(Node *node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">deleteTree</span>(node-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">deleteTree</span>(node-&gt;right);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hfTree::calculateFrequency</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op == Option::SingleChar) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch: text) &#123;</span><br><span class=\"line\">            <span class=\"function\">std::string <span class=\"title\">key</span><span class=\"params\">(<span class=\"number\">1</span>, ch)</span></span>;</span><br><span class=\"line\">            frequencyMap[key]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        std::map&lt;std::string, <span class=\"keyword\">int</span>&gt; tempFrequencyMap;</span><br><span class=\"line\">        std::vector&lt;std::string&gt; orderHfNodes;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"function\">std::string <span class=\"title\">key</span><span class=\"params\">(<span class=\"number\">1</span>, text[i])</span></span>;</span><br><span class=\"line\">            frequencyMap[key]++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; text.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">                key += text[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">                tempFrequencyMap[key]++;</span><br><span class=\"line\">                orderHfNodes.<span class=\"built_in\">push_back</span>(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 选择频率最高的前三个字符组合</span></span><br><span class=\"line\">        std::vector&lt;std::pair&lt;std::string, <span class=\"keyword\">int</span>&gt;&gt; <span class=\"built_in\">vec</span>(tempFrequencyMap.<span class=\"built_in\">begin</span>(), tempFrequencyMap.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        std::<span class=\"built_in\">sort</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), [](<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;a, <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;b) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a.second &gt; b.second || (a.second == b.second &amp;&amp; a.first &lt; b.first);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果字符组合不足三个，则全部选择</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> topComboCount = std::<span class=\"built_in\">min</span>(<span class=\"number\">3</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(vec.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">        std::vector&lt;std::string&gt; top3;</span><br><span class=\"line\">        <span class=\"comment\">// 更新单字符频率表，减去组合中字符的频率</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; topComboCount; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将前三个字符组合添加到频率表中</span></span><br><span class=\"line\">            frequencyMap[vec[i].first] = vec[i].second;</span><br><span class=\"line\">            top3.<span class=\"built_in\">push_back</span>(vec[i].first);</span><br><span class=\"line\">            <span class=\"comment\">// 减去组合中的单个字符的频率</span></span><br><span class=\"line\">            frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, vec[i].first[<span class=\"number\">0</span>])] -= vec[i].second;</span><br><span class=\"line\">            frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, vec[i].first[<span class=\"number\">1</span>])] -= vec[i].second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; orderHfNodes.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">contains</span>(top3, orderHfNodes[i]) &amp;&amp;</span><br><span class=\"line\">                <span class=\"built_in\">contains</span>(top3, orderHfNodes[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">contains</span>(top3, orderHfNodes[i + <span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">                    frequencyMap[orderHfNodes[++i]]--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    std::string k = orderHfNodes[++i];</span><br><span class=\"line\">                    frequencyMap[k]--;</span><br><span class=\"line\">                    frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, orderHfNodes[i][<span class=\"number\">1</span>])]++;</span><br><span class=\"line\">                    frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, orderHfNodes[i][<span class=\"number\">0</span>])]++;</span><br><span class=\"line\"><span class=\"comment\">//                    std::cout &lt;&lt; i &lt;&lt; &quot;:&quot; &lt;&lt; k &lt;&lt; std::endl;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        std::cout &lt;&lt; &quot;_t:&quot; &lt;&lt; frequencyMap[&quot; t&quot;] &lt;&lt; &quot; t:&quot; &lt;&lt; frequencyMap[&quot;t&quot;] &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==orderHfNodes.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">contains</span>(top3, orderHfNodes[i]) &amp;&amp;</span><br><span class=\"line\">                <span class=\"built_in\">contains</span>(top3, orderHfNodes[i + <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                frequencyMap[orderHfNodes[++i]]--;</span><br><span class=\"line\">                frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, orderHfNodes[i][<span class=\"number\">1</span>])]++;</span><br><span class=\"line\">                frequencyMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, orderHfNodes[i][<span class=\"number\">0</span>])]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= DEBUG</span></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;\\n字符对编码:去0前:&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: frequencyMap) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; p.second &lt;&lt; <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 过滤掉v为0的pair</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = frequencyMap.<span class=\"built_in\">begin</span>(); it != frequencyMap.<span class=\"built_in\">end</span>(); <span class=\"comment\">/* no increment here */</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;second &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Erase element by iterator and get the next iterator position</span></span><br><span class=\"line\">                it = frequencyMap.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Only increment the iterator if not erasing</span></span><br><span class=\"line\">                ++it;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= DEBUG</span></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;去0后:&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: frequencyMap) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; p.second &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= INFO</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1、构建字符频率表:&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: frequencyMap) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; p.second &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hfTree::buildHuffmanTree</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::priority_queue&lt;Node *, std::vector&lt;Node *&gt;, Compare&gt; minHeap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;pair: frequencyMap) &#123;</span><br><span class=\"line\">        Node *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(pair.first, pair.second, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        minHeap.<span class=\"built_in\">push</span>(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= DEBUG</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n 小顶堆构建过程:\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (minHeap.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        Node *left = minHeap.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        minHeap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        Node *right = minHeap.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        minHeap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> chs = <span class=\"built_in\">min</span>(left-&gt;character, right-&gt;character) + <span class=\"built_in\">max</span>(left-&gt;character, right-&gt;character);</span><br><span class=\"line\">        Node *sum = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(chs, left-&gt;freq + right-&gt;freq);</span><br><span class=\"line\">        sum-&gt;left = left;</span><br><span class=\"line\">        sum-&gt;right = right;</span><br><span class=\"line\">        minHeap.<span class=\"built_in\">push</span>(sum);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= DEBUG</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;left:%s-%d, right:%s-%d, parent:%s-%d\\n&quot;</span>, (left-&gt;character.<span class=\"built_in\">c_str</span>()), left-&gt;freq,</span><br><span class=\"line\">               right-&gt;character.<span class=\"built_in\">c_str</span>(), right-&gt;freq,</span><br><span class=\"line\">               sum-&gt;character.<span class=\"built_in\">c_str</span>(), sum-&gt;freq);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL &lt;= DEBUG</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; 小顶堆构建构建完成\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    root = minHeap.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    minHeap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hfTree::generateCodes</span><span class=\"params\">(Node *node, <span class=\"keyword\">const</span> std::string &amp;str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;isLeaf) &#123;</span><br><span class=\"line\">        huffmanCodeMap[node-&gt;character] = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">generateCodes</span>(node-&gt;left, str + <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">generateCodes</span>(node-&gt;right, str + <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hfTree::encode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">calculateFrequency</span>(); <span class=\"comment\">// 统计各字符出现的次数(频率)</span></span><br><span class=\"line\">    <span class=\"built_in\">buildHuffmanTree</span>();  <span class=\"comment\">// 构建haffman树</span></span><br><span class=\"line\">    <span class=\"built_in\">generateCodes</span>(root, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//对huffman中的字符(组合)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> LOG_LEVEL == INFO</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1、构建字符编码表:&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: huffmanCodeMap) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; p.second &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">hfTree::getEncodedText</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::string encodedText;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch: text) &#123;</span><br><span class=\"line\">        encodedText += huffmanCodeMap[std::<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, ch)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> encodedText;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::map&lt;std::string, std::string&gt; <span class=\"title\">hfTree::getCodingTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> huffmanCodeMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取完整代码案例，关注公众号，回复 <code>huffman</code>  即可获取。</p>\n<h1 id=\"huffman-编码的应用\"><a class=\"markdownIt-Anchor\" href=\"#huffman-编码的应用\">#</a> Huffman 编码的应用</h1>\n<ul>\n<li>数据压缩：在文本文件、音频流和视频流等数据压缩场景中广泛应用，如 JPEG 图像格式、MPEG 视频格式以及 PNG 图像格式的部分压缩流程都使用到了 <code>Huffman</code>  编码。</li>\n<li>通信传输：在网络通信领域， <code>Huffman</code>  编码能有效减少数据传输量，提高带宽利用率，特别是在带宽资源有限的情况下，其效果尤为显著。</li>\n<li>存储优化：在磁盘存储或内存管理中，通过 <code>Huffman</code>  编码可以节省存储空间，提升存储效率。</li>\n</ul>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p><code>Huffman</code>  编码利用信息熵理论，将数据编码为更短的形式，实现了数据的有效压缩，是现代信息技术中的关键技术之一。尽管随着技术发展出现了许多更为复杂的压缩算法，但 <code>Huffman</code>  编码因其简洁高效、易于实现的特性，在很多实际应用场景中仍占据着不可替代的地位。同时，理解并掌握 <code>Huffman</code>  编码的思想和方法，也有助于我们深入理解数据结构、算法设计等相关领域的基础知识。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "数据结构与算法",
                "霍夫曼编码",
                "哈夫曼编码",
                "C++"
            ]
        }
    ]
}