{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"面经之算法题\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/19/LeetCode/001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/19/LeetCode/001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "title": "LC:反转数组",
            "date_published": "2021-08-19T06:48:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<blockquote>\n<p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>\n</blockquote>\n<p>进阶：</p>\n<p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>\n你可以使用空间复杂度为 O (1) 的 原地 算法解决这个问题吗？</p>\n<p>示例 1:</p>\n<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>\n 输出: [5,6,7,1,2,3,4]<br>\n 解释:<br>\n 向右旋转 1 步: [7,1,2,3,4,5,6]<br>\n 向右旋转 2 步: [6,7,1,2,3,4,5]<br>\n 向右旋转 3 步: [5,6,7,1,2,3,4]</p>\n<p>示例 2:</p>\n<p>输入：nums = [-1,-100,3,99], k = 2<br>\n 输出：[3,99,-1,-100]<br>\n 解释:<br>\n 向右旋转 1 步: [99,-1,-100,3]<br>\n 向右旋转 2 步: [3,99,-1,-100]</p>\n<div class=\"note warning\">\n<p>提示</p>\n</div>\n<p>1 &lt;= nums.length &lt;= 2 * 104<br>\n-231 &lt;= nums[i] &lt;= 231 - 1<br>\n0 &lt;= k &lt;= 105</p>\n<hr>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<h3 id=\"解法1顺序后移法\"><a class=\"markdownIt-Anchor\" href=\"#解法1顺序后移法\">#</a> 解法 1: 顺序后移法</h3>\n<p>将最后一个元素赋值给临时变量，然后将其他元素顺序后移一个位置。重复此操作 k 次。</p>\n<p>但是需要注意的是:</p>\n<ul>\n<li>时间复杂度。这种算法在最优时时间复杂度是 O (n). 最差情况下是 O (n^2). 在 LeetCode 上是没法 AC 的。</li>\n<li>k 是会大于数组长度的。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解决k&gt;nums.length问题</span></span><br><span class=\"line\">        k = k % nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = length - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            nums[j] = nums[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种解决方法在数据量较大的情况下就会报错 <code>超出时间限制了</code> 。<br>\n即使 你在循环修改使用  <code>System.arraycopy(nums, 0, nums, 1, length - 1);</code>  来替换掉内层循环，也是不可以 <code>AC</code>  的。</p>\n<h3 id=\"解法2-优化解法1空间换时间\"><a class=\"markdownIt-Anchor\" href=\"#解法2-优化解法1空间换时间\">#</a> 解法 2: 优化解法 1, 空间换时间</h3>\n<p>按照规律将 nums 数组中的值，赋值到新数组中。然后使用新数组覆盖原数组。<br>\n那规律是什么呢？<br>\n 设：<br>\n <code>i</code>  为数组的的下标。  <code>newArr</code>  为新的数组， <code>n</code>  为数组总长度，<br>\n 那么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newArr[(i+k)%n] = nums[i]</span><br></pre></td></tr></table></figure>\n<p><code>AC</code>  代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        newArr[(i + k) % n] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.arraycopy(newArr, <span class=\"number\">0</span>, nums, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC 之后显示：<br>\n执行用时  <code>1 ms</code> <br>\n 内存消耗： <code>55.1 MB</code></p>\n<p>这种方式，时间复杂度得到显著的提升，但是带来了额外的空间消耗。而且这种空间消耗是等于原来占用的数据大小。</p>\n<p>那是否还有其他方式呢？</p>\n<h3 id=\"解法3-反转\"><a class=\"markdownIt-Anchor\" href=\"#解法3-反转\">#</a> 解法 3: 反转</h3>\n<p>这种方式是一种比较简单的方式，有点类似于脑筋急转弯的意思。抛开之前的环装思路。将这个数组看成具有方向的一组数据。将这组数据分成三组： <code>[0,k-1]</code> , <code>k</code> , <code>[k+1,length]</code> . 先将  <code>[0,k-1]</code>  反转，再把  <code>[k+1,length]</code>  反转，最后把这个数组反转。这样操作之后，就是最后结果了。</p>\n<p>比如，数组： <code>[1,2,3,4,5,6,7]</code> ,  <code>k=3</code></p>\n<p>第一步：把整体数组进行反转:  <code>[1,2,3,4,5,6,7]</code>  =&gt;  <code>[7,6,5,4,3,2,1]</code> <br>\n 第二步：把 <code>[0,k-1=2]</code>  的元素进行反转:  <code>[7,6,5,4,3,2,1]</code>  =&gt; <code>[5,6,7,4,3,2,1]</code> <br>\n 第三步：把 <code>[k,n-1]</code>  的元素进行反转:  <code>[5,6,7,4,3,2,1]</code>  =&gt; <code>[5,6,7,1,2,3,4]</code></p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start += <span class=\"number\">1</span>;</span><br><span class=\"line\">        end -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>关于这道题目的一点小思考:</p>\n<ul>\n<li>这道题其实还有另外一种解法，就是通过公式去推导出元素应该最终所在的位置，直接进行位置交换。这种思路也是可行的。具体解决可以参照下官网的解题方法。</li>\n<li>这是一道很简单的题目，最后出奇的解法也是颇感意外的，总有一种豁然开朗的感觉。我一直在想此法的解题人是怎么想到的呢。<span class=\"label warning\">这里面一定是蕴含一定的逻辑的。这种多次反转的逻辑，或许是一种规律？</span> 我一直没有想通。</li>\n<li>当你想到这个可以用一个环去解决问题的时候，可能永远就想不出 &quot;利用方向&quot; 去解决这个问题了。反观题目来讲，一直都是说的数组，而 “环” 是我们自己强加的一个思维方式。确实，当我们从环的角度出发，看到的就不是题目本身了，看到的是你的题目。<span class=\"label success\">✔️ 反观现实，你理解的现实就真正的是现实吗？你有没有陷入自己的 “环” 中去呢？不妨，重新看看你身边的人和事吧，尝试发现他们最真实的样子.</span></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "数组",
                "面经之算法题"
            ]
        }
    ]
}