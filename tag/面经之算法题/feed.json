{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"面经之算法题\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0495-teemo-attacking/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0495-teemo-attacking/",
            "title": "LC:495.提莫攻击",
            "date_published": "2021-11-13T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄。他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。</p>\n<p>当提莫攻击艾希，艾希的中毒状态正好持续  <code>duration</code>  秒。</p>\n<p>正式地讲，提莫在 t 发起发起攻击意味着艾希在时间区间  <code>[t, t + duration - 1]</code> （含  <code>t</code>  和  <code>t + duration - 1</code> ）处于中毒状态。如果提莫在中毒影响结束 前 再次攻击，中毒状态计时器将会 重置 ，在新的攻击之后，中毒影响将会在  <code>duration</code>  秒后结束。</p>\n<p>给你一个 非递减 的整数数组  <code>timeSeries</code>  ，其中  <code>timeSeries[i]</code>  表示提莫在  <code>timeSeries[i]</code>  秒时对艾希发起攻击，以及一个表示中毒持续时间的整数  <code>duration</code>  。</p>\n<p>返回艾希处于中毒状态的 总 秒数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1：</h3>\n<p>输入：timeSeries = [1,4], duration = 2<br>\n 输出：4<br>\n 解释：提莫攻击对艾希的影响如下：</p>\n<ul>\n<li>第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</li>\n<li>第 4 秒，提莫再次攻击艾希，艾希中毒状态又持续 2 秒，即第 4 秒和第 5 秒。<br>\n艾希在第 1、2、4、5 秒处于中毒状态，所以总中毒秒数是 4 。</li>\n</ul>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2：</h3>\n<p>输入：timeSeries = [1,2], duration = 2<br>\n 输出：3<br>\n 解释：提莫攻击对艾希的影响如下：</p>\n<ul>\n<li>第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</li>\n<li>第 2 秒，提莫再次攻击艾希，并重置中毒计时器，艾希中毒状态需要持续 2 秒，即第 2 秒和第 3 秒。<br>\n艾希在第 1、2、3 秒处于中毒状态，所以总中毒秒数是 3 。</li>\n</ul>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<ul>\n<li>1 &lt;= timeSeries.length &lt;= 104</li>\n<li>0 &lt;= timeSeries[i], duration &lt;= 107</li>\n<li>timeSeries 按 非递减 顺序排列</li>\n</ul>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）495.提莫攻击\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdGVlbW8tYXR0YWNraW5n\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdGVlbW8tYXR0YWNraW5n\">力扣（LeetCode）495.提莫攻击</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPoisonedDuration</span><span class=\"params\">(<span class=\"keyword\">int</span>[] timeSeries, <span class=\"keyword\">int</span> duration)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 中毒时长</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> poisonedCount = duration;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; timeSeries.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeSeries[i-<span class=\"number\">1</span>]+duration &lt; timeSeries[i])&#123;</span><br><span class=\"line\">                poisonedCount += duration;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                poisonedCount += (timeSeries[i] - timeSeries[i-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> poisonedCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0520-detect-capital/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/13/BQ/LeetCode/0520-detect-capital/",
            "title": "LC:520.检测大写字母",
            "date_published": "2021-11-13T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<p>全部字母都是大写，比如  <code>USA</code> 。<br>\n单词中所有字母都不是大写，比如  <code>leetcode</code>  。<br>\n如果单词不只含有一个字母，只有首字母大写， 比如  <code>Google</code>  。<br>\n给你一个字符串  <code>word</code>  。如果大写用法正确，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p>输入：word = “USA”<br>\n 输出：true</p>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p>输入：word = “FlaG”<br>\n 输出：false</p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p>1. <code>1 &lt;= word.length &lt;= 100</code> <br>\n2. <code>word</code>  由小写和大写英文字母组成</p>\n<p>来源：力扣（LeetCode）<br>\n链接：<br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）520.检测大写字符\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGV0ZWN0LWNhcGl0YWw=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGV0ZWN0LWNhcGl0YWw=\">力扣（LeetCode）520.检测大写字符</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">detectCapitalUse</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (word.length() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = word.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt;= <span class=\"string\">&#x27;Z&#x27;</span> &amp;&amp; c &gt;= <span class=\"string\">&#x27;A&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首字符大写</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> c2 = word.charAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c2 &lt;= <span class=\"string\">&#x27;Z&#x27;</span> &amp;&amp; c2 &gt;= <span class=\"string\">&#x27;A&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> word.equals(word.toUpperCase(Locale.ROOT));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String substring = word.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> substring.equals(substring.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首字母小写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> word.equals(word.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/06/BQ/LeetCode/0268-miss-number/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/06/BQ/LeetCode/0268-miss-number/",
            "title": "LC:268.丢失的数字",
            "date_published": "2021-11-06T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定一个包含  <code>[0, n]</code>  中  <code>n</code>  个数的数组  <code>nums</code>  ，找出  <code>[0, n]</code>  这个范围内没有出现在数组中的那个数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,0,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [9,6,4,2,3,5,7,0,1]</span><br><span class=\"line\">输出：8</span><br><span class=\"line\">解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-4\"><a class=\"markdownIt-Anchor\" href=\"#示例-4\">#</a> 示例 4</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n == nums.length</span><br><span class=\"line\">1 &lt;= n &lt;= 104</span><br><span class=\"line\">0 &lt;= nums[i] &lt;= n</span><br><span class=\"line\">nums 中的所有数字都 独一无二</span><br></pre></td></tr></table></figure>\n<h4 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\">#</a> 进阶</h4>\n<p>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题？</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）268.丢失的数字\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWlzc2luZy1udW1iZXIv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWlzc2luZy1udW1iZXIv\">力扣（LeetCode）268.丢失的数字</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）136. 只出现一次的数字\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2luZ2xlLW51bWJlci8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2luZ2xlLW51bWJlci8=\">力扣（LeetCode）136. 只出现一次的数字</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）287. 寻找重复数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlci8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlci8=\">力扣（LeetCode）287. 寻找重复数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）41. 缺失的第一个正数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtbWlzc2luZy1wb3NpdGl2ZS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtbWlzc2luZy1wb3NpdGl2ZS8=\">力扣（LeetCode）41. 缺失的第一个正数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）765. 情侣牵手\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291cGxlcy1ob2xkaW5nLWhhbmRzLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291cGxlcy1ob2xkaW5nLWhhbmRzLw==\">力扣（LeetCode）765. 情侣牵手</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>简单类型的题目。<br>\n先把题目读清楚：<br>\n区间 <code>[0,n]</code>  一共有 <code>n+1</code>  个数，而题目中说的是  <code>[0,n]</code>  是 <code>n</code>  个数的数组，所以只会少 <code>1</code>  个数字。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一排序\"><a class=\"markdownIt-Anchor\" href=\"#解法一排序\">#</a> 解法一：排序</h3>\n<p>将数组 <code>nums</code>  进行排序，找到 <code>nums[i]!=i</code>  的位置，就是缺少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != i) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二额外数组\"><a class=\"markdownIt-Anchor\" href=\"#解法二额外数组\">#</a> 解法二：额外数组</h3>\n<p>由于  <code>[0,n]</code>  是数字连续的。所以我们使用一个额外的  <code>n+1</code>  长度的数组  <code>pos</code> 。将 <code>nums[i]</code>  作为 <code>pos</code>  的索引赋值为 <code>1</code> ，从 <code>1</code>  开始遍历 <code>pos</code>  数组， <code>pos[i]==0</code>  即为少的那个数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        pos[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; pos.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> != pos[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法三数学计算\"><a class=\"markdownIt-Anchor\" href=\"#解法三数学计算\">#</a> 解法三：数学计算</h3>\n<p>区间 <code>[0,n]</code>  是连续的数组，那么利用等差数列的性质可以算出来 <code>n</code>  个数的总和，减去 <code>nums</code>  数组中的元素，则就是少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = <span class=\"number\">0</span>, sum = n * (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) cur += i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum - cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法四亦或\"><a class=\"markdownIt-Anchor\" href=\"#解法四亦或\">#</a> 解法四：亦或</h3>\n<p>亦或计算使然。  <code>a^a=0</code> , <code>0^a=a</code> .</p>\n<p>所以将  <code>0...n</code>  和  <code>nums[0...n]</code>  进行亦或计算，则计算出来的值就是缺少的那个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) ans ^= i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) ans ^= i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/",
            "title": "LC:42.接雨水",
            "date_published": "2021-11-04T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定  <code>n</code>  个非负整数表示每个宽度为  <code>1</code>  的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1：</h3>\n<p><img data-src=\"/images/ac-code/42/demo.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [4,2,0,3,2,5]</span><br><span class=\"line\">输出：9</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n == height.length</span><br><span class=\"line\">1 &lt;= n &lt;= 2 * 104</span><br><span class=\"line\">0 &lt;= height[i] &lt;= 105</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）42.接雨水\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlcg==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlcg==\">力扣（LeetCode）42.接雨水</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）407.接雨水II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\">力扣（LeetCode）407.接雨水II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<div class=\"links\"><div class=\"item\" title=\"方家小白-LeetCode题解.407.接雨水II\" style=\"--block-color:#e0b971;\"><a href=\"https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/\" class=\"image\" data-background-image=\"https://avatars.githubusercontent.com/u/22616214?v=4\"></a>\n          <div class=\"info\">\n          <a href=\"https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/\" class=\"title\">方家小白-LeetCode题解.407.接雨水II</a>\n          <p class=\"desc\">日常积累的代码，知识点, 数据结构与算法的学习与实现，以及例题分享</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trapRainWater</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] heightMap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMap.length &lt;= <span class=\"number\">2</span> || heightMap[<span class=\"number\">0</span>].length &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = heightMap.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = heightMap[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[m][n];</span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1[<span class=\"number\">1</span>] - o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == m - <span class=\"number\">1</span> || j == <span class=\"number\">0</span> || j == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i * n + j, heightMap[i][j]&#125;);</span><br><span class=\"line\">                visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dirs = &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] curr = pq.poll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = curr[<span class=\"number\">0</span>] / n + dirs[k];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = curr[<span class=\"number\">0</span>] % n + dirs[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; !visit[nx][ny]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curr[<span class=\"number\">1</span>] &gt; heightMap[nx][ny]) &#123;</span><br><span class=\"line\">                    res += curr[<span class=\"number\">1</span>] - heightMap[nx][ny];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nx * n + ny, Math.max(heightMap[nx][ny], curr[<span class=\"number\">1</span>])&#125;);</span><br><span class=\"line\">                visit[nx][ny] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0407-trapping-rain-water-ii/",
            "title": "LC:407.接雨水II",
            "date_published": "2021-11-04T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你一个  <code>m x n</code>  的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p><img data-src=\"/images/ac-code/407/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p><img data-src=\"/images/ac-code/407/demo2.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m == heightMap.length</span><br><span class=\"line\">n == heightMap[i].length</span><br><span class=\"line\">1 &lt;= m, n &lt;= 200</span><br><span class=\"line\">0 &lt;= heightMap[i][j] &lt;= 2 * 104</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）407.接雨水II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJhcHBpbmctcmFpbi13YXRlci1paQ==\">力扣（LeetCode）407.接雨水II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h3 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h3>\n<div class=\"links\"><div class=\"item\" title=\"方家小白-LeetCode题解-42.接雨水\" style=\"--block-color:#e0b971;\"><a href=\"http://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/\" class=\"image\" data-background-image=\"https://avatars.githubusercontent.com/u/22616214?v=4\"></a>\n          <div class=\"info\">\n          <a href=\"http://fangjiaxiaobai.github.io/2021/11/04/BQ/LeetCode/0042.trapping-rain-water/\" class=\"title\">方家小白-LeetCode题解-42.接雨水</a>\n          <p class=\"desc\">日常积累的代码，知识点, 数据结构与算法的学习与实现，以及例题分享</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trapRainWater</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] heightMap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMap.length &lt;= <span class=\"number\">2</span> || heightMap[<span class=\"number\">0</span>].length &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = heightMap.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = heightMap[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[m][n];</span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1[<span class=\"number\">1</span>] - o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == m - <span class=\"number\">1</span> || j == <span class=\"number\">0</span> || j == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i * n + j, heightMap[i][j]&#125;);</span><br><span class=\"line\">                visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dirs = &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] curr = pq.poll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = curr[<span class=\"number\">0</span>] / n + dirs[k];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = curr[<span class=\"number\">0</span>] % n + dirs[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; !visit[nx][ny]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curr[<span class=\"number\">1</span>] &gt; heightMap[nx][ny]) &#123;</span><br><span class=\"line\">                    res += curr[<span class=\"number\">1</span>] - heightMap[nx][ny];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pq.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nx * n + ny, Math.max(heightMap[nx][ny], curr[<span class=\"number\">1</span>])&#125;);</span><br><span class=\"line\">                visit[nx][ny] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "有点难的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/03/BQ/LeetCode/0367-valid-perfect-square/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/03/BQ/LeetCode/0367-valid-perfect-square/",
            "title": "LC:367.有效的完全平方数",
            "date_published": "2021-11-03T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给定一个 正整数  <code>num</code>  ，编写一个函数，如果  <code>num</code>  是一个完全平方数，则返回  <code>true</code>  ，否则返回  <code>false</code>  。</p>\n<p>进阶：不要 使用任何内置的库函数，如   <code>sqrt</code>  。</p>\n<p></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = 16</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = 14</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p><code>1 &lt;= num &lt;= 2^31 - 1</code></p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）367. 有效的完全平方数\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGVyZmVjdC1zcXVhcmU=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGVyZmVjdC1zcXVhcmU=\">力扣（LeetCode）367. 有效的完全平方数</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>简单的题目，没什么可以分析的。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一规律\"><a class=\"markdownIt-Anchor\" href=\"#解法一规律\">#</a> 解法一：规律</h3>\n<p><code>4=1+3</code>   <code>9=1+3+5</code>   <code>16=1+3+5+7</code>  以此类推，模仿它可以使用一个 <code>while</code>  循环，不断减去一个从 <code>1</code>  开始不断增大的奇数，若最终减成了 <code>0</code> ，说明是完全平方数，否则，不是。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPerfectSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      num -= num1;</span><br><span class=\"line\">      num1 += <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二-平方计算\"><a class=\"markdownIt-Anchor\" href=\"#解法二-平方计算\">#</a> 解法二：平方计算</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPerfectSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxTry = num &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tryCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tryCount &lt;= maxTry) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == tryCount * tryCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; tryCount * tryCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tryCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/02/BQ/LeetCode/0237-delete-node-in-a-linked-list/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/02/BQ/LeetCode/0237-delete-node-in-a-linked-list/",
            "title": "LC:237.删除链表中的节点",
            "date_published": "2021-11-02T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点  <code>head</code>  ，只能直接访问 要被删除的节点 。</p>\n<p>题目数据保证需要删除的节点 不是末尾节点 。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p><img data-src=\"/images/ac-code/237/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [4,5,1,9], node = 5</span><br><span class=\"line\">输出：[4,1,9]</span><br><span class=\"line\">解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p><img data-src=\"/images/ac-code/237/demo1.jpeg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [4,5,1,9], node = 1</span><br><span class=\"line\">输出：[4,5,9]</span><br><span class=\"line\">解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4], node = 3</span><br><span class=\"line\">输出：[1,2,4]</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-4\"><a class=\"markdownIt-Anchor\" href=\"#示例-4\">#</a> 示例 4</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [0,1], node = 0</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-5\"><a class=\"markdownIt-Anchor\" href=\"#示例-5\">#</a> 示例 5</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [-3,5,-99], node = -3</span><br><span class=\"line\">输出：[5,-99]</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示：</h2>\n<ul>\n<li>链表中节点的数目范围是 [2, 1000]</li>\n<li>-1000 &lt;= Node.val &lt;= 1000</li>\n<li>链表中每个节点的值都是唯一的</li>\n<li>需要删除的节点 node 是 链表中的一个有效节点 ，且 不是末尾节点</li>\n</ul>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）237.删除链表中的节点\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVsZXRlLW5vZGUtaW4tYS1saW5rZWQtbGlzdC8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVsZXRlLW5vZGUtaW4tYS1saW5rZWQtbGlzdC8=\">力扣（LeetCode）237.删除链表中的节点</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>需要特别注意：入参中的 <code>Node</code>  不一定是头节点！</p>\n<p>所以 =&gt; 张冠李戴，就… 杀了李。</p>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/0575-distribute-candies/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/0575-distribute-candies/",
            "title": "LC:575.分糖果",
            "date_published": "2021-11-01T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><code>Alice</code>  有  <code>n</code>  枚糖，其中第  <code>i</code>  枚糖的类型为  <code>candyType[i]</code>  。 <code>Alice</code>  注意到她的体重正在增长，所以前去拜访了一位医生。</p>\n<p>医生建议  <code>Alice</code>  要少摄入糖分，只吃掉她所有糖的  <code>n / 2</code>  即可（ <code>n</code>  是一个偶数）。 <code>Alice</code>  非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。</p>\n<p>给你一个长度为  <code>n</code>  的整数数组  <code>candyType</code>  ，返回：  <code>Alice</code>  在仅吃掉  <code>n / 2</code>  枚糖的情况下，可以吃到糖的最多种类数。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<p>输入：candyType = [1,1,2,2,3,3]<br>\n 输出：3<br>\n 解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。</p>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<p>输入：candyType = [1,1,2,3]<br>\n 输出：2<br>\n 解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。</p>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<p>输入：candyType = [6,6,6,6]<br>\n 输出：1<br>\n 解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。</p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<p>n == candyType.length<br>\n2 &lt;= n &lt;= 104<br>\nn 是一个偶数<br>\n - 105 &lt;= candyType [i] &lt;= 105</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）575.分糖果\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlzdHJpYnV0ZS1jYW5kaWVz\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlzdHJpYnV0ZS1jYW5kaWVz\">力扣（LeetCode）575.分糖果</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一\"><a class=\"markdownIt-Anchor\" href=\"#解法一\">#</a> 解法一</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">distributeCandies</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candyType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糖的种类</span></span><br><span class=\"line\">    Set&lt;Integer&gt; set = Arrays.stream(candyType).boxed().collect(Collectors.toSet());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 比较大小</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integer.min(set.size(), candyType.length &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "不做也罢的算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "title": "LC:1218.最长定差子序列",
            "date_published": "2021-11-01T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你一个整数数组  <code>arr</code>  和一个整数  <code>difference</code> ，请你找出并返回  <code>arr</code>  中最长等差子序列的长度，该子序列中相邻元素之间的差等于  <code>difference</code>  。</p>\n<p>子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从  <code>arr</code>  派生出来的序列。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,2,3,4], difference = 1</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [1,2,3,4]。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,3,5,7], difference = 1</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [7,5,3,1]。</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= arr.length &lt;= 105</span><br><span class=\"line\">-104 &lt;= arr[i], difference &lt;= 104</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）1218.最长定差子序列\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\">力扣（LeetCode）1218.最长定差子序列</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#解法一-动态规划\">#</a> 解法一：动态规划</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubsequence</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> difference)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">40001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">20000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        dp[arr[i] + offset] = Integer.max(<span class=\"number\">1</span>, dp[arr[i] + offset - difference] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxLength &lt; dp[arr[i] + offset]) &#123;</span><br><span class=\"line\">            maxLength = dp[arr[i] + offset];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#解法二暴力解法\">#</a> 解法二：暴力解法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span> || arr.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 最长子序列的长度数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">t[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组arr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    t[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] - difference == arr[j]) &#123;</span><br><span class=\"line\">            t[i] = t[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxLength &lt; t[i]) &#123;</span><br><span class=\"line\">                maxLength = t[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> maxLength;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "动态规划",
                "leetCode",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "LC:反转链表I",
            "date_published": "2021-08-29T09:25:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<blockquote>\n<p>示例一</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase1.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2,3,4,5]<br>\n 输出：[5,4,3,2,1]</p>\n<blockquote>\n<p>示例二</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase2.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2]<br>\n 输出：[2,1]</p>\n<blockquote>\n<p>示例三</p>\n</blockquote>\n<p>输入：head = []<br>\n 输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>\n-5000 &lt;= Node.val &lt;= 5000</p>\n<p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）206.反转链表\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\">力扣（LeetCode）206.反转链表</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一道非常简单的题目。也是很容易出现<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlQkUlRTUlODUlOEIlRTYlOTUlODglRTUlQkElOTQvNTYzOTE3OA==\">达克效应</span>的一道题目。 为什么呢？应为这道题太简单了啊。 <b>思路</b> 太简单了啊。 但是真正去写的话，可不见得真有那么简单。</p>\n<p>简单的题目，我们还是 以图的形式来展示。</p>\n<h3 id=\"思路一-迭代链表-创建新节点重组成新链表\"><a class=\"markdownIt-Anchor\" href=\"#思路一-迭代链表-创建新节点重组成新链表\">#</a> 思路一：迭代链表，创建新节点，重组成新链表</h3>\n<h4 id=\"思路解析\"><a class=\"markdownIt-Anchor\" href=\"#思路解析\">#</a> 思路解析</h4>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution1.png\" alt=\"一图胜千言\"></p>\n<p>核心思路如标题。 首先将遍历的原链表中的节点值复制到新建的节点中 (a 步骤), 节点 next 指针指向是上一个节点，没有则为 null (b 步骤). 遍历链表的所有节点。</p>\n<p>这样其实会生成一个新的链表。也就说会同时存在两条链表。</p>\n<p><span class=\"label success\">✊时间复杂度为 O (n)， 空间复杂度为 O (n)</span></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历旧链表,新建节点，并且拼接成新链表。</span></span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != head) &#123;</span><br><span class=\"line\">            ListNode curr = <span class=\"keyword\">new</span> ListNode(head.val);</span><br><span class=\"line\">            curr.next = pre;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二-迭代变更链表的指针指向\"><a class=\"markdownIt-Anchor\" href=\"#思路二-迭代变更链表的指针指向\">#</a> 思路二：迭代变更链表的指针指向</h3>\n<h4 id=\"思路解析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-2\">#</a> 思路解析</h4>\n<p>这种思路也是比较简单的，但是一定要想好喽之后，再看开始编码，要不然很容易思绪错乱。</p>\n<p>图解:</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution2.png\" alt=\"一图胜千言\"></p>\n<p>这种解法需要两个指针， pre 代表其前一个节点， cur 代表后一个节点。进行遍历，从而实现 指针指向的变更。 当然，还需要一个临时节点去帮忙 pre 和 cur 指针，向后移动。</p>\n<p><span class=\"label success\">✊时间复杂度是 O (n); 空间复杂度是 O (3);</span></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = head, cur = head.next;</span><br><span class=\"line\">        <span class=\"comment\">// !!注意:断开头节点的next指针，避免产生环型链表。</span></span><br><span class=\"line\">        pre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != cur) &#123;</span><br><span class=\"line\">            ListNode tempNode = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tempNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路三-递归方式-变更指针\"><a class=\"markdownIt-Anchor\" href=\"#思路三-递归方式-变更指针\">#</a> 思路三：递归方式， 变更指针</h3>\n<h4 id=\"思路解析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-3\">#</a> 思路解析</h4>\n<p>这思路三，其实是思路二的不同写法。 这种实现方法首先就需要将 链表 “递” 到底，然后在归的时候，把 节点链接到一起。如下图</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution3.png\" alt=\"一图胜千言\"></p>\n<p>这样说起来，递归这种方式来解决反转类的问题好像会有一种与生俱来的优势。  <code>首先递进去，然后归出来</code> 。</p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归入口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(head, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode currNode, ListNode preNode)</span> </span>&#123;</span><br><span class=\"line\">        ListNode headNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == currNode) &#123;</span><br><span class=\"line\">            headNode = preNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            headNode = reverse(currNode.next, currNode);</span><br><span class=\"line\">            currNode.next = preNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> headNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这一道题考的是简单的逻辑问题，实属简单至极的题目。要注意 陷入 “达克效应”。</p>\n<p>勿以题小而不做。</p>\n<p>使用头递归来做反转类似的题目，好像是一种天然支持的特性。但是在实际的开发过程中，不建议过多的使用递归的方式，一方面不具备可读性。另一方面，递归方式对性能不太优化，还有重要的是要考虑栈溢出的风险。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）189.反转数组\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）189.反转数组</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）92.反转链表II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\">力扣（LeetCode）92.反转链表II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）7.整数反转\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\">力扣（LeetCode）7.整数反转</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）344.反转字符串\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\">力扣（LeetCode）344.反转字符串</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "面经之算法题",
                "链表"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "title": "LC:反转数组",
            "date_published": "2021-08-19T06:48:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<blockquote>\n<p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>\n</blockquote>\n<p>进阶：</p>\n<p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>\n你可以使用空间复杂度为 O (1) 的 原地 算法解决这个问题吗？</p>\n<p>示例 1:</p>\n<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>\n 输出: [5,6,7,1,2,3,4]<br>\n 解释:<br>\n 向右旋转 1 步: [7,1,2,3,4,5,6]<br>\n 向右旋转 2 步: [6,7,1,2,3,4,5]<br>\n 向右旋转 3 步: [5,6,7,1,2,3,4]</p>\n<p>示例 2:</p>\n<p>输入：nums = [-1,-100,3,99], k = 2<br>\n 输出：[3,99,-1,-100]<br>\n 解释:<br>\n 向右旋转 1 步: [99,-1,-100,3]<br>\n 向右旋转 2 步: [3,99,-1,-100]</p>\n<div class=\"note warning\">\n<p>提示</p>\n</div>\n<p>1 &lt;= nums.length &lt;= 2 * 104<br>\n-231 &lt;= nums[i] &lt;= 231 - 1<br>\n0 &lt;= k &lt;= 105</p>\n<hr>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<h3 id=\"解法1顺序后移法\"><a class=\"markdownIt-Anchor\" href=\"#解法1顺序后移法\">#</a> 解法 1: 顺序后移法</h3>\n<p>将最后一个元素赋值给临时变量，然后将其他元素顺序后移一个位置。重复此操作 k 次。</p>\n<p>但是需要注意的是:</p>\n<ul>\n<li>时间复杂度。这种算法在最优时时间复杂度是 O (n). 最差情况下是 O (n^2). 在 LeetCode 上是没法 AC 的。</li>\n<li>k 是会大于数组长度的。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解决k&gt;nums.length问题</span></span><br><span class=\"line\">        k = k % nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = length - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            nums[j] = nums[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种解决方法在数据量较大的情况下就会报错 <code>超出时间限制了</code> 。<br>\n即使 你在循环修改使用  <code>System.arraycopy(nums, 0, nums, 1, length - 1);</code>  来替换掉内层循环，也是不可以 <code>AC</code>  的。</p>\n<h3 id=\"解法2-优化解法1空间换时间\"><a class=\"markdownIt-Anchor\" href=\"#解法2-优化解法1空间换时间\">#</a> 解法 2: 优化解法 1, 空间换时间</h3>\n<p>按照规律将 nums 数组中的值，赋值到新数组中。然后使用新数组覆盖原数组。<br>\n那规律是什么呢？<br>\n 设：<br>\n <code>i</code>  为数组的的下标。  <code>newArr</code>  为新的数组， <code>n</code>  为数组总长度，<br>\n 那么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newArr[(i+k)%n] = nums[i]</span><br></pre></td></tr></table></figure>\n<p><code>AC</code>  代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        newArr[(i + k) % n] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.arraycopy(newArr, <span class=\"number\">0</span>, nums, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC 之后显示：<br>\n执行用时  <code>1 ms</code> <br>\n 内存消耗： <code>55.1 MB</code></p>\n<p>这种方式，时间复杂度得到显著的提升，但是带来了额外的空间消耗。而且这种空间消耗是等于原来占用的数据大小。</p>\n<p>那是否还有其他方式呢？</p>\n<h3 id=\"解法3-反转\"><a class=\"markdownIt-Anchor\" href=\"#解法3-反转\">#</a> 解法 3: 反转</h3>\n<p>这种方式是一种比较简单的方式，有点类似于脑筋急转弯的意思。抛开之前的环装思路。将这个数组看成具有方向的一组数据。将这组数据分成三组： <code>[0,k-1]</code> , <code>k</code> , <code>[k+1,length]</code> . 先将  <code>[0,k-1]</code>  反转，再把  <code>[k+1,length]</code>  反转，最后把这个数组反转。这样操作之后，就是最后结果了。</p>\n<p>比如，数组： <code>[1,2,3,4,5,6,7]</code> ,  <code>k=3</code></p>\n<p>第一步：把整体数组进行反转:  <code>[1,2,3,4,5,6,7]</code>  =&gt;  <code>[7,6,5,4,3,2,1]</code> <br>\n 第二步：把 <code>[0,k-1=2]</code>  的元素进行反转:  <code>[7,6,5,4,3,2,1]</code>  =&gt; <code>[5,6,7,4,3,2,1]</code> <br>\n 第三步：把 <code>[k,n-1]</code>  的元素进行反转:  <code>[5,6,7,4,3,2,1]</code>  =&gt; <code>[5,6,7,1,2,3,4]</code></p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start += <span class=\"number\">1</span>;</span><br><span class=\"line\">        end -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>关于这道题目的一点小思考:</p>\n<ul>\n<li>这道题其实还有另外一种解法，就是通过公式去推导出元素应该最终所在的位置，直接进行位置交换。这种思路也是可行的。具体解决可以参照下官网的解题方法。</li>\n<li>这是一道很简单的题目，最后出奇的解法也是颇感意外的，总有一种豁然开朗的感觉。我一直在想此法的解题人是怎么想到的呢。<span class=\"label warning\">这里面一定是蕴含一定的逻辑的。这种多次反转的逻辑，或许是一种规律？</span> 我一直没有想通。</li>\n<li>当你想到这个可以用一个环去解决问题的时候，可能永远就想不出 &quot;利用方向&quot; 去解决这个问题了。反观题目来讲，一直都是说的数组，而 “环” 是我们自己强加的一个思维方式。确实，当我们从环的角度出发，看到的就不是题目本身了，看到的是你的题目。<span class=\"label success\">✔️ 反观现实，你理解的现实就真正的是现实吗？你有没有陷入自己的 “环” 中去呢？不妨，重新看看你身边的人和事吧，尝试发现他们最真实的样子.</span></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "数组",
                "面经之算法题"
            ]
        }
    ]
}