{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"日拱一卒\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/15/onedayday/2023-02-15-cache-multi/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/15/onedayday/2023-02-15-cache-multi/",
            "title": "分布式缓存",
            "date_published": "2023-02-15T10:18:18.000Z",
            "content_html": "<h3 id=\"缓存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#缓存雪崩\">#</a> 缓存雪崩</h3>\n<p><b>缓存在同一时刻一起失效， 大量的请求直接打到了 <code>DB</code>  上。</b></b></p>\n<p><b>解决方案:</b></p>\n<ul>\n<li><b>缓存失效时间设置一个随机值，避免大量缓存同时失效。</b></li>\n<li><b>设置热点数据永远不过期，有更新操作就更新缓存。</b></li>\n</ul>\n<p>举个例子：</p>\n<p>假设有个定时任务在每天凌晨 3 点的时候会更新缓存，好巧不巧。凌晨 <code>3</code>  点，有一个秒杀活动。得！清除缓存的一刹那，大量请求涌入，直接打到了 DB 上。这不就刺激了么，  <code>DBA</code>  有了一个不眠夜。</p>\n<p>重启 <code>DBA</code> ，还是会被瞬间打挂。</p>\n<h3 id=\"缓存击穿\"><a class=\"markdownIt-Anchor\" href=\"#缓存击穿\">#</a> 缓存击穿</h3>\n<p><b>一个 <code>Key</code>  非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 <code>Key</code>  在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库。</b></p>\n<p>理解就是通过一个点，击穿了缓存这个屏障。</p>\n<p><b>解决方案:</b></p>\n<ul>\n<li><b>设置热点数据不过期</b></li>\n<li><b>同一个数据，查 <code>DB</code>  互斥。</b></li>\n</ul>\n<p>例子同上，区别在于 缓存击穿是一个热点 <code>key</code> ， 而缓存雪崩时大面积的 <code>key</code> .</p>\n<h3 id=\"缓存穿透\"><a class=\"markdownIt-Anchor\" href=\"#缓存穿透\">#</a> 缓存穿透</h3>\n<p><b>缓存穿透是指缓存和数据库中都没有的数据。请求频繁查询数据库。</b></p>\n<p><b>解决办法:</b></p>\n<ul>\n<li><b>特定接口可以通过参数校验来解决</b></li>\n<li><b>布隆过滤器。</b></li>\n<li><b>不存在的值也缓存。</b></li>\n</ul>\n<p>这个更简单了。比如 根据 <code>id</code>  去请求商品，商品 <code>id</code>  都是大于 <code>0</code>  的， 请求偏偏用了 <code>id=-1</code> . 这不又刺激了么又.</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/14/onedayday/2023-02-14.jvm-gc/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/14/onedayday/2023-02-14.jvm-gc/",
            "title": "JVM GC 分析",
            "date_published": "2023-02-14T10:18:18.000Z",
            "content_html": "<h2 id=\"频繁gc\"><a class=\"markdownIt-Anchor\" href=\"#频繁gc\">#</a> 频繁 GC</h2>\n<p>今天分享一个面试题，频繁 <code>GC</code>  怎么处理…</p>\n<p>且不说为什么频繁 <code>GC</code> , 先聊聊你怎么发现  <code>JVM</code>  频繁 <code>GC</code>  的呢？</p>\n<p>告警啊！对的。<br>\n第一种就是  <code>FullGC</code>  的告警，<br>\n第二种就是 机器 CPU 的负载过高<br>\n第三种就是 大面积的接口超时，无法处理请求。</p>\n<p>那就好说了，咱们分析下什么地方可以进行 <code>GC</code> ?</p>\n<p>堆！ 但不仅仅是堆，还是堆外内存也会进行 <code>GC</code> 。</p>\n<p>当然我们主要说堆！</p>\n<p>先看一下常用的名词.</p>\n<p><img data-src=\"./images/2023-02-14-01.png\" alt=\"\"></p>\n<h3 id=\"younggc\"><a class=\"markdownIt-Anchor\" href=\"#younggc\">#</a>  <code>YoungGC</code></h3>\n<p><code>YoungGC</code>  指发生在新生代的垃圾收集动作，新生代中的对象朝生夕死，所以  <code>Minor GC</code>  非常频繁，回收速度也比较快。频繁的 <code>YoungGC</code>  是正常的，要看下  <code>YoungGC</code>  之后存活的对象是否有问题。</p>\n<p>对象优先在新生代  <code>Eden</code>  区中分配，如果  <code>Eden</code>  区没有足够的空间时，就会触发一次  <code>Young GC</code>  。</p>\n<p>新生代的垃圾收集器有 <code>Serial</code> ,  <code>ParNew</code> .</p>\n<p>经过几次 YGC 还存活的就到了老年代。</p>\n<h3 id=\"old-gc\"><a class=\"markdownIt-Anchor\" href=\"#old-gc\">#</a>  <code>old GC</code></h3>\n<p>指发生在老年代的 <code>GC</code> ，速度一般比  <code>Minor GC</code>  慢十倍以上。<br>\n老年代的垃圾收集器有  <code>Serial Old</code> ,  <code>Parallel Old</code> ， <code>CMS</code> .</p>\n<p>老年代会在两种情况下触发  <code>Old GC</code> ：<br>\n一是开启分配担保机制，根据历次  <code>Minor GC</code>  后进入老年代的对象大于当前老年代内存大小，判断  <code>Minor GC</code>  有风险，则会触发  <code>Old GC</code> ；比如：</p>\n<ul>\n<li>1. 系统并发高、执行耗时过长，或者数据量过大，导致  <code>young gc</code>  频繁，且 <code>gc</code>  后存活对象太多，但是  <code>survivor</code>  区存放不下（太小 或 动态年龄判断） 导致对象快速进入老年代 老年代迅速堆满</li>\n<li>2. 程序一次性加载过多对象到内存 （大对象），导致频繁有大对象进入老年代</li>\n<li>3. 存在内存溢出的情况，老年代驻留了大量释放不掉的对象， 只要有一点点对象进入老年代 就达到  <code>full gc</code>  的水位了<br>\n二是  <code>Minor GC</code>  后剩余对象太多，老年代放不下了也会触发  <code>Old GC</code> 。</li>\n</ul>\n<h3 id=\"full-gc\"><a class=\"markdownIt-Anchor\" href=\"#full-gc\">#</a>  <code>Full GC</code></h3>\n<p><code>FGC</code>  收集整个  <code>Young Gen</code>  以及部分  <code>old gen</code>  的  <code>GC</code> ，只有垃圾收集器  <code>G1</code>  有这个模式。但是我们通常说的 <code>Full GC</code>  指的是 针对新生代、老年代、永久代的全体内存空间的垃圾回收。</p>\n<p><code>full gc</code>  触发条件有</p>\n<ul>\n<li>1、老年代空间不足， 所以追因的方向就是导致 老年代空间不足的原因：<br>\n大量对象频繁进入老年代 + 老年代空间释放不掉</li>\n<li>2、元空间内存不足，也会触发 <code>Full GC</code></li>\n<li>3、堆外内存  <code>direct buffer memory</code>  使用不当导致</li>\n<li>4、代码问题。老年代占用不高，重启效果不明显。这种情况，大概率是在代码里搞执行了  <code>System.gc()</code> ;</li>\n</ul>\n<h3 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h3>\n<p>知道了上面的问题之后，解决就简单了。</p>\n<ul>\n<li>1、观察年轻代  <code>gc</code>  的情况，多久执行一次、每次 <code>gc</code>  后存活对象有多少  <code>survivor</code>  区多大<br>\n存活对象比较多 超过  <code>survivor</code>  区大小或触发动态年龄判断 =&gt; 调整内存分配比例</li>\n<li>2、观察老年代的内存情况 水位情况，多久执行一次、执行耗时多少、回收掉多少内存<br>\n如果在持续的上涨，而且 <code>full gc</code>  后回收效果不好，那么很有可能是内存溢出了 =&gt; 查看堆快照，定位内存溢出位置，修复代码。</li>\n<li>3、如果年轻代和老年代的内存都比较低，而且频率低，那么有可能是元数据区加载太多东西了</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/12/onedayday/2023-02-12.Https/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/12/onedayday/2023-02-12.Https/",
            "title": "Https连接过程",
            "date_published": "2023-02-12T10:18:18.000Z",
            "content_html": "<h2 id=\"https-的连接过程\"><a class=\"markdownIt-Anchor\" href=\"#https-的连接过程\">#</a> Https 的连接过程</h2>\n<p><code>Https</code>  全称是  <code>Hypertext Transfer Protocol Secure</code> ，超文本传输安全协议.</p>\n<p><code>Https</code>  相比  <code>Http</code>  是在  <code>TCP</code>  与  <code>HTTP</code>  之间多加了一层  <code>SSL</code> ( <code>Secure Socket Layer</code>  协议位于  <code>TCP/IP</code>  协议与各种应用层协议之间，为数据通讯提供安全支持)/ <code>TLS</code> （ <code>Transport Layer Security</code> ，安全传输层协议）</p>\n<p><code>Http</code>  协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议 <code>TLS/SSL</code>  具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生，所以 <code>HTTP</code>  与  <code>Https</code>  之间的关系： <code>HTTP+加密+认证+完整性保护 = Https</code> 。</p>\n<h3 id=\"连接过程\"><a class=\"markdownIt-Anchor\" href=\"#连接过程\">#</a> 连接过程</h3>\n<p><img data-src=\"/images/onedayday/2023-02-12-01.png\" alt=\"\"></p>\n<p>Https 会发送两次请求，经过非对称加密和对称加密两个加密过程.</p>\n<p>1. 客户端发送一个 <code>https</code>  的请求到服务端。首先还是会经过 Http 的三次握手。在第三次握手的时候，会发送客户端支持的加密套件和一个随机数 (随机数 1) 发送给服务端。<br>\n2. 服务端申请配置好数字证书，包含公钥和私钥。<br>\n3. 服务端也会生成一个随机数 (随机数 2)，将客户端发送过来的加密套件中选择一种，服务端生成的随机数，证书传送给客户端，证书中包含了很多信息，比如证书的颁发机构，过期时间，网址，公钥等<br>\n 4. 客户端解析证书，由客户端的 TLS 完成，首先会验证公钥是否有效，比如颁发机构，过期时间等。如果有异常，就会弹出警告信息，并结束通信。如果正常，则生成一个随机值（用于对称加密），然后用服务端的公钥对随机值进行<b>非对称加密</b>。<br>\n5. 客户端保存服务端的随机数，客户端会使用随机数 1 和随机数 2 再次生成一个随机数 (随机数 3) 并使用服务端发送回来的加密套件与服务端发送来公钥加密后 (预主秘钥) 传送到服务端。<br>\n6. 服务端使用证书的私钥对加密后的预主密钥进行非对称解密得到预主密钥。 使用约定的加密算法对预主密钥 + 随机数 1 + 随机数 2 进行加密生成会话秘钥。<br>\n7. 服务端把对称加密后的会话秘钥到客户端。客户端也会使用随机数 1，随机数 2，随机数 3 生成一个会话秘钥，并且是和服务端的会话秘钥是一样的。<br>\n8. 客户端通过会话秘钥对明文进行加密，然后进行数据传输。</p>\n<h3 id=\"https-连接为什么只用一次非对称加密内容传输都使用对称传输\"><a class=\"markdownIt-Anchor\" href=\"#https-连接为什么只用一次非对称加密内容传输都使用对称传输\">#</a> Https 连接为什么只用一次非对称加密，内容传输都使用对称传输？</h3>\n<p>非对称加密算法十分复杂，加密解密时间长，效率低，因此我们只在 TSL 连接建立时才使用，后面的数据传输环节统一使用对称加密，这样既能保证效率，又能极大的增强安全性。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/03/onedayday/2023-02-03.JUC/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/03/onedayday/2023-02-03.JUC/",
            "title": "JUC的线程同步类",
            "date_published": "2023-02-03T10:18:18.000Z",
            "content_html": "<p><code>Juc</code>  提供了很多关于线程安全的类，比如:</p>\n<ul>\n<li>线程池相关的:  <code>ThreadPoolExecutor</code> 、 <code>Executors</code>  等；</li>\n<li>锁相关的，如  <code>Lock</code> 、 <code>ReadWriteLock</code> 、 <code>ReentrantLock</code> ,  <code>ReentrantReadWriteLock</code>  等；</li>\n<li>线程安全的数据结构，应用于线程安全的集合中，如  <code>ConcurrentHashMap</code> 、 <code>LinkedBlockingQueue</code> 、 <code>DelayQueue</code>  等；</li>\n<li>还有高级的线程同步的类，如  <code>CountDownLatch</code> 、 <code>CyclicBarrier</code> 、 <code>Semaphore</code> , <code>Phaser</code>  等。</li>\n<li>还有一些原子类。如  <code>AtomicInteger</code> , <code>AtomicLong</code> ,  <code>AtomicReference</code>  等等</li>\n</ul>\n<p>今天我们就来看下  <code>JUC</code>  提供的线程同步类。</p>\n<h2 id=\"countdownlatch\"><a class=\"markdownIt-Anchor\" href=\"#countdownlatch\">#</a>  <code>CountDownLatch</code></h2>\n<p><code>CountDownLatch</code>  一种允许一个或多个线程等待，直到在其他线程中执行的一组操作完成的同步辅助工具类。 可以理解为这是一个计数器。</p>\n<p><code>CountDownLatch</code>  提供了个好用的方法:</p>\n<ul>\n<li><code>countDown()</code> ：调用一次，计数器减  <code>1</code> 。直到减为 0.</li>\n<li><code>await()</code> ：当计数器不为  <code>0</code>  时，则调用该方法的线程阻塞，当计数器为  <code>0</code>  时，可以唤醒等待的一个或者全部线程。</li>\n</ul>\n<h3 id=\"countdownlatch-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#countdownlatch-使用场景\">#</a>  <code>CountDownLatch</code>  使用场景：</h3>\n<ul>\n<li>排队，比如排队做核酸。假设有个 5 个人做核酸.</li>\n</ul>\n<p><code>CountDownLatch</code>  示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        CountDownLatch nucleinCountDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始做核酸啦~~~&quot;</span>);</span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;user&quot;</span> + j + <span class=\"string\">&quot; &quot;</span>+ LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class=\"string\">&quot;做完了核酸&quot;</span>);</span><br><span class=\"line\">                nucleinCountDownLatch.countDown();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nucleinCountDownLatch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;核算员着急忙慌的下班了, 可担心再来一个做核酸的....&quot;</span>);</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序执行结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始做核酸啦~~~</span><br><span class=\"line\">user：0 2023-02-03 22:26:44做完了核酸</span><br><span class=\"line\">user：1 2023-02-03 22:26:46做完了核酸</span><br><span class=\"line\">user：2 2023-02-03 22:26:48做完了核酸</span><br><span class=\"line\">user：3 2023-02-03 22:26:50做完了核酸</span><br><span class=\"line\">user：4 2023-02-03 22:26:52做完了核酸</span><br><span class=\"line\">核算员着急忙慌的下班了, 可担心再来一个做核算的....</span><br></pre></td></tr></table></figure>\n<h3 id=\"cyclicbarrier\"><a class=\"markdownIt-Anchor\" href=\"#cyclicbarrier\">#</a>  <code>CyclicBarrier</code></h3>\n<p><code>CyclicBarrier</code> , 直译过来就是 循环屏障。它允许一组线程全部等待，直接这组线程到达相同的状态的一种同步辅助工具.  CyclicBarriers 在涉及必须偶尔相互等待的固定大小线程组的程序中很有用。 屏障之所以称为循环屏障，是因为它可以在等待线程被释放后重新使用。这句话敲重点！！！</p>\n<p>使用起来也是相当简单！</p>\n<p>就是一个方法，await ().  等待这一组线程都执行相同的状态。与  <code>CountDownLatch</code>  不同的是，  <code>CyclicBarrier</code>  是可以重复使用的呦。</p>\n<p><code>CyclicBarrier</code>  应用起来太广泛了，我司有班车，不好意思，我司早晚提供免费班车… 你懂得 fa~</p>\n<p>上代码…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 假设每个班车有50个座位.</span></span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">50</span>, () -&gt; System.out.println(<span class=\"string\">&quot;满座了!  开始起飞.....&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 100人</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> RegularBus(cyclicBarrier, i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 班车</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegularBus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CyclicBarrier cyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 员工工号</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer ppId;</span><br><span class=\"line\"></span><br><span class=\"line\">        RegularBus(CyclicBarrier cyclicBarrier, Integer poorPeopleId) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ppId = poorPeopleId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ppId % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;工号为&quot;</span> + ppId + <span class=\"string\">&quot;的员工抢到了一个的座位.....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序执行结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">工号为10的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为0的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为30的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为20的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为40的员工抢到了一个的座位.....</span><br><span class=\"line\">满座了!  开始起飞.....</span><br><span class=\"line\">工号为50的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为60的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为70的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为80的员工抢到了一个的座位.....</span><br><span class=\"line\">工号为90的员工抢到了一个的座位.....</span><br><span class=\"line\">满座了!  开始起飞.....</span><br></pre></td></tr></table></figure>\n<h3 id=\"semaphore\"><a class=\"markdownIt-Anchor\" href=\"#semaphore\">#</a>  <code>Semaphore</code></h3>\n<p><code>Semaphore</code>  这个更简单了，直译！信号量。   他用于管理多线程中控制资源的访问与使用。 常见的就是限流。对应生活中的栗子，我想一下哈！</p>\n<p>还是我司！ 门卫！每天早上，我司大门口，都有两个五大三粗的壮汉在数 进来了多少辆车，出去了多少辆车。还时不时的用对讲机：洞幺， 洞幺， 我是洞两，还有几个车位，还有几个车位.<br>\n 对讲机那边：我草，我看看。地下没有车位了，地上问问拐哥.<br>\n 洞两: “洞拐，洞拐，地上还有几个车位？”<br>\n 洞拐: “多得很，多得很。”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 车位总数</span></span><br><span class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开车上班的人</span></span><br><span class=\"line\">        ThreadPoolExecutor richManThreadPool = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> finalI = i;</span><br><span class=\"line\">            richManThreadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 堵塞获取许可，即获取一个车位.</span></span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;开车上班的员工：&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; 抢到了一个车位：&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class=\"line\">                    <span class=\"comment\">// 假设在上班中....</span></span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 释放许可, 开车回家了...</span></span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序执行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:<span class=\"number\">07</span></span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:<span class=\"number\">07</span></span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:<span class=\"number\">07</span></span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:<span class=\"number\">07</span></span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:<span class=\"number\">07</span></span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">6</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:09</span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">7</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:09</span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">8</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:09</span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">9</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:09</span><br><span class=\"line\">开车上班的员工：pool-<span class=\"number\">1</span>-thread-<span class=\"number\">10</span> 抢到了一个车位：<span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">03</span> <span class=\"number\">23</span>:<span class=\"number\">01</span>:09</span><br></pre></td></tr></table></figure>\n<h3 id=\"phaser\"><a class=\"markdownIt-Anchor\" href=\"#phaser\">#</a>  <code>Phaser</code></h3>\n<p>说实话，这个东西，是我写这篇文章，收获最大的一个东西。扫盲了，在写这篇文章之前，我确实不知道还有这哥们.</p>\n<p><code>Phaser</code> （移相器）是 JDK 7 提供的，是一个可重用的同步屏障，在功能上类似于 CyclicBarrier 和 CountDownLatch，但支持更灵活的使用。 它的功能是等待所有线程到达之后，才继续或者开始进行新的一组任务。</p>\n<p><code>Phaser</code>  的功能非常强大，所以方法也比较多，我简单一说，大家细细研究！</p>\n<ul>\n<li><code>register()</code> ：注册新的参与者到  <code>Phaser</code></li>\n<li><code>arriveAndAwaitAdvance()</code> ：等待其他线程执行</li>\n<li><code>arriveAndDeregister()</code> ：注销此线程</li>\n<li><code>forceTermination()</code> ：强制  <code>Phaser</code>  进入终止态</li>\n<li><code>isTerminated()</code> ：判断  <code>Phaser</code>  是否终止</li>\n</ul>\n<p>这个我司的 <code>case</code>  就不好举例了。因为班车的栗子举过了呀。 所以，我就想起了有一次我在故宫玩，看到了一个旅行团…</p>\n<p>导游: “首先，这里我看到的是：太和殿，xxx (巴啦啦，说一通历史), 大家先去拍照，拍完照到我这里集合，咱们去下一个殿”<br>\n… 旅客在搔首弄姿…<br>\n 导游: “那么，这里我看到的是：中和殿，xxx (巴啦啦，说一通历史), 大家先去拍照，拍完照到我这里集合，咱们去下一个殿”<br>\n… 旅客在搔首弄姿…・<br>\n导游: “最后，这里我看到的是：保和殿，xxx (巴啦啦，说一通历史), 大家先去拍照，拍完照到我这里集合，咱们去看看皇帝和皇后睡觉的地方”<br>\n 旅客：拍啥拍了，直接去看吧</p>\n<p><code>Phaser</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Phaser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhaserTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 导游</span></span><br><span class=\"line\">        Phaser phaser = <span class=\"keyword\">new</span> TouristGuide();</span><br><span class=\"line\">        <span class=\"comment\">// 游客</span></span><br><span class=\"line\">        Tourist[] tourists = <span class=\"keyword\">new</span> Tourist[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tourists.length; i++) &#123;</span><br><span class=\"line\">            tourists[i] = <span class=\"keyword\">new</span> Tourist(phaser, <span class=\"string\">&quot;游客&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"comment\">// 注册 Phaser 等待的线程数，执行一次等待线程数 +1</span></span><br><span class=\"line\">            phaser.register();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个游客自行活动..</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tourists.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(tourists[i]).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tourist</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Phaser phaser;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tourist</span><span class=\"params\">(Phaser phaser, String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.phaser = phaser;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; | 到了&quot;</span>);</span><br><span class=\"line\">            phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>) * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; | 拍完照片了...&quot;</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">                Thread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>) * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; | 拍完照片了...&quot;</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">                Thread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5</span>) * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot;:\\&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧\\&quot;&quot;</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Phaser 每个阶段完成之后的事件通知.  (===&gt; 导游）</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TouristGuide</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phaser</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 每个阶段执行完之后的回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onAdvance</span><span class=\"params\">(<span class=\"keyword\">int</span> phase, <span class=\"keyword\">int</span> registeredParties)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (phase) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span> -&gt; &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;首先，这里我看到的是：太和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去下一个殿&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>-&gt; &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;那么，这里我看到的是：中和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去下一个殿&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span> -&gt; &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;最后，这里我看到的是：保和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去看看皇帝和皇后睡觉的地方&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">default</span> -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序执行结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">游客0 | 到了</span><br><span class=\"line\">游客4 | 到了</span><br><span class=\"line\">游客3 | 到了</span><br><span class=\"line\">游客2 | 到了</span><br><span class=\"line\">游客1 | 到了</span><br><span class=\"line\">首先，这里我看到的是：太和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去下一个殿</span><br><span class=\"line\">游客3 | 拍完照片了...</span><br><span class=\"line\">游客1 | 拍完照片了...</span><br><span class=\"line\">游客2 | 拍完照片了...</span><br><span class=\"line\">游客0 | 拍完照片了...</span><br><span class=\"line\">游客4 | 拍完照片了...</span><br><span class=\"line\">那么，这里我看到的是：中和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去下一个殿</span><br><span class=\"line\">游客3 | 拍完照片了...</span><br><span class=\"line\">游客4 | 拍完照片了...</span><br><span class=\"line\">游客0 | 拍完照片了...</span><br><span class=\"line\">游客1 | 拍完照片了...</span><br><span class=\"line\">游客2 | 拍完照片了...</span><br><span class=\"line\">最后，这里我看到的是：保和殿, xxx(巴啦啦，说一通历史), 大家先去拍照, 拍完照到我这里集合, 咱们去看看皇帝和皇后睡觉的地方</span><br><span class=\"line\">游客0:<span class=\"string\">&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧&quot;</span></span><br><span class=\"line\">游客2:<span class=\"string\">&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧&quot;</span></span><br><span class=\"line\">游客1:<span class=\"string\">&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧&quot;</span></span><br><span class=\"line\">游客4:<span class=\"string\">&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧&quot;</span></span><br><span class=\"line\">游客3:<span class=\"string\">&quot;拍啥拍，赶紧去看皇帝皇后睡觉吧&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/02/onedayday/2023-02-02.ThreadPool/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/02/onedayday/2023-02-02.ThreadPool/",
            "title": "线程池工作原理",
            "date_published": "2023-02-02T10:18:18.000Z",
            "content_html": "<h2 id=\"threadpoolexecutor-参数说明\"><a class=\"markdownIt-Anchor\" href=\"#threadpoolexecutor-参数说明\">#</a>  <code>ThreadPoolExecutor</code>  参数说明</h2>\n<p><code>ThreadPoolExecutor</code>  构造方法有以下四个，如下图所示：</p>\n<p><img data-src=\"https://images.gitbook.cn/ce89fc40-d2d4-11e9-b6c4-07be7ef1cd0f\" alt=\"enter image descriptionhere\"></p>\n<p>其中最后一个构造方法有  <code>7</code>  个构造参数，包含了前三个方法的构造参数，这  <code>7</code>  个参数名称如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其代表的含义如下：</p>\n<h3 id=\"1-corepoolsize\"><a class=\"markdownIt-Anchor\" href=\"#1-corepoolsize\">#</a> ①  <code>corePoolSize</code></h3>\n<p>线程池中的核心线程数，默认情况下核心线程一直存活在线程池中，如果将  <code>ThreadPoolExecutor</code>  的  <code>allowCoreThreadTimeOut</code>  属性设为  <code>true</code> ，如果线程池一直闲置并超过了  <code>keepAliveTime</code>  所指定的时间，核心线程就会被终止。</p>\n<h3 id=\"2-maximumpoolsize\"><a class=\"markdownIt-Anchor\" href=\"#2-maximumpoolsize\">#</a> ②  <code>maximumPoolSize</code></h3>\n<p>线程池中最大线程数，如果活动的线程达到这个数值以后，后续的新任务将会被阻塞（放入任务队列）。</p>\n<h3 id=\"3-keepalivetime\"><a class=\"markdownIt-Anchor\" href=\"#3-keepalivetime\">#</a> ③  <code>keepAliveTime</code></h3>\n<p>线程池的闲置超时时间，默认情况下对非核心线程生效，如果闲置时间超过这个时间，非核心线程就会被回收。如果  <code>ThreadPoolExecutor</code>  的<br>\n <code>allowCoreThreadTimeOut</code>  设为  <code>true</code>  的时候，核心线程如果超过闲置时长也会被回收。</p>\n<h3 id=\"4-unit\"><a class=\"markdownIt-Anchor\" href=\"#4-unit\">#</a> ④  <code>unit</code></h3>\n<p>配合  <code>keepAliveTime</code>  使用，用来标识  <code>keepAliveTime</code>  的时间单位。</p>\n<h3 id=\"5-workqueue\"><a class=\"markdownIt-Anchor\" href=\"#5-workqueue\">#</a> ⑤  <code>workQueue</code></h3>\n<p>线程池中的任务队列，使用  <code>execute()</code>  或  <code>submit()</code>  方法提交的任务都会存储在此队列中。</p>\n<h3 id=\"6-threadfactory\"><a class=\"markdownIt-Anchor\" href=\"#6-threadfactory\">#</a> ⑥  <code>threadFactory</code></h3>\n<p>为线程池提供创建新线程的线程工厂。</p>\n<h3 id=\"7-rejectedexecutionhandler\"><a class=\"markdownIt-Anchor\" href=\"#7-rejectedexecutionhandler\">#</a> ⑦  <code>rejectedExecutionHandler</code></h3>\n<p>线程池任务队列超过最大值之后的拒绝策略，   <code>RejectedExecutionHandler</code>  是一个接口，里面只有一个  <code>rejectedExecution</code>  方法，可在此方法内添加任务超出最大值的事件处理。  <code>ThreadPoolExecutor</code>  也提供了 4 种默认的拒绝策略：</p>\n<ul>\n<li><code>new ThreadPoolExecutor.DiscardPolicy()</code> ：丢弃掉该任务，不进行处理</li>\n<li><code>new ThreadPoolExecutor.DiscardOldestPolicy()</code> ：丢弃队列里最近的一个任务，并执行当前任务</li>\n<li><code>new ThreadPoolExecutor.AbortPolicy()</code> ：直接抛出  <code>RejectedExecutionException</code>  异常</li>\n<li><code>new ThreadPoolExecutor.CallerRunsPolicy()</code> ：既不抛弃任务也不抛出异常，直接使用主线程来执行此任务</li>\n</ul>\n<h2 id=\"线程池的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#线程池的工作原理\">#</a> 线程池的工作原理</h2>\n<p>当线程池中有任务需要执行时，线程池会判断如果线程数量没有超过核心数量就会新建线程池进行任务执行，如果线程池中的线程数量已经超过核心线程数，这时候任务就会被放入任务队列中排队等待执行；如果任务队列超过最大队列数，并且线程池没有达到最大线程数，就会新建线程来执行任务；如果超过了最大线程数，就会执行拒绝执行策略。</p>\n<h2 id=\"线程池关闭\"><a class=\"markdownIt-Anchor\" href=\"#线程池关闭\">#</a> 线程池关闭</h2>\n<p>线程池关闭，可以使用  <code>shutdown()</code>  或  <code>shutdownNow() </code> 方法，它们的区别是：</p>\n<ul>\n<li><code>shutdown()</code> ：不会立即终止线程池，而是要等所有任务队列中的任务都执行完后才会终止。执行完 shutdown 方法之后，线程池就不会再接受新任务了。</li>\n<li><code>shutdownNow()</code> ：执行该方法，线程池的状态立刻变成  <code>STOP</code>  状态，并试图停止所有正在执行的线程，不再处理还在池队列中等待的任务，执行此方法会返回未执行的任务。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2023/02/01/onedayday/2023-02-01.ThreadLocal/",
            "url": "https://fangjiaxiaobai.github.io/2023/02/01/onedayday/2023-02-01.ThreadLocal/",
            "title": "ThreadLocal 内存溢出",
            "date_published": "2023-02-01T10:18:18.000Z",
            "content_html": "<h2 id=\"threadlocal-内存溢出代码演示\"><a class=\"markdownIt-Anchor\" href=\"#threadlocal-内存溢出代码演示\">#</a> ThreadLocal 内存溢出代码演示</h2>\n<p>下面我们用代码实现  <code>ThreadLocal</code>  内存溢出的情况，请参考以下代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocalTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ThreadLocal threadLocal = <span class=\"keyword\">new</span> ThreadLocal();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Integer MOCK_MAX = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Integer THREAD_MAX = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_MAX);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; THREAD_MAX; i++) &#123;</span><br><span class=\"line\">            executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">                threadLocal.set(<span class=\"keyword\">new</span> ThreadLocalTest().getList());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">List <span class=\"title\">getList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MOCK_MAX; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;Version：JDK 8&quot;</span>);</span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;ThreadLocal&quot;</span>);</span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;Author：老王&quot;</span>);</span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;DateTime：&quot;</span> + LocalDateTime.now());</span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;Test：ThreadLocal OOM&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置  <code>JVM（Java 虚拟机）</code> 启动参数  <code>-Xmx100m</code>  （最大运行内存  <code>100 M</code> ），运行程序不久后就会出现如下异常：<br>\n<img data-src=\"https://images.gitbook.cn/8d5895b0-d43c-11e9-b555-8d750b738917\" alt=\"\"></p>\n<p>此时我们用  <code>VisualVM</code>  观察到程序运行的内存使用情况，发现内存一直在缓慢地上升直到内存超出最大值，从而发生内存溢出的情况。</p>\n<p>内存使用情况，如下图所示：<br>\n<img data-src=\"https://images.gitbook.cn/9eacecd0-d43c-11e9-b555-8d750b738917\" alt=\"\"></p>\n<h4 id=\"内存溢出原理分析\"><a class=\"markdownIt-Anchor\" href=\"#内存溢出原理分析\">#</a> 内存溢出原理分析</h4>\n<p>在开始之前，先来看下  <code>ThreadLocal</code>  是如何存储数据的。<br>\n首先，找到  <code>ThreadLocal.set()</code>  的源码，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出  <code>ThreadLocal</code>  首先获取到 ThreadLocalMap 对象，然后再执行  <code>ThreadLocalMap.set()</code>  方法，进而打开此方法的源码，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry e = tab[i];</span><br><span class=\"line\">         e != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == key) &#123;</span><br><span class=\"line\">            e.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            replaceStaleEntry(key, value, i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = ++size;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class=\"line\">        rehash();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从整个代码可以看出，首先  <code>ThreadLocal</code>  并不存储数据，而是依靠  <code>ThreadLocalMap</code>  来存储数据， <code>ThreadLocalMap</code>  中有一个<br>\n <code>Entry</code>  数组，每个  <code>Entry</code>  对象是以 K/V 的形式对数据进行存储的，其中  <code>K</code>  就是  <code>ThreadLocal</code>  本身，而 V<br>\n 就是要存储的值，如下图所示：</p>\n<p><img data-src=\"https://images.gitbook.cn/b2f02680-d43c-11e9-a4b6-d1d2b628f523\" alt=\"\"></p>\n<p>可以看出：一个 Thread 中只有一个  <code>ThreadLocalMap</code> ，每个  <code>ThreadLocalMap</code>  中存有多个  <code>ThreadLocal</code> ， <code>ThreadLocal</code>  引用关系如下：</p>\n<p><img data-src=\"https://images.gitbook.cn/8cb725e0-d7bb-11e9-b208-c16ced46e7a1\" alt=\"enter image descriptionhere\"></p>\n<p>其中：实线代表强引用，虚线代表弱引用（弱引用具有更短暂的生命周期，在执行垃圾回收时，一旦发现只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存）。</p>\n<p>看到这里我们就理解了  <code>ThreadLocal</code>  造成内存溢出的原因：如果 ThreadLocal 没有被直接引用（外部强引用），在 GC（垃圾回收）时，由于<br>\n <code>ThreadLocalMap</code>  中的  <code>key</code>  是弱引用，所以一定就会被回收，这样一来  <code>ThreadLocalMap</code>  中就会出现  <code>key</code>  为  <code>null</code>  的<br>\n Entry，并且没有办法访问这些数据，如果当前线程再迟迟不结束的话，这些  <code>key</code>  为  <code>null</code>  的  <code>Entry</code>  的  <code>value</code>  就会一直存在一条强引用链： <code>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</code>  并且永远无法回收，从而造成内存泄漏。</p>\n<h2 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h2>\n<p>切记 用完之后就  <code>remove</code>  掉！</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "日拱一卒"
            ]
        }
    ]
}