{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"kubernetes\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2022/07/31/k8s/seris03-pod-lifecycle/",
            "url": "https://fangjiaxiaobai.github.io/2022/07/31/k8s/seris03-pod-lifecycle/",
            "title": "k8s-Pod的生命周期",
            "date_published": "2022-07-31T10:18:00.000Z",
            "content_html": "<p><code>K8s</code>  中所有的内容都抽象为资源，资源实例化为对象。</p>\n<h2 id=\"集群资源的分类\"><a class=\"markdownIt-Anchor\" href=\"#集群资源的分类\">#</a> 集群资源的分类</h2>\n<h3 id=\"名称空间级别\"><a class=\"markdownIt-Anchor\" href=\"#名称空间级别\">#</a> 名称空间级别</h3>\n<ul>\n<li>工作负载型资源 (  <code>workload</code>  )：  <code>Pod</code> 、 <code>ReplicaSet</code> 、 <code>Deployment</code> 、 <code>StatefulSet</code> 、 <code>DaemonSet、Job</code> 、  <code>CronJob</code>  (  <code>ReplicationController</code>  在  <code>v1.11</code>  版本被废弃 )</li>\n<li>服务发现及负载均衡型资源 (  <code>ServiceDiscovery LoadBalance</code>  ):  <code>Service</code> 、 <code>Ingress</code> 、…</li>\n<li>配置与存储型资源： <code> Volume</code>  (存储卷)、 <code>CSI</code>  (容器存储接口，可以扩展各种各样的第三方存储卷)</li>\n<li>特殊类型的存储卷： <code>ConfigMap</code>  (当配置中心来使用的资源类型)、 <code>Secret</code>  (保存敏感数据)、  <code>DownwardAPI</code>  (把外部环境中的信息输出给容器)</li>\n</ul>\n<h3 id=\"集群级别\"><a class=\"markdownIt-Anchor\" href=\"#集群级别\">#</a> 集群级别</h3>\n<p>一旦定义在集群内都可见。</p>\n<p><code>Namespace</code> ,  <code>Node</code> ,  <code>Role</code> ,  <code>ClusterRole</code> ,  <code>RoleBindiing</code> ,  <code>ClusterRoleBinding</code></p>\n<h3 id=\"元数据型\"><a class=\"markdownIt-Anchor\" href=\"#元数据型\">#</a> 元数据型</h3>\n<p><code>HPA</code> 、 <code>PodTemplate</code> 、 <code>LimitRange</code></p>\n<p>在 <code>k8s</code>  中，一般使用  <code>yaml</code>  格式的文件来创建符合我们预期期望的 <code>pod</code> , 这样的  <code>yaml</code>  文件，我们一般成为 资源清单。</p>\n<ul>\n<li><code>apiVersion</code> :   <code>String</code> ,  <code>K8s Api</code>  的版本，可以用 <code>kubectl api-versions</code>  命令查询</li>\n<li><code>kind</code> :  <code>String</code> ,  <code>yaml</code>  定义的资源类型和角色</li>\n<li><code>metadata</code> :  <code>Object</code> , 元数据对象，固定值就写  <code>metadata</code>\n<ul>\n<li><code>name</code> : 元数据对象的名称</li>\n<li><code>namespace</code> : 元数据对象的命名空间，有我们自身定义</li>\n</ul>\n</li>\n<li><code>spec</code> : <code>Object</code>  详细定义对象，固定值是 <code>Spec</code>\n<ul>\n<li><code>containers[]</code> :  <code>list</code>  类型，这里是 <code>spec</code>  对象的容器列表定义，是个列表\n<ul>\n<li><code>name</code> :  <code>String</code> , 这里是定义容器的名字</li>\n<li><code>image</code> :  <code>String</code> , 这里定义要用到的镜像名称</li>\n<li><code>imagePullPolicy</code> :  <code>String</code> , 定义镜像拉取策略，有 <code>Always</code> , <code>Never</code> , <code>IfNotPresent</code> , 三个值。默认是  <code>Always</code> .\n<ul>\n<li>1、 <code>Always</code> : 每次都尝试拉取镜像</li>\n<li>2、 <code>Never</code> : 表示仅使用本地镜像</li>\n<li>3、 <code>IfNotPresent</code> : 如果本地有镜像就使用本地镜像，没有就拉取在线镜像。</li>\n</ul>\n</li>\n<li><code>command[]</code> ,  <code>List</code> , 容器启动命令，因为是数据可以指定多个，不指定则使用镜像打包时使用的启动命令</li>\n<li><code>args</code> :  <code>List，</code>  指定容器启动的命令参数，可以指定多个</li>\n<li><code>workingDir</code> :  <code>String</code> , 指定容器的工作目录</li>\n<li><code>volumeMountsp[]</code> ,  <code>List</code> : 指定容器内部的存储卷配置\n<ul>\n<li><code>name</code> :  <code>String</code> , 指定可以挂载的存储卷的名称</li>\n<li><code>mountPath</code> ,  <code>String</code> , 指定可以被容器挂载的存储卷的路径</li>\n<li><code>readOnly</code> ,  <code>String</code> , 设置存储卷路径的读写模型，  <code>true</code>  或者  <code>false</code> .</li>\n</ul>\n</li>\n<li><code>ports[]</code> ,  <code>List&lt;Object&gt;</code>  , 指定容器使用的端口列表\n<ul>\n<li><code>name</code> :  <code>String</code> , 端口名称</li>\n<li><code>containerPort</code> :  <code>String</code> , 容器你需要监听的端口号</li>\n<li><code>hostPort</code> :  <code>String</code> , 指定容器所在主机需要监听的端口号，默认跟上面  <code>containerPort</code>  相同， 注意设置了  <code>hostPort</code>  同一台主机无法启动该容器的相同副本</li>\n<li><code>protocol</code> :  <code>String</code> , 指定端口协议，支持  <code>TCP</code> , <code>UDP</code> , 默认是  <code>TCP</code></li>\n</ul>\n</li>\n<li><code>env[]</code> : <code>List&lt;Object&gt;</code>  , 指定容器运行前需要设置的环境变量列表\n<ul>\n<li><code>name</code> :  <code>String</code> , 环境变量名称</li>\n<li><code>value</code> :  <code>String</code> , 环境变量值</li>\n</ul>\n</li>\n<li><code>resources</code> :  <code>Object</code> , 指定资源限制和资源请求的值\n<ul>\n<li><code>limits</code> : 设置容器运行时的资源的运行上限\n<ul>\n<li><code>cpu</code> :  <code>String</code> ,  <code>CPU</code>  的限制，单位为  <code>core</code>  数，将用于  <code>docker run --cpu-shares</code>  参数。</li>\n<li><code>memory</code> :  <code>String</code> ,  <code>Mem</code>  内存的限制，单位为  <code>MIB</code> , <code>GiB</code></li>\n</ul>\n</li>\n<li><code>requests</code> :  <code>Object</code> , 指定容器启动和调度时的限制设置\n<ul>\n<li><code>cpu</code> :  <code>m</code> ,   <code>CPU</code>  请求。单位为 <code>core</code>  数，容器启动时初始化可用数量</li>\n<li><code>memory</code> :  <code>String</code> , 内存请求，单位  <code>MIB</code> ,  <code>Gib</code> , 容器启动的初始化可用数量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>restartPolicy</code> :  <code>String</code> , 定义 Pod 的重启策略，可选值是  <code>Always</code> ,  <code>OnFailure</code> , 默认值是  <code>Always</code> .\n<ul>\n<li>1. <code>Always</code> :  <code>Pod</code>  一旦终止运行，则无论容器是否终止，  <code>kubelet</code>  服务都将重启它。</li>\n<li>2、 <code>OnFailure</code> : 只有 <code>Pod</code>  以非 <code>0</code>  退出码终止时，  <code>kubelet</code>  才会重启该容器，如果容器正常结束，则不会重启</li>\n<li>3、 <code>Never</code> .  <code>Pod</code>  终止后， <code>kubelet</code>  将退出码报告给 <code>Master</code> ，不会重启 <code>Pod</code> .</li>\n</ul>\n</li>\n<li><code>nodeSelector</code> :  <code>Object</code> , 定义 <code>Node</code>  的 <code>label</code>  过滤标签，已 <code>key</code> , <code>value</code>  的格式指定。</li>\n<li><code>imagePullSecrets</code> :  <code>Object</code> , 定义 <code>pull</code>  镜像时使用 Secret 名称，以 <code>name:secretKey</code>  格式指定</li>\n<li><code>hostNetwork</code> :  <code>Boolean</code> , 定义是否使用主机网络，默认值为 <code>false</code> , 设置为 <code>true</code>  表示使用宿主机网络， 不使用 <code>docker</code>  网桥，同时设置了 <code>true</code>  将无法在同一台宿主机上启动第二个副本。</li>\n</ul>\n</li>\n</ul>\n<p>可以通过下面的命令实时查看 yaml 的配置内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl explain pod.</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\">#</a> 案例</h3>\n<p>通过资源清单创建一个 pod.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">sample-demo</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myapp</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span>   <span class=\"attr\">name:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br></pre></td></tr></table></figure>\n<p>使用  <code>kubectl create -f 01-sample-yaml.yaml</code>  创建</p>\n<p><img data-src=\"/images/k8s/03-02.png\" alt=\"\"></p>\n<p>使用命令  <code>kubectl get pods -o wide</code>  查看下 <code>pod</code>  的 <code>ip</code>  和 状态:</p>\n<p><img data-src=\"/images/k8s/03-03.png\" alt=\"\"></p>\n<p>然后使用   <code>curl 10.244.154.195</code>  可以看到</p>\n<p><img data-src=\"/images/k8s/03-04.png\" alt=\"\"></p>\n<p>正常返回了  <code>Nginx</code>  的首页信息。</p>\n<h2 id=\"pod-的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#pod-的生命周期\">#</a>  <code>Pod</code>  的生命周期</h2>\n<p><img data-src=\"/images/k8s/03-05.png\" alt=\"\"></p>\n<p>如上图， <code>pod</code>  的启动过程是:  <code>pod</code>  创建时会首先创建一个  <code>pause</code>  容器。然后执行创建多个  <code>Init</code>  容器，然后再启动 主容器，也就是一般我们使用镜像创建起来的具有业务属性的容器，称为主容器。 主容器会经历  <code>Start-&gt;Running-&gt;Stop</code> , 这些状态。</p>\n<h3 id=\"pause-容器\"><a class=\"markdownIt-Anchor\" href=\"#pause-容器\">#</a> Pause 容器</h3>\n<p>从名字上看， <code>pause</code>  是一个 &quot;暂停&quot; 的容器，它的作用是：解决 <code>pod</code>  的网络和存储的问题。 <code>pause</code>  容器称为  <code>Infra Container</code> , 其他的容器称为业务容器.   <code>Infra container</code>  是一个非常小的镜像，大概  <code>700KB </code> 左右，是一个 <code>C</code>  语言写的、永远处于 “暂停” 状态的容器。由于有了这样一个  <code>Infra container</code>  之后，其他所有容器都会通过  <code>Join Namespace</code>  的方式加入到  <code>Infra container</code>  的  <code>Network Namespace</code>  中。</p>\n<h3 id=\"init-容器\"><a class=\"markdownIt-Anchor\" href=\"#init-容器\">#</a> Init 容器</h3>\n<p><code>Pod</code>  能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的 <code>Init</code>  容器。<br>\n <code>Init</code>  容器与普通的容器非常像，除了如下两点：</p>\n<ul>\n<li><code>Init</code>  容器总是运行到成功完成为止</li>\n<li>每个  <code>Init</code>  容器都必须在下一个  <code>Init</code>  容器启动之前成功完成<br>\n如果  <code>Pod</code>  的  <code>Init</code>  容器失败， <code>Kubernetes</code>    <code>Pod</code> ，直到  <code>Init</code>  容器成功为止。然而，如果  <code>Pod</code>  对应的  <code>restartPolicy</code>  为  <code>Never</code> ，它不会重新启动</li>\n</ul>\n<p>因为  <code>Init</code>  容器具有与应用程序容器分离的单独镜像，所以它们的启动相关代码具有如下优势：</p>\n<ul>\n<li>它们可以包含并运行实用工具，但是出于安全考虑，是不建议在应用程序容器镜像中包含这<br>\n些实用工具的</li>\n<li>它们可以包含使用工具和定制化代码来安装，但是不能出现在应用程序镜像中。例如，创建镜像没必要  <code>FROM</code>  另一个镜像，只需要在安装过程中使用类似  <code>sed</code> 、  <code>awk</code> 、  <code>python</code>  或  <code>dig</code>  这样的工具。</li>\n<li>应用程序镜像可以分离出创建和部署的角色，而没有必要联合它们构建一个单独的镜像。</li>\n<li><code>Init</code>  容器使用  <code>Linux Namespace</code> ，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问  <code>Secret</code>  的权限，而应用程序容器则不能。</li>\n<li>它们必须在应用程序容器启动之前运行完成，而应用程序容器是并行运行的，所以  <code>Init</code>  容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法，直到满足了一组先决条件。</li>\n</ul>\n<h4 id=\"init小实验\"><a class=\"markdownIt-Anchor\" href=\"#init小实验\">#</a>  <code>init</code>  小实验。</h4>\n<p>实验目的:  <code>init</code>  容器会依次启动，只有  <code>init</code>  容器启动完成之后， 主容器才会启动.</p>\n<h5 id=\"实验步骤\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤\">#</a> 实验步骤</h5>\n<ul>\n<li>创建  <code>pod</code> .</li>\n<li>查看  <code>pod</code>  的状态变化</li>\n<li>查看  <code>pod</code>  中  <code>initC</code>  的日志</li>\n<li>创建  <code>Service-1</code></li>\n<li>查看  <code>pod</code>  的状态变化</li>\n<li>查看  <code>pod</code>  中  <code>initC</code>  的日志</li>\n<li>创建  <code>Service-2</code></li>\n<li>查看  <code>pod</code>  的状态变化</li>\n<li>查看  <code>pod</code>  中  <code>initC</code>  的日志</li>\n<li>查看  <code>pod</code>  的日志</li>\n</ul>\n<h6 id=\"创建-pod\"><a class=\"markdownIt-Anchor\" href=\"#创建-pod\">#</a> 创建  <code>pod</code> .</h6>\n<ul>\n<li><code>02-init-demo.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">init-demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">init-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-init-demo</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;echo the app is running! &amp;&amp; sleep 3600&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init-myservice-1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&quot;until nslookup my-service-1; do echo &#x27;waiting for my-service-1&#x27;; sleep 2; done;&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init-myservice-2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&quot;until nslookup my-service-2; do echo &#x27;waiting for my-service-2&#x27;; sleep 2; done;&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>使用命令  <code>kubectl create -f 02-init-demo.yaml</code>  创建  <code>pod</code> .</p>\n<p>新开一个窗口使用  <code>kubectl get pods -w -o wide</code>  命令 查看 pod 的启动变化.<br>\n<img data-src=\"/images/k8s/03-07.jpg\" alt=\"\"></p>\n<h6 id=\"查看查看-pod-中init-c-1的日志\"><a class=\"markdownIt-Anchor\" href=\"#查看查看-pod-中init-c-1的日志\">#</a> 查看查看  <code>pod</code>  中 <code>init-c-1</code>  的日志</h6>\n<p><img data-src=\"/images/k8s/03-08.jpg\" alt=\"\"></p>\n<p>发现  <code>initC-1</code>  一直在  <code>nslookup</code>  查找  <code>my-service-1</code> .</p>\n<h6 id=\"创建-service-1\"><a class=\"markdownIt-Anchor\" href=\"#创建-service-1\">#</a> 创建  <code>Service-1</code></h6>\n<ul>\n<li><code>02-init-demo-my-service-01.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">     <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">     <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p>使用命令  <code>kubectl create -f 02-init-demo-my-service-01.yaml</code></p>\n<p>查看  <code>pod</code>  中第一个  <code>InitC</code>  的日志</p>\n<p><img data-src=\"/images/k8s/03-08.jpg\" alt=\"\"></p>\n<p>会出现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\t10.96.0.10</span><br><span class=\"line\">Address:\t10.96.0.10:53</span><br><span class=\"line\"></span><br><span class=\"line\">Name:\tmy-service-1.default.svc.cluster.local</span><br><span class=\"line\">Address: 10.108.140.48</span><br></pre></td></tr></table></figure>\n<p>然后查看  <code>pod</code>  的状态。会出现一条：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init-demo   0/1     Init:1/2   0          4m1s   10.244.154.204   k8s-node-01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"创建-service-2\"><a class=\"markdownIt-Anchor\" href=\"#创建-service-2\">#</a> 创建  <code>Service-2</code></h6>\n<ul>\n<li><code>02-init-demo-my-service-02.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">     <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">     <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p>使用命令  <code>kubectl create -f 02-init-demo-my-service-01.yaml</code></p>\n<p>查看  <code>pod</code>  中第二个 <code>InitC</code>  的日志直到出现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\t10.96.0.10</span><br><span class=\"line\">Address:\t10.96.0.10:53</span><br><span class=\"line\"></span><br><span class=\"line\">Name:\tmy-service-2.default.svc.cluster.local</span><br><span class=\"line\">Address: 10.107.13.223</span><br></pre></td></tr></table></figure>\n<p>然后查看  <code>pod</code>  的状态。会出现一条：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init-demo   0/1     PodInitializing   0          6m52s   10.244.154.204   k8s-node-01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p>然后就会启动  <code>pod</code>  . 最终出现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init-demo   1/1     Running           0          6m53s   10.244.154.204   k8s-node-01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p>然后查看  <code>pod</code>  的日志，会输出  <code>the app is running.</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@k8s-master-01 k8s-yamls]# kubectl logs -f init-demo</span><br><span class=\"line\">Defaulted container &quot;my-init-demo&quot; out of: my-init-demo, init-myservice-1 (init), init-myservice-2 (init)</span><br><span class=\"line\">the app is running!</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于init容器的特殊说明\"><a class=\"markdownIt-Anchor\" href=\"#关于init容器的特殊说明\">#</a> 关于 init 容器的特殊说明</h4>\n<ul>\n<li>在  <code>Pod</code>  启动过程中，  <code>Init</code>  容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出</li>\n<li>如果由于运行时或失败退出，将导致容器启动失败，它会根据  <code>Pod</code>  的  <code>restartPolicy</code>  指定的策略 进行重试。然而，如果  <code>Pod</code>  的  <code>restartPolicy</code>  设置为  <code>Always</code> ， <code>Init</code>  容器失败时会使用  <code>RestartPolicy</code>  策略</li>\n<li>在所有的  <code>Init</code>  容器没有成功之前， <code>Pod</code>  将不会变成  <code>Ready</code>  状态。 <code>Init</code>  容器的端口将不会在  <code>Service</code>  中进行聚集。 正在初始化中的  <code>Pod</code>  处于  <code>Pending</code>  状态，但应该会将  <code>Initializing</code>  状态设置为  <code>true</code></li>\n<li>如果  <code>Pod</code>  重启，所有  <code>Init</code>  容器必须重新执行</li>\n<li>对  <code>Init</code>  容器  <code>spec</code>  的修改被限制在容器  <code>image</code>  字段，修改其他字段都不会生效。更改  <code>Init</code>  容器的  <code>image</code>  字段，等价于重启该  <code>Pod</code></li>\n<li><code>Init</code>  容器具有应用容器的所有字段。除了  <code>readinessProbe</code>  ，因为  <code>Init</code>  容器无法定义不同于完成 ( <code>completion</code> ) 的就绪（ <code>readiness</code> ）之外的其他状态。这会在验证过程中强制执行</li>\n<li>在  <code>Pod</code>  中的每个  <code>app</code>  和  <code>Init</code>  容器的名称必须唯一；与任何其它容器共享同一个名称，会在验证时抛出错误.</li>\n</ul>\n<h2 id=\"探针检测\"><a class=\"markdownIt-Anchor\" href=\"#探针检测\">#</a> 探针检测</h2>\n<p>探针是由  <code>kubelet</code>  对容器执行的定期诊断。要执行诊断， <code>kubelet</code>  调用由容器实现的  <code>Handler</code> 。有三种类型的处理程序：</p>\n<ul>\n<li><code>ExecAction</code> ：在容器内执行指定命令。如果命令退出时返回码为  <code>0</code>  则认为诊断成功。</li>\n<li><code>TCPSocketAction</code> ：对指定端口上的容器的  <code>IP</code>  地址进行  <code>TCP</code>  检查。如果端口打开，则诊断被认为是成功的。</li>\n<li><code>HTTPGetAction</code> ：对指定的端口和路径上的容器的  <code>IP</code>  地址执行  <code>HTTP Get</code>  请求。如果响应的状态码大于等于  <code>200</code>  且小于  <code>400</code> ，则诊断被认为是成功的</li>\n</ul>\n<p>每次探测都将获得以下三种结果之一：</p>\n<ul>\n<li>成功：容器通过了诊断。</li>\n<li>失败：容器未通过诊断。</li>\n<li>未知：诊断失败，因此不会采取任何行动</li>\n</ul>\n<h3 id=\"探测的方式\"><a class=\"markdownIt-Anchor\" href=\"#探测的方式\">#</a> 探测的方式</h3>\n<ul>\n<li><code>livenessProbe</code> ：指示容器是否正在运行。如果存活探测失败，则  <code>kubelet</code>  会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为  <code>Success</code></li>\n<li><code>readinessProbe</code> ：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与  <code>Pod</code>  匹配的所有  <code>Service</code>  的端点中删除该  <code>Pod</code>  的  <code>IP</code>  地址。初始延迟之前的就绪状态默认为  <code>Failure</code> 。如果容器不提供就绪探针，则默认状态为  <code>Success</code></li>\n</ul>\n<h4 id=\"pod-hook\"><a class=\"markdownIt-Anchor\" href=\"#pod-hook\">#</a> Pod Hook</h4>\n<p><code>Pod hook</code> （钩子）是由  <code>Kubernetes</code>  管理的  <code>kubelet</code>  发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中。可以同时为  <code>Pod</code>  中的所有容器都配置  <code>hook</code></p>\n<p><code>Hook</code>  的类型包括两种：</p>\n<ul>\n<li><code>exec</code> ：执行一段命令</li>\n<li><code>HTTP</code> ：发送 <code>HTTP</code>  请求</li>\n</ul>\n<p><code>PodSpec</code>  中有一个  <code>restartPolicy</code>  字段，可能的值为  <code>Always</code> 、 <code>OnFailure</code>  和  <code>Never</code> 。默认为 <code>Always</code> 。  <code>restartPolicy</code>  适用于  <code>Pod</code>  中的所有容器。 <code>restartPolicy</code>  仅指通过同一节点上的  <code>kubelet</code>  重新启动容器。失败的容器由  <code>kubelet</code>  以五分钟为上限的指数退避延迟（ <code>10秒</code> ， <code>20秒</code> ， <code>40秒</code> …）重新启动，并在成功执行十分钟后重置。如  <code>Pod</code>  文档 中所述，一旦绑定到一个节点， <code>Pod</code>  将永远不会重新绑定到另一个节点。</p>\n<h4 id=\"pod-phase\"><a class=\"markdownIt-Anchor\" href=\"#pod-phase\">#</a> Pod phase</h4>\n<p><code>Pod</code>  的  <code>status</code>  字段是一个  <code>PodStatus</code>  对象， <code>PodStatus</code>  中有一个  <code>phase</code>  字段。<br>\n <code>PodStatus</code>  的相位（ <code>phase</code> ）是  <code>Pod</code>  在其生命周期中的简单宏观概述。该阶段并不是对容器或  <code>Pod</code>  的综合汇总，也不是为了做为综合状态机 <code>Pod</code>  相位的数量和含义是严格指定的。除了本文档中列举的状态外，不应该再假定  <code>Pod</code>  有其他的  <code>phase</code>  值</p>\n<h5 id=\"phase的值\"><a class=\"markdownIt-Anchor\" href=\"#phase的值\">#</a> phase 的值</h5>\n<ul>\n<li>挂起（ <code>Pending</code> ）： <code>Pod</code>  已被  <code>Kubernetes</code>  系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度  <code>Pod</code>  的时间和通过网络下载镜像的时间，这可能需要花点时间</li>\n<li>运行中（ <code>Running</code> ）：该  <code>Pod</code>  已经绑定到了一个节点上， <code>Pod</code>  中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态</li>\n<li>成功（ <code>Succeeded</code> ）： <code>Pod</code>  中的所有容器都被成功终止，并且不会再重启</li>\n<li>失败（ <code>Failed</code> ）： <code>Pod</code>  中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非  <code>0</code>  状态退出或者被系统终止</li>\n<li>未知（ <code>Unknown</code> ）：因为某些原因无法取得  <code>Pod</code>  的状态，通常是因为与  <code>Pod</code>  所在主机通信失败</li>\n</ul>\n<h3 id=\"两个小实验\"><a class=\"markdownIt-Anchor\" href=\"#两个小实验\">#</a> 两个小实验</h3>\n<h4 id=\"readiness\"><a class=\"markdownIt-Anchor\" href=\"#readiness\">#</a> Readiness</h4>\n<ul>\n<li><code>03-readness-demo.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">readness-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">readness-demo-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/index.html</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/k8s/03-09.jpg\" alt=\"\"></p>\n<p>可以看到  <code>readness-demo</code>  正常启动成功，也已经 <code>ready</code>  了。</p>\n<p>下面删掉  <code>readness-demo</code>  这个 <code>pod</code>  , 然后把  <code>path:/index.html</code>  改成  <code>path:/index1.html</code>  如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">readness-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">readness-demo-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/index1.html</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/k8s/03-10.png\" alt=\"\"></p>\n<p>可以看到  <code>ready: 0/1</code>  , 我们可以查看一下  <code>pod</code>  的详细信息.</p>\n<p><img data-src=\"/images/k8s/03-11.png\" alt=\"\"></p>\n<p><code>Readiness Failed</code></p>\n<p>这时，我们进入容器中，新建一个  <code>index1.html</code>  页面.</p>\n<p><img data-src=\"/images/k8s/03-12.png\" alt=\"\"></p>\n<p>然后查看一下  <code>pod</code>  的状态。</p>\n<p><img data-src=\"/images/k8s/03-13.png\" alt=\"\"></p>\n<h4 id=\"liveness\"><a class=\"markdownIt-Anchor\" href=\"#liveness\">#</a> Liveness</h4>\n<h5 id=\"liveness-exec-demo\"><a class=\"markdownIt-Anchor\" href=\"#liveness-exec-demo\">#</a> liveness-exec demo</h5>\n<ul>\n<li><code>04-liveness-demo-exec.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness-demo-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;/bin/sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;touch /tmp/live; sleep 20; rm -rf /tmp/live; sleep 3600;&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;-e&#x27;</span>, <span class=\"string\">&#x27;/tmp/live&#x27;</span>]</span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>然后查看 <code>pod</code>  的状态</p>\n<p><img data-src=\"/images/k8s/03-14.png\" alt=\"\"></p>\n<h5 id=\"liveness-http-get-demo\"><a class=\"markdownIt-Anchor\" href=\"#liveness-http-get-demo\">#</a> liveness-http-get demo</h5>\n<ul>\n<li><code>04-liveness-httpGet-demo.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-http-get-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness-http-get-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"string\">http-port</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/index.html</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/k8s/03-15.png\" alt=\"\"></p>\n<p>然后，我们删除 <code>index.html</code></p>\n<p><code>kubectl exec liveness-http-get-demo -it -- rm -rf /usr/share/nginx/html/index.html</code></p>\n<p>可以发现 pod 进行了重启。如下图 (我删除了两次)</p>\n<p><img data-src=\"/images/k8s/03-16.png\" alt=\"\"></p>\n<h3 id=\"启动和停止\"><a class=\"markdownIt-Anchor\" href=\"#启动和停止\">#</a> 启动和停止</h3>\n<p><img data-src=\"/images/k8s/03-05.png\" alt=\"\"></p>\n<p>在 pod 的生命周期中，我们讲完了  <code>pause</code> ,  <code>initC</code> ,  <code>liveness</code> ,  <code>readiness</code> . 还剩下  <code>Starter</code>  和  <code>Stop</code> .</p>\n<p>这个也比较简单，我通过下面这个实验来演示一下 pod 的启动和停止。</p>\n<ul>\n<li><code>05-start-and-stop-demo.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">starter-stop-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">stop-stop-demo-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fangjiaxiaobai/my-app:v1</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;/bin/sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo Hello from podStart handler &gt; /usr/share/message&#x27;</span>]</span><br><span class=\"line\">      <span class=\"attr\">preStop:</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;/bin/sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo Bye from podStop handler&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>然后查看一下  <code>/usr/share/message</code>  文件内容</p>\n<p><img data-src=\"/images/k8s/03-17.png\" alt=\"\"></p>\n<p>当然，删除之后，这个容器我们就进不去了，但是我们知道了通过这种方式可以在  <code>pod</code>  的生命周期的各个阶段中做些操作。</p>\n",
            "tags": [
                "k8s",
                "kubernetes"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/07/22/k8s/pit01.incompatible-CNI-versions/",
            "url": "https://fangjiaxiaobai.github.io/2022/07/22/k8s/pit01.incompatible-CNI-versions/",
            "title": "k8s-incompatible CNI versions",
            "date_published": "2022-07-22T10:18:00.000Z",
            "content_html": "<h3 id=\"报错内容\"><a class=\"markdownIt-Anchor\" href=\"#报错内容\">#</a> 报错内容</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning  FailedCreatePodSandBox  5m17s kubelet Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network <span class=\"keyword\">for</span> sandbox <span class=\"string\">&quot;1ded5da71b38996763e74f28f609d8d8f26a4cc1e4fdd3272312bf3e168e4111&quot;</span>: plugin <span class=\"built_in\">type</span>=<span class=\"string\">&quot;bridge&quot;</span> failed (add): incompatible CNI versions; config is <span class=\"string\">&quot;1.0.0&quot;</span>, plugin supports [<span class=\"string\">&quot;0.1.0&quot;</span> <span class=\"string\">&quot;0.2.0&quot;</span> <span class=\"string\">&quot;0.3.0&quot;</span> <span class=\"string\">&quot;0.3.1&quot;</span> <span class=\"string\">&quot;0.4.0&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署的环境\"><a class=\"markdownIt-Anchor\" href=\"#部署的环境\">#</a> 部署的环境</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">centos 8</span><br><span class=\"line\">kubernetes 1.24.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决问题\"><a class=\"markdownIt-Anchor\" href=\"#解决问题\">#</a> 解决问题</h3>\n<p>这个问题的主要内容是:  <code>incompatible CNI versions</code> . 当你去网上去搜索解决方案大都是 说 使用  <code>containerd</code>  的版本不对，也就是说，确实是  <code>CNI</code>  的版本是有问题的。</p>\n<p>具体的解决方案在官方网站中是这样说的：</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/k8s/01-01.png\" alt=\"\"></p>\n<p>具体内容可以看这里:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvYWRtaW5pc3Rlci1jbHVzdGVyL21pZ3JhdGluZy1mcm9tLWRvY2tlcnNoaW0vdHJvdWJsZXNob290aW5nLWNuaS1wbHVnaW4tcmVsYXRlZC1lcnJvcnMvI3VwZGF0aW5nLXlvdXItY25pLXBsdWdpbnMtYW5kLWNuaS1jb25maWctZmlsZXM=\">https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/troubleshooting-cni-plugin-related-errors/#updating-your-cni-plugins-and-cni-config-files</span></p>\n<p>首先可以查看 当前的  <code>containerd</code>  的版本.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@k8s-master-01 ~]<span class=\"comment\"># containerd -v</span></span><br><span class=\"line\">containerd github.com/containerd/containerd v1.6.4 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16</span><br></pre></td></tr></table></figure>\n<p>不在  <code>v1.6.0-v1.6.3</code>  中。 文档中说 在  <code>v1.6.4</code>  版本中已经修复了这个问题.</p>\n<p>查看  <code>/etc/cni/net.d/10-containerd-net.conflist</code>  这个文件， cni 版本  <code> &quot;cniVersion&quot;: &quot;1.0.0&quot;,</code> , 也确实是 <code>1.0.0</code></p>\n<p>继续搜索</p>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcmQvY29udGFpbmVyZC9pc3N1ZXMvNjg3Ng==\">https://github.com/containerd/containerd/issues/6876</span> 中，有一个人遇到了  <code>v1.6.4</code>  版本中出现了  <code>incompatible CNI versions</code>  这个问题。</p>\n<p><img data-src=\"https://fangjiaxiaobai.github.io/images/k8s/01-02.jpg\" alt=\"\"></p>\n<p>仔细看他的这个问题，是我遇到的这个问题是一样的  <code>plugins type='bridge'</code> . 而这个  <code>issure</code>  中提到的问题，是当  <code>plugins type = 'loooback'</code> . 这也是上图中  <code>hakman</code>  提到的。</p>\n<p>仔细看  <code>mikebrow</code>  所说的，需要安装一个  <code>1.0.0</code>  版本的  <code>bridge</code> .</p>\n<p>那就在网络中搜索 :  <code>k8s 是安装 bridge</code> ， 在  <code>https://blog.csdn.net/m0_48594855/article/details/107870839</code>  看到 安装 bridge 的方法，他这里是使用 git 仓库 源码编译。其实直接打开 git 仓库  <code>https://github.com/containernetworking/plugins/releases/tag/v1.1.1</code>  下载对应版本即可， 今天是  <code>2022</code>  年 <code>7</code>  月 <code>22</code>  日，我就下载了最新的一版本。</p>\n<p>简单粗暴的  <code>/opt/cni/bin/</code>  下的内容，全部替换掉，然后重启  <code>kubelet</code>  服务就可以了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载包</span></span><br><span class=\"line\">wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份一下驱动</span></span><br><span class=\"line\">mv /opt/cni/bin /opt/cni/bin.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">tar -zxvf cni-plugins-linux-amd64-v1.1.1.tgz -C /opt/cni/bin </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 kubelet</span></span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n<p>然后再所有的节点上都执行一遍上面的内容，然后就可以了。</p>\n<p>可以通过   <code>kubectl describe pod</code>  查看下是否开始下载镜像了。</p>\n<h3 id=\"问题解决思路\"><a class=\"markdownIt-Anchor\" href=\"#问题解决思路\">#</a> 问题解决思路</h3>\n<ul>\n<li>先看下  <code>contrainerd</code>  版本是否  <code>&gt;=1.6.4</code></li>\n<li>如果  <code>&lt;=1.6.3</code>  那么就需要升级  <code>contrainerd</code>  运行环境.</li>\n<li>如果还有这样的问题，那就是要看下对应的插件类型是否满足版本要求了。</li>\n<li>如果不满足，那就重新安装下对应的插件就行了，比如我的问题中的  <code>bridge</code>  插件。</li>\n</ul>\n<h3 id=\"举一反三\"><a class=\"markdownIt-Anchor\" href=\"#举一反三\">#</a> 举一反三</h3>\n<p>假设有一棵树，那个问题只是这棵树的一片叶子， 这里面还涉及到很多  <code>k8s</code>  的概念性的东西。比如  <code>CNI</code>  网络插件都有什么，每种插件的功能是什么，以及对应的网络驱动是什么，比如  <code>Calico</code>  ,  <code>fannel</code>  ,  <code>bridge</code>  。  <code>CNI</code>  和  <code>containerd</code> ,  <code>cri-o</code>  都是什么关系。所以，要从根儿上去理解这些概念。 废话不多说，下篇文章见。</p>\n<h3 id=\"参考文档\"><a class=\"markdownIt-Anchor\" href=\"#参考文档\">#</a> 参考文档</h3>\n<p>1、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcmQvY29udGFpbmVyZC9pc3N1ZXMvNjg3Ng==\">https://github.com/containerd/containerd/issues/6876</span><br>\n2、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ4NTk0ODU1L2FydGljbGUvZGV0YWlscy8xMDc4NzA4Mzk=\">https://blog.csdn.net/m0_48594855/article/details/107870839</span><br>\n3、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvcGx1Z2lucy9yZWxlYXNlcy90YWcvdjEuMS4x\">https://github.com/containernetworking/plugins/releases/tag/v1.1.1</span><br>\n4、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvYWRtaW5pc3Rlci1jbHVzdGVyL21pZ3JhdGluZy1mcm9tLWRvY2tlcnNoaW0vdHJvdWJsZXNob290aW5nLWNuaS1wbHVnaW4tcmVsYXRlZC1lcnJvcnMvI3VwZGF0aW5nLXlvdXItY25pLXBsdWdpbnMtYW5kLWNuaS1jb25maWctZmlsZXM=\">https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/troubleshooting-cni-plugin-related-errors/#updating-your-cni-plugins-and-cni-config-files</span></p>\n",
            "tags": [
                "k8s",
                "kubernetes"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/07/17/k8s/seris02-how-to-build/",
            "url": "https://fangjiaxiaobai.github.io/2022/07/17/k8s/seris02-how-to-build/",
            "title": "k8s-搭建K8s集群",
            "date_published": "2022-07-17T10:18:00.000Z",
            "content_html": "<p>使用  <code>kubeadm 1.24.3</code>  搭建  <code>k8s</code>  集群</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p><code>Centos8</code>  三台.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-master-01 192.168.0.10</span><br><span class=\"line\">k8s-node-01   192.168.0.20</span><br><span class=\"line\">k8s-node-02   192.168.0.21</span><br></pre></td></tr></table></figure>\n<p>注意，这三台机器不要做任何配置，尤其不要安装  <code>docker</code> , 因为从 <code>k8s</code>   <code>1.20.x</code>  开始，  <code>kubernetes</code>  弃用了  <code>dockershim</code> , 在  <code>1.20.4</code>  正式移除了  <code>dockershim</code> .</p>\n<blockquote>\n<p>Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called “dockershim” which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community.</p>\n</blockquote>\n<p>原文地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9ibG9iL21hc3Rlci9DSEFOR0VMT0cvQ0hBTkdFTE9HLTEuMjAubWQjZGVwcmVjYXRpb24=\">kubernetes 1.20 变更日志</span></p>\n<p>但是  <code>kubernetes</code>  是支持符合为  <code>Kubernetes</code>  创建的容器运行接口  <code>Container Runtime Interface (CRI)</code>  的运行时。  <code>Docker</code>  构建的镜像，将在你的集群的所有运行时中继续工作，一如既往。</p>\n<h3 id=\"设置系统主机名以及host文件的相互解析\"><a class=\"markdownIt-Anchor\" href=\"#设置系统主机名以及host文件的相互解析\">#</a> 设置系统主机名以及 host 文件的相互解析</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname k8s-master-01</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\">#</a> 安装依赖包</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y chony <span class=\"comment\"># 配置时间同步</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭防火墙\"><a class=\"markdownIt-Anchor\" href=\"#关闭防火墙\">#</a> 关闭防火墙</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭selinux\"><a class=\"markdownIt-Anchor\" href=\"#关闭selinux\">#</a> 关闭 <code>SELinux</code></h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a &amp;&amp; sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br><span class=\"line\">setenforce 0 &amp;&amp; sed -i <span class=\"string\">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整内核参数\"><a class=\"markdownIt-Anchor\" href=\"#调整内核参数\">#</a> 调整内核参数</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kubernetes.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_recycle=0</span></span><br><span class=\"line\"><span class=\"string\">vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class=\"line\"><span class=\"string\">vm.overcommit</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">memory=1 # 不检查物理内存是否够用</span></span><br><span class=\"line\"><span class=\"string\">vm.panic_on_oom=0 # 开启 OOM</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_instances=8192</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_watches=1048576</span></span><br><span class=\"line\"><span class=\"string\">fs.file-max=52706963</span></span><br><span class=\"line\"><span class=\"string\">fs.nr</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">open=52706963</span></span><br><span class=\"line\"><span class=\"string\">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">conntrack</span></span><br><span class=\"line\"><span class=\"string\">_</span></span><br><span class=\"line\"><span class=\"string\">max=2310720</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">cp kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整系统时区\"><a class=\"markdownIt-Anchor\" href=\"#调整系统时区\">#</a> 调整系统时区</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置系统时区为 中国/上海</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"comment\"># 将当前的 UTC 时间写入硬件时钟</span></span><br><span class=\"line\">timedatectl set-local-rtc 0</span><br><span class=\"line\"><span class=\"comment\"># 重启依赖于系统时间的服务</span></span><br><span class=\"line\">systemctl restart rsyslog</span><br><span class=\"line\">systemctl restart crond</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭系统不需要服务\"><a class=\"markdownIt-Anchor\" href=\"#关闭系统不需要服务\">#</a> 关闭系统不需要服务</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop postfix &amp;&amp; systemctl <span class=\"built_in\">disable</span> postfix</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置-rsyslogd-和-systemd-journald\"><a class=\"markdownIt-Anchor\" href=\"#设置-rsyslogd-和-systemd-journald\">#</a> 设置 rsyslogd 和 systemd journald</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/<span class=\"built_in\">log</span>/journal <span class=\"comment\"># 持久化保存日志的目录</span></span><br><span class=\"line\">mkdir /etc/systemd/journald.conf.d</span><br><span class=\"line\">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Journal]</span></span><br><span class=\"line\"><span class=\"string\"># 持久化保存到磁盘</span></span><br><span class=\"line\"><span class=\"string\">Storage=persistent</span></span><br><span class=\"line\"><span class=\"string\"># 压缩历史日志</span></span><br><span class=\"line\"><span class=\"string\">Compress=yes</span></span><br><span class=\"line\"><span class=\"string\">SyncIntervalSec=5m</span></span><br><span class=\"line\"><span class=\"string\">RateLimitInterval=30s</span></span><br><span class=\"line\"><span class=\"string\">RateLimitBurst=1000</span></span><br><span class=\"line\"><span class=\"string\"># 最大占用空间 10G</span></span><br><span class=\"line\"><span class=\"string\">SystemMaxUse=10G</span></span><br><span class=\"line\"><span class=\"string\"># 单日志文件最大 200M</span></span><br><span class=\"line\"><span class=\"string\">SystemMaxFileSize=200M</span></span><br><span class=\"line\"><span class=\"string\"># 日志保存时间 2 周</span></span><br><span class=\"line\"><span class=\"string\">MaxRetentionSec=2week</span></span><br><span class=\"line\"><span class=\"string\"># 不将日志转发到 syslog</span></span><br><span class=\"line\"><span class=\"string\">ForwardToSyslog=no</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-containerd\"><a class=\"markdownIt-Anchor\" href=\"#安装-containerd\">#</a> 安装  <code>containerd</code></h3>\n<h4 id=\"创建etcmodules-loaddcontainerdconf配置文件\"><a class=\"markdownIt-Anchor\" href=\"#创建etcmodules-loaddcontainerdconf配置文件\">#</a> 创建 <code>/etc/modules-load.d/containerd.conf</code>  配置文件:</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/modules-load.d/containerd.conf</span></span><br><span class=\"line\"><span class=\"string\">overlay</span></span><br><span class=\"line\"><span class=\"string\">br_netfilter</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>执行下面的命令，使其生效</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modprobe overlay</span><br><span class=\"line\">modprobe br_netfilter</span><br></pre></td></tr></table></figure>\n<p>创建 <code>/etc/sysctl.d/99-kubernetes-cri.conf</code>  配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward = 1</span></span><br><span class=\"line\"><span class=\"string\">user.max_user_namespaces=28633</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>执行以下命令使配置生效:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭-swap\"><a class=\"markdownIt-Anchor\" href=\"#关闭-swap\">#</a> 关闭  <code>swap</code></h3>\n<p>Kubernetes 1.8 开始要求关闭系统的 Swap，如果不关闭，默认配置下 kubelet 将无法启动。 关闭系统的 Swap 方法如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br></pre></td></tr></table></figure>\n<p>修改  <code>/etc/fstab</code>  文件，注释掉  <code>SWAP</code>  的自动挂载，使用 <code>free -m</code>  确认 <code>swap</code>  已经关闭。</p>\n<p><code>swappiness</code>  参数调整，修改 <code>/etc/sysctl.d/99-kubernetes-cri.conf</code>  添加下面一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.swappiness=0</span><br></pre></td></tr></table></figure>\n<p>执行 <code>sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</code>  使修改生效。</p>\n<h4 id=\"安装-containerd-2\"><a class=\"markdownIt-Anchor\" href=\"#安装-containerd-2\">#</a> 安装  <code>containerd</code></h4>\n<p>在各个服务器节点上安装容器运行时  <code>Containerd</code>  。</p>\n<p>下载  <code>Containerd</code>  的二进制包:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/containerd/containerd/releases/download/v1.6.4/cri-containerd-cni-1.6.4-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf cri-containerd-cni-1.6.4-linux-amd64.tar.gz -C /</span><br></pre></td></tr></table></figure>\n<p>生成  <code>containerd</code>  的配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>修改前面生成的配置文件  <code>/etc/containerd/config.toml</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  [plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class=\"line\">    SystemdCgroup = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>再修改 /etc/containerd/config.toml 中的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\"># sandbox_image = &quot;k8s.gcr.io/pause:3.6&quot;</span></span><br><span class=\"line\">  sandbox_image = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.7&quot;</span></span><br></pre></td></tr></table></figure>\n<p>配置  <code>containerd</code>  开机启动，并启动  <code>containerd</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> containerd --now</span><br></pre></td></tr></table></figure>\n<p>使用 <code>crictl</code>  测试一下，确保可以打印出版本信息并且没有错误信息输出:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl version</span><br></pre></td></tr></table></figure>\n<p>如下输出:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version:  0.1.0</span><br><span class=\"line\">RuntimeName:  containerd</span><br><span class=\"line\">RuntimeVersion:  v1.6.4</span><br><span class=\"line\">RuntimeApiVersion:  v1alpha2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置服务器支持开启ipvs\"><a class=\"markdownIt-Anchor\" href=\"#配置服务器支持开启ipvs\">#</a> 配置服务器支持开启 ipvs</h3>\n<p>执行下面的脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_rr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_wrr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_sh</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- nf_conntrack</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure>\n<p>上面脚本创建了的 <code>/etc/sysconfig/modules/ipvs.modules</code>  文件，保证在节点重启后能自动加载所需模块。 使用 <code>lsmod | grep -e ip_vs -e nf_conntrack</code>  命令查看是否已经正确加载所需的内核模块。</p>\n<p>接下来，就可以使用  <code>kubeadm</code>  部署  <code>k8s</code>  集群了。</p>\n<h2 id=\"安装k8s集群\"><a class=\"markdownIt-Anchor\" href=\"#安装k8s集群\">#</a> 安装 k8s 集群</h2>\n<p>安装  <code>k8s</code>  集群有很多种方式，这里使用  <code>kubeadm</code>  安装</p>\n<h3 id=\"安装kubeadm\"><a class=\"markdownIt-Anchor\" href=\"#安装kubeadm\">#</a> 安装 kubeadm</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-kubeadm-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置-kubeadm-配置文件\">#</a> 配置  <code>kubeadm</code>  配置文件</h3>\n<p>配置  <code>kubeadm</code>  的配置文件.  <code>touch kubeadm-config.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.96</span><span class=\"number\">.151</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">unix:///run/containerd/containerd.sock</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">effect:</span> <span class=\"string\">PreferNoSchedule</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"string\">v1.24.0</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">registry.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"number\">10.244</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">cgroupDriver:</span> <span class=\"string\">systemd</span></span><br><span class=\"line\"><span class=\"attr\">failSwapOn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">ipvs</span></span><br></pre></td></tr></table></figure>\n<p>这里定制了 <code>imageRepository</code>  为阿里云的 <code>registry</code> ，避免因 gcr 被墙，无法直接拉取镜像。 <code>criSocket</code>  设置了容器运行时为 <code>containerd</code> 。 同时设置 <code>kubelet</code>  的 <code>cgroupDriver</code>  为 <code>systemd</code> ，设置 <code>kube-proxy</code>  代理模式为 <code>ipvs</code> 。</p>\n<p>可以通过  <code>kubeadm config print init-defaults --component-configs KubeletConfiguration</code>  可以打印集群初始化默认的使用的配置.</p>\n<p>在开始初始化集群之前可以使用 <code>kubeadm config images pull --config kubeadm-config.yaml</code>  预先在各个服务器节点上拉取所 <code>k8s</code>  需要的容器镜像。</p>\n<h3 id=\"初始化-k8s-master节点\"><a class=\"markdownIt-Anchor\" href=\"#初始化-k8s-master节点\">#</a> 初始化  <code>k8s</code>   <code>master</code>  节点</h3>\n<p>在  <code>master</code>  节点上执行  <code>kubeadm init --config kubeadm-config.yaml</code> ,</p>\n<p>看到最后有打印：  <code>Your Kubernetes control-plane has initialized successfully!</code></p>\n<p>就说明执行成功了。</p>\n<p>然后还有提示:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 192.168.0.10:6443 --token e0nvot.l8sgzcgl07d5baq6 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:d07d9a5b919c23177881134e3ccf90e26fcb173133b8f6172cbf3d74f3c6a75d</span><br></pre></td></tr></table></figure>\n<p>所以，我们按照提示执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<p>然后再 两台 <code>node</code>  节点上执行 如下命令来加入到集群中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.0.10:6443 --token e0nvot.l8sgzcgl07d5baq6 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:d07d9a5b919c23177881134e3ccf90e26fcb173133b8f6172cbf3d74f3c6a75d</span><br></pre></td></tr></table></figure>\n<p>查看一下集群状态，确认个组件都处于 <code>healthy</code>  状态，是否有错误:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated <span class=\"keyword\">in</span> v1.19+</span><br><span class=\"line\">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class=\"line\">scheduler            Healthy   ok</span><br><span class=\"line\">controller-manager   Healthy   ok</span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>,<span class=\"string\">&quot;reason&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>集群初始化如果遇到问题，可以使用 kubeadm reset 命令进行清理.</p>\n<p>这样 <code>k8s</code>  集群就部署完成了。</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/ml/qrcode.jpg\" alt=\"qrcode\"></p>\n",
            "tags": [
                "k8s",
                "kubernetes"
            ]
        }
    ]
}