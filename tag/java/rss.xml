<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>方家小白 • Posts by &#34;java&#34; tag</title>
        <link>https://fangjiaxiaobai.github.io</link>
        <description>和你一起遇见更好的自己</description>
        <language>zh-CN</language>
        <pubDate>Thu, 14 Oct 2021 22:58:55 +0800</pubDate>
        <lastBuildDate>Thu, 14 Oct 2021 22:58:55 +0800</lastBuildDate>
        <category>全站地图</category>
        <category>目录</category>
        <category>源码</category>
        <category>MySQL</category>
        <category>日常</category>
        <category>Springboot</category>
        <category>Netty</category>
        <category>Redis</category>
        <category>雪花算法</category>
        <category>算法</category>
        <category>数据结构</category>
        <category>git</category>
        <category>Elastic Search</category>
        <category>搜索</category>
        <category>go</category>
        <category>go-error</category>
        <category>k8s</category>
        <category>kubernetes</category>
        <category>log</category>
        <category>go-log</category>
        <category>MachineLearn</category>
        <category>猫影视</category>
        <category>图片</category>
        <category>RocketMQ</category>
        <category>消息队列</category>
        <category>HD</category>
        <category>BQ</category>
        <category>AC</category>
        <category>动态规划</category>
        <category>leetCode</category>
        <category>链表</category>
        <category>面经之算法题</category>
        <category>数组</category>
        <category>线程池</category>
        <category>面经</category>
        <category>不做也罢的算法题</category>
        <category>String</category>
        <category>JDK</category>
        <category>JDK8</category>
        <category>有点难的算法题</category>
        <category>HashMap</category>
        <category>数据结构与算法</category>
        <category>哈希算法</category>
        <category>排序</category>
        <category>冒泡排序</category>
        <category>交换排序</category>
        <category>递归</category>
        <category>分治思想排序</category>
        <category>快速排序</category>
        <category>分支思想排序</category>
        <category>go-设计模式</category>
        <category>桶排序</category>
        <category>线性思想排序</category>
        <category>选择排序</category>
        <category>Java</category>
        <category>dubbo</category>
        <category>模型评估</category>
        <category>架构</category>
        <category>笔记</category>
        <category>go-runtimes</category>
        <category>KNN</category>
        <category>JDK版本</category>
        <category>JDK11</category>
        <category>OOM</category>
        <category>JVM</category>
        <category>Stream</category>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-Dubbo%20with%20Springboot/</guid>
            <title>Dubbo 与 Springboot 集成</title>
            <link>https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-Dubbo%20with%20Springboot/</link>
            <category>Java</category>
            <category>dubbo</category>
            <pubDate>Thu, 14 Oct 2021 22:58:55 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本文使用技术介绍&lt;br&gt;
 Dubbo 3.0.3&lt;br&gt;
Springboot 2.5.5&lt;br&gt;
 文中代码已删减，具体代码位置见文末。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本文目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本文目标&#34;&gt;#&lt;/a&gt; 本文目标&lt;/h2&gt;
&lt;p&gt;快速构建  &lt;code&gt;Springboot&lt;/code&gt;  应用，并继承 &lt;code&gt;Dubbo&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;提供一个服务者，一个消费者。 在浏览器中请求消费者服务， 消费者服务调用 服务提供者，返回 响应。&lt;/p&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建项目&#34;&gt;#&lt;/a&gt; 创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建服务提供者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务提供者&#34;&gt;#&lt;/a&gt; 创建服务提供者&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;chapter02-provider&lt;/code&gt;  这个  &lt;code&gt;module&lt;/code&gt;  下，编写了两个  &lt;code&gt;sub module&lt;/code&gt; .  &lt;code&gt;chapter02-provider-api&lt;/code&gt;  表示对外提供的 &lt;code&gt;RPC&lt;/code&gt;  接口。  &lt;code&gt;chapter02-provider-impl&lt;/code&gt;  表示 RPC 接口的实现。&lt;/p&gt;
&lt;p&gt;目录结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;chapter02-provider-api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chapter02-provider-api&#34;&gt;#&lt;/a&gt; chapter02-provider-api&lt;/h4&gt;
&lt;h5 id=&#34;引入pom文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入pom文件&#34;&gt;#&lt;/a&gt; 引入 pom 文件&lt;/h5&gt;
&lt;p&gt;本模块下无需改动，使用 &lt;code&gt;IDEA&lt;/code&gt;  生成的即可。具体代码见文末&lt;/p&gt;
&lt;h5 id=&#34;定义rpc接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义rpc接口&#34;&gt;#&lt;/a&gt; 定义 RPC 接口&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 服务者提供的接口规范&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 20:44&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 演示调用demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; name 入参，随即返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; &amp;quot;hello, &amp;#123;name&amp;#125; . I am dubbo.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样  &lt;code&gt;provider-api&lt;/code&gt;  服务就配置完成了。&lt;/p&gt;
&lt;h4 id=&#34;chapter02-provider-impl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chapter02-provider-impl&#34;&gt;#&lt;/a&gt; chapter02-provider-impl&lt;/h4&gt;
&lt;h5 id=&#34;引入-pom文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入-pom文件&#34;&gt;#&lt;/a&gt; 引入 pom 文件&lt;/h5&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 服务提供者的RPC接口 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;chapter02-provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 引入Dubbo --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置applicationyml&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置applicationyml&#34;&gt;#&lt;/a&gt; 配置 application.yml&lt;/h4&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;dubbo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;application:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#application-name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;springboot-multicast-provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;springboot-multicast-provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;registry:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 以广播的协议进行发布.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;address:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;multicast://224.5.6.7:1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;protocol:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20880&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;实现服务提供者的业务逻辑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现服务提供者的业务逻辑&#34;&gt;#&lt;/a&gt; 实现服务提供者的业务逻辑&lt;/h4&gt;
&lt;p&gt;即 实现 &lt;code&gt;RPC&lt;/code&gt;  接口。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * sayHello 的具体实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 20:47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@DubboService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ProviderServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello, %s.  I am dubbo.&amp;quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;添加dubbo注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加dubbo注解&#34;&gt;#&lt;/a&gt; 添加 Dubbo 注解&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 集成Dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@EnableDubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Chapter02ProviderImplApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SpringApplication.run(Chapter02ProviderImplApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们启动服务。可以看到:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样服务提供者就启动成功了。&lt;/p&gt;
&lt;h3 id=&#34;创建服务消费者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务消费者&#34;&gt;#&lt;/a&gt; 创建服务消费者&lt;/h3&gt;
&lt;p&gt;消费者的目录结构如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;引入maven依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入maven依赖&#34;&gt;#&lt;/a&gt; 引入 maven 依赖&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 支持dubbo --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 服务提供者的RPC接口 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;chapter02-provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置applicationyml-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置applicationyml-2&#34;&gt;#&lt;/a&gt; 配置 application.yml&lt;/h4&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;dubbo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;application:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#application-name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;chapter02-with-springboot-consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;chapter02-with-springboot-consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;registry:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;address:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;multicast://224.5.6.7:1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;protocol:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20880&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8081&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写controller&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写controller&#34;&gt;#&lt;/a&gt; 编写 Controller&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 消费者demo，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 21:00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ConsumerService consumerService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;chapter02/sayHello/&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable&lt;/span&gt; String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; consumerService.sayHello(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写service层调用提供提供者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写service层调用提供提供者&#34;&gt;#&lt;/a&gt; 编写 Service 层，调用提供提供者&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 消费业务逻辑实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 21:02&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 引用Dubbo服务。使用@DubboReference注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@DubboReference&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IProviderService providerService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; providerService.sayHello(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写启动类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写启动类&#34;&gt;#&lt;/a&gt; 编写启动类&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@EnableDubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Chapter02ConsumerApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SpringApplication.run(Chapter02ConsumerApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动后，可以看到控制台:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;表示启动成功&lt;/p&gt;
&lt;h4 id=&#34;测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h4&gt;
&lt;p&gt;我们可以在浏览器中调用消费者的 sayHello 接口  &lt;code&gt;http://localhost:8081/chapter02/sayHello/fangjiaxiaobai&lt;/code&gt;  就会看到  &lt;code&gt;hello, fangjiaxiaobai. I am dubbo.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样一个最最精简的 &lt;code&gt;Dubbo&lt;/code&gt;  集成 &lt;code&gt;Springboot&lt;/code&gt;  的服务就部署完成了。&lt;/p&gt;
&lt;h3 id=&#34;链接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链接&#34;&gt;#&lt;/a&gt; 链接&lt;/h3&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Dubbo与Springboot集成&#34; style=&#34;--block-color:#c98200;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==&#34; data-background-image=&#34;https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==&#34;&gt;Dubbo与Springboot集成&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://gitee.com/fangjiaxiaobai/learn_java.git&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h3&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-dubbo-with-springboot/</guid>
            <title>最简版 springboot 集成 dubbo</title>
            <link>https://fangjiaxiaobai.github.io/2021/10/14/java%E7%B3%BB%E5%88%97/dubbo/02-dubbo-with-springboot/</link>
            <category>Java</category>
            <category>dubbo</category>
            <pubDate>Thu, 14 Oct 2021 22:58:55 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本文使用技术介绍&lt;br&gt;
 &lt;code&gt;Dubbo 3.0.3&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;Springboot 2.5.5&lt;/code&gt; &lt;br&gt;
 文中代码已删减，具体代码位置见文末。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本文目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本文目标&#34;&gt;#&lt;/a&gt; 本文目标&lt;/h2&gt;
&lt;p&gt;快速构建  &lt;code&gt;Springboot&lt;/code&gt;  应用，并集成 &lt;code&gt;Dubbo&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;提供一个服务者，一个消费者。 在浏览器中请求消费者服务， 消费者服务调用 服务提供者，返回 响应。&lt;/p&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建项目&#34;&gt;#&lt;/a&gt; 创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建服务提供者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务提供者&#34;&gt;#&lt;/a&gt; 创建服务提供者&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;chapter02-provider&lt;/code&gt;  这个  &lt;code&gt;module&lt;/code&gt;  下，编写了两个  &lt;code&gt;sub module&lt;/code&gt; .  &lt;code&gt;chapter02-provider-api&lt;/code&gt;  表示对外提供的 &lt;code&gt;RPC&lt;/code&gt;  接口。  &lt;code&gt;chapter02-provider-impl&lt;/code&gt;  表示  &lt;code&gt;RPC&lt;/code&gt;  接口的实现。&lt;/p&gt;
&lt;p&gt;目录结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;chapter02-provider-api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chapter02-provider-api&#34;&gt;#&lt;/a&gt;  &lt;code&gt;chapter02-provider-api&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;引入pom文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入pom文件&#34;&gt;#&lt;/a&gt; 引入 &lt;code&gt;pom&lt;/code&gt;  文件&lt;/h5&gt;
&lt;p&gt;本模块下无需改动，使用 &lt;code&gt;IDEA&lt;/code&gt;  生成的即可。具体代码见文末&lt;/p&gt;
&lt;h5 id=&#34;定义rpc接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义rpc接口&#34;&gt;#&lt;/a&gt; 定义 &lt;code&gt;RPC&lt;/code&gt;  接口&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 服务者提供的接口规范&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 20:44&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 演示调用demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; name 入参，随即返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; &amp;quot;hello, &amp;#123;name&amp;#125; . I am dubbo.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样  &lt;code&gt;provider-api&lt;/code&gt;  服务就配置完成了。&lt;/p&gt;
&lt;h4 id=&#34;chapter02-provider-impl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chapter02-provider-impl&#34;&gt;#&lt;/a&gt;  &lt;code&gt;chapter02-provider-impl&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;引入pom文件-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入pom文件-2&#34;&gt;#&lt;/a&gt; 引入 &lt;code&gt;pom&lt;/code&gt;  文件&lt;/h5&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 服务提供者的RPC接口 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;chapter02-provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 引入Dubbo --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置applicationyml&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置applicationyml&#34;&gt;#&lt;/a&gt; 配置 &lt;code&gt;application.yml&lt;/code&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;dubbo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;application:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#application-name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;springboot-multicast-provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;springboot-multicast-provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;registry:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 以广播的协议进行发布.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;address:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;multicast://224.5.6.7:1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;protocol:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20880&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;实现服务提供者的业务逻辑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现服务提供者的业务逻辑&#34;&gt;#&lt;/a&gt; 实现服务提供者的业务逻辑&lt;/h4&gt;
&lt;p&gt;即 实现 &lt;code&gt;RPC&lt;/code&gt;  接口。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * sayHello 的具体实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 20:47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@DubboService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ProviderServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; String.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello, %s.  I am dubbo.&amp;quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;添加dubbo注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加dubbo注解&#34;&gt;#&lt;/a&gt; 添加 &lt;code&gt;Dubbo&lt;/code&gt;  注解&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 集成Dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@EnableDubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Chapter02ProviderImplApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SpringApplication.run(Chapter02ProviderImplApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们启动服务。可以看到:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样服务提供者就启动成功了。&lt;/p&gt;
&lt;h3 id=&#34;创建服务消费者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务消费者&#34;&gt;#&lt;/a&gt; 创建服务消费者&lt;/h3&gt;
&lt;p&gt;消费者的目录结构如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;引入maven依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入maven依赖&#34;&gt;#&lt;/a&gt; 引入 maven 依赖&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 支持dubbo --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 服务提供者的RPC接口 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;chapter02-provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置applicationyml-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置applicationyml-2&#34;&gt;#&lt;/a&gt; 配置 application.yml&lt;/h4&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;dubbo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;application:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#application-name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;chapter02-with-springboot-consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;chapter02-with-springboot-consumer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;registry:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;address:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;multicast://224.5.6.7:1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;protocol:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20880&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8081&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写controller&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写controller&#34;&gt;#&lt;/a&gt; 编写 Controller&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 消费者demo，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 21:00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ConsumerService consumerService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;chapter02/sayHello/&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable&lt;/span&gt; String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; consumerService.sayHello(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写service层调用提供提供者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写service层调用提供提供者&#34;&gt;#&lt;/a&gt; 编写 &lt;code&gt;Service&lt;/code&gt;  层，调用提供提供者&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 消费业务逻辑实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 21:02&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 引用Dubbo服务。使用@DubboReference注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@DubboReference&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IProviderService providerService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; providerService.sayHello(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;编写启动类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写启动类&#34;&gt;#&lt;/a&gt; 编写启动类&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@EnableDubbo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Chapter02ConsumerApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SpringApplication.run(Chapter02ConsumerApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动后，可以看到控制台:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter002-%E5%9B%BE5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;表示启动成功&lt;/p&gt;
&lt;h4 id=&#34;测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h4&gt;
&lt;p&gt;我们可以在浏览器中调用消费者的 sayHello 接口  &lt;code&gt;http://localhost:8081/chapter02/sayHello/fangjiaxiaobai&lt;/code&gt;  就会看到  &lt;code&gt;hello, fangjiaxiaobai. I am dubbo.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样一个最最精简的 &lt;code&gt;Dubbo&lt;/code&gt;  集成 &lt;code&gt;Springboot&lt;/code&gt;  的服务就部署完成了。&lt;/p&gt;
&lt;h2 id=&#34;文末代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文末代码&#34;&gt;#&lt;/a&gt; 文末代码&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfZHViYm8vZGVtbzAyLXdpdGgtc3ByaW5nYm9vdA==&#34;&gt;代码地址 -&amp;gt;github&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h3&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/10/13/java%E7%B3%BB%E5%88%97/dubbo/01-%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BA%AFdubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/</guid>
            <title>搭建第一个纯dubbo微服务应用</title>
            <link>https://fangjiaxiaobai.github.io/2021/10/13/java%E7%B3%BB%E5%88%97/dubbo/01-%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BA%AFdubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/</link>
            <category>Java</category>
            <category>dubbo</category>
            <pubDate>Wed, 13 Oct 2021 22:58:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本文旨在快速搭建一个 &lt;b&gt;纯 dubbo 微服务&lt;/b&gt; 应用。&lt;/p&gt;
&lt;h2 id=&#34;创建一个项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建一个项目&#34;&gt;#&lt;/a&gt; 创建一个项目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter01-%E5%9B%BE1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;consumer&lt;/code&gt;  表示一个消费者。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider&lt;/code&gt;  标识一个服务提供者。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider-api&lt;/code&gt;  表示对外提供服务的 api.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们现实的开发中，往往是一个服务既充当服务提供者角色，又充当服务消费者的角色。所以，每个服务都会有一个两个模块， &lt;code&gt;1.provider&lt;/code&gt; ，服务的实现逻辑模块，  &lt;code&gt;2.provider-api&lt;/code&gt; : 服务对外暴露的 api 模块。&lt;/p&gt;
&lt;h2 id=&#34;引入依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入依赖&#34;&gt;#&lt;/a&gt; 引入依赖&lt;/h2&gt;
&lt;p&gt;在 父级 &lt;code&gt;pom&lt;/code&gt;  中加入如下依赖:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dubbo.version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dubbo.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;dubbo.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo-dependencies-zookeeper&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;dubbo.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，我们使用的 &lt;code&gt;dubbo3.x&lt;/code&gt;  版本。在这个版本中，开发者将 &lt;code&gt;dubbo&lt;/code&gt;  的依赖进行拆分，所以，我们引入了  &lt;code&gt;dubbo&lt;/code&gt;  和  &lt;code&gt;dubbo-dependencies-zookper&lt;/code&gt;  这两个依赖。&lt;/p&gt;
&lt;h2 id=&#34;创建服务提供者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务提供者&#34;&gt;#&lt;/a&gt; 创建服务提供者&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter01-%E5%9B%BE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;设置api依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置api依赖&#34;&gt;#&lt;/a&gt; 设置 api 依赖&lt;/h3&gt;
&lt;p&gt;在服务提供者的具体实现模块中 ( &lt;code&gt;provider/pom.xml&lt;/code&gt; )，加入 &lt;code&gt;api&lt;/code&gt;  模块依赖&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;定义-服务间的交互协议契约规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义-服务间的交互协议契约规范&#34;&gt;#&lt;/a&gt; 定义 服务间的交互协议 (契约 / 规范)&lt;/h3&gt;
&lt;p&gt;其实就是定义服务间的 &lt;code&gt;RPC&lt;/code&gt;  接口。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 定义rpc的交互规范&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 16:16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * say hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; &amp;quot;hello dubbo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;实现服务提供者的业务逻辑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现服务提供者的业务逻辑&#34;&gt;#&lt;/a&gt; 实现服务提供者的业务逻辑&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 实现服务的具体逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 16:00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ProviderServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IProviderService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello, dubbo!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;对外提供服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对外提供服务&#34;&gt;#&lt;/a&gt; 对外提供服务&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 服务启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 16:01&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ProviderApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String zookeeperHost = &lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ServiceConfig&amp;lt;IProviderService&amp;gt; service = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ServiceConfig&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.setApplication(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ApplicationConfig(&lt;span class=&#34;string&#34;&gt;&amp;quot;first-dubbo-provider&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.setRegistry(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RegistryConfig(&lt;span class=&#34;string&#34;&gt;&amp;quot;zookeeper://&amp;quot;&lt;/span&gt; + zookeeperHost + &lt;span class=&#34;string&#34;&gt;&amp;quot;:2181&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.setInterface(IProviderService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.setRef(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ProviderServiceImpl());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.export();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;dubbo service started&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CountDownLatch(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).await();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;创建服务消费者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建服务消费者&#34;&gt;#&lt;/a&gt; 创建服务消费者&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/chapter01-%E5%9B%BE3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;引入api依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入api依赖&#34;&gt;#&lt;/a&gt; 引入 api 依赖&lt;/h3&gt;
&lt;p&gt;在服务消费者的 &lt;code&gt;pom&lt;/code&gt;  文件中 ( &lt;code&gt;comsumer/pom.xml&lt;/code&gt; )，添加如下 &lt;code&gt;maven&lt;/code&gt;  依赖&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fxb&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;provider-api&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;消费逻辑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费逻辑&#34;&gt;#&lt;/a&gt; 消费逻辑&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 服务消费者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; fangjiaxiaobai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2021-10-13 16:20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConsumerApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String zookeeperHost = &lt;span class=&#34;string&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ReferenceConfig&amp;lt;IProviderService&amp;gt; reference = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ReferenceConfig&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reference.setApplication(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ApplicationConfig(&lt;span class=&#34;string&#34;&gt;&amp;quot;first-dubbo-consumer&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reference.setRegistry(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RegistryConfig(&lt;span class=&#34;string&#34;&gt;&amp;quot;zookeeper://&amp;quot;&lt;/span&gt; + zookeeperHost + &lt;span class=&#34;string&#34;&gt;&amp;quot;:2181&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reference.setInterface(IProviderService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        IProviderService service = reference.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String message = service.sayHello();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;附录搭建zookeeper注册中心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#附录搭建zookeeper注册中心&#34;&gt;#&lt;/a&gt; 附录：搭建 &lt;code&gt;zookeeper&lt;/code&gt;  注册中心&lt;/h2&gt;
&lt;p&gt;由于是单机演示，就简单的使用  &lt;code&gt;单机zookeeper&lt;/code&gt;  就好了，&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&lt;/code&gt;  下载 &lt;code&gt;zookeeper&lt;/code&gt;  的 &lt;code&gt;jar&lt;/code&gt;  包，解压后，使用  &lt;code&gt;zkServer.sh(Mac OS) &lt;/code&gt; 或者  &lt;code&gt;zkServer.cmd(Windows平台)&lt;/code&gt;  启动就可以了。默认端口使用的是 &lt;code&gt;2181&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dubbo/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/08/23/java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/</guid>
            <title>JDK的Stream之系列一 初窥流原理</title>
            <link>https://fangjiaxiaobai.github.io/2021/08/23/java%E7%B3%BB%E5%88%97/JDK/stream/Stream-basic/</link>
            <category>JDK</category>
            <category>Java</category>
            <category>Stream</category>
            <pubDate>Mon, 23 Aug 2021 23:13:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;学东西的时候最好是理论先行，为什么？没有理论，想当然的去干，干好了是 瞎猫碰上死耗子，干不好就瞎干，浪费时间，只会弄得身心俱疲。&lt;br&gt;
可是在真正的工作中，很少工作会允许你先弄清原理再去实操。但是不管怎么说，欠下的债终究是需要还的。&lt;/p&gt;
&lt;p&gt;今天咱们的主题是  &lt;code&gt;stream&lt;/code&gt; . 咱们就从 &lt;code&gt;Stream&lt;/code&gt;  的 &amp;quot;道，术，法，器&amp;quot; 四个阶段来聊好好的聊聊这个  &lt;code&gt;Stream&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&#34;以器始从使用开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#以器始从使用开始&#34;&gt;#&lt;/a&gt; 以 &amp;quot;器&amp;quot; 始：从使用开始&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你平时是怎么使用  &lt;code&gt;Stream&lt;/code&gt;  的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如我会使用 &lt;code&gt;Stream&lt;/code&gt;  创建一个流。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; integerStream = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// do somethings ..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者把一种集合类型转成 &lt;code&gt;stream&lt;/code&gt; ，然后做一些聚合操作&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; collect = list.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .map(item -&amp;gt; item + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .filter(item -&amp;gt; item &amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .sorted()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那在 &lt;code&gt;jdk1.7&lt;/code&gt;  及以前的时候，我们是怎么处理的呢？&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 遍历list，所有元素+5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; list.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Integer integer = list.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    integer += &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 正序排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sort(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建新List.存储10个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; newList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (list.size() &amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.arraycopy(list, list.size() - &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, newList, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.arraycopy(list, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, newList, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, list.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据上面的对比，我们很明显的就能对比出来：&lt;br&gt;
 &lt;code&gt;stream&lt;/code&gt;  的编码方式，使代码更加简洁，可读性也比较强。而且 &lt;code&gt;Stream&lt;/code&gt;  提供了集合的常用操作，比如 &lt;code&gt;sort&lt;/code&gt; , &lt;code&gt;过滤&lt;/code&gt; ， &lt;code&gt;去重&lt;/code&gt; ， &lt;code&gt;计数&lt;/code&gt; ， &lt;code&gt;limit&lt;/code&gt; , &lt;code&gt;skip&lt;/code&gt;  等等，直接可以用，可以大大的提高开发效率。&lt;/p&gt;
&lt;p&gt;那  &lt;code&gt;Stream&lt;/code&gt;  为我们提供了多少功能呢？&lt;/p&gt;
&lt;p&gt;从全局来看，所有和  &lt;code&gt;stream&lt;/code&gt;  相关的类，都在  &lt;code&gt;java.lang.stream&lt;/code&gt;  这包下。&lt;/p&gt;
&lt;p&gt;这个包下有很多的类。总体来说，&lt;/p&gt;
&lt;p&gt;流处理相关的操作分为两类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间操作 ( &lt;code&gt;Intermediate Operations&lt;/code&gt; )
&lt;ul&gt;
&lt;li&gt;无状态的中间操作 ( &lt;code&gt;Stateless&lt;/code&gt; ): 使用  &lt;code&gt;StatelessOp&lt;/code&gt;  表示。每个操作都是互不影响，不依赖的。这类的操作有:  &lt;code&gt;filter()&lt;/code&gt; 、 &lt;code&gt;flatMap()&lt;/code&gt; 、 &lt;code&gt;flatMapToDouble()&lt;/code&gt; 、 &lt;code&gt;flatMapToInt()&lt;/code&gt; 、 &lt;code&gt;flatMapToLong()&lt;/code&gt; 、 &lt;code&gt;map()&lt;/code&gt; 、 &lt;code&gt;mapToDouble()&lt;/code&gt; 、 &lt;code&gt;mapToInt()&lt;/code&gt; 、 &lt;code&gt;mapToLong()&lt;/code&gt; 、 &lt;code&gt;peek()&lt;/code&gt; 、 &lt;code&gt;unordered()&lt;/code&gt;  等&lt;/li&gt;
&lt;li&gt;有状态操作（ &lt;code&gt;Stateful&lt;/code&gt; ）：使用  &lt;code&gt;StatefulOp&lt;/code&gt;  表示。处理时会记录状态，比如处理了几个。后面元素的处理会依赖前面记录的状态，或者拿到所有元素才能继续下去。如 &lt;code&gt;distinct()&lt;/code&gt; 、 &lt;code&gt;sorted()&lt;/code&gt; 、 &lt;code&gt;sorted(comparator)&lt;/code&gt; 、 &lt;code&gt;limit()&lt;/code&gt; 、 &lt;code&gt;skip()&lt;/code&gt;  等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终止操作 ( &lt;code&gt;Terminal Operations&lt;/code&gt; )：使用  &lt;code&gt;TerminalOp&lt;/code&gt;  表示。
&lt;ul&gt;
&lt;li&gt;非短路操作：处理完所有数据才能得到结果。如 &lt;code&gt;collect()&lt;/code&gt; 、 &lt;code&gt;count()&lt;/code&gt; 、 &lt;code&gt;forEach()&lt;/code&gt; 、 &lt;code&gt;forEachOrdered()&lt;/code&gt; 、 &lt;code&gt;max()&lt;/code&gt; 、 &lt;code&gt;min()&lt;/code&gt; 、 &lt;code&gt;reduce()&lt;/code&gt; 、 &lt;code&gt;toArray()&lt;/code&gt;  等。&lt;/li&gt;
&lt;li&gt;短路（ &lt;code&gt;short-circuiting&lt;/code&gt; ）操作：拿到符合预期的结果就会停下来，不一定会处理完所有数据。如 &lt;code&gt;anyMatch()&lt;/code&gt; 、 &lt;code&gt;allMatch()&lt;/code&gt; 、 &lt;code&gt;noneMatch()&lt;/code&gt; 、 &lt;code&gt;findFirst()&lt;/code&gt; 、 &lt;code&gt;findAny()&lt;/code&gt;  等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在深入探讨 &lt;code&gt;stream&lt;/code&gt;  之前，我们需要储备些知识点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数式接口  &lt;code&gt;FunctionInterface&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  提供了很多的函数式接口，包路径是： &lt;code&gt;java.util.function&lt;/code&gt; . 函数式接口的作用是 Java8 对一类特定类型接口的称呼。这类接口只有一个抽象方法，并且使用  &lt;code&gt;@FunctionInterface&lt;/code&gt;  注解进行注明。在 &lt;code&gt;Java Lambda&lt;/code&gt;  的实现中， 开发组不想再为 &lt;code&gt;Lambda&lt;/code&gt;  表达式单独定义一种特殊的 &lt;code&gt;Structural&lt;/code&gt;  函数类型，称之为箭头类型（ &lt;code&gt;arrow type&lt;/code&gt; ）， 依然想采用 Java 既有的类型系统 ( &lt;code&gt;class&lt;/code&gt; ,  &lt;code&gt;interface&lt;/code&gt; ,  &lt;code&gt;method&lt;/code&gt;  等)， 原因是增加一个结构化的函数类型会增加函数类型的复杂性，破坏既有的 &lt;code&gt;Java&lt;/code&gt;  类型，并对成千上万的 &lt;code&gt;Java&lt;/code&gt;  类库造成严重的影响。 权衡利弊， 因此最终还是利用 &lt;code&gt;SAM&lt;/code&gt;  接口 ( &lt;code&gt;Single Abstract Method&lt;/code&gt; ) 作为  &lt;code&gt;Lambda&lt;/code&gt;  表达式的目标类型。&lt;/p&gt;
&lt;p&gt;函数式接口其实在 &lt;code&gt;Jdk8&lt;/code&gt;  之前就已存在了，比如 &lt;code&gt;java.lang.Runnable&lt;/code&gt; , &lt;code&gt;java.util.concurrent.Callable&lt;/code&gt; , &lt;code&gt;java.util.Comparator&lt;/code&gt;  等等。只是没有使用  &lt;code&gt;@FunctionInterface&lt;/code&gt;  注解而已。在 &lt;code&gt;JDK1.8&lt;/code&gt;  之后加上了这个注解，并且在 &lt;code&gt;java.util.function&lt;/code&gt;  包下新增很多个函数式接口。 其中，我们需要知道的只有六个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Predicate&lt;/code&gt; : 传入一个参数，返回一个 &lt;code&gt;bool&lt;/code&gt;  结果， 方法为 &lt;code&gt;boolean test(T t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer&lt;/code&gt; : 传入一个参数，无返回值，纯消费。 方法为 &lt;code&gt;void accept(T t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&amp;lt;T,R&amp;gt;&lt;/code&gt; : 传入一个参数，返回一个结果，方法为 &lt;code&gt;R apply(T t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supplier&lt;/code&gt; : 无参数传入，返回一个结果，方法为 &lt;code&gt;T get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnaryOperator&lt;/code&gt; : 一元操作符， 继承 &lt;code&gt;Function&amp;lt;T,T&amp;gt;&lt;/code&gt; , 传入参数的类型和返回类型相同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BinaryOperator&lt;/code&gt; : 二元操作符， 传入的两个参数的类型和返回类型相同， 继承 &lt;code&gt;BiFunction&amp;lt;T,T,T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么要了解这个 函数式接口呢？&lt;/p&gt;
&lt;p&gt;因为 在 &lt;code&gt;Stream&lt;/code&gt;  的方法中，大部分的参数都是使用 函数式接口 接受参数的。所以，如果要探究其实现原理和设计原则的话，这个是必须要知道的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;br&gt;
 &lt;code&gt;lambda&lt;/code&gt;  表达式，是一种语法的表现形式，使代码表现更加整洁  &lt;code&gt;lambda&lt;/code&gt;  和  &lt;code&gt;stream&lt;/code&gt;  是两个不相关的概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;查术理-查看源码明晰基本的类结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查术理-查看源码明晰基本的类结构&#34;&gt;#&lt;/a&gt; 查 &amp;quot;术&amp;quot; 理: (查看源码，明晰基本的类结构)&lt;/h2&gt;
&lt;p&gt;先来看下 和  &lt;code&gt;Stream&lt;/code&gt;  直接相关的类。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream%E7%B1%BB%E5%9B%BE%E8%B0%B1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  接口继承了 &lt;code&gt;BaseStream&lt;/code&gt;  接口.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️ BaseStream 接口表示流的基本接口，而流是支持顺序和并行聚合操作的元素序列。&lt;/span&gt;&lt;br&gt;
 &lt;code&gt;Stream&lt;/code&gt;  接口有很多实现类。其主要的一个实现类是  &lt;code&gt;ReferencePipeline&lt;/code&gt;  类。除此之外 &lt;code&gt;ReferencePipeline&lt;/code&gt;  类还继承了 &lt;code&gt;AbstractPipeline&lt;/code&gt;  抽象类. &lt;span class=&#34;label success&#34;&gt;✔️ AbstractPipeline 表示 “管道” 类的抽象基类，它们是 Stream 接口及其原始特化的核心实现。&lt;/span&gt;再看 &lt;code&gt;AbstractPipeline&lt;/code&gt;  类的父类 &lt;code&gt;PipelineHelper&lt;/code&gt; ,&lt;span class=&#34;label success&#34;&gt;✔️ AbstractPipeline 的作用是：用于执行流管道的辅助类，将有关流管道的所有信息（输出形状、中间操作、流标志、并行度等）集中在一个地方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReferencePipeline&lt;/code&gt;  类有三个子类:  &lt;code&gt;StatefulOp&lt;/code&gt;  表示有状态的操作， &lt;code&gt;StatelessOp&lt;/code&gt;  表示无状态的操作，  &lt;code&gt;Head&lt;/code&gt;  表示  &lt;code&gt;ReferencePipeline&lt;/code&gt;  的起始阶段。 当然了，这三个子类也是 流。&lt;/p&gt;
&lt;h3 id=&#34;从创建流开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从创建流开始&#34;&gt;#&lt;/a&gt; 从创建流开始&lt;/h3&gt;
&lt;p&gt;不管是使用  &lt;code&gt;Stream.of(T t)&lt;/code&gt;  还是  &lt;code&gt;Collection.stream()&lt;/code&gt; ，还是 &lt;code&gt;Arrays.stream()&lt;/code&gt; , 底层的实现都是通过  &lt;code&gt;StreamSupport.stream()&lt;/code&gt;  来实现的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream.of%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️ StreamSupport 类的作用是：用于创建和操作流的底层实用方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/StreamSupport.stream%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 直接返回的是  &lt;code&gt;ReferencePipeline.Head&lt;/code&gt;  对象。 首先  &lt;code&gt;Head&lt;/code&gt;  是一种 &lt;code&gt;Stream&lt;/code&gt;  的实现。 接着去看  &lt;code&gt;Head&lt;/code&gt;  的构造方法，可以看到其实调用的是： &lt;code&gt;AbstractPipeline&lt;/code&gt;  的构造方法.&lt;/p&gt;
&lt;h3 id=&#34;流的中间操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流的中间操作&#34;&gt;#&lt;/a&gt; 流的中间操作&lt;/h3&gt;
&lt;p&gt;文中已经谈及了 中间操作分为有状态的中间操作和无状态的中间操作。那我们以一个案例来说明操作与操作之间执行的。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; numbers = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .map(item -&amp;gt; item + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .sorted((n1, n2) -&amp;gt; n2 - n1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .limit(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Stream.of()&lt;/code&gt;  方法上文已经简单的说明了，接下来我们来看  &lt;code&gt;map()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream.map%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到， &lt;code&gt;map()&lt;/code&gt;  返回了一个 &lt;code&gt;StatelessOp&lt;/code&gt;  对象，并且重写了 &lt;code&gt;AbstractPipeline&lt;/code&gt;  的 &lt;code&gt;opWrapSink&lt;/code&gt;  方法。 之前也说过：它表示流的无状态中间阶段的基类。 还有一个 &lt;code&gt;Sink&lt;/code&gt;  类型.  &lt;code&gt;Sink&lt;/code&gt;  类表示  &lt;code&gt;Consumer&lt;/code&gt;  接口的扩展，用于在流管道的各个阶段传递值，以及管理大小信息、控制流等的附加方法。&lt;/p&gt;
&lt;p&gt;我们再仔细看一下这个方法。首先这个方法并没有进行任何的计算，只是将  &lt;code&gt;item -&amp;gt; item + 5&lt;/code&gt;  这个操作进行三层的封装， 1. 将 &lt;code&gt;map&lt;/code&gt;  方法的返回值重新封装成了流对象，2. 把我们的 &lt;code&gt;item -&amp;gt; item + 5&lt;/code&gt;  这个操作封装成了  &lt;code&gt;StatelessOp&lt;/code&gt; ， 并重写了 &lt;code&gt;opWrapSink&lt;/code&gt;  这个方法，并在终止操作时进行调用。 3. 使用 &lt;code&gt;sink&lt;/code&gt; ( &lt;code&gt;Sink.ChainedReference)&lt;/code&gt;  将管道的各个阶段连接起来。即赋值 &lt;code&gt;downStream&lt;/code&gt; . 使用 &lt;code&gt;downstream&lt;/code&gt;  这个 &lt;code&gt;Consumer&lt;/code&gt;  完成 &lt;code&gt;accept&lt;/code&gt;  调用。&lt;/p&gt;
&lt;p&gt;这里需要注意一下:  &lt;code&gt;StatelessOp&lt;/code&gt;  类的构造方法的实体参传输了一个  &lt;code&gt;this&lt;/code&gt;  字段。仔细翻看源码就会返现它一直调用到  &lt;code&gt;AbstractPipeline&lt;/code&gt;  的构造方法中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/AbstractPipeline.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到  &lt;code&gt;AbstractPipeline&lt;/code&gt;  中有两个字段  &lt;code&gt;nextStage&lt;/code&gt;  和  &lt;code&gt;previousStage&lt;/code&gt;  字段，分别表示的是上一阶段和下一阶段。其中  &lt;code&gt;nextStage&lt;/code&gt;  是 当前阶段。  &lt;code&gt;previousStage&lt;/code&gt;  则应该 当前阶段的上一个阶段，其实就是调用当前方法的对象。&lt;/p&gt;
&lt;p&gt;不知道你是否发现 通过这种方法， &lt;code&gt;stream&lt;/code&gt;  组成了一个 流各个阶段的双向链表。节点就是流操作的各个阶段。&lt;/p&gt;
&lt;p&gt;ps: 这样一次流操作会创建两个链表:  &lt;code&gt;Stream&lt;/code&gt;  阶段的双向链表，和 在终止操作时，根据双向链表生成的  &lt;code&gt;Sink&lt;/code&gt;  链表。&lt;/p&gt;
&lt;p&gt;再次说明：到目前为止， &lt;code&gt;map()&lt;/code&gt;  方法里只是进行了封装，没有进行任何计算！&lt;/p&gt;
&lt;p&gt;接着来看  &lt;code&gt;sorted()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/stream.sorted%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted&lt;/code&gt;  方法比较简单，通过调用 &lt;code&gt;SortedOps&lt;/code&gt;  类的 &lt;code&gt;makeRef&lt;/code&gt;  方法，创建了 &lt;code&gt;OfRef&lt;/code&gt;  对象。  &lt;code&gt;OfRef&lt;/code&gt;  类的作用是：用于对流进行排序的专用子类型。  &lt;code&gt;OfRef&lt;/code&gt;  类继承了  &lt;code&gt;ReferencePipeline.StatefulOp&lt;/code&gt;  ，所以 &lt;code&gt;OfRef&lt;/code&gt;  是一个有状态操作。那自然它也会有  &lt;code&gt;opWrapSink&lt;/code&gt;  方法。也就是说它也会返回一个 Sink 对象，只是这个 &lt;code&gt;Sink&lt;/code&gt;  对象的实现类不一样的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：到目前为止， &lt;code&gt;sorted()&lt;/code&gt;  方法里只是进行了封装，没有进行任何计算！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同理去看 &lt;code&gt;limit&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream.limit%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个方法的内部是直接创建了一个  &lt;code&gt;ReferencePipeline.StatefulOp&lt;/code&gt;  对象，也是重写了其中的方法:  &lt;code&gt;opWrapSink&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;不知道你是否有好奇，我为什么每次都会提到  &lt;code&gt;opWrapSink&lt;/code&gt;  这个方法呢？因为这个方法非常的重要！其重要性我们在 &lt;a href=&#34;#%E6%8E%A2%E2%80%9D%E6%B3%95%E2%80%9C%E6%8B%A9&#34;&gt;探” 法 “择&lt;/a&gt; 这部分会完整的说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再三说明：到目前为止， &lt;code&gt;limit()&lt;/code&gt;  方法里只是进行了封装，没有进行任何计算！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书行至此，案例中的中间操作都已经简单的分析完成了。我们就知道这里  &lt;code&gt;jdk&lt;/code&gt;  为了完成 流操作为每个中间操作都封装了很多的对象，而这些对象只是散列在了内存中。接下来，就要看  &lt;code&gt;jdk&lt;/code&gt;  是如何把他们组装到一起的。&lt;/p&gt;
&lt;h3 id=&#34;终止操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终止操作&#34;&gt;#&lt;/a&gt; 终止操作&lt;/h3&gt;
&lt;p&gt;以 &lt;code&gt;Collect&lt;/code&gt;  方法为例，去探究一下终止操作的流程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream.collect%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
可以看到在 &lt;code&gt;collect&lt;/code&gt;  方法中，分为并行执行方式和串行执行方法，我们看串行执行时，会创建  &lt;code&gt;ReduceOps&lt;/code&gt;  终止操作对象。&lt;br&gt;
&lt;img data-src=&#34;/images/java/jdk/stream/AbstractPipeline.evaluate%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 终止操作 传递给 evaluate 方法，然后调用终止操作的 evaluate 方法，当然这个方法也分成了串行执行和并行执行两种。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/ReduceOps.evaluateSequential%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;helper&lt;/code&gt;  其实是  &lt;code&gt;limit(3)&lt;/code&gt;  中间操作返回的对象。这其实中间操作的最后一个 &lt;code&gt;Stage&lt;/code&gt;  (阶段)。返回的对象是 &lt;code&gt;AbstractPipeline&lt;/code&gt;  和  &lt;code&gt;Stream&lt;/code&gt;  的子类实例。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/AbstractPipeline.wrapAndCopyInfo%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里包含两个方法:  &lt;code&gt;wrapSink()&lt;/code&gt;  和  &lt;code&gt;copyInfo()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;这是两个非常重要的方法.  &lt;code&gt;wrapSink()&lt;/code&gt;  是将中间的操作组成  &lt;code&gt;SinkChain&lt;/code&gt;  。  &lt;code&gt;copyInfo()&lt;/code&gt;  这是执行真正的计算逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/AbstractPipeline.wrapSink%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法中的形参  &lt;code&gt;sink&lt;/code&gt;  就是最后的阶段的终止操作。方法通过循环将  &lt;code&gt;sink&lt;/code&gt;  分装到 &lt;code&gt;Sink&lt;/code&gt;  中。  &lt;code&gt;Sink&lt;/code&gt;  接口 的一个实现类是  &lt;code&gt;ChainedReference&lt;/code&gt;  ， 类中定义了一个  &lt;code&gt;downStream&lt;/code&gt;  字段。 会将 &lt;code&gt;sink = p.opWrapSink(p.previousStage.combinedFlags, sink);&lt;/code&gt;   中的  &lt;code&gt;sink&lt;/code&gt;  赋值给  &lt;code&gt;downStream&lt;/code&gt; . 这样就形成了 &lt;b&gt;套娃&lt;/b&gt;。 最后返回一个  &lt;code&gt;wrapSink&lt;/code&gt;  , 即整个流操作中所有的操作的 封装 &lt;code&gt;Sink&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/AbstractPipeline.copyInfo%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中所示的即为上面提及的 封装 &lt;code&gt;Sink&lt;/code&gt; . 可中断和不可中断的区别是：可中断如果获取值，就不必再取所有的结果了。反之，就需要计算出所有阶段的结果。&lt;/p&gt;
&lt;p&gt;非可中断的终止操作时，会执行  &lt;code&gt;begin()&lt;/code&gt; , &lt;code&gt;forEachRemaining()&lt;/code&gt; , &lt;code&gt;end()&lt;/code&gt; , 三个方法。  这个三个方法对应的是： &lt;code&gt;Sink&lt;/code&gt;  接口中提供的三个方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 每个Sink开始之前调用该方法，通知sink做好准备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 遍历元素时使用，接受一个待处理元素，并对元素进行处理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Double i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通知sink没有元素进行处理了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin()&lt;/code&gt;  方法，会调用每个 &lt;code&gt;Sink&lt;/code&gt;  子类的 &lt;code&gt;begin&lt;/code&gt;  方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEachRemaining()&lt;/code&gt;  方法对应的执行内容如下图:&lt;br&gt;
&lt;img data-src=&#34;/images/java/jdk/stream/forEachRemaining%E6%96%B9%E6%B3%95.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end()&lt;/code&gt;  方法，会调用每个 &lt;code&gt;Sink&lt;/code&gt;  字段的 &lt;code&gt;end&lt;/code&gt;  方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书行至此。或许你会对  &lt;code&gt;forEachRemaining&lt;/code&gt;  方法感到好奇。后面我会写一篇文章来专门分享: 《 &lt;code&gt;Stream&lt;/code&gt;  的高级迭代器》, 希望你能继续关注支持我～&lt;/p&gt;
&lt;h2 id=&#34;探法择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#探法择&#34;&gt;#&lt;/a&gt; 探” 法 “择&lt;/h2&gt;
&lt;p&gt;我们从一个案例出发，在细节之处分析了一个 &lt;code&gt;Stream&lt;/code&gt;  的执行过程。现在我们需要从全局来看一下  &lt;code&gt;Stream&lt;/code&gt;  的执行过程是什么样子的.&lt;/p&gt;
&lt;p&gt;上文中我们知道了  &lt;code&gt;Stream&lt;/code&gt;  的 所有计算都是在 终止操作时 触发的。 所有的中间操作都是封装了一些对象。我们用一张图来描述下 &lt;code&gt;Stream&lt;/code&gt;  的执行过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/Stream%E9%80%BB%E8%BE%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stream&lt;/code&gt;  将创建的流做为第一个  &lt;code&gt;Stage&lt;/code&gt;  , 用来代表流的开始， 每个 &lt;code&gt;Stage&lt;/code&gt;  都是 &lt;code&gt;AbstractPipeline&lt;/code&gt;  的子类。 第一个 &lt;code&gt;Stage&lt;/code&gt;  是 &lt;code&gt;AbstractPipeline.Head&lt;/code&gt;  对象。&lt;/li&gt;
&lt;li&gt;然后将中间操作封装成后面的 n 个  &lt;code&gt;stage&lt;/code&gt; . 并组成 双向链表的形式，并且存储了 &lt;code&gt;stage0&lt;/code&gt; . 每个 &lt;code&gt;Stage&lt;/code&gt;  都是 &lt;code&gt;StatelessOp&lt;/code&gt;  或者  &lt;code&gt;statefulOp&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;终止操作通过 &lt;code&gt;wrapSink()&lt;/code&gt;  方法 会触发将 每个阶段的操作封装成  &lt;code&gt;Sink&lt;/code&gt; . 并且 &lt;code&gt;sink&lt;/code&gt;  都会做为参数传递到上一个阶段的 &lt;code&gt;opWrapSink()&lt;/code&gt;  方法中，从而组成一个  &lt;code&gt;sink&lt;/code&gt;  链表。&lt;/li&gt;
&lt;li&gt;然后，通过  &lt;code&gt;copyInfo()&lt;/code&gt;  方法将，交于 &lt;code&gt;Spilterator&lt;/code&gt;  进行迭代。计算的结果可以分为四种
&lt;ul&gt;
&lt;li&gt;返回 &lt;code&gt;boolean&lt;/code&gt;  类型的结果：比如 &lt;code&gt;anyMatch()&lt;/code&gt;   &lt;code&gt;allMatch()&lt;/code&gt;   &lt;code&gt;noneMatch()&lt;/code&gt;  方法。&lt;/li&gt;
&lt;li&gt;返回 &lt;code&gt;Optional&lt;/code&gt;  类型的结果： 比如 &lt;code&gt;findFirst()&lt;/code&gt;   &lt;code&gt;findAny()&lt;/code&gt;  方法&lt;/li&gt;
&lt;li&gt;还有归约操作:	 &lt;code&gt;reduce()&lt;/code&gt;   &lt;code&gt;collect()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回数组的： &lt;code&gt;toArray()&lt;/code&gt; &lt;br&gt;
 对于表中返回 &lt;code&gt;boolean&lt;/code&gt;  或者 &lt;code&gt;Optional&lt;/code&gt;  的操作（ &lt;code&gt;Optional&lt;/code&gt;  是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的 &lt;code&gt;Sink&lt;/code&gt;  中记录这个值，等到执行结束时返回就可以了。&lt;br&gt;
对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过收集器指定）。 &lt;code&gt;collect()&lt;/code&gt; ,  &lt;code&gt;reduce()&lt;/code&gt; ,  &lt;code&gt;max()&lt;/code&gt; ,  &lt;code&gt;min()&lt;/code&gt;  都是归约操作，虽然 &lt;code&gt;max()&lt;/code&gt;  和 &lt;code&gt;min()&lt;/code&gt;  也是返回一个 &lt;code&gt;Optional&lt;/code&gt; ，但事实上底层是通过调用 &lt;code&gt;reduce()&lt;/code&gt;  方法实现的。&lt;br&gt;
对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做 &lt;code&gt;Node&lt;/code&gt;  的数据结构中的。 &lt;code&gt;Node&lt;/code&gt;  是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。关于  &lt;code&gt;Stream&lt;/code&gt;  的并行计算，我后面会继续分享。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;明道义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#明道义&#34;&gt;#&lt;/a&gt; 明 &amp;quot;道&amp;quot; 义&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  提供的  &lt;code&gt;Stream&lt;/code&gt;  具有如下特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无存储。 &lt;code&gt;stream&lt;/code&gt;  不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组， &lt;code&gt;Java&lt;/code&gt;  容器或 &lt;code&gt;I/O channel&lt;/code&gt;  等。&lt;/li&gt;
&lt;li&gt;为函数式编程而生。对 &lt;code&gt;stream&lt;/code&gt;  的任何修改都不会修改背后的数据源，比如对 &lt;code&gt;stream&lt;/code&gt;  执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新 &lt;code&gt;stream&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;惰式执行。 &lt;code&gt;stream&lt;/code&gt;  上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。&lt;/li&gt;
&lt;li&gt;可消费性。 &lt;code&gt;stream&lt;/code&gt;  只能被 “消费” 一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在这一趴，我就围绕两个点来简单的聊聊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK8&lt;/code&gt;  为什么要加入  &lt;code&gt;Stream&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面四个特点之外， &lt;code&gt;Java8&lt;/code&gt;  中的 &lt;code&gt;Stream&lt;/code&gt;  是对集合对象的增强，当然不仅仅是集合对象。 &lt;code&gt;Stream&lt;/code&gt;  为开发者提供了简洁的编码方式和编码风格，极大的提高了开发的效率。&lt;/p&gt;
&lt;p&gt;另外一个更重要的点在于  &lt;code&gt;Stream&lt;/code&gt;  为我们下篇文章要分享的 &lt;b&gt; &lt;code&gt;Stream&lt;/code&gt;  并行计算流&lt;/b&gt; 提供了实现，请期待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;/code&gt;  为什么要这么设计？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我这里给一份我的回答，这个问题也留给看文章的你，也希望能看到你的回答。&lt;/p&gt;
&lt;p&gt;根据上文所说的内容， &lt;code&gt;Stream&lt;/code&gt;  体系是一组接口家族， &lt;code&gt;AbstractPipeline &lt;/code&gt; 是接口的实现， &lt;code&gt;PipelineHelper&lt;/code&gt;  是管道的辅助类， &lt;code&gt;StreamSupport&lt;/code&gt;  是流的底层工具类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  使用 &lt;code&gt;stage&lt;/code&gt;  来抽象流水线上的每个操作，其实每个 &lt;code&gt;stage&lt;/code&gt;  就是一个 &lt;code&gt;stream&lt;/code&gt;  子类的实例， 也就是 &lt;code&gt;AbstractPipeline&lt;/code&gt;  几个子类的内部子类即 &lt;code&gt;Head&lt;/code&gt;   &lt;code&gt;StatelessOp&lt;/code&gt;   &lt;code&gt;statefulOp&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StreamSupport&lt;/code&gt;  用于创建生成 &lt;code&gt;Stream&lt;/code&gt;  对应的是 &lt;code&gt;Head&lt;/code&gt;  类，其他的中间操作分为有状态和无状态的，中间操作通过方法比如  &lt;code&gt;filter&lt;/code&gt;   &lt;code&gt;map&lt;/code&gt;  等返回的是 &lt;code&gt;StatelessOp&lt;/code&gt;  或者  &lt;code&gt;statefulOp&lt;/code&gt; .  多个 &lt;code&gt;stage&lt;/code&gt;  组合称为双向链表的形式 从而成了整个流水线&lt;/p&gt;
&lt;p&gt;有了流水线，相邻两个操作阶段之间如何协调运算？&lt;/p&gt;
&lt;p&gt;于是又有了 &lt;code&gt;Sink&lt;/code&gt;  的概念，又来协调相邻的 &lt;code&gt;stage&lt;/code&gt;  之间计算运行&lt;/p&gt;
&lt;p&gt;他的模式是 &lt;code&gt;begin&lt;/code&gt;    &lt;code&gt;accept&lt;/code&gt;   &lt;code&gt;end&lt;/code&gt;  还有短路标记&lt;/p&gt;
&lt;p&gt;他的 &lt;code&gt;accept&lt;/code&gt;  就是封装了回调方法，所以说每个操作 &lt;code&gt;stage&lt;/code&gt; ,  &lt;code&gt;StatelessOp&lt;/code&gt;   或者  &lt;code&gt;statefulOp&lt;/code&gt;  中又封装了 &lt;code&gt;Sink&lt;/code&gt; . 通过 &lt;code&gt;AbstractPipeline&lt;/code&gt;  提供的 &lt;code&gt;opWrapSink&lt;/code&gt;  方法可以获取这个 &lt;code&gt;Sink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;调用这个 &lt;code&gt;sink&lt;/code&gt;  的 &lt;code&gt;accept&lt;/code&gt;  方法就可以调用当前操作的方法&lt;/p&gt;
&lt;p&gt;那么如何串联起来呢？&lt;/p&gt;
&lt;p&gt;关键点在于 &lt;code&gt;opWrapSink&lt;/code&gt;  方法，他接收一个 &lt;code&gt;Sink&lt;/code&gt;  作为参数，在调用 &lt;code&gt;accept&lt;/code&gt;  方法中。可以调用这个入参 &lt;code&gt;Sink&lt;/code&gt;  的 &lt;code&gt;accept&lt;/code&gt;  方法&lt;/p&gt;
&lt;p&gt;这样子从当前就能调用下一个，也就是说有了推动的动作。那么只需要找到开始，每个处理了之后都推动下一个，就顺序完成了所欲的操作了。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结语&#34;&gt;#&lt;/a&gt; 结语&lt;/h2&gt;
&lt;p&gt;通过看  &lt;code&gt;Stream&lt;/code&gt;  相关的知识点，发现一篇文章是没法讲清楚的。&lt;/p&gt;
&lt;p&gt;这一次，我又果不其然的留下了两篇文章&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt;  &lt;code&gt;Stream&lt;/code&gt;  并行计算流&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt;  &lt;code&gt;Stream&lt;/code&gt;  的高级迭代器&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请给我记代办～&lt;/p&gt;
&lt;p&gt;在分享 &lt;code&gt;并行计算流&lt;/code&gt; 的时候，我们需要以  &lt;code&gt;JDK1.7&lt;/code&gt;  中的  &lt;code&gt;forkJoin&lt;/code&gt;  框架为前提，来分析  &lt;code&gt;Stream&lt;/code&gt;  的  &lt;code&gt;parallelStream&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;在分享 &lt;code&gt;迭代器&lt;/code&gt; 的时候，我们也会分析一下 &lt;code&gt;JDK&lt;/code&gt;  中提供的 普通迭代器，比如  &lt;code&gt;ForEach&lt;/code&gt; ,  &lt;code&gt;iterator&lt;/code&gt; , 以及 &lt;code&gt;Stream&lt;/code&gt;  的高级迭代器  &lt;code&gt;spliterator&lt;/code&gt; . 也会由浅入深的分析一下，各种迭代器的优缺点。 也会自定义实现一个迭代器。&lt;/p&gt;
&lt;p&gt;敬请期待，防止走丢见文末。关注我，期望和你一起遇见更好的自己.&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/stream/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/08/19/java%E7%B3%BB%E5%88%97/JVM/OOM/</guid>
            <title>JVM之你没见过的OOM</title>
            <link>https://fangjiaxiaobai.github.io/2021/08/19/java%E7%B3%BB%E5%88%97/JVM/OOM/</link>
            <category>Java</category>
            <category>OOM</category>
            <category>JVM</category>
            <pubDate>Thu, 19 Aug 2021 17:13:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一文搞懂内存溢出，保内存平安，防止你被祭天:[手动滑稽]:&lt;/p&gt;
&lt;h2 id=&#34;释义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#释义&#34;&gt;#&lt;/a&gt; 释义&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;OOM&lt;/code&gt;  的含义，到底是什么意思？&lt;br&gt;
 是 JVM 独有的吗？  &lt;code&gt;linux&lt;/code&gt;  是否也会存在，那又是怎么肥事？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OOM&lt;/code&gt;  :  &lt;code&gt;Out Of Memory&lt;/code&gt;  .  内存溢出。内存溢出来了，也就是说内存不够用了，就会发生这个问题了。&lt;/p&gt;
&lt;h3 id=&#34;内存又是什么呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存又是什么呢&#34;&gt;#&lt;/a&gt; 内存又是什么呢？&lt;/h3&gt;
&lt;p&gt;1、 内存 是计算机的重要部件之一。它用于暂时存放 CPU 中的运算数据，与硬盘等外部存储交换数据。是外存与 &lt;code&gt;CPU&lt;/code&gt;  进行沟通的桥梁。&lt;/p&gt;
&lt;p&gt;2、 &lt;code&gt;Java&lt;/code&gt;  内存。说到这里我们就不得说一下 java 的内存模型 (JMM) 了。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/JMM.png&#34; alt=&#34;JMM&#34;&gt;&lt;/p&gt;
&lt;p&gt;就这个一个图就很不下几十个面试考点：比如 &lt;code&gt;votitle&lt;/code&gt;  关键字，内存栅栏，指令重排，5 项 &lt;code&gt;Happen-Before&lt;/code&gt;  原则，内存原子操作，数据 &lt;code&gt;IO&lt;/code&gt;  操作等等。&lt;/p&gt;
&lt;p&gt;闲话少扯，抛个问题， &lt;code&gt;OOM&lt;/code&gt;  发生区域会上图中那个部分发生呢？&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;java&lt;/code&gt;  运行时内存区域  &lt;code&gt;JAVA RUNTIME MEMEORY AREA&lt;/code&gt; , 注意区分 &lt;code&gt;JMM&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;大家都知道的， &lt;code&gt;java&lt;/code&gt;  运行时内存区域，分为程序计数器 (PC 寄存器)，java 虚拟机栈，本地方法栈，堆，方法区，运行时常量池，堆外内存 (直接内存)&lt;/p&gt;
&lt;p&gt;1、程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 &lt;code&gt;Undefined&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;2、 &lt;code&gt;Java&lt;/code&gt;  虚拟机栈是描述  &lt;code&gt;Java&lt;/code&gt;  方法运行过程的内存模型。 &lt;code&gt;Java&lt;/code&gt;  虚拟机栈会为每一个即将运行的  &lt;code&gt;Java&lt;/code&gt;  方法创建一块叫做 “栈帧” 的区域，用于存放该方法运行过程中的一些信息，比如：局部变量表，操作数栈，动态链接，方法出口信息等，方法执行的过程即为栈帧压栈出栈的过程。&lt;/p&gt;
&lt;p&gt;3、本地方法栈是为  &lt;code&gt;JVM&lt;/code&gt;  运行  &lt;code&gt;Native&lt;/code&gt;  方法准备的空间，由于很多  &lt;code&gt;Native&lt;/code&gt;  方法都是用  &lt;code&gt;C&lt;/code&gt;  语言实现的，所以它通常又叫  &lt;code&gt;C&lt;/code&gt;  栈。它与  &lt;code&gt;Java&lt;/code&gt;  虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。&lt;/p&gt;
&lt;p&gt;4、堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。这一区域是线程共享，整个  &lt;code&gt;Java&lt;/code&gt;  虚拟机只有一个堆，所有的线程都访问同一个堆。堆又可划分为年轻代和老年代，年轻代内存又可以分为 &lt;code&gt;Eden&lt;/code&gt; ,  &lt;code&gt;from Surivor&lt;/code&gt; , &lt;code&gt;to Surivor&lt;/code&gt; , 并且默认以 8:1:1 的比例进行分配。&lt;/p&gt;
&lt;p&gt;5、方法区： &lt;code&gt;Java&lt;/code&gt;  虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：已经被虚拟机加载的类信息，常亮，静态变量，即时编译编译器编译后的代码。线程共享的区域。为了与堆区分，方法还有一个别名： &lt;code&gt;Non-Heap&lt;/code&gt;  (非堆)。&lt;/p&gt;
&lt;p&gt;5.1 、运行时常量池：存放常量的区域。 在运行期间，可以向常量池中添加新的变量，如  &lt;code&gt;String&lt;/code&gt;  类的 &lt;code&gt;intern()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;6、堆外内存是 &lt;code&gt;java&lt;/code&gt;  虚拟机之外的内容，但也可能被 &lt;code&gt;java&lt;/code&gt;  使用。需要注意的是，这部分内容也会因内存不足而抛出  &lt;code&gt;OutOfMemoryError&lt;/code&gt; 、&lt;/p&gt;
&lt;p&gt;知道了 &lt;code&gt;Java&lt;/code&gt;  运行内存区域，那么可能发生  &lt;code&gt;OOM&lt;/code&gt;  的区域有哪些呢？&lt;/p&gt;
&lt;p&gt;我们都知道 &lt;code&gt;OOM&lt;/code&gt;  只的是内存溢出，所以 堆，非堆即方法区，本地方法栈，以及堆外内存 都是会发生  &lt;code&gt;OOM&lt;/code&gt;  的。&lt;/p&gt;
&lt;p&gt;那 &lt;code&gt;java&lt;/code&gt;  虚拟机栈呢？不会发生内容溢出吗？   会！但是 栈发生内容溢出的时候，报的错误是  &lt;code&gt;StackOverflowError&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;那程序计数器呢？  程序计数器，是不会发送内容溢出的。 因为 存储的是：当前线程正在执行的那条字节码指令的地址啊。&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/OOM%E5%8C%BA%E5%9F%9F%E5%9B%BE.png&#34; alt=&#34;OOM区域图&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上图中还指定了各区域大小的参数配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xms&lt;/code&gt;  设置堆的最小空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xmx&lt;/code&gt;  设置堆的最大空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:NewSize&lt;/code&gt;  设置新生代最小空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:MaxNewSize&lt;/code&gt;  设置新生代最大空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:PermSize&lt;/code&gt;  设置永久代最小空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:MaxPermSize&lt;/code&gt;  设置永久代最大空间大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xss&lt;/code&gt;  设置每个线程的堆栈大小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。  &lt;code&gt;老年代空间大小=堆空间大小-年轻代大空间大小&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;场景分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#场景分析&#34;&gt;#&lt;/a&gt; 场景分析&lt;/h2&gt;
&lt;p&gt;我们挨个分析下发生 &lt;code&gt;OOM&lt;/code&gt;  的 9 种场景&lt;/p&gt;
&lt;p&gt;什么时候会发生 &lt;code&gt;OOM&lt;/code&gt;  呢？  当内存严重不够用的时候就会发生   &lt;code&gt;java.lang.OutOfMemoryError&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;我们来看下每个区域都有可能出现内存溢出问题.&lt;/p&gt;
&lt;h3 id=&#34;javaheap-space&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javaheap-space&#34;&gt;#&lt;/a&gt;  &lt;code&gt;JavaHeap space&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当堆内存（ &lt;code&gt;Heap Space&lt;/code&gt; ）没有足够空间存放新创建的对象时，就会抛出  &lt;code&gt;java.lang.OutOfMemoryError:Javaheap space&lt;/code&gt;  错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Javaheap space&lt;/code&gt;  错误产生的常见原因可以分为以下几类：&lt;/p&gt;
&lt;p&gt;1. 请求创建一个超大对象，通常是一个大数组。&lt;br&gt;
2. 超出预期的访问量 / 数据量，通常是上游系统请求流量飙升，常见于各类促销 / 秒杀活动，可以结合业务流量指标排查是否有尖状峰值。&lt;br&gt;
3. 过度使用终结器（ &lt;code&gt;Finalizer&lt;/code&gt; ），该对象没有立即被  &lt;code&gt;GC&lt;/code&gt; 。&lt;br&gt;
4. 内存泄漏（ &lt;code&gt;Memory Leak&lt;/code&gt; ），大量对象引用没有释放， &lt;code&gt;JVM&lt;/code&gt;  无法对其自动回收，常见于使用了  &lt;code&gt;File&lt;/code&gt;  等资源没有回收。&lt;/p&gt;
&lt;h4 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;p&gt;针对大部分情况，通常只需要通过  &lt;code&gt;-Xmx&lt;/code&gt;  参数调高  &lt;code&gt;JVM&lt;/code&gt;  堆内存空间即可。如果仍然没有解决，可以参考以下情况做进一步处理：&lt;/p&gt;
&lt;p&gt;1、如果是超大对象，可以检查其合理性，比如是否一次性查询了数据库全部结果，而没有做结果数限制。&lt;br&gt;
2、如果是业务峰值压力，可以考虑添加机器资源，或者做限流降级。&lt;br&gt;
3、如果是内存泄漏，需要找到持有的对象，修改代码设计，比如关闭没有释放的连接。&lt;/p&gt;
&lt;h4 id=&#34;代码案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码案例&#34;&gt;#&lt;/a&gt; 代码案例&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示大对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * -Xms128M -Xmx128M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 21 可以，22就会OOM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4* 1024 * 1024 = 4M * 32 = 128M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] integers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/heapSpaceError.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;gc-overhead-limit-exceeded&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gc-overhead-limit-exceeded&#34;&gt;#&lt;/a&gt;  &lt;code&gt;GC overhead limit exceeded&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当  &lt;code&gt;Java&lt;/code&gt;  进程花费  &lt;code&gt;98%&lt;/code&gt;  以上的时间执行  &lt;code&gt;GC&lt;/code&gt; ，但只恢复了不到  &lt;code&gt;2%&lt;/code&gt;  的内存，且该动作连续重复了  &lt;code&gt;5&lt;/code&gt;  次，就会抛出  &lt;code&gt;java.lang.OutOfMemoryError:GC overhead limit exceeded&lt;/code&gt;  错误。简单地说，就是应用程序已经基本耗尽了所有可用内存，  &lt;code&gt;GC&lt;/code&gt;  也无法回收。&lt;/p&gt;
&lt;h4 id=&#34;解决方案-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-2&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;p&gt;同  &lt;code&gt;JavaHeap space&lt;/code&gt;  部分的异常解决方案。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示 频繁GC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * -Xms128M -Xmx128M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;overHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map map = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Random r = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map.put(r.nextInt(), &lt;span class=&#34;string&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容:&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/gcOverHead.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;permgen-spacejdk8-已废弃-see-元空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#permgen-spacejdk8-已废弃-see-元空间&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Permgen space&lt;/code&gt; ( &lt;code&gt;JDK8&lt;/code&gt;  已废弃， &lt;code&gt;see&lt;/code&gt;  元空间。)&lt;/h3&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;为什么会废弃 永久代？     &lt;code&gt;see&lt;/code&gt; ： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29wZW5qZGsuamF2YS5uZXQvamVwcy8xMjI=&#34;&gt;http://openjdk.java.net/jeps/122&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;该错误表示永久代（ &lt;code&gt;Permanent Generation&lt;/code&gt; ）已用满，通常是因为加载的  &lt;code&gt;class&lt;/code&gt;  数目太多或体积太大。&lt;/p&gt;
&lt;p&gt;永久代存储对象主要包括以下几类：&lt;/p&gt;
&lt;p&gt;加载 / 缓存到内存中的  &lt;code&gt;class&lt;/code&gt;  定义，包括类的名称，字段，方法和字节码；&lt;br&gt;
常量池；&lt;br&gt;
对象数组 / 类型数组所关联的  &lt;code&gt;class&lt;/code&gt; ；&lt;br&gt;
 &lt;code&gt;JIT&lt;/code&gt;  编译器优化后的  &lt;code&gt;class&lt;/code&gt;  信息。&lt;br&gt;
 &lt;code&gt;PermGen&lt;/code&gt;  的使用量与加载到内存的  &lt;code&gt;class&lt;/code&gt;  的数量 / 大小正相关。&lt;/p&gt;
&lt;h4 id=&#34;解决方案-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-3&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;p&gt;根据  &lt;code&gt;Permgen space&lt;/code&gt;  报错的时机，可以采用不同的解决方案，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序启动报错，修改  &lt;code&gt;-XX:MaxPermSize&lt;/code&gt;  启动参数，调大永久代空间。&lt;/li&gt;
&lt;li&gt;应用重新部署时报错，很可能是没有应用没有重启，导致加载了多份  &lt;code&gt;class&lt;/code&gt;  信息，只需重启 JVM 即可解决。&lt;/li&gt;
&lt;li&gt;运行时报错，应用程序可能会动态创建大量  &lt;code&gt;class&lt;/code&gt; ，而这些  &lt;code&gt;class&lt;/code&gt;  的生命周期很短暂，但是 JVM 默认不会卸载  &lt;code&gt;class&lt;/code&gt; ，可以设置  &lt;code&gt;-XX:+CMSClassUnloadingEnabled&lt;/code&gt;  和  &lt;code&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt;  这两个参数允许  &lt;code&gt;JVM&lt;/code&gt;  卸载  &lt;code&gt;class&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果上述方法无法解决，可以通过  &lt;code&gt;jmap&lt;/code&gt;  命令  &lt;code&gt;dump&lt;/code&gt;  内存对象  &lt;code&gt;jmap-dump:format=b,file=dump.hprof&lt;/code&gt;  ，然后利用  &lt;code&gt;Eclipse MAT https://www.eclipse.org/mat&lt;/code&gt;  功能逐一分析开销最大的  &lt;code&gt;classloader&lt;/code&gt;  和重复  &lt;code&gt;class&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metaspace&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#metaspace&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Metaspace&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;JDK 1.8&lt;/code&gt;  使用  &lt;code&gt;Metaspace&lt;/code&gt;  替换了永久代（ &lt;code&gt;Permanent Generation&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;该错误表示  &lt;code&gt;Metaspace&lt;/code&gt;  已被用满，通常是因为加载的  &lt;code&gt;class&lt;/code&gt;  数目太多或体积太大。&lt;/p&gt;
&lt;p&gt;此类问题的原因与解决方法跟  &lt;code&gt;PermGenspace&lt;/code&gt;  非常类似，可以参考上文。&lt;/p&gt;
&lt;p&gt;需要特别注意的是调整  &lt;code&gt;Metaspace&lt;/code&gt;  空间大小的启动参数为  &lt;code&gt;-XX:MaxMetaspaceSize&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;代码案例-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码案例-2&#34;&gt;#&lt;/a&gt; 代码案例&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示  元数据区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 在 `for` 循环中, 动态生成很多class, 最终将这些class加载到 Metaspace 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 注意配置: -XX:MaxMetaspaceSize=64m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@throws&lt;/span&gt; Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;metaSpace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; ; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class c = cp.makeClass(&lt;span class=&#34;string&#34;&gt;&amp;quot;eu.plumbr.demo.Generated&amp;quot;&lt;/span&gt; + i).toClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/metaSpace.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;unable-to-create-new-native-thread&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unable-to-create-new-native-thread&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Unable to create new native thread&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;每个  &lt;code&gt;Java&lt;/code&gt;  线程都需要占用一定的内存空间，当  &lt;code&gt;JVM&lt;/code&gt;  向底层操作系统请求创建一个新的  &lt;code&gt;native&lt;/code&gt;  线程时，如果没有足够的资源分配就会报此类错误。&lt;/p&gt;
&lt;h4 id=&#34;原因分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原因分析&#34;&gt;#&lt;/a&gt; 原因分析&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt;  向  &lt;code&gt;OS&lt;/code&gt;  请求创建  &lt;code&gt;native&lt;/code&gt;  线程失败，就会抛出  &lt;code&gt;Unable to create new native thread&lt;/code&gt; ，常见的原因包括以下几类：&lt;/p&gt;
&lt;p&gt;线程数超过操作系统最大线程数  &lt;code&gt;ulimit&lt;/code&gt;  限制；&lt;br&gt;
线程数超过  &lt;code&gt;kernel.pid_max&lt;/code&gt; （只能重启）；&lt;br&gt;
 &lt;code&gt;native&lt;/code&gt;  内存不足；&lt;/p&gt;
&lt;p&gt;该问题发生的常见过程主要包括以下几步：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt;  内部的应用程序请求创建一个新的  &lt;code&gt;Java&lt;/code&gt;  线程；&lt;br&gt;
 &lt;code&gt;JVM native&lt;/code&gt;  方法代理了该次请求，并向操作系统请求创建一个  &lt;code&gt;native&lt;/code&gt;  线程；&lt;br&gt;
操作系统尝试创建一个新的  &lt;code&gt;native&lt;/code&gt;  线程，并为其分配内存；&lt;br&gt;
如果操作系统的虚拟内存已耗尽，或是受到 32 位进程的地址空间限制，操作系统就会拒绝本次  &lt;code&gt;native&lt;/code&gt;  内存分配；&lt;br&gt;
 &lt;code&gt;JVM&lt;/code&gt;  将抛出  &lt;code&gt;java.lang.OutOfMemoryError:Unableto createnewnativethread&lt;/code&gt;  错误。&lt;/p&gt;
&lt;h4 id=&#34;解决方案-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-4&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;升级配置，为机器提供更多的内存；&lt;/li&gt;
&lt;li&gt;降低  &lt;code&gt;Java Heap Space&lt;/code&gt;  大小；&lt;/li&gt;
&lt;li&gt;修复应用程序的线程泄漏问题；&lt;/li&gt;
&lt;li&gt;限制线程池大小；&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;-Xss&lt;/code&gt;  参数减少线程栈的大小；&lt;/li&gt;
&lt;li&gt;调高  &lt;code&gt;OS&lt;/code&gt;  层面的线程最大数：执行  &lt;code&gt;ulimit -a&lt;/code&gt;  查看最大线程数限制，使用  &lt;code&gt;ulimit -u xxx&lt;/code&gt;  调整最大线程数限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码案例-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码案例-3&#34;&gt;#&lt;/a&gt; 代码案例&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示: Unable to create new native thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nativeThread&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Thread(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Thread.sleep(&lt;span class=&#34;number&#34;&gt;10000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/unableCreateNative.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;out-of-swap-space&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#out-of-swap-space&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Out of swap space&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;该错误表示所有可用的虚拟内存已被耗尽。虚拟内存（ &lt;code&gt;Virtual Memory&lt;/code&gt; ）由物理内存（ &lt;code&gt;Physical Memory&lt;/code&gt; ）和交换空间（ &lt;code&gt;Swap Space&lt;/code&gt; ）两部分组成。当运行时程序请求的虚拟内存溢出时就会报  &lt;code&gt;Outof swap space&lt;/code&gt;  错误。&lt;/p&gt;
&lt;p&gt;这个错误通常是操作系统层面的原因。&lt;/p&gt;
&lt;h4 id=&#34;原因分析-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原因分析-2&#34;&gt;#&lt;/a&gt; 原因分析&lt;/h4&gt;
&lt;p&gt;该错误出现的常见原因包括以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;地址空间不足；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;2. 物理内存已耗光；&lt;/li&gt;
&lt;li&gt;3. 应用程序的本地内存泄漏（ &lt;code&gt;native leak&lt;/code&gt; ），例如不断申请本地内存，却不释放。&lt;/li&gt;
&lt;li&gt;4. 执行  &lt;code&gt;jmap-histo:live&lt;/code&gt;  命令，强制执行  &lt;code&gt;Full GC&lt;/code&gt; ；如果几次执行后内存明显下降，则基本确认为  &lt;code&gt;Direct ByteBuffer&lt;/code&gt;  问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解决方案-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-5&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;p&gt;根据错误原因可以采取如下解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;升级地址空间为  &lt;code&gt;64 bit&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;使用  &lt;code&gt;Arthas&lt;/code&gt;  检查是否为  &lt;code&gt;Inflater/Deflater&lt;/code&gt;  解压缩问题，如果是，则显式调用  &lt;code&gt;end&lt;/code&gt;  方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;Direct ByteBuffer&lt;/code&gt;  问题可以通过启动参数  &lt;code&gt;-XX:MaxDirectMemorySize&lt;/code&gt;  调低阈值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;升级服务器配置 / 隔离部署，避免争用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kill-process-or-sacrifice-child&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#kill-process-or-sacrifice-child&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Kill process or sacrifice child&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;有一种内核作业（ &lt;code&gt;Kernel Job&lt;/code&gt; ）名为  &lt;code&gt;Out of Memory Killer&lt;/code&gt; ，它会在可用内存极低的情况下 “杀死”（ &lt;code&gt;kill&lt;/code&gt; ）某些进程。 &lt;code&gt;OOM Killer&lt;/code&gt;  会对所有进程进行打分，然后将评分较低的进程 “杀死”，具体的评分规则可以参考  &lt;code&gt;Surviving the Linux OOM Killer&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;不同于其他的  &lt;code&gt;OOM&lt;/code&gt;  错误，  &lt;code&gt;Killprocessorsacrifice child&lt;/code&gt;  错误不是由  &lt;code&gt;JVM&lt;/code&gt;  层面触发的，而是由操作系统层面触发的。&lt;/p&gt;
&lt;h4 id=&#34;原因分析-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原因分析-3&#34;&gt;#&lt;/a&gt; 原因分析&lt;/h4&gt;
&lt;p&gt;默认情况下， &lt;code&gt;Linux&lt;/code&gt;  内核允许进程申请的内存总量大于系统可用内存，通过这种 “错峰复用” 的方式可以更有效的利用系统资源。&lt;/p&gt;
&lt;p&gt;然而，这种方式也会无可避免地带来一定的 “超卖” 风险。例如某些进程持续占用系统内存，然后导致其他进程没有可用内存。此时，系统将自动激活  &lt;code&gt;OOM Killer&lt;/code&gt; ，寻找评分低的进程，并将其 “杀死”，释放内存资源。&lt;/p&gt;
&lt;h4 id=&#34;解决方案-6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-6&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;升级服务器配置 / 隔离部署，避免争用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OOM Killer&lt;/code&gt;  调优。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码案例-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码案例-4&#34;&gt;#&lt;/a&gt; 代码案例&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示:Kill process or sacrifice child&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    java.util.List&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[]&amp;gt; l = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; java.util.ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;100000000&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            t.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/killprocess.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;requested-array-size-exceeds-vm-limit&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#requested-array-size-exceeds-vm-limit&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Requested array size exceeds VM limit&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;JVM 限制了数组的最大长度，该错误表示程序请求创建的数组超过最大长度限制。&lt;/p&gt;
&lt;p&gt;JVM 在为数组分配内存前，会检查要分配的数据结构在系统中是否可寻址，通常为  &lt;code&gt;Integer.MAX_VALUE-2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;此类问题比较罕见，通常需要检查代码，确认业务是否需要创建如此大的数组，是否可以拆分为多个块，分批执行。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[Integer.MAX_VALUE-i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.format(&lt;span class=&#34;string&#34;&gt;&amp;quot;Successfully initialized an array with %,d elements.\n&amp;quot;&lt;/span&gt;, Integer.MAX_VALUE-i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            t.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/requestArraySize.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;direct-buffer-memory&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#direct-buffer-memory&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Direct buffer memory&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;java&lt;/code&gt;  允许应用程序通过  &lt;code&gt;Direct ByteBuffer&lt;/code&gt;  直接访问堆外内存，许多高性能程序通过  &lt;code&gt;Direct ByteBuffer&lt;/code&gt;  结合内存映射文件（ &lt;code&gt;Memory Mapped File&lt;/code&gt; ）实现高速  &lt;code&gt;IO&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;原因分析-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原因分析-4&#34;&gt;#&lt;/a&gt; 原因分析&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Direct ByteBuffer&lt;/code&gt;  的默认大小为  &lt;code&gt;64 MB&lt;/code&gt; ，一旦使用超出限制，就会抛出  &lt;code&gt;Directbuffer memory&lt;/code&gt;  错误。&lt;/p&gt;
&lt;h4 id=&#34;解决方案-7&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-7&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java&lt;/code&gt;  只能通过  &lt;code&gt;ByteBuffer&lt;/code&gt; . &lt;code&gt;allocateDirect&lt;/code&gt;  方法使用  &lt;code&gt;Direct ByteBuffer&lt;/code&gt; ，因此，可以通过  &lt;code&gt;Arthas&lt;/code&gt;  等在线诊断工具拦截该方法进行排查。&lt;/li&gt;
&lt;li&gt;检查是否直接或间接使用了  &lt;code&gt;NIO&lt;/code&gt; ，如  &lt;code&gt;netty&lt;/code&gt; ， &lt;code&gt;jetty&lt;/code&gt;  等。&lt;/li&gt;
&lt;li&gt;通过启动参数  &lt;code&gt;-XX:MaxDirectMemorySize&lt;/code&gt;  调整  &lt;code&gt;Direct ByteBuffer&lt;/code&gt;  的上限值。&lt;/li&gt;
&lt;li&gt;检查  &lt;code&gt;JVM&lt;/code&gt;  参数是否有  &lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt;  选项，如果有就去掉，因为该参数会使  &lt;code&gt;System.gc()&lt;/code&gt;  失效。&lt;/li&gt;
&lt;li&gt;检查堆外内存使用代码，确认是否存在内存泄漏；或者通过反射调用  &lt;code&gt;sun.misc.Cleaner&lt;/code&gt;  的  &lt;code&gt;clean()&lt;/code&gt;  方法来主动释放被  &lt;code&gt;Direct ByteBuffer&lt;/code&gt;  持有的内存空间。&lt;/li&gt;
&lt;li&gt;内存容量确实不足，升级配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码案例-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码案例-5&#34;&gt;#&lt;/a&gt; 代码案例&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示对外内存溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * -Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;maxDirectMemory : &amp;quot;&lt;/span&gt; + (sun.misc.VM.maxDirectMemory() / (&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt;) (&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;)) + &lt;span class=&#34;string&#34;&gt;&amp;quot;MB&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ByteBuffer byteBuffer = ByteBuffer.allocateDirect(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(byteBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错内容&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/directBuffer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;排查思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#排查思路&#34;&gt;#&lt;/a&gt; 排查思路&lt;/h2&gt;
&lt;p&gt;分享遇到 &lt;code&gt;OOM&lt;/code&gt;  类问题如何快速定位问题，具体哪行代码发生了问题&lt;/p&gt;
&lt;p&gt;什么表现会发生 &lt;code&gt;OOM&lt;/code&gt;  呢？&lt;/p&gt;
&lt;p&gt;最直接的～，有报错， &lt;code&gt;outOfMemoryError&lt;/code&gt; 。 就是发生了。&lt;br&gt;
有频繁 &lt;code&gt;GC&lt;/code&gt;  的事件发生的时候，也要注意下，可能是在  &lt;code&gt;OOM&lt;/code&gt;  的边缘疯狂试探。 比如  &lt;code&gt;FullGC&lt;/code&gt; ，  &lt;code&gt;Young GC&lt;/code&gt; , 等。&lt;br&gt;
 &lt;code&gt;CPU&lt;/code&gt;  占用率较高。&lt;br&gt;
先说一个思路哈～&lt;/p&gt;
&lt;h3 id=&#34;止损&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#止损&#34;&gt;#&lt;/a&gt; 止损。&lt;/h3&gt;
&lt;p&gt;如果你在线上遇到了这个问题， 请，务必！ 先将服务重启！立刻，马上。 及时止损。  &lt;code&gt;ps&lt;/code&gt; : 可以留一台机器做案发现场，记得下掉该机器，不对外提供服务。&lt;/p&gt;
&lt;h3 id=&#34;问题排查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题排查&#34;&gt;#&lt;/a&gt; 问题排查&lt;/h3&gt;
&lt;p&gt;注意观察线上服务情况，如果再次出现 &lt;code&gt;OOM&lt;/code&gt; , 影响业务，再问题没有解决完成之前，还是采用重启的方式解决。&lt;br&gt;
可以通过  &lt;code&gt;glowroot&lt;/code&gt;  等可视化的监控工具，观察。&lt;br&gt;
也可以通过在机器上 使用   &lt;code&gt;jstat -gc pid&lt;/code&gt;  来查看 &lt;code&gt;GC&lt;/code&gt;  情况。&lt;br&gt;
分析造成 &lt;code&gt;OOM&lt;/code&gt;  的问题。(具体如何排查，可参考案例模块)&lt;/p&gt;
&lt;p&gt;查到对应 &lt;code&gt;JVM&lt;/code&gt;  进程 =&amp;gt;  排查到占用内存打的 &lt;code&gt;jvm&lt;/code&gt;  线程 =&amp;gt; 查看对应线程栈信息 =&amp;gt; 使用 &lt;code&gt;Jmap&lt;/code&gt;  来生成线程堆栈信息文件 =&amp;gt; 分析大对象 &lt;code&gt;or&lt;/code&gt;  占用内存大的原因 =&amp;gt;  基本上改代码或者 &lt;code&gt;jvm&lt;/code&gt;  配置。&lt;/p&gt;
&lt;p&gt;其他排查问题思路和这个也是大差不差，使用的命令不同而已。&lt;/p&gt;
&lt;h3 id=&#34;案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h3&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;举个栗子🌰吧&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;比较常见的应该是：  &lt;code&gt;java.lang. outOfMemoryError: Java heap Space&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示OOM 排查过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;heapSpaceError&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Thread thread = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Thread(() -&amp;gt; bigObject());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示大对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * -Xms128M -Xmx128M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 21 可以，22就会OOM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4* 1024 * 1024 = 4M * 32 = 128M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] integers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行后发现控制台打印出了 &lt;code&gt;OOM&lt;/code&gt;  :  &lt;code&gt;java heap space&lt;/code&gt; .  好吧，就装作看不见吧&lt;/p&gt;
&lt;p&gt;1、使用  &lt;code&gt;jps&lt;/code&gt;  命令获取到  &lt;code&gt;jvm&lt;/code&gt;  进程号&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jvm/oom%E6%A1%88%E4%BE%8Bjps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、使用  &lt;code&gt;jmap&lt;/code&gt;  命令 &lt;code&gt;dump&lt;/code&gt;  出 堆栈信息。&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/jdump.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、使用  &lt;code&gt;mat&lt;/code&gt;  工具，分析 &lt;code&gt;dump&lt;/code&gt;  文件内容。  (下载地址:  &lt;code&gt;https://www.eclipse.org/mat/downloads.php&lt;/code&gt;    下载是真特🐴的慢啊，&lt;span class=&#34;label success&#34;&gt;❤️一般人我不告诉他：公众号回复 &lt;code&gt;MAT&lt;/code&gt;  就能直接获取&lt;/span&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果下载之后无法启动的话，提示 无法创建虚拟机。需要简单配置下：&lt;br&gt;
 &lt;code&gt;-vm /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/bin&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.1、下载下 &lt;code&gt;dump&lt;/code&gt;  文件，使用本地分析 &lt;code&gt;mat&lt;/code&gt;  工具进行分析。&lt;/p&gt;
&lt;p&gt;启动 &lt;code&gt;mat&lt;/code&gt; .&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/mat.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Open a  heap Dump&lt;/code&gt;  之后，就可以愉快的分析了。&lt;/p&gt;
&lt;p&gt;具体分析方法请自行百度吧。&lt;/p&gt;
&lt;p&gt;3.2、如果 &lt;code&gt;dump&lt;/code&gt;  文件较小，也可以 &lt;code&gt;java&lt;/code&gt;  自带的工具 jhat 命令进行分析。&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/jmap.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后访问本机的  &lt;code&gt;7000&lt;/code&gt;  端口，就可以到看到分析的内容了。&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/image2021-4-15_19-8-56.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
进入之后，就可以看到堆内存占用情况的柱状图了。&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/heapHistogram.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
发现有  &lt;code&gt;Class[I&lt;/code&gt;  占用最多，     &lt;code&gt;Class[I&lt;/code&gt;  表示的是  &lt;code&gt;int&lt;/code&gt;  数组。 那我们就查下代码里用到 &lt;code&gt;Class[I&lt;/code&gt;  中的地方，&lt;/p&gt;
&lt;p&gt;哇，果然是在  &lt;code&gt;new&lt;/code&gt;  了一个大的数据，撑爆了内存。&lt;/p&gt;
&lt;p&gt;补充下：&lt;/p&gt;
&lt;p&gt;先查看 jvm 进程号 &lt;br&gt;
 &lt;code&gt; jps &lt;/code&gt;   注意：只能查看属于当前用户 &lt;code&gt;java&lt;/code&gt;  进程&lt;br&gt;
  &lt;code&gt;ps -ef| grep java&lt;/code&gt;  找到对应服务的进程编号&lt;br&gt;
 &lt;code&gt;ps -ef| grep 服务名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如下图:&lt;br&gt;
&lt;img data-src=&#34;/images/java/jvm/%E8%A1%A5%E5%85%85.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
 需要注意下:&lt;/p&gt;
&lt;p&gt;1) 查看当前应用运行情况信息，查看是否配置了 &lt;code&gt;gc log：-Xloggc:/apps/srv/instance/damai.gaotu100.com/logs/damai.gaotu100.com-gc.log&lt;/code&gt;   , 可以从 &lt;code&gt;gc&lt;/code&gt;  日志中查到很多信息。&lt;/p&gt;
&lt;p&gt;2）查看是否有 &lt;code&gt;oom&lt;/code&gt;  自动打印二进制 &lt;code&gt;dump&lt;/code&gt;  文件：  &lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/apps/srv/instance/damai.gaotu100.com/logs/heapdump.hprof&lt;/code&gt;   。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有配置，可以通过命令自行打印:   &lt;code&gt;jmap -dump:format=b,file=/apps/srv/instance/test-kefu-web.baijiahulian.com/logs/22316.1.hprof pid&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里推荐下，阿里开源的 jvm 排查工具  arthas（阿尔萨斯）  &lt;code&gt;https://arthas.aliyun.com/doc/&lt;/code&gt; 。文档很全，需要的自行阅读吧～～&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;解决方案-8&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案-8&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h2&gt;
&lt;p&gt;分享遇到 &lt;code&gt;OOM&lt;/code&gt;  问题时怎样解决？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;长兄于病视神，未有形而除之，故名不出于家。中兄治病，其在毫毛，故名不出于闾。若扁鹊者，镵血脉，投毒药，副肌肤，闲而名出闻于诸侯。 所以才有凡此者不病病，治之无名，使之无形，至功之成，其下谓之自然。&lt;br&gt;
这句话，用在我们这里就是  系统的整个生命周期中，不出现任何 &lt;code&gt;OOM&lt;/code&gt; , 其 谓之自然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上述的排查过程，找到了问题根源之后，那就&lt;br&gt;
 1. 改代码&lt;br&gt;
 2. 调整内存配置&lt;/p&gt;
&lt;p&gt;大刀阔斧的干吧！&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;大家有什么建议呢？&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;我们看待 &lt;code&gt;OOM&lt;/code&gt;  应该从全面来看，有可能是  &lt;code&gt;jvm&lt;/code&gt;  内存确实盛不下要分配的对象，也有可能是 频繁 &lt;code&gt;GC&lt;/code&gt; ，且收效甚低导致的，还有可能是宿主机上内存不够杀死 &lt;code&gt;jvm&lt;/code&gt;  导致的，加载的类过大过多造成的，虚拟内存不够用等等。最后也不要忽略 堆外内存的内存溢出。&lt;/p&gt;
&lt;p&gt;线上遇到这类问题，第一要及时止损，方式很简单，重启就能解决。   保证线上可用之后，再去查问题，根治问题。  同时不用忘了监控线上服务是否有内存要溢出的情况，及时重启，为处理 &lt;code&gt;OOM&lt;/code&gt;  问题争取时间。&lt;/p&gt;
&lt;p&gt;排查问题时，首先找到对应 &lt;code&gt;jvm&lt;/code&gt;  进程，然后使用 &lt;code&gt;jmap&lt;/code&gt;  打印出 内存映射文件，然后使用 &lt;code&gt;jhat&lt;/code&gt;  或者  &lt;code&gt;mat&lt;/code&gt;  工具进行分析，定位原因。解决问题。&lt;/p&gt;
&lt;p&gt;最后，我们在 &lt;code&gt;coding&lt;/code&gt;  的时候，要注意下，不要编写导致 &lt;code&gt;OOM&lt;/code&gt;  代码。“未有形而除之～”&lt;/p&gt;
&lt;h2 id=&#34;抛个问题~&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抛个问题~&#34;&gt;#&lt;/a&gt; 抛个问题～&lt;/h2&gt;
&lt;p&gt;发生 OOM，程序会退出吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下期见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h4&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;br&gt;
&lt;img data-src=&#34;/images/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
