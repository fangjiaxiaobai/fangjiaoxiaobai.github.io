{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"go-设计模式\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2022/03/12/design_pattern/go/dp01-singleton/",
            "url": "https://fangjiaxiaobai.github.io/2022/03/12/design_pattern/go/dp01-singleton/",
            "title": "Go设计模式-单例设计模式",
            "date_published": "2022-03-12T10:18:18.000Z",
            "content_html": "<h2 id=\"单例模式解决什么问题\"><a class=\"markdownIt-Anchor\" href=\"#单例模式解决什么问题\">#</a> 单例模式解决什么问题</h2>\n<ul>\n<li>处理资源访问冲突</li>\n<li>表示全局唯一。在整个程序中，某些数据应该存储一份，这样的类，就应该设计成单例类。比如，SpringBoot 应用的配置项。再比如 雪花算法的实现类。</li>\n</ul>\n<h2 id=\"实现单例\"><a class=\"markdownIt-Anchor\" href=\"#实现单例\">#</a> 实现单例</h2>\n<p>如何实现单例呢，或者说怎样能称得上单例呢？<br>\n 首先，单例要求全局唯一，那就是说 <b>不允许外部随随便便 new 一个新对象</b>.</p>\n<p>这句话里，至少有两个点:<br>\n1. 不允许外部 new 对象。   2. 需要类内部 new 对象，并提供给外部进行使用。<br>\n其实很简单的，<b>单例类的构造方法需要是 private 权限的，提供一个 public 方法，用于外部获取本对象。</b></p>\n<p>另外，我们写的程序都是运行在多线程环境的，所以我们还需要考虑线程安全的问题。<br>\n还有，说过线程安全，自然而然，就会想到锁，想到锁，就要想到性能问题。</p>\n<h2 id=\"核心概念\"><a class=\"markdownIt-Anchor\" href=\"#核心概念\">#</a> 核心概念</h2>\n<p>保证某个类在一个运行环境中只有一个实例， 并提供一个访问该实例的全局节点。</p>\n<h2 id=\"单例的实现\"><a class=\"markdownIt-Anchor\" href=\"#单例的实现\">#</a> 单例的实现</h2>\n<h3 id=\"懒汉式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tlazySingletonInstance *lazySingleton</span><br><span class=\"line\">\tonce                  = &amp;sync.Once&#123;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LazySingleton 懒汉式</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> lazySingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetLazySingletonInstance</span><span class=\"params\">()</span> *<span class=\"title\">lazySingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lazySingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tonce.Do(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tlazySingletonInstance = &amp;lazySingleton&#123;&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lazySingletonInstance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetLazySingletonInstance</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetLazySingletonInstance() != GetLazySingletonInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;懒汉式 单例模式： 出现同一对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetLazySingletonInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetLazySingletonInstance() != GetLazySingletonInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;懒汉式 单例模式： 出现同一对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"饿汉式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eagerSingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> eagerSingletonObj *eagerSingleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// init.  程序运行前的注册，实现 sync.Once功能 ,初始化不能采用初始化表达式初始化的变量。</span></span><br><span class=\"line\"><span class=\"comment\">// 变量初始化-&gt;init()-&gt;main()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;init in main.go &quot;</span>)</span><br><span class=\"line\">\teagerSingletonObj = &amp;eagerSingleton&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetInstance</span><span class=\"params\">()</span> *<span class=\"title\">eagerSingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> eagerSingletonObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEagerSingleton</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetInstance() != GetInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;单例模式-饿汉式：出现不同的对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetInstance() != GetInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;单例模式-饿汉式：出现不同的对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双重检查锁\"><a class=\"markdownIt-Anchor\" href=\"#双重检查锁\">#</a> 双重检查锁</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> doubleCheckSingleton <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock = &amp;sync.Mutex&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doubleCheckSingletonInstance *doubleCheckSingleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetDoubleCheckSingletonInstance</span><span class=\"params\">()</span> *<span class=\"title\">doubleCheckSingleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> doubleCheckSingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> lock.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> doubleCheckSingletonInstance == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;创建 单例对象&quot;</span>)</span><br><span class=\"line\">\t\t\tdoubleCheckSingletonInstance = &amp;doubleCheckSingleton&#123;&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;单例对象已经创建了&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;单例对象已经创建了&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doubleCheckSingletonInstance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>测试代码</b></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetDoubleCheckSingletonInstance</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> GetDoubleCheckSingletonInstance() != GetDoubleCheckSingletonInstance() &#123;</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">&quot;双重检测法 获取不同的对象&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkGetDoubleCheckSingletonInstance</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetDoubleCheckSingletonInstance() != GetDoubleCheckSingletonInstance() &#123;</span><br><span class=\"line\">\t\t\tb.Error(<span class=\"string\">&quot;双重检测法 获取不同的对象&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h3>\n<p>1、单例模式同事解决了两个问题，所以单例模式违反了单一职责原则:</p>\n<ul>\n<li>1、保证一个类只有一个实例.</li>\n<li>2、为该实例提供了一个全局访问节点.<br>\n2、单例模式可能会掩盖不良设计，比如程序各组件之间项目了解过多。<br>\n3、该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。<br>\n4、单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li>\n</ul>\n<h2 id=\"与其他模式的关系\"><a class=\"markdownIt-Anchor\" href=\"#与其他模式的关系\">#</a> 与其他模式的关系</h2>\n<ul>\n<li>外观模式类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li>\n<li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元模式就和单例类似了。 但这两个模式有两个根本性的不同。\n<ul>\n<li>只会有一个单例实体， 但是享元类可以有多个实体， 各实体的内在状态也可以不同。</li>\n<li>单例对象可以是可变的。 享元对象是不可变的。</li>\n</ul>\n</li>\n<li>抽象工厂模式、 生成器模式和原型模式都可以用单例来实现。</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "go",
                "go-设计模式"
            ]
        }
    ]
}