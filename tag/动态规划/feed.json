{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"动态规划\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/01/BQ/LeetCode/1218-longest-arithmetic-subsequence-of-given-difference/",
            "title": "LC:1218.最长定差子序列",
            "date_published": "2021-11-01T10:18:18.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你一个整数数组  <code>arr</code>  和一个整数  <code>difference</code> ，请你找出并返回  <code>arr</code>  中最长等差子序列的长度，该子序列中相邻元素之间的差等于  <code>difference</code>  。</p>\n<p>子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从  <code>arr</code>  派生出来的序列。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"示例-1\"><a class=\"markdownIt-Anchor\" href=\"#示例-1\">#</a> 示例 1</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,2,3,4], difference = 1</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [1,2,3,4]。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,3,5,7], difference = 1</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例 3</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长的等差子序列是 [7,5,3,1]。</span><br></pre></td></tr></table></figure>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= arr.length &lt;= 105</span><br><span class=\"line\">-104 &lt;= arr[i], difference &lt;= 104</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）1218.最长定差子序列\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1hcml0aG1ldGljLXN1YnNlcXVlbmNlLW9mLWdpdmVuLWRpZmZlcmVuY2U=\">力扣（LeetCode）1218.最长定差子序列</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"解法\"><a class=\"markdownIt-Anchor\" href=\"#解法\">#</a> 解法</h2>\n<h3 id=\"解法一-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#解法一-动态规划\">#</a> 解法一：动态规划</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubsequence</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> difference)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">40001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">20000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        dp[arr[i] + offset] = Integer.max(<span class=\"number\">1</span>, dp[arr[i] + offset - difference] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxLength &lt; dp[arr[i] + offset]) &#123;</span><br><span class=\"line\">            maxLength = dp[arr[i] + offset];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#解法二暴力解法\">#</a> 解法二：暴力解法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span> || arr.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> maxLength = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 最长子序列的长度数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">t[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组arr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    t[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] - difference == arr[j]) &#123;</span><br><span class=\"line\">            t[i] = t[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxLength &lt; t[i]) &#123;</span><br><span class=\"line\">                maxLength = t[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> maxLength;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "leetCode",
                "面经之算法题",
                "动态规划"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/10/16/BQ/hdoj/HD-1003/",
            "url": "https://fangjiaxiaobai.github.io/2021/10/16/BQ/hdoj/HD-1003/",
            "title": "1003 Max Sum",
            "date_published": "2021-10-16T10:18:18.000Z",
            "content_html": "<h2 id=\"题目信息\"><a class=\"markdownIt-Anchor\" href=\"#题目信息\">#</a> 题目信息</h2>\n<blockquote>\n<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>\nTotal Submission(s): 377960    Accepted Submission(s): 90742</p>\n</blockquote>\n<h3 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\">#</a> Problem Description</h3>\n<p>Given a sequence a[1],a[2],a[3]…a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.</p>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\">#</a> Input</h3>\n<p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).</p>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\">#</a> Output</h3>\n<p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.</p>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\">#</a> Sample Input</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5 6 -1 5 4 -7</span><br><span class=\"line\">7 0 6 -1 1 -6 7 -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\">#</a> Sample Output</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1:</span><br><span class=\"line\">14 1 4</span><br><span class=\"line\"></span><br><span class=\"line\">Case 2:</span><br><span class=\"line\">7 1 6</span><br></pre></td></tr></table></figure>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"c语言解法\"><a class=\"markdownIt-Anchor\" href=\"#c语言解法\">#</a> C 语言解法</h3>\n<h4 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\">#</a> 动态规划</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num[<span class=\"number\">100001</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum[<span class=\"number\">100001</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = sum[<span class=\"number\">0</span>] = num[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> endIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum[i - <span class=\"number\">1</span>] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum[i] = num[i];</span><br><span class=\"line\">                temp = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sum[i] = num[i] + sum[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxSum &lt; sum[i]) &#123;</span><br><span class=\"line\">                maxSum = sum[i];</span><br><span class=\"line\">                endIndex = i;</span><br><span class=\"line\">                startIndex = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, maxSum, startIndex + <span class=\"number\">1</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反过头来，继续看这段代码的话，我们可以发现，其实我们只用了 <code>sum[i-1]</code>  这一个值， <code>sum[i-2]....sum[0]</code>  我们是没有什么用的。所以我们可以使用一个变量才替换 <code>sum</code>  数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex, endIndex;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = startIndex = endIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;previous);</span><br><span class=\"line\">        max = previous;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previous &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                previous = a;</span><br><span class=\"line\">                temp = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                previous += a;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previous &gt; max) &#123;</span><br><span class=\"line\">                max = previous;</span><br><span class=\"line\">                endIndex = i;</span><br><span class=\"line\">                startIndex = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, max, startIndex , endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"滑动窗口法\"><a class=\"markdownIt-Anchor\" href=\"#滑动窗口法\">#</a> 滑动窗口法</h4>\n<p>注意： 这种解法是会  <code>Time Limit Exceeded</code>  的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口法。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseCount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> caseIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;caseCount);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((caseIndex) &lt; caseCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num[<span class=\"number\">100000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxStartIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">-10000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (width &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - width; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                    sum += num[i + j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxSum &lt; sum) &#123;</span><br><span class=\"line\">                    maxSum = sum;</span><br><span class=\"line\">                    maxStartIndex = i;</span><br><span class=\"line\">                    maxWidth = width;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            width--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d:\\n&quot;</span>, ++caseIndex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>, maxSum, maxStartIndex + <span class=\"number\">1</span>, maxStartIndex + maxWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (caseIndex &lt; caseCount) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"be-careful\"><a class=\"markdownIt-Anchor\" href=\"#be-careful\">#</a> Be Careful</h2>\n<p>nothing…</p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<div class=\"links\"><div class=\"item\" title=\"杭电Oj - 1003\" style=\"--block-color:#550370;\"><span class=\"exturl image\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\" data-background-image=\"https://fangjiaxiaobai.github.io/images/ac-code/acm.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL2FjbS5oZHUuZWR1LmNuL3Nob3dwcm9ibGVtLnBocD9waWQ9MTAwMg==\">杭电Oj - 1003</span>\n          <p class=\"desc\">http://acm.hdu.edu.cn/</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-滑动窗口(C语言版)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLmNwcA==\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLmNwcA==\">【C】杭电Oj-1003题解-滑动窗口(C语言版)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-动态规划(C语言版)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTIuY3Bw\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTIuY3Bw\">【C】杭电Oj-1003题解-动态规划(C语言版)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div><div class=\"item\" title=\"【C】杭电Oj-1003题解-动态规划(优化版本)\" style=\"--block-color:#c98200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTMuY3Bw\" data-background-image=\"https://portrait.gitee.com/uploads/avatars/user/344/1032308_fangjiaxiaobai_1578938745.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVldENvZGUvYmxvYi9jL3NyYy9IRC0xMDAzLTMuY3Bw\">【C】杭电Oj-1003题解-动态规划(优化版本)</span>\n          <p class=\"desc\">https://gitee.com/fangjiaxiaobai/leetCode.git</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "动态规划",
                "HD",
                "BQ",
                "AC"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "url": "https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/dynamicPlan/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "title": "动态规划",
            "date_published": "2021-09-01T04:13:55.000Z",
            "content_html": "<p>👉 <span class=\"label success\">动态规划其实就是动态递推</span>👈</p>\n<h2 id=\"要点\"><a class=\"markdownIt-Anchor\" href=\"#要点\">#</a> 要点</h2>\n<ul>\n<li>递归 + 记忆化 -&gt; 递推 (自下而上的递推)</li>\n<li>状态的定义，opt [n],dp [n],fib [n]</li>\n<li>状态转移方程 (dp 方程)， opt [n]=best_of (opt [n-1],opt [n-2])</li>\n<li>最优子结构</li>\n</ul>\n<h2 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h2>\n<h3 id=\"斐波那契数列\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h3>\n<p>我们先使用递归的方式，我们实现斐波那契数列.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib1(6)=%d\\n&quot;</span>, fib1(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib2(6)=%d\\n&quot;</span>, fib2(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案一</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案二</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib2</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// return n&lt;=1?1:fib1(n - 1) + fib1(n - 2);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib.png\" alt=\"算法01-动态规划01-fib.png\"><br>\n 此时的时间复杂度为 O (2^n). 如上图，最后的结果是每个节点是累加起来，那么有多少个节点呢？2^n 个节点。<br>\n根据这张图，我们可以发现，个别 &quot;节点&quot; 出现了重复的情况，这个时候我们就用到了记忆化的方式进行优化。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib3(6)=%d\\n&quot;</span>, fib3(<span class=\"number\">6</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 斐波那契数列实现方案三</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n  第n个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return n个数的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mem[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mem[n]) &#123;</span><br><span class=\"line\">        mem[n] = fib1(n - <span class=\"number\">1</span>) + fib1(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mem[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就省去了个别节点的计算过程了。如下图<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib02.png\" alt=\"算法01-动态规划01-fib02.png\"> 其中虚线边框的就不用再计算了。</p>\n<p>这样的话，我们把时间复杂度优化到了 O (n).</p>\n<p>然后我们就可以发现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fib(n) = fib(n-1) + fib(n-2);</span><br></pre></td></tr></table></figure>\n<p>这个就是我们的状态转移方程 (dp 方程)。<br>\n比较的简单的 fib，一般我们就成为这个为递推公式。</p>\n<h3 id=\"计算路线\"><a class=\"markdownIt-Anchor\" href=\"#计算路线\">#</a> 计算路线</h3>\n<h4 id=\"例题描述\"><a class=\"markdownIt-Anchor\" href=\"#例题描述\">#</a> 例题描述</h4>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%84.png\" alt=\"算法01-动态规划02-计算路径.png\"></p>\n<p>只能横着走或者竖着走，假设有一个人总 start 处，走到 end 处，一共有多少条路线？</p>\n<h4 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h4>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8402.png\" alt=\"算法02-动态规划03-计算路径02.png\"></p>\n<p>从 start 到 end 的所有路线，等于 B 到 end 路线加上 A 到 end 的路线。因为 start 要到 end，要么到 A, 从 A 走到 end, 要么到 B，从 B 走到 end。那么同理 B 到 end 就等于 C 到 end 的路线到 E 到 end 的路线。D 到 end 等于 C 到 end 的路线加上 D 到 end 的路线.<br>\n 这是我们可以得出如下的推导公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">path(start,end)=path(A,end) + path(B,end)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>同理:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">path(A,end)=path(D,end) + path(C,end) \\\\ path(B,end) = path(E,end) + path(C,end)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>一直到最下面的一行，最下面的这一行的每个点到 end 的路线只有一条，所以每个都是 1, 同样的最右侧的一列，每个都是 1. 如下图.<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8403.png\" alt=\"算法01-动态规划02-计算路径03.png\"><br>\n 经过上面的分析，F 到 end 有几条路线呢？两条。由于 G 右侧是黑色的不能通过，所以 G 只有 1 条，H 就有 2 条，就有 3 条，K 有 3 条，L 有 1 条。所以有了下面的这张图，图中的数字就是路线数.<br>\n<img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202-%E8%AE%A1%E7%AE%97%E8%B7%AF%E5%BE%8404.png\" alt=\"算法01-动态规划02-计算路径04.png\"></p>\n<p>根据以上的推论我们尝试写出这样的代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countPaths</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!validSquare(grid,row,col))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isEnd(grid,row,col))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> countPaths(grid,row+<span class=\"number\">1</span>,col) + countPaths(grid,row,col+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我根据推论可以得出状态转移方程:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a[i,j] == <span class=\"string\">&#x27;白色&#x27;</span>:</span><br><span class=\"line\">   opt[i,j] = opt[i+<span class=\"number\">1</span>,j] + opt[i,j+<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   opt[i,j] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"程序实现\"><a class=\"markdownIt-Anchor\" href=\"#程序实现\">#</a> 程序实现</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paths[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=m;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        paths[i][n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j =n; j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">        paths[m][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span> ; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            paths[i][j] = paths[i+<span class=\"number\">1</span>][j] + paths[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paths[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dp-vs-回溯-vs-贪心\"><a class=\"markdownIt-Anchor\" href=\"#dp-vs-回溯-vs-贪心\">#</a> DP vs 回溯 vs 贪心</h2>\n<ul>\n<li>回溯 (递归) - 重复计算</li>\n<li>贪心 - 永远局部最优</li>\n<li>DP - 记录局部最优子结构 / 多种记录值。(集两者之大成)</li>\n</ul>\n<p>三者并没有明显的界限。贪心不是局部最优的时候，回溯避免了重复计算之后，就是了动态规划了。</p>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h2>\n<h3 id=\"爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#爬楼梯\">#</a> 爬楼梯</h3>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>\n注意：给定 n 是一个正整数</p>\n<h4 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h4>\n<p>如下面的图:</p>\n<p><img data-src=\"/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9203-%E7%88%AC%E6%A5%BC%E6%A2%AF01.png\" alt=\"算法01-动态规划03-爬楼梯01.png\"></p>\n<p>因为我们只有两种走法，要么跨一个台阶，要么跨两个台阶。那么如图中我们爬到第 10 层台阶的走法就等于第 9 (10-1) 层台阶的走法和第 8 (10-2) 层台阶的走法的和。即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>10</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">stairs(10)=stairs(9)+stairs(8)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span>, 那么我们爬第一层台阶是 1 种走法，第二层台阶就是 2 种走法。所以我们就可以得出我们的递推公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">stairs(n) = stairs(n-1) + stairs(n-2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>我们可以得出，这就是斐波那契数列。</p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "算法",
                "动态规划",
                "数据结构与算法"
            ]
        }
    ]
}