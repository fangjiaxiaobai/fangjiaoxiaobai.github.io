{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"数据结构\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "LC:反转链表I",
            "date_published": "2021-08-29T09:25:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<blockquote>\n<p>示例一</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase1.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2,3,4,5]<br>\n 输出：[5,4,3,2,1]</p>\n<blockquote>\n<p>示例二</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase2.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2]<br>\n 输出：[2,1]</p>\n<blockquote>\n<p>示例三</p>\n</blockquote>\n<p>输入：head = []<br>\n 输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>\n-5000 &lt;= Node.val &lt;= 5000</p>\n<p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）206.反转链表\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\">力扣（LeetCode）206.反转链表</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一道非常简单的题目。也是很容易出现<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlQkUlRTUlODUlOEIlRTYlOTUlODglRTUlQkElOTQvNTYzOTE3OA==\">达克效应</span>的一道题目。 为什么呢？应为这道题太简单了啊。 <b>思路</b> 太简单了啊。 但是真正去写的话，可不见得真有那么简单。</p>\n<p>简单的题目，我们还是 以图的形式来展示。</p>\n<h3 id=\"思路一-迭代链表-创建新节点重组成新链表\"><a class=\"markdownIt-Anchor\" href=\"#思路一-迭代链表-创建新节点重组成新链表\">#</a> 思路一：迭代链表，创建新节点，重组成新链表</h3>\n<h4 id=\"思路解析\"><a class=\"markdownIt-Anchor\" href=\"#思路解析\">#</a> 思路解析</h4>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution1.png\" alt=\"一图胜千言\"></p>\n<p>核心思路如标题。 首先将遍历的原链表中的节点值复制到新建的节点中 (a 步骤), 节点 next 指针指向是上一个节点，没有则为 null (b 步骤). 遍历链表的所有节点。</p>\n<p>这样其实会生成一个新的链表。也就说会同时存在两条链表。</p>\n<p><span class=\"label success\">✊时间复杂度为 O (n)， 空间复杂度为 O (n)</span></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历旧链表,新建节点，并且拼接成新链表。</span></span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != head) &#123;</span><br><span class=\"line\">            ListNode curr = <span class=\"keyword\">new</span> ListNode(head.val);</span><br><span class=\"line\">            curr.next = pre;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二-迭代变更链表的指针指向\"><a class=\"markdownIt-Anchor\" href=\"#思路二-迭代变更链表的指针指向\">#</a> 思路二：迭代变更链表的指针指向</h3>\n<h4 id=\"思路解析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-2\">#</a> 思路解析</h4>\n<p>这种思路也是比较简单的，但是一定要想好喽之后，再看开始编码，要不然很容易思绪错乱。</p>\n<p>图解:</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution2.png\" alt=\"一图胜千言\"></p>\n<p>这种解法需要两个指针， pre 代表其前一个节点， cur 代表后一个节点。进行遍历，从而实现 指针指向的变更。 当然，还需要一个临时节点去帮忙 pre 和 cur 指针，向后移动。</p>\n<p><span class=\"label success\">✊时间复杂度是 O (n); 空间复杂度是 O (3);</span></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = head, cur = head.next;</span><br><span class=\"line\">        <span class=\"comment\">// !!注意:断开头节点的next指针，避免产生环型链表。</span></span><br><span class=\"line\">        pre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != cur) &#123;</span><br><span class=\"line\">            ListNode tempNode = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tempNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路三-递归方式-变更指针\"><a class=\"markdownIt-Anchor\" href=\"#思路三-递归方式-变更指针\">#</a> 思路三：递归方式， 变更指针</h3>\n<h4 id=\"思路解析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-3\">#</a> 思路解析</h4>\n<p>这思路三，其实是思路二的不同写法。 这种实现方法首先就需要将 链表 “递” 到底，然后在归的时候，把 节点链接到一起。如下图</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution3.png\" alt=\"一图胜千言\"></p>\n<p>这样说起来，递归这种方式来解决反转类的问题好像会有一种与生俱来的优势。  <code>首先递进去，然后归出来</code> 。</p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归入口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(head, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode currNode, ListNode preNode)</span> </span>&#123;</span><br><span class=\"line\">        ListNode headNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == currNode) &#123;</span><br><span class=\"line\">            headNode = preNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            headNode = reverse(currNode.next, currNode);</span><br><span class=\"line\">            currNode.next = preNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> headNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这一道题考的是简单的逻辑问题，实属简单至极的题目。要注意 陷入 “达克效应”。</p>\n<p>勿以题小而不做。</p>\n<p>使用头递归来做反转类似的题目，好像是一种天然支持的特性。但是在实际的开发过程中，不建议过多的使用递归的方式，一方面不具备可读性。另一方面，递归方式对性能不太优化，还有重要的是要考虑栈溢出的风险。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）189.反转数组\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）189.反转数组</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）92.反转链表II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\">力扣（LeetCode）92.反转链表II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）7.整数反转\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\">力扣（LeetCode）7.整数反转</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）344.反转字符串\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\">力扣（LeetCode）344.反转字符串</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "链表",
                "面经之算法题"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/19/BQ/LeetCode/0001-%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84/",
            "title": "LC:反转数组",
            "date_published": "2021-08-19T06:48:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<blockquote>\n<p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>\n</blockquote>\n<p>进阶：</p>\n<p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>\n你可以使用空间复杂度为 O (1) 的 原地 算法解决这个问题吗？</p>\n<p>示例 1:</p>\n<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>\n 输出: [5,6,7,1,2,3,4]<br>\n 解释:<br>\n 向右旋转 1 步: [7,1,2,3,4,5,6]<br>\n 向右旋转 2 步: [6,7,1,2,3,4,5]<br>\n 向右旋转 3 步: [5,6,7,1,2,3,4]</p>\n<p>示例 2:</p>\n<p>输入：nums = [-1,-100,3,99], k = 2<br>\n 输出：[3,99,-1,-100]<br>\n 解释:<br>\n 向右旋转 1 步: [99,-1,-100,3]<br>\n 向右旋转 2 步: [3,99,-1,-100]</p>\n<div class=\"note warning\">\n<p>提示</p>\n</div>\n<p>1 &lt;= nums.length &lt;= 2 * 104<br>\n-231 &lt;= nums[i] &lt;= 231 - 1<br>\n0 &lt;= k &lt;= 105</p>\n<hr>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<h3 id=\"解法1顺序后移法\"><a class=\"markdownIt-Anchor\" href=\"#解法1顺序后移法\">#</a> 解法 1: 顺序后移法</h3>\n<p>将最后一个元素赋值给临时变量，然后将其他元素顺序后移一个位置。重复此操作 k 次。</p>\n<p>但是需要注意的是:</p>\n<ul>\n<li>时间复杂度。这种算法在最优时时间复杂度是 O (n). 最差情况下是 O (n^2). 在 LeetCode 上是没法 AC 的。</li>\n<li>k 是会大于数组长度的。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解决k&gt;nums.length问题</span></span><br><span class=\"line\">        k = k % nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = length - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            nums[j] = nums[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种解决方法在数据量较大的情况下就会报错 <code>超出时间限制了</code> 。<br>\n即使 你在循环修改使用  <code>System.arraycopy(nums, 0, nums, 1, length - 1);</code>  来替换掉内层循环，也是不可以 <code>AC</code>  的。</p>\n<h3 id=\"解法2-优化解法1空间换时间\"><a class=\"markdownIt-Anchor\" href=\"#解法2-优化解法1空间换时间\">#</a> 解法 2: 优化解法 1, 空间换时间</h3>\n<p>按照规律将 nums 数组中的值，赋值到新数组中。然后使用新数组覆盖原数组。<br>\n那规律是什么呢？<br>\n 设：<br>\n <code>i</code>  为数组的的下标。  <code>newArr</code>  为新的数组， <code>n</code>  为数组总长度，<br>\n 那么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newArr[(i+k)%n] = nums[i]</span><br></pre></td></tr></table></figure>\n<p><code>AC</code>  代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        newArr[(i + k) % n] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.arraycopy(newArr, <span class=\"number\">0</span>, nums, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC 之后显示：<br>\n执行用时  <code>1 ms</code> <br>\n 内存消耗： <code>55.1 MB</code></p>\n<p>这种方式，时间复杂度得到显著的提升，但是带来了额外的空间消耗。而且这种空间消耗是等于原来占用的数据大小。</p>\n<p>那是否还有其他方式呢？</p>\n<h3 id=\"解法3-反转\"><a class=\"markdownIt-Anchor\" href=\"#解法3-反转\">#</a> 解法 3: 反转</h3>\n<p>这种方式是一种比较简单的方式，有点类似于脑筋急转弯的意思。抛开之前的环装思路。将这个数组看成具有方向的一组数据。将这组数据分成三组： <code>[0,k-1]</code> , <code>k</code> , <code>[k+1,length]</code> . 先将  <code>[0,k-1]</code>  反转，再把  <code>[k+1,length]</code>  反转，最后把这个数组反转。这样操作之后，就是最后结果了。</p>\n<p>比如，数组： <code>[1,2,3,4,5,6,7]</code> ,  <code>k=3</code></p>\n<p>第一步：把整体数组进行反转:  <code>[1,2,3,4,5,6,7]</code>  =&gt;  <code>[7,6,5,4,3,2,1]</code> <br>\n 第二步：把 <code>[0,k-1=2]</code>  的元素进行反转:  <code>[7,6,5,4,3,2,1]</code>  =&gt; <code>[5,6,7,4,3,2,1]</code> <br>\n 第三步：把 <code>[k,n-1]</code>  的元素进行反转:  <code>[5,6,7,4,3,2,1]</code>  =&gt; <code>[5,6,7,1,2,3,4]</code></p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start += <span class=\"number\">1</span>;</span><br><span class=\"line\">        end -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>关于这道题目的一点小思考:</p>\n<ul>\n<li>这道题其实还有另外一种解法，就是通过公式去推导出元素应该最终所在的位置，直接进行位置交换。这种思路也是可行的。具体解决可以参照下官网的解题方法。</li>\n<li>这是一道很简单的题目，最后出奇的解法也是颇感意外的，总有一种豁然开朗的感觉。我一直在想此法的解题人是怎么想到的呢。<span class=\"label warning\">这里面一定是蕴含一定的逻辑的。这种多次反转的逻辑，或许是一种规律？</span> 我一直没有想通。</li>\n<li>当你想到这个可以用一个环去解决问题的时候，可能永远就想不出 &quot;利用方向&quot; 去解决这个问题了。反观题目来讲，一直都是说的数组，而 “环” 是我们自己强加的一个思维方式。确实，当我们从环的角度出发，看到的就不是题目本身了，看到的是你的题目。<span class=\"label success\">✔️ 反观现实，你理解的现实就真正的是现实吗？你有没有陷入自己的 “环” 中去呢？不妨，重新看看你身边的人和事吧，尝试发现他们最真实的样子.</span></li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "面经之算法题",
                "数组"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/02/Redis%E7%B3%BB%E5%88%97/C-4-%E8%B7%B3%E8%A1%A8/",
            "title": "Redis中的数据结构之跳表及其原理",
            "date_published": "2021-08-01T16:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>文中附代码实现. <a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">电梯直达</a></p>\n<p>在公众号回复 【跳表】 也可以获取哦。</p>\n<h3 id=\"什么是跳表\"><a class=\"markdownIt-Anchor\" href=\"#什么是跳表\">#</a> 什么是跳表</h3>\n<blockquote>\n<p>跳表是一种数据结构。它允许快速查询一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是 O (log n)，优于普通队列的 O (n)。</p>\n</blockquote>\n <p align=right> from. 维基百科</p>\n<h3 id=\"引题\"><a class=\"markdownIt-Anchor\" href=\"#引题\">#</a> 引题</h3>\n<p>线性表这种数据有两种具体实现，数组和链表。具体的内容之前的文章里也有说过，可以翻翻看哇～。在这里两种数据结构中，数组的优点是查找速度快，而链表的优点是增删的效率高，这也是我们常说的。其实，非也。</p>\n<p>数组是一种内存连续的数据结构，其优点是可以通过 <code>首地址+N*(sizeOf(Node))</code>  来快速获取指定位置上的元素。假如我们不知道指定元素的位置呢？</p>\n<p>链表是一种非内存连续的数据，其优点是通过改变指针地址来快速增减元素。很明显的问题，你首先要知道你要增加 / 删除的目标元素是哪个！所以会浪费  <code>O(n)</code>  的查询时间。</p>\n<p>要论效率，那就要说平衡树 ( <code>AVL</code> ) 了。增删查的效率都是  <code>O(logN)</code> 。 但是这种数据结构，原理比较复杂，实现起来那不是比较复杂了，那是相当复杂。增删操作，都需要其依靠平衡操作引发子树的调整。</p>\n<p>那么，掌声有请我们今天的主角: <b>跳表</b>。</p>\n<h2 id=\"跳表\"><a class=\"markdownIt-Anchor\" href=\"#跳表\">#</a> 跳表</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>跳表 ( <code>skip list</code> ) 全称 跳跃链表。 是一种类链表的数据结构。</p>\n<p>跳表的性能和平衡树的性能是一样的，在插入，删除，搜索的时间复杂度都是  <code>O(n)</code> , 是一种利用空间换时间的数据结构。</p>\n<p>跳表是一种随机化的数据结构，目前开源软件 Redis 和 LevelDB 都有用到它。</p>\n<p>这里，先给大家看一个<b>可能</b>的跳表结构。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-02-%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%B3%E8%A1%A8%E7%BB%93%E6%9E%841.png\" alt=\"跳表-02-可能的跳表结构1.png\"></p>\n<p>现在我要告诉你，上面的跳表是由下面的跳表经过层层优化得来的。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-01-%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8.png\" alt=\"跳表-01-有序的链表\"></p>\n<p>下面我们针对上面的跳表结构来分析一下。</p>\n<p>刚才说过了，链表增删性能罪魁祸首就是查找操作！对于查找操作，效率最高的莫过于二分查找了。但是对于第一个有序链表中是无法使用二分查找的。但是呢，我们可以随机抽选中其中的几个元素，组成一个新的链表。就像下面这样。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-03-%E6%8A%BD%E8%B1%A1%E5%87%BA%E6%96%B0%E7%9A%84%E4%B8%80%E5%B1%82.png\" alt=\"跳表-03-抽象出新的一层.png\"></p>\n<p>假设我们要找 <code>5</code>  这个元素，在单独的有序链表中，我们必须从头结点依次遍历到  <code>5</code>  这个节点。路径为 <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code> , 下图中黄色线路径。, 现在，我们只需要从  <code>1-&gt;2-&gt;4-&gt;5</code> . 下图中紫色线路径。既然我们可以原来的链表抽象出一个新的链表，那我们还可以从新的链表中再抽象出一个新的链表。这样的话，就直接可以  <code>1-&gt;4-&gt;5</code> , 就可以查到一个我们的目标节点了。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-04-%E5%86%8D%E6%8A%BD%E8%B1%A1%E5%87%BA%E6%96%B0%E7%9A%84%E4%B8%80%E5%B1%82.png\" alt=\"跳表-04-再抽象出新的一层.png\"></p>\n<p>如果你看到这里，我要告诉你一个重要的概念了。</p>\n<p><strong>层：就是我们假设的抽象出来的新链表。</strong></p>\n<p>可能你很好奇，层我们应该怎么存储呢？很简单啊！</p>\n<p>以后我们每个链表的元素是怎么定义的？？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span> &#123;</span></span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    Node *next;</span><br><span class=\"line\">&#125; node;</span><br></pre></td></tr></table></figure>\n<p>我们只需要将 指向下一个元素的指针改成一个指针数组就可以了！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span> &#123;</span></span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    <span class=\"comment\">/// 指向后继元素的指针数组</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>[<span class=\"title\">i</span>];</span></span><br><span class=\"line\">&#125; node;</span><br></pre></td></tr></table></figure>\n<p>了解了怎么存储之后，那怎样确定某个节点有几层呢？这里我告诉你吧，随机的！怎么随机的呢？就是通过随机数来确定的，也就是我们常说的 抛硬币的形式。 比如下面的这段代码.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成一个随机数</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 一个随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">random_level</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">rand</span>() % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        level++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    level = (level &lt; MAX_LEVEL) ? level : MAX_LEVEL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我们就尝试着实现一个跳表。</p>\n<h3 id=\"跳表的实现\"><a class=\"markdownIt-Anchor\" href=\"#跳表的实现\">#</a> 跳表的实现</h3>\n<ul>\n<li>定义跳表的结构</li>\n</ul>\n<p>经过上面的分析，每个节点指向下一个节点的指针是一个数组，所以我们得出下面的结构。(当然也有其他方式的实现，欢迎交流～)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 节点</span></span><br><span class=\"line\">NODE &#123;</span><br><span class=\"line\">    T data,</span><br><span class=\"line\">    <span class=\"comment\">/// 指向下一个节点的数组，从1开始。</span></span><br><span class=\"line\">    <span class=\"comment\">/// 数组中的每个元素对应该层的下一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">/// next[1],是第一层的下一个节点的地址。</span></span><br><span class=\"line\">    <span class=\"comment\">/// next[2] 是第二层的下一个节点的地址。</span></span><br><span class=\"line\">    NODE []next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 跳表</span></span><br><span class=\"line\">SKIP_LIST&#123;</span><br><span class=\"line\">    NODE head;</span><br><span class=\"line\">    <span class=\"comment\">/// 该跳表的层数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查找指定的元素</li>\n</ul>\n<p>上面说过了 查找过程，我这里就直接给出伪代码了。</p>\n<p>主要逻辑是：从高层开始查找直到找到等于指定元素的节点 E 或者第一个大于指定元素的节点 G。如果是节点 E，那么直接返回就好了。如果是 G 节点，那么就以 G 节点的前一个节点 L, 在下一层进行查找，重复上面的逻辑，直到找到节点 E，或者到达跳表的结尾。</p>\n<p>比如下图中查找  <code>5</code>  的过程为:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-08-%E6%9F%A5%E6%89%BE.png\" alt=\"跳表-08-查找\"></p>\n<ul>\n<li><code>head-&gt;8</code> ,  <code>8&gt;5</code> , 从 <code>head</code>  开始，去下一层查找。</li>\n<li><code>head-&gt;4-&gt;8</code> ,  <code>8&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找</li>\n<li><code>head-&gt;4-&gt;8</code> ,  <code>8&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找.</li>\n<li><code>head-&gt;4-&gt;6</code> ,  <code>6&gt;5</code> , 从  <code>4</code>  元素开始查找。去下一层查找.</li>\n<li><code>head-&gt;4-&gt;5</code> ,  <code>5==5</code> , 返回节点 <code>5</code> .</li>\n</ul>\n<p>如下面的伪代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">search</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// i 表示层数，从最高层开始查找 。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q &amp;&amp; k == q-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &amp;(q-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>构建一个跳表。</li>\n</ul>\n<p>上面分析可以得出来，跳表是一个多层的有序链表。所以我们对于每一层都像操作普通链表一样就可以了。就像下面的这样:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-06-%E6%8F%92%E5%85%A5.png\" alt=\"跳表-06-插入\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">insert</span> () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到要插入的节点位置。</span></span><br><span class=\"line\">    <span class=\"comment\">// level是本跳表的层数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = level<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">///遍历该层小于指定值的前一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/// 新节点的前一个节点的层指针。</span></span><br><span class=\"line\">        update[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随机生成该节点的层数,如果生成的层数大于当前层，需要更新跳表中记录的level值。</span></span><br><span class=\"line\">    new_level = <span class=\"built_in\">rand_level</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(new_level &gt; level) &#123;</span><br><span class=\"line\">        level = new_level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 生成新的节点，并针对每一层执行普通链表的插入操作。</span></span><br><span class=\"line\">    new_node = <span class=\"built_in\">create_new_node</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = level - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 下面两行代码就是普通连接的增加方法。</span></span><br><span class=\"line\">        <span class=\"comment\">/// 新节点的前一个节点的第i层的节点。</span></span><br><span class=\"line\">        new_node-&gt;next[i] = update[i]-&gt;next[i];</span><br><span class=\"line\">        update[i]-&gt;next[i] = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除跳表的元素</li>\n</ul>\n<p>主要逻辑是该节点的每一层都要删除.</p>\n<p>即对每一层，都要 要删除节点的上一个节点指向要删除节点的下一个节点。</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-07-%E5%88%A0%E9%99%A4.png\" alt=\"跳表-07-删除.png\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">del</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 找到要删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((q = p-&gt;next[i]) &amp;&amp; q-&gt;k &lt; k) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        update[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<p>👉 <a href=\"https://github.com/fangjiaxiaobai/data_structures_and_algorithms/tree/master/01_data_structures/skiplist/c/01_fangjiaxiaobai\">跳表 <code>C</code>  语言版本</a><br>\n👉 <a href=\"https://github.com/fangjiaxiaobai/data_structures_and_algorithms/tree/master/01_data_structures/skiplist/java/fangjiaxiaobai\">跳表 <code>JAVA</code>  版本</a></p>\n<p>其他语言，比如  <code>python</code> ,  <code>golang</code> ,  <code>c++</code> ,  <code>js</code> ,  <code>php</code> ,  <code>kotlin</code>  版本的代码，你有没有兴趣搞一波呢？👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdqaWF4aWFvYmFpL2RhdGFfc3RydWN0dXJlc19hbmRfYWxnb3JpdGhtcw==\">赐教地址</span></p>\n<p>各位看官可以选择自己熟悉的语言查看。实现代码仅供参考。如有高见，欢迎交流哇～，还请不吝赐教！</p>\n<p>也欢迎大侠提交自己擅长语言的代码到仓库～，集思广益，一起交流！期待～～</p>\n<p>(仓库中的数据结构与算法持续更新哦，欢迎 <code>star</code> )</p>\n<h3 id=\"时间复杂度的分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度的分析\">#</a> 时间复杂度的分析</h3>\n<p>因为跳表的时间复杂度和跳表的层数以及该层上的节点数和节点分布的位置有关，而这些因素都是随机的。 此中涉及了很多复杂的概率统计学知识。所以我就摘自维基百科中的说明，如下:</p>\n<p><img data-src=\"/images/Redis%E7%B3%BB%E5%88%97/images/%E8%B7%B3%E8%A1%A8-05-%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png\" alt=\"跳表-05-的时间复杂度png\"></p>\n<p>如果看的不是很清晰，也可以这么想：</p>\n<p>如果每两个节点抽出一个节点作为上一级索引的节点，那第一级索引的节点个数大约就是  <code>n/2</code>  , 第二级索引是  <code>n/4</code> , 第三级就是  <code>n/8</code> 。 也就是说 第  <code>k</code>  级索引节点个数是  <code>n/(2^k)</code> ;</p>\n<p>假设，我们有  <code>h</code>  层，最高层索引有 <code>2</code>  个节点，那么， 就是  <code>n/(2^k)=2</code> , 那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k=log_2N-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，这个链表的高度就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">log_2N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>. 如果每一层要遍历  <code>m</code>  个节点，那么在跳表中查询一个数据的时间复杂度就是 <code>O(m*logN)</code> .</p>\n<p>由于随机分布的存在，我们可以把 m 当做一个常数，所以，时间复杂度大致可以认为是  <code>O(logN)</code></p>\n<h3 id=\"空间复杂度的分析\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度的分析\">#</a> 空间复杂度的分析</h3>\n<p>根据整体代码实现来看，我们使用了链表的形式来实现。其中， <code>next</code>  改成了数组用来存储下一节点的指针，并没有真正的存储对象，. 也就是说，其实我们并没有使用很多的内存，当然，比一般的链表还是要多一些的。对于我们存储的对象来讲，用于存储指针的内存直接就可以忽略了。时间复杂度为  <code>O(N+m)</code> , 其中  <code>N&gt;&gt;m</code> ( <code>N</code>  远远大于 <code>m</code> ).</p>\n<h3 id=\"比较\"><a class=\"markdownIt-Anchor\" href=\"#比较\">#</a> 比较</h3>\n<h4 id=\"跳表-与平衡树-哈希表的比较\"><a class=\"markdownIt-Anchor\" href=\"#跳表-与平衡树-哈希表的比较\">#</a> 跳表 与平衡树、哈希表的比较</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">跳表</th>\n<th style=\"text-align:center\">平衡树</th>\n<th style=\"text-align:center\">哈希表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">有序性</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查找性能</td>\n<td style=\"text-align:center\">O(logN)</td>\n<td style=\"text-align:center\">O(logN)</td>\n<td style=\"text-align:center\">O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">实现逻辑</td>\n<td style=\"text-align:center\">简单</td>\n<td style=\"text-align:center\">复杂</td>\n<td style=\"text-align:center\">简单</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否支持范围查找</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持 (无序)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时间复杂度</td>\n<td style=\"text-align:center\">较少，取决 p 参数</td>\n<td style=\"text-align:center\">较大 (和跳表比，占用左右子树的两个指针)</td>\n<td style=\"text-align:center\">一般</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释如下\"><a class=\"markdownIt-Anchor\" href=\"#解释如下\">#</a> 解释如下:</h4>\n<ul>\n<li>在做范围查找的时候，平衡树比跳表操作要复杂。在平衡树上，我们找到指定范围的小值之后，还需要以中序遍历的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在跳表上进行范围查找就非常简单，只需要在找到小值之后，对第 <code>1</code>  层链表进行若干步的遍历就可以实现。</li>\n<li>平衡树的增删操作可能引发子树的平衡调整，而跳表的插入和删除只需要修改相邻节点的指针，操作简单又快速。</li>\n<li>从内存占用上来说，跳表比平衡树更灵活一些。一般来说，平衡树每个节点包含 <code>2</code>  个指针（分别指向左右子树），而跳表每个节点包含的指针数目平均为 <code>1/(1-p)</code> ，具体取决于参数 <code>p</code>  的大小。如果像 <code>Redis</code>  里的实现一样，取 <code>p=1/4</code> ，那么平均每个节点包含 <code>1.33</code>  个指针，比平衡树更有优势。</li>\n<li>查找单个 <code>key</code> ，跳表和平衡树的时间复杂度都为 <code>O(log n)</code> ，大体相当；而哈希表在保持较低的哈希值冲突概率的前提下，查找时间复杂度接近 <code>O(1)</code> ，性能更高一些。</li>\n</ul>\n<p>我还从网上看到了 <code>Redis</code>  的作者选择 跳表做为 <code>zset</code>  底层数据结构的原因，贴在下面。</p>\n<h4 id=\"redis中作者选择skiplist的原因\"><a class=\"markdownIt-Anchor\" href=\"#redis中作者选择skiplist的原因\">#</a>  <code>Redis</code>  中作者选择 SkipList 的原因:</h4>\n<blockquote>\n<p>There are a few reasons:</p>\n<ol>\n<li>They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</li>\n<li>A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</li>\n<li>They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>简单的从性能角度分析了数组和链表在性能方面的障碍，引出了我们今天的主角： 跳表。</li>\n<li>画了一个可能出现的跳表结构。这是与跳表的初次见面。并介绍了二分查找的变相应用。当前，这都是基于有序链表为前提的。</li>\n<li>介绍了链表的层的概念，这是跳表相对于链表最重要且唯一的概念，有了它才有了时间复杂度为 <code>O(logN)</code>  的查询效率，从而实现了增删操作的时间复杂度也是 <code>O(logN)</code> 。</li>\n<li>接下来，我们一起完成了跳表的实现逻辑。并且提供了多种语言的跳表实现版本。希望你也提交代码到仓库中，大家一起交流，期待。</li>\n<li>跳表在发展的过程中也出现几个变种，我们的这个只是一个最简答的实现。甚至我们都没有考虑过元素个数与层数的最优解等等问题。后面会有一篇文章分享的是 <code>Redis</code>  中 <code>skiplist</code>  的实现。敬请期待吧～</li>\n</ul>\n<h2 id=\"推荐\"><a class=\"markdownIt-Anchor\" href=\"#推荐\">#</a> 推荐</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0yZzlPU1JLSnV6TQ==\">某高校跳表公开课 (需科学上网)</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "Redis",
                "数据结构"
            ]
        }
    ]
}