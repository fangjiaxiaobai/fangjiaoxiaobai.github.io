{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"go-error\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2022/02/24/go/go-errors/",
            "url": "https://fangjiaxiaobai.github.io/2022/02/24/go/go-errors/",
            "title": "浅析go的error",
            "date_published": "2022-02-24T10:18:18.000Z",
            "content_html": "<p>异常处理 方法解释：</p>\n<ul>\n<li><code>New</code> : 创建一个 <code>Error</code></li>\n<li><code>Is</code> ： 判断是不是特定的一个 <code>Error</code></li>\n<li><code>As</code> ：类型转换为特定的 <code>Error</code></li>\n<li><code>UnWrap</code> : 解除包装，返回被包装的 <code>error</code> .</li>\n</ul>\n<p><code>error.New(string)</code>  方法返回的是  <code>error struct</code>  的指针。</p>\n<p><code>errors is values</code> .  <code>error</code>  其实就是一个 <code>interface (struct)</code></p>\n<h1 id=\"error的类型\"><a class=\"markdownIt-Anchor\" href=\"#error的类型\">#</a>  <code>error</code>  的类型</h1>\n<h2 id=\"sentinel-error\"><a class=\"markdownIt-Anchor\" href=\"#sentinel-error\">#</a>  <code>Sentinel Error</code></h2>\n<p><code>Sentinel Error</code>  预定义的特定错误。我们称为  <code>Sentinel Error</code> . 这个名字来源于计算机编程中使用一个特定值来表示不可能进一步处理的错误。 类似于：  <code>io.EOF</code>  或者，更底层的： <code>syscall.ENOENT</code> .</p>\n<p>尽可能避免的使用 <code>Sentinel Error</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := errors.New(<span class=\"string\">&quot;this is a error&quot;</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(err.Error())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"error-type-错误类型\"><a class=\"markdownIt-Anchor\" href=\"#error-type-错误类型\">#</a>  <code>Error Type</code>  (错误类型)</h2>\n<p><code>Error Type</code>  是实现了  <code>error</code>  接口的自定义类型。例如下面的 <code>MyError</code> . 用户可以使用断言来转换这个错误，获取更多的异常信息。 如 下代码。相比于  <code>Sentinel Error</code> ,  <code>Error Type</code>  的一大改进就是 能够为包装底层  <code>error</code>  提供上下文。 例如 <code>os.PathError</code> . 但是：调用使用类型断言和类型  <code>switch</code>  . 就要让自定义的  <code>error</code>  变为  <code>public</code>  。 这种模型会导致错误类型和调用者强耦合，从而导致 <code>Api</code>  变得脆弱。</p>\n<p>建议：避免使用  <code>error Type</code>  或者 至少避免将他们作为公共 <code>API</code>  的一部分。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyError /** demo2.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmsg        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfileName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tlineNumber <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现了 error接口。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%s:%d: %s&quot;</span>, m.fileName, m.lineNumber, m.msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testError</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyError&#123;msg: <span class=\"string\">&quot;this is a error&quot;</span>, fileName: <span class=\"string\">&quot;demo8_error_resolve&quot;</span>, lineNumber: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := testError()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> err := err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *MyError:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;error: &quot;</span>, err.lineNumber)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"opaque-error\"><a class=\"markdownIt-Anchor\" href=\"#opaque-error\">#</a>  <code>Opaque Error</code></h2>\n<p>将这种风格称为 不透明错误。虽然你知道发生了错误，但是您没能力看到错误的内部，作为调用者，关于操作的结果，您所知道的就是他成功或者失败了<br>\n ==&gt; 只返回错误，但不返回错误内容。 ==&gt; 同时返回错误的类型，而不是错误的类型。 如下示例:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Write</span><span class=\"params\">(w io.Writer, buf []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t_, err := w.Write(buf)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;这里发生了错误，%w\\n&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OpaqueError /***** demo3</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> OpaqueError <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\terror</span><br><span class=\"line\">\tIsTemporary() <span class=\"keyword\">bool</span> <span class=\"comment\">// 是否是临时错误。</span></span><br><span class=\"line\">\tIsTimeout() <span class=\"keyword\">bool</span>   <span class=\"comment\">// 是否是超时</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> temporary <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tTemporary() <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为Temporary Error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isTemporary</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tte, ok := err.(temporary)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ok &amp;&amp; te.Temporary()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"handing-error-处理异常\"><a class=\"markdownIt-Anchor\" href=\"#handing-error-处理异常\">#</a>  <code>Handing Error</code>  处理异常</h1>\n<ul>\n<li>一种处理 <code>error</code>  的方式，编写代码技巧，让代码更易读。</li>\n<li><code>wrap Errors</code> . 使用第三方库。  <code>github.com/pkg/errors. go</code>  的 <code>1.13</code>  版本之后，可以使用:  <code>fmt.Errorf(&quot;%w&quot;,err)</code> . 和  <code>errors.Is()</code> , <code>errors.As()</code> . 规范：\n<ul>\n<li>如果是一个跨项目，多重复用的项目里，应该直接返回 <code>error</code> , 而不是返回包装后的 <code>error</code> .</li>\n<li>如果函数 / 方法不打算处理错误，那么用足够的上下文  <code>wrap error</code>  并将其返回到调用堆栈中。</li>\n<li>一旦确定函数 / 方法要处理错误，错误就不再是错误， 如果函数 / 方法仍然需要发出返回，则它不能返回错误值，它应该只返回零 (比如降级处理中， 你返回了 降级数据，然后需要返回 <code>nil</code> .)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"go-2x-的发展参考\"><a class=\"markdownIt-Anchor\" href=\"#go-2x-的发展参考\">#</a>  <code>go 2.x</code>  的发展参考</h1>\n<p>建议多看看，可以把握一下  <code>go</code>  未来的发展方向</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi8yOTkzNC1lcnJvci12YWx1ZXMubWQ=\">https://go.googlesource.com/proposal/+/master/design/29934-error-values.md</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi9nbzJkcmFmdC1lcnJvci1oYW5kbGluZy5tZA==\">https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVzb3VyY2UuY29tL3Byb3Bvc2FsLysvbWFzdGVyL2Rlc2lnbi9nbzJkcmFmdC1lcnJvci1oYW5kbGluZy1vdmVydmlldy5tZA==\">https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md</span></p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "go",
                "go-error"
            ]
        }
    ]
}