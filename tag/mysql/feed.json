{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"mysql\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2022/11/04/MySQL-series/MySQL-7-03-BinLog/",
            "url": "https://fangjiaxiaobai.github.io/2022/11/04/MySQL-series/MySQL-7-03-BinLog/",
            "title": "MySQL 日志系统 - binLog",
            "date_published": "2022-11-04T10:18:18.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9pbnRlcm5hbHMvZW4vYmluYXJ5LWxvZy1vdmVydmlldy5odG1s\">MySQL 手册 - binary Log</span></p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p><code>binLog</code>  日志系统是由一组二进制文件和一个索引文件组成。</p>\n<p><code>binLog</code>  全称是  <code>binary log</code> ，即为二进制日志文件。 <code>binlog</code>  是记录所有数据库表结构变更以及表数据修改的二进制日志。不会记录 <code>Select</code> , <code>show</code>  等操作。 <code>binLog</code>  日志是以事件形式记录，包含了语句执行的消耗时间，正确重现该语句所需的服务器状态信息，错误代码，维护 <code>binlog</code>  本身所需的元数据等。</p>\n<p>准确地说:<br>\n 二进制日志事件描述了可用于重现服务器上发生的相同全局状态更改的操作。</p>\n<p>索引文件是记录了当前的二进制日志文件的文本文件。</p>\n<p>日志文件使用.NNNNNN 后缀顺序编号。 索引文件的后缀为.index。 所有文件共享一个通用基名。 默认的二进制日志文件命名基名称为 “HOSTNAME-bin”。 使用默认的基本名称，二进制日志包含具有以下名称的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># bin-log文件</span><br><span class=\"line\">fangjiaxiaobai-bin.0000001</span><br><span class=\"line\">fangjiaxiaobai-bin.0000002</span><br><span class=\"line\">fangjiaxiaobai-bin.0000003</span><br><span class=\"line\">...</span><br><span class=\"line\"># 索引文件</span><br><span class=\"line\">fangjiaxiaobai-bin.index</span><br></pre></td></tr></table></figure>\n<h2 id=\"binlog-的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#binlog-的使用场景\">#</a> binLog 的使用场景。</h2>\n<ul>\n<li>主从复制：主库中开启 <code>binlog</code> , 从库读取 <code>binlog</code>  后，执行 <code>binlog</code> ，从而达到数据一致性。</li>\n<li>数据恢复：通过保存的 <code>binlog</code> ，可以使用 <code>mysqlbinlog</code>  工具来恢复数据。</li>\n</ul>\n<h2 id=\"binlong-记录模式\"><a class=\"markdownIt-Anchor\" href=\"#binlong-记录模式\">#</a> binlong 记录模式</h2>\n<p><code>binLog</code>  文件默认为 <code>&lt;主机名&gt;_binlog_&lt;序列号&gt;</code>  格式。也可以在配置文件中指定名称。<br>\n文件记录模式有  <code>STATEMENT</code> , <code>ROW</code> , <code>MIXED</code>  三种。具体含义如下:</p>\n<ul>\n<li><code>ROW</code> 😦 <code>row-based replication</code> , <code>RBR</code> )： 日志中会记录每一行数据被修改的情况，然后 <code>Slave</code>  端对相同的数据进行修改.\n<ul>\n<li>优点：可以清楚的记录每行数据的修改细节，能完全实现主从数据同步和数据的恢复。</li>\n<li>缺点：批量操作会产生大量的日志，尤其是 <code>alter table</code>  操作，会让日志爆涨。</li>\n</ul>\n</li>\n<li><code>STATEMENT</code> : ( <code>statement-based replication,SBR</code> )：\n<ul>\n<li>优点：日志量小，减少磁盘 IO, 提供存储和恢复速度。</li>\n<li>缺点： 不可靠。如果是主从架构的话使用 <code>last_insert_id()</code> , <code>now()</code>  等函数，会导致主从数据不一致。</li>\n</ul>\n</li>\n<li><code>MIXED</code> : ( <code>mixed-based replication</code> ,  <code>MBR</code> )：以上两种模式的混合使用。默认使用 <code>STATEMENT</code>  模式保存  <code>binlog</code> , 也可以根据自己需要切换到 <code>ROW</code>  模式，对于 <code>STATEMENT</code>  模式无法复制的操作使用 <code>ROW</code>  模式保存 <code>binlog</code> , <code>MySQL</code>  会根据执行的 <code>SQL</code>  语句选择写入模式。</li>\n</ul>\n<h2 id=\"binlog-文件格式\"><a class=\"markdownIt-Anchor\" href=\"#binlog-文件格式\">#</a> binLog 文件格式</h2>\n<p><code>binlog</code>  文件的格式也随着 <code>mysql</code>  的发展，发生了几次变更。<br>\n二进制日志文件格式有几个版本:<br>\n <code>v1版本</code> ：在 <code>MySQL3.23</code>  版本中使用。<br>\n <code>v2版本</code> ：在早期的 <code>MySQL 4.0</code>  中，简单地使用了 <code>v2</code>  格式。)，但它已经过时，不再受支持。<br>\n <code>v3版本</code> ：在 <code>MySQL 4.0.2</code>  到 <code>4.1</code>  中使用。<br>\n <code>v4版本</code> ：适用于 <code>MySQL 5.0</code>  及以上版本。</p>\n<p>一个 <code>binlog</code>  文件由两部分组成: <b>4 字节的魔数</b> 和 <b>标识文件格式的初始描述符事件</b>。并且：初识描述符事件也是由两部分组成:  <code>header</code>  和  <code>data</code>  部分。</p>\n<p>这里只介绍 V4 版本:<br>\n<img data-src=\"/images/MySQL-series/BinLog-even%E5%9B%BE%E7%A4%BA%E7%BB%93%E6%9E%84.png\" alt=\"BinLog-event图示结构.png\"></p>\n<p>在 <code>event header</code>  这一部分，可以看到有如下字段:</p>\n<ul>\n<li><code>timestamp</code> :  <code>4</code>  个字节。 标识某条语句开始执行的时间。它表示为自 <code>1970</code>  年以来的秒数 ( <code>UTC</code> )，与 <code>SQL</code>  时间戳数据类型类似。</li>\n<li><code>type_code</code> :  <code>1</code>  个字节。事件的类型。 <code>1</code>  表示开始事件 <code>V3</code> ,  <code>2</code>  表示查询事件，以此类推。这些数字在 Log event.h 中的 <code>enum</code>  日志事件类型枚举中定义。(请参阅附录 1。)</li>\n<li><code>server_id</code> :4 字节。 最初创建事件的 <code>mysqld</code>  服务器的 <code>ID</code> 。 它来自服务器配置文件中为复制目的设置的 <code>server-id</code>  选项。 使用循环复制时（使用选项 <code>--log-slave-updates</code>  启用），服务器 ID 可以避免无限循环</li>\n<li><code>event_length</code> : 4 个字节。这次活动的总规模。这包括头和数据部分。大多数事件小于 <code>1000</code>  字节，除了使用加载数据 INFILE 时 (其中事件包含加载的文件，所以它们可以很大)</li>\n<li><code>next_position</code> : 4 个字节。下一个事件在主程序二进制日志中的位置。这个字段主要是在 <code>slave</code>  端使用：\n<ul>\n<li>为了显示 <code>Slave</code>  的状态，能够在主坐标系统中显示 最后执行的事件的坐标。</li>\n<li>为了验证  <code>START SLAVE UNTIL MASTER LOG FILE=x</code> ,  <code>MASTER LOG POS=y</code> ，这样可以使用 MASTER 的坐标。</li>\n</ul>\n</li>\n<li><code>flags</code> :  <code>1</code>  个字节。标识。具体含义见附录 2。</li>\n<li><code>extra_headers</code> ： 大小可变的。此字段的大小由作为文件中的第一个事件发生的格式描述事件决定。目前，大小为 <code>0</code> ，因此，实际上，该字段在任何事件中都不会实际发生。当大小变为非零时，该字段仍然不会出现在格式描述事件或旋转事件类型的事件中。</li>\n</ul>\n<p>接下来，我们详细的看下 <code>event-data</code>  部分的结构是什么样的.</p>\n<p><img data-src=\"/images/MySQL-series/binLog-event%E6%A0%BC%E5%BC%8F.png\" alt=\"binLog-event格式.png\"></p>\n<p><code>event-data</code>  表示：特定的事件数据。<br>\n事件的数据部分由固定大小的部分和可变大小的部分组成。 根据事件类型，这两个部分中的一个或两个都可能为空。 事件数据部分的大小是事件大小（包含在标头中）减去标头大小。 固定数据部分的大小是事件类型的函数。 可变数据部分的大小是事件大小减去标题的大小再减去固定数据部分的大小。</p>\n<p>binLog 的基本概念就介绍到这里，下面展示一些 binlog 相关的命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看binLog属性</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show variables like <span class=\"string\">&#x27;%log_bin%&#x27;</span>;</span></span><br><span class=\"line\">+---------------------------------+-------------------------------------------------------------+</span><br><span class=\"line\">| Variable_name                   | Value                                                       |</span><br><span class=\"line\">+---------------------------------+-------------------------------------------------------------+</span><br><span class=\"line\">| log_bin                         | ON                                                          |</span><br><span class=\"line\">| log_bin_basename                | /usr/local/mysql-8.0.20-macos10.15-x86_64/data/binlog       |</span><br><span class=\"line\">| log_bin_index                   | /usr/local/mysql-8.0.20-macos10.15-x86_64/data/binlog.index |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF                                                         |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF                                                         |</span><br><span class=\"line\">| sql_log_bin                     | ON                                                          |</span><br><span class=\"line\">+---------------------------------+-------------------------------------------------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 开启/关闭 binLog功能，需要在配置文件中修改。</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">set</span> global log_bin; 会报错。</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看binlog文件</span></span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show binary logs;</span></span><br><span class=\"line\">+---------------+-----------+-----------+</span><br><span class=\"line\">| Log_name      | File_size | Encrypted |</span><br><span class=\"line\">+---------------+-----------+-----------+</span><br><span class=\"line\">| binlog.000038 |       156 | No        |</span><br><span class=\"line\">| binlog.000039 |       156 | No        |</span><br><span class=\"line\">| binlog.000040 |       179 | No        |</span><br><span class=\"line\">| binlog.000041 |       179 | No        |</span><br><span class=\"line\">| binlog.000042 |       179 | No        |</span><br><span class=\"line\">| binlog.000043 |      5307 | No        |</span><br><span class=\"line\">| binlog.000044 |       179 | No        |</span><br><span class=\"line\">| binlog.000045 |       156 | No        |</span><br><span class=\"line\">+---------------+-----------+-----------+</span><br><span class=\"line\">8 rows in set (0.01 sec)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show master status</span></span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| binlog.000045 |      156 |              |                  |                   |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show binlog events;</span></span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |</span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">| binlog.000038 |   4 | Format_desc    |         1 |         125 | Server ver: 8.0.20, Binlog ver: 4 |</span><br><span class=\"line\">| binlog.000038 | 125 | Previous_gtids |         1 |         156 |                                   |</span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1220 (HY000): Error when executing command SHOW BINLOG EVENTS: Could not find target log</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;binlog.000045&#x27;</span>;</span></span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |</span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">| binlog.000045 |   4 | Format_desc    |         1 |         125 | Server ver: 8.0.20, Binlog ver: 4 |</span><br><span class=\"line\">| binlog.000045 | 125 | Previous_gtids |         1 |         156 |                                   |</span><br><span class=\"line\">+---------------+-----+----------------+-----------+-------------+-----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 使用 mysqlbinlog 命令</span></span></span><br><span class=\"line\">mysqlbinlog &#x27;文件名&#x27;</span><br><span class=\"line\">mysqlbinlog &#x27;文件名&#x27; &gt; test.sql</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 使用binLog恢复数据</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定时间恢复</span></span><br><span class=\"line\">mysqlbinlog --start-datetime=&#x27;2020-12-01 00:00:00&#x27; --stop-datetime=&#x27;2020-12-02 00:00:00&#x27;  binlog.000045 | mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定位置恢复</span></span><br><span class=\"line\">mysqlbinlog --start-pos=100 --stop-pos=120  binlog.000045 | mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 删除binlog</span></span></span><br><span class=\"line\">purge binary log to &#x27;binlog.000001&#x27;</span><br><span class=\"line\">purge binary log before &#x27;2020-12-01 00:00:00&#x27;</span><br><span class=\"line\">reset master;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a class=\"markdownIt-Anchor\" href=\"#附录\">#</a> 附录</h2>\n<p>1: 事件类型</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Log_event_type</span> &#123;</span> </span><br><span class=\"line\">  UNKNOWN_EVENT= <span class=\"number\">0</span>, </span><br><span class=\"line\">  START_EVENT_V3= <span class=\"number\">1</span>, </span><br><span class=\"line\">  QUERY_EVENT= <span class=\"number\">2</span>, </span><br><span class=\"line\">  STOP_EVENT= <span class=\"number\">3</span>, </span><br><span class=\"line\">  ROTATE_EVENT= <span class=\"number\">4</span>, </span><br><span class=\"line\">  INTVAR_EVENT= <span class=\"number\">5</span>, </span><br><span class=\"line\">  LOAD_EVENT= <span class=\"number\">6</span>, </span><br><span class=\"line\">  SLAVE_EVENT= <span class=\"number\">7</span>, </span><br><span class=\"line\">  CREATE_FILE_EVENT= <span class=\"number\">8</span>, </span><br><span class=\"line\">  APPEND_BLOCK_EVENT= <span class=\"number\">9</span>, </span><br><span class=\"line\">  EXEC_LOAD_EVENT= <span class=\"number\">10</span>, </span><br><span class=\"line\">  DELETE_FILE_EVENT= <span class=\"number\">11</span>, </span><br><span class=\"line\">  NEW_LOAD_EVENT= <span class=\"number\">12</span>, </span><br><span class=\"line\">  RAND_EVENT= <span class=\"number\">13</span>, </span><br><span class=\"line\">  USER_VAR_EVENT= <span class=\"number\">14</span>, </span><br><span class=\"line\">  FORMAT_DESCRIPTION_EVENT= <span class=\"number\">15</span>, </span><br><span class=\"line\">  XID_EVENT= <span class=\"number\">16</span>, </span><br><span class=\"line\">  BEGIN_LOAD_QUERY_EVENT= <span class=\"number\">17</span>, </span><br><span class=\"line\">  EXECUTE_LOAD_QUERY_EVENT= <span class=\"number\">18</span>, </span><br><span class=\"line\">  TABLE_MAP_EVENT = <span class=\"number\">19</span>, </span><br><span class=\"line\">  PRE_GA_WRITE_ROWS_EVENT = <span class=\"number\">20</span>, </span><br><span class=\"line\">  PRE_GA_UPDATE_ROWS_EVENT = <span class=\"number\">21</span>, </span><br><span class=\"line\">  PRE_GA_DELETE_ROWS_EVENT = <span class=\"number\">22</span>, </span><br><span class=\"line\">  WRITE_ROWS_EVENT = <span class=\"number\">23</span>, </span><br><span class=\"line\">  UPDATE_ROWS_EVENT = <span class=\"number\">24</span>, </span><br><span class=\"line\">  DELETE_ROWS_EVENT = <span class=\"number\">25</span>, </span><br><span class=\"line\">  INCIDENT_EVENT= <span class=\"number\">26</span>, </span><br><span class=\"line\">  HEARTBEAT_LOG_EVENT= <span class=\"number\">27</span>, </span><br><span class=\"line\">  IGNORABLE_LOG_EVENT= <span class=\"number\">28</span>,</span><br><span class=\"line\">  ROWS_QUERY_LOG_EVENT= <span class=\"number\">29</span>,</span><br><span class=\"line\">  WRITE_ROWS_EVENT = <span class=\"number\">30</span>,</span><br><span class=\"line\">  UPDATE_ROWS_EVENT = <span class=\"number\">31</span>,</span><br><span class=\"line\">  DELETE_ROWS_EVENT = <span class=\"number\">32</span>,</span><br><span class=\"line\">  GTID_LOG_EVENT= <span class=\"number\">33</span>,</span><br><span class=\"line\">  ANONYMOUS_GTID_LOG_EVENT= <span class=\"number\">34</span>,</span><br><span class=\"line\">  PREVIOUS_GTIDS_LOG_EVENT= <span class=\"number\">35</span>, </span><br><span class=\"line\">  ENUM_END_EVENT </span><br><span class=\"line\">  <span class=\"comment\">/* end marker */</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>2: 标识</p>\n<ul>\n<li>LOG_EVENT_BINLOG_IN_USE_F = 0x1 (New in 5.0.3) ：用于指示二进制日志文件是否已正确关闭。它是在事件写入日志文件时设置的。稍后关闭日志文件时，该标志将被清除。该标志仅对 FORMAT_DESCRIPTION_EVENT 有意义。</li>\n<li>LOG_EVENT_THREAD_SPECIFIC_F = 0x4 (New in 4.1.0)：仅由 mysqlbinlog 使用（根本没有复制代码使用），以便能够正确处理临时表。</li>\n<li>LOG_EVENT_SUPPRESS_USE_F = 0x8 (New in 4.1.7)：禁止在要记录的实际语句之前生成 USE 语句。</li>\n<li>LOG_EVENT_UPDATE_TABLE_MAP_VERSION_F = 0x10 (New in 5.1.4)：将事件写入日志后，导致二进制日志内部的表映射版本增加。</li>\n</ul>\n<p>明日再见～</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己～，一起交流，一起进步</p>\n<p><img data-src=\"/images/MySQL-series/qrcode.jpg\" alt=\"qrcode.jpg\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/11/03/MySQL-series/MySQL-2-01.MySQL-artific/",
            "url": "https://fangjiaxiaobai.github.io/2022/11/03/MySQL-series/MySQL-2-01.MySQL-artific/",
            "title": "05.体系架构",
            "date_published": "2022-11-03T10:18:18.000Z",
            "content_html": "<p>本篇文章是我们【深入一点点】部分第一篇文章，既然我们要 “深入一点点”，那么就剥开 MySQL 的外衣～<br>\n 先看看 MySQL 的各个 “部位”。<br>\n整体来说，MySQL 体系整体分为客户端连接器，服务端，存储引擎三部分。接下来我们就详细的聊聊 MySQL 数据的体系结构这个话题。</p>\n<p>本文我们围绕着下面这张图来说。</p>\n<p><img data-src=\"/images/MySQL-series/20101-MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"20101-MySQL体系结构图.png\"></p>\n<h2 id=\"客户端连接器\"><a class=\"markdownIt-Anchor\" href=\"#客户端连接器\">#</a> 客户端连接器</h2>\n<p>主要的功能是：负责处理客户端的连接请求，与客户端建立连接。比如我们之前写过的  <code>mysql -p</code>  命令和使用 <code>java</code>  连接数据库的程序就是充当这个角色。</p>\n<h2 id=\"server层\"><a class=\"markdownIt-Anchor\" href=\"#server层\">#</a> Server 层</h2>\n<h3 id=\"连接池连接器\"><a class=\"markdownIt-Anchor\" href=\"#连接池连接器\">#</a> 连接池 (连接器)</h3>\n<p>如上图中 <code>connect pool</code>  部分所示。</p>\n<p>主要是负责管客户端和数据库创建的连接，维持，处理，和用户认证，即用户登录身份的认证和鉴权及安全管理，也就是用户执行操作权限校验。</p>\n<p>当我们输入  <code>mysql -p</code>  这类命令去连接数据库的时候，输入命令的 shell 是客户端的角色，连接到数据库中组件就是连接器了。</p>\n<p>当我输入 <code>mysql -p</code> , 之后，shell 中显示  <code>enter password:</code>  这个就是连接器做出的响应，我们输入密码进入后，可以通过命令： <code>show processlist</code>  来查看连接池中所有的连接。如下图</p>\n<p><img data-src=\"/images/MySQL-series/20103-%E6%9F%A5%E7%9C%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%86%85%E5%AE%B9.png\" alt=\"20103-查看连接池内容.png\"></p>\n<h3 id=\"d查询缓存mysql80中已经删除了此功能d\"><a class=\"markdownIt-Anchor\" href=\"#d查询缓存mysql80中已经删除了此功能d\">#</a> <d>查询缓存 (MySQL8.0 中已经删除了此功能)</d></h3>\n<p><del>图片是老图，在 <code>MySQL8.0</code>  版本中已经删除。所以该部分不做说明</del></p>\n<h3 id=\"解析器parser\"><a class=\"markdownIt-Anchor\" href=\"#解析器parser\">#</a> 解析器 ( <code>parser</code> )</h3>\n<p>主要负责对 SQL 的语句进行解析，生成解析树。</p>\n<p>首先会将 SQL 语句解析成数据库结构，并且将这个数据结构传递到后续的步骤中。如果再解析的过程中发现错误，就直接返回错误结果。</p>\n<h3 id=\"优化器optimizer\"><a class=\"markdownIt-Anchor\" href=\"#优化器optimizer\">#</a> 优化器 ( <code>Optimizer</code> )</h3>\n<p>经过了解析器的工作之后， <code>MySQL Server</code>  就知道了你的需求是什么了，优化器的工作就是对需求进行优化，以达到更高的性能要求。</p>\n<p>主要的工作是：优化器会根据解析树生成执行计划，并选择合适的索引，然后按照执行计划执行  <code>SQL</code>  语言并与各个存储引擎交互。</p>\n<p>比如有一条 SQL :  <code> select * from test01_optimizer where id = 1 and value=1;</code></p>\n<p>再执行的时候会有一下两种方案：</p>\n<ul>\n<li>先对比表中的数据，找到 id=1 的所有数据，然后在这些数据中再去查找所有 value=1 的数据。</li>\n<li>先对比表中的数据，找到所有 value=2 的所有数据，然后再这些数据中再去查找所有 id=1 的数据。</li>\n</ul>\n<p>优化器就是确定使用性能更高一点的方案去执行任务。</p>\n<h3 id=\"执行器\"><a class=\"markdownIt-Anchor\" href=\"#执行器\">#</a> 执行器</h3>\n<p>通过上一步优化器的工作，得到了该条 SQL 的执行方案，执行器就会按照执行方案去执行查询。</p>\n<p>查询执行引擎会根据 SQL 与语句中使用的存储引擎类型，调用不同对应的 API 接口，去与底层存储引擎缓存或者物理文件交互，得到查询结果，并由 MySQL 过滤后，将查询结果返回给客户端。</p>\n<h2 id=\"存储引擎层\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎层\">#</a> 存储引擎层</h2>\n<p>存储引擎有很多种，比如 InnoDB，MyISAM 等等，后面我们会有一篇文章来介绍存储引擎，这里不多说。</p>\n<p>接下来，我们详细的来说下 MySQL 服务器端的各个组件的工作原理。<br>\n这篇文章就到这里啦～</p>\n<p>明日再见～</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望与你一起遇见更好的自己～，一起交流，一起进步</p>\n<p><img data-src=\"/images/MySQL-series/qrcode.jpg\" alt=\"qrcode.jpg\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/11/02/MySQL-series/MySQL-1-04.connect_to_server/",
            "url": "https://fangjiaxiaobai.github.io/2022/11/02/MySQL-series/MySQL-1-04.connect_to_server/",
            "title": "04.连接到服务端",
            "date_published": "2022-11-02T10:18:18.000Z",
            "content_html": "<p>同学， <code>MySQL</code>  数据库，一般指的 <code>MySQL</code>  服务端。但是 <code>MySQL</code>  自己呢也有一个客户端。就是我们使用  <code>mysql</code>  在 <code>shell</code>  窗口中连接数据库时，其实这就是以一个客户端的身份去连接到 <code>MySQL</code>  的服务端的。</p>\n<p>本章，就介绍下常用连接数据库的方式:</p>\n<ul>\n<li>MySQL client 连接</li>\n<li>Java - JDBC 原生的连接</li>\n<li>Python 连接</li>\n<li>go 连接</li>\n</ul>\n<h2 id=\"mysql-client-连接数据库\"><a class=\"markdownIt-Anchor\" href=\"#mysql-client-连接数据库\">#</a>  <code>MySQL client</code>  连接数据库</h2>\n<p>这种连接方式，在上一章 <code>MySQL</code>  数据库的安装中我们已经使用过了。这里呢我们再详细的介绍一下。</p>\n<p>首先，我们使用  <code>mysql --help</code>  命令，查看 <code>mysql</code>  命令可以拼接的参数。回车之后，我们可以看到很多的参数</p>\n<p>本篇文章主要列举下，连接用到的参数：</p>\n<ul>\n<li>-h : host ，表示需要连接的主机地址。 默认是 localhost</li>\n<li>-P : port , 表示要建立连接的主机端口。默认是 3306</li>\n<li>-u : user , 表示建立连接使用的用户名。 默认是 root</li>\n<li>-p : password , 表示建立连接使用的密码。</li>\n</ul>\n<p>建立连接时，完整的命令是:  <code>mysql -h 127.0.0.1 -P 3306 -u root -p</code>  表示使用  <code>root</code>  用户，连接 <code>127.0.0.1</code>  的 <code>3306</code>  端口。<br>\n回车之后，输入密码，回车，即可登陆成功。</p>\n<p><img data-src=\"/images/MySQL-series/10301-%E7%99%BB%E5%BD%95%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10301-登录数据库.png\"></p>\n<p>在明白了这几个选项之后，我们可以使用  <code>mysql -p</code>  来登录本机的 <code>MySQL</code>  服务端。</p>\n<p><img data-src=\"/images/MySQL-series/10302-%E7%99%BB%E5%BD%95%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10302-登录数据库.png\"></p>\n<p>建立连接之后，怎么退出呢？有三种方式可以退出。</p>\n<ul>\n<li>输入  <code>exit</code>  命令</li>\n<li>输入  <code>quit</code>  命令</li>\n<li>使用  <code>control + D</code></li>\n</ul>\n<h3 id=\"使用jdbc连接mysql数据库\"><a class=\"markdownIt-Anchor\" href=\"#使用jdbc连接mysql数据库\">#</a> 使用 <code>JDBC</code>  连接 <code>MySQL</code>  数据库</h3>\n<p>首先我们使用 <code>MySQL-client</code>  连接上数据库，用下面的命令去创建一个数据库和完成建表操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">drop</span> database test01_jdbc;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.08</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> database test01_jdbc;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.06</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> use test01_jdbc;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test1(id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment, <span class=\"keyword\">value</span> <span class=\"type\">int</span> );</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.29</span> sec)</span><br></pre></td></tr></table></figure>\n<p>接下来，你可以直接复制下面的代码，到你的编辑器里进行执行。源码我放到 <code>github</code>  里了。地址在公众号里哦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement preparedStatement = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet resultSet = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 1.加载驱动</span></span><br><span class=\"line\">            Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 换成你的数据库地址</span></span><br><span class=\"line\">            String url = <span class=\"string\">&quot;jdbc:mysql://10.127.138.75:3306/test01_jdbc&quot;</span>;</span><br><span class=\"line\">            String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">            String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">/// 获取连接</span></span><br><span class=\"line\">            connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;show tables&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 创建 Statement</span></span><br><span class=\"line\">            preparedStatement = connection.prepareStatement(sql);</span><br><span class=\"line\">            <span class=\"comment\">// 执行结果，获取resultSet</span></span><br><span class=\"line\">            resultSet = preparedStatement.executeQuery();</span><br><span class=\"line\">            <span class=\"comment\">// 处理结果</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                System.out.println(resultSet.getString(<span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=resultSet) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    resultSet.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                    throwables.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=preparedStatement) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    preparedStatement.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                    throwables.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=connection) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                    throwables.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1</span><br></pre></td></tr></table></figure>\n<p>这里呢，就简单的理解下， <code>Java</code>  连接 <code>MySQL</code>  服务端的过程。实际的开发中也不会遇到这种写法，但是都是使用这种原理进行了封装和优化，比如数据库的连接池的使用。这里就理解下，使用 <code>Java</code>  实现了数据库的客户端连接。</p>\n<p>其他语言连接数据库的方式，我放到 <code>github</code>  仓库里。有需要的自取哈。在公众号里回复【连接数据库】就可以获取啦～</p>\n<p>最后，希望和你成为朋友，一起交流～</p>\n<p><img data-src=\"/images/MySQL-series/qrcode.jpg\" alt=\"qrcode.jpg\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2022/11/01/MySQL-series/MySQL-1-02.install/",
            "url": "https://fangjiaxiaobai.github.io/2022/11/01/MySQL-series/MySQL-1-02.install/",
            "title": "02.安装MySQL",
            "date_published": "2022-11-01T10:18:18.000Z",
            "content_html": "<p>官网上有很多种安装方式:<br>\n <code>https://dev.mysql.com/doc/refman/8.0/en/installing.html</code></p>\n<p>这里我们选择一种比较清晰和简单的安装方式进行安装.</p>\n<h2 id=\"准备\"><a class=\"markdownIt-Anchor\" href=\"#准备\">#</a> 准备</h2>\n<h3 id=\"mysql-80的rpm-安装包\"><a class=\"markdownIt-Anchor\" href=\"#mysql-80的rpm-安装包\">#</a> MySQL 8.0 的 rpm 安装包</h3>\n<p>在页面  <code>https://dev.mysql.com/downloads/repo/yum/</code>  中根据自己的操作系统版本选择需要下载的数据库版本。<br>\n（查看操作系统版本使用  <code>uname -a</code>  就可以了，）</p>\n<p><img data-src=\"/images/MySQL-series/10101-%E6%9F%A5%E7%9C%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC.png\" alt=\"10101-查看操作系统的版本.png\"></p>\n<p>这里看到我的操作系统版本是  <code>el7</code> . 所以我们使用 <code>el7</code>  版本的 数据库就可以了。</p>\n<p><img data-src=\"/images/MySQL-series/10102-%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC.png\" alt=\"10102-下载数据库版本.png\"></p>\n<p>下载下来之后，使用下面的命令进行安装数据库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10103-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10103-安装数据库.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10104-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10104-安装数据库.png\"></p>\n<p>修改 <code>MySQL</code>  文件权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10105-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10105-安装数据库.png\"></p>\n<p>初始化 <code>MySQL</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --initialize</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10106-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10106-安装数据库.png\"></p>\n<p>启动 <code>MySQL</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10107-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10107-安装数据库.png\"></p>\n<p>查看运行状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mysqld.service</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10107-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"10107-安装数据库.png\"></p>\n<p>设置开机自启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>查看数据库版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqladmin --version</span><br></pre></td></tr></table></figure>\n<p>设置数据库的用户名和密码</p>\n<p>MySQL 默认的用户名为 root，密码呢？</p>\n<p>官方文档里说；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A superuser account &#x27;root&#x27;@&#x27;localhost&#x27; is created. A password for the superuser is set and stored in the error log file. To reveal it, use the following command for RHEL, Oracle Linux, CentOS, and Fedora systems:</span><br></pre></td></tr></table></figure>\n<p>使用  <code>shell&gt; sudo grep 'temporary password' /var/log/mysqld.log</code>  或者  <code> sudo grep 'temporary password' /var/log/mysql/mysqld.log</code>  这条命令就可以查询到了，我试了。。我信你个鬼。</p>\n<p><img data-src=\"/images/MySQL-series/10110-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%AE%E9%A2%98.png\" alt=\"10110-安装数据库问题.png\"></p>\n<p>并没有。。</p>\n<p>还是强制处理吧、</p>\n<ul>\n<li>首先：停止 MySQL 服务：  <code>systemctl stop mysqld</code></li>\n<li>然后跳过验证启动： <code>mysqld --user=root --skip-grant-tables &amp;</code></li>\n<li>然后： <code>mysql：mysql -u root -p</code> , 输入密码是直接回车。</li>\n<li>进入后：执行  <code>flush privileges;</code></li>\n<li>最后  <code>flush privileges;</code></li>\n<li>退出，重启正常启动 MySQL</li>\n</ul>\n<p>登录成功，至此，数据库安装完毕！</p>\n<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h2>\n<p>运行  <code>systemctl start mysqld</code>  启动 MySQL 的时候，出现下面的报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Job for mysqld.service failed because the control process exited with error code. See &quot;systemctl status mysqld.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure>\n<p>这个时候查看 MySQL 的启动日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 200 /var/log/mysqld.log </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/images/MySQL-series/10109-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%AE%E9%A2%98.png\" alt=\"10109-安装数据库问题.png\"></p>\n<p>权限问题，无法创建  <code>/varlib/mysql/</code>  这个目录下的文件。</p>\n<p>只需要使用以下命令修改目录的权限就可以了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp -R mysql  /var/lib/mysql/ &amp;&amp; chown -R mysql  /var/lib/mysql/</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL-series/MySQL-1-01.MySQL_version/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/24/MySQL-series/MySQL-1-01.MySQL_version/",
            "title": "01.数据库版本",
            "date_published": "2021-07-24T06:48:55.000Z",
            "content_html": "<h2 id=\"mysql数据库的版本\"><a class=\"markdownIt-Anchor\" href=\"#mysql数据库的版本\">#</a>  <code>MySQL</code>  数据库的版本</h2>\n<p><code>mysql-5.0</code>   :   <code>mysql-5.0</code>  版本之前， <code>myisam</code>  默认支持的表大小为 <code>4G</code> 。从 <code>mysql-5.0</code>  以后， <code>MyISAM</code>  默认支持 <code>256T</code>  的表单数据。 <code>myisam</code>  只缓存索引数据。  <code>2005</code>  年的 <code>5.0</code>  版本又添加了存储过程、服务端游标、触发器、查询优化以及分布式事务功能。</p>\n<p><code>MySQL5.1</code>   :   <code>2008</code>  年发布的 <code>MySQL 5.1</code>  的版本，基本上就是一个增加了崩溃恢复功能的 <code>MyISAM</code> ，使用表级锁，但可以做到读写不冲突，即在进行任何类型的更新操作的同时都可以进行读操作，但多个写操作不能并发。</p>\n<p><code>mysql5.5</code>  :   <code>2010</code>  年 <code>12</code>  月发布 <code>mysql5.5</code>  版本默认存储引擎更改为 <code>InnoDB</code>  多个回滚段（ <code>Multiple Rollback Segments</code> ）, 之前的 <code>innodb</code>  版本最大能处理 <code>1023</code>  个并发处理操作，现在 <code>mysql5.5</code>  可以处理高达 128K 的并发事务，改善事务处理中的元数据锁定。例如，事物中一个语句需要锁一个表，会在事物结束时释放这个表，而不是像以前在语句结束时释放表。 增加了 <code>INFORMATION_SCHEMA</code>  表，新的表提供了与 InnoDB 压缩和事务处理锁定有关的具体信息。</p>\n<h3 id=\"mysql56\"><a class=\"markdownIt-Anchor\" href=\"#mysql56\">#</a> mysql5.6</h3>\n<p><code>2013</code>  年 <code>2</code>  月发布。</p>\n<ul>\n<li>\n<p>安全性进行了加强。用户的账号和密码进行了更强的加密算法，使用 <code>sha256_passwordSHA-256</code>  密码哈希的身份验证插件来进行加密。 <code>mysql.user</code>  表中新增了 <code>password_expired</code>  字段，过期后，所有连接的执行都会报出异常。</p>\n</li>\n<li>\n<p><code>MySQL Server</code>  的参数默认值进行了更改。如下图所示:</p>\n</li>\n</ul>\n<p><img data-src=\"/images/MySQL-series/10101-MySQL5.6Server%E7%AB%AF%E5%8F%82%E6%95%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC.png\" alt=\"10101-MySQL5.6Server端参数修改的默认值.png\"></p>\n<ul>\n<li>\n<p><code>mysql5.6</code>  版本中 <code>InnoDB</code>  可以限制大量表打开的时候内存占用过多的问题 <code>InnoDB</code>  性能加强。如大内存优化等 <code>InnoDB</code>  死锁信息可以记录到  <code>error</code>  日志，<br>\n<b> <code>InnoDB</code>  引擎也支持了 <code>FULLTEXT</code>  索引</b>。并使用 <code>MATCH() ... AGAINST</code>  语法查询它们。 <code>ALTER TABLE </code> 在不复制表，不阻止对表的插入，更新和删除或两者都不进行的情况下，可以执行多种操作。<b> <code>InnoDB</code>  使用更快的新算法来检测 死锁</b></p>\n</li>\n<li>\n<p>分区功能</p>\n<ul>\n<li>分区的最大数量增加到 <code>8192</code> 。此数量包括表的所有分区和所有子分区。</li>\n</ul>\n</li>\n<li>\n<p>复制和日志记录</p>\n<ul>\n<li><code>MySQL</code>  现在支持使用全局事务标识符（也称为  <code>GTID</code> ）进行基于事务的复制 。这样，当每个事务在原始服务器上提交并被任何从属服务器应用时，就可以识别和跟踪每个事务。</li>\n<li><code>MySQL</code>  基于行的复制从该版本开始支持行图像控制</li>\n</ul>\n</li>\n<li>\n<p>优化器增强功能</p>\n<ul>\n<li><code>limit</code>  查询进行了优化，如果 <code>N</code>  行元素小于排序缓冲区，那么就使用内存排序而不是合并文件。</li>\n<li>优化器可以更有效地处理 <code>FROM</code>  子句中的子查询 （即派生表）。FROM 子句中子查询的实现 被推迟到查询执行期间需要其内容时为止，从而提高了性能。在查询执行期间，优化器可以将索引添加到派生表中，以加快从中获取行的速度。</li>\n</ul>\n</li>\n<li>\n<p>数据类型</p>\n<ul>\n<li><code>MySQL</code>  从 <code>5.6</code>  开始允许 <code>TIME</code> ， <code>DATETIME</code>  和 <code>TIMESTAMP</code>  值的小数秒，精度高达微秒（ <code>6</code>  位）。\n<ul>\n<li>取消了每个表最多可以自动将 <code>TIMESTAMP</code>  列初始化或更新为当前日期和时间的限制。任何 <code>TIMESTAMP</code>  列定义都可以具有 <code>DEFAULT CURRENT_TIMESTAMP</code>  和 <code>ON UPDATE CURRENT_TIMESTAMP</code>  子句的任意组合。此外，这些子句现在可以与 DATETIME 列定义一起使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主机缓存。<br>\n <code>MySQL</code>  现在提供有关客户端连接到服务器时发生错误的原因的更多信息，以及对主机缓存的改进访问，该缓存包含客户端 <code>IP</code>  地址和主机名信息，用于避免 <code>DNS</code>  查找。</p>\n</li>\n</ul>\n<h3 id=\"mysql57\"><a class=\"markdownIt-Anchor\" href=\"#mysql57\">#</a> mysql5.7</h3>\n<ul>\n<li>\n<p>将  <code>Undo</code>  从共享表空间  <code>ibdata</code>  文件中分离出来，可以在安装  <code>MySQL</code>  时由用户自行指定文件大小和数量。</p>\n</li>\n<li>\n<p>增加了  <code>temporary</code>  临时表空间，里面存储着临时表或临时查询结果集的数据。</p>\n</li>\n<li>\n<p><code>Buffer Pool</code>  大小可以动态修改，无需重启数据库实例，这是  <code>DBA</code>  的福音。</p>\n</li>\n</ul>\n<h3 id=\"mysql-80-版本新特性如下\"><a class=\"markdownIt-Anchor\" href=\"#mysql-80-版本新特性如下\">#</a> MySQL 8.0 版本新特性如下：</h3>\n<ul>\n<li>\n<p>将  <code>InnoDB</code>  表的数据字典和  <code>Undo</code>  都从共享表空间  <code>ibdata</code>  中彻底分离出来了，以前需要 <code>ibdata</code>  文件中数据字典与独立表空间  <code>ibd</code>  文件中数据字典一致才行， <code>8.0</code>  版本就不需要了。</p>\n</li>\n<li>\n<p><code>temporary</code>  临时表空间也可以配置多个物理文件，而且均为  <code>InnoDB</code>  存储引擎并能创建索引，这样加快了处理的速度。</p>\n</li>\n<li>\n<p>用户可以像  <code>Oracle</code>  数据库那样设置一些表空间，每个表空间对应多个物理文件，每个表空间可以给多个表使用，但一个表只能存储在一个表空间中。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL-series/MySQL-1-00.intro/",
            "url": "https://fangjiaxiaobai.github.io/2021/07/23/MySQL-series/MySQL-1-00.intro/",
            "title": "00.开篇&&说明",
            "date_published": "2021-07-23T06:48:55.000Z",
            "content_html": "<h2 id=\"版本说明\"><a class=\"markdownIt-Anchor\" href=\"#版本说明\">#</a> 版本说明</h2>\n<p>本系列文章，以 MySQL 8.0.20 版本为实验背景进行编写。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9pbnRlcm5hbHMvZW4vYmluYXJ5LWxvZy1vdmVydmlldy5odG1s\">MySQL 手册</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "MySQL"
            ]
        }
    ]
}