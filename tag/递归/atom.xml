<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fangjiaxiaobai.github.io</id>
    <title>方家小白 • Posts by &#34;递归&#34; tag</title>
    <link href="https://fangjiaxiaobai.github.io" />
    <updated>2021-09-01T04:33:55.000Z</updated>
    <category term="源码" />
    <category term="目录" />
    <category term="全站地图" />
    <category term="导航" />
    <category term="雪花算法" />
    <category term="算法" />
    <category term="Redis" />
    <category term="git" />
    <category term="数据结构" />
    <category term="MySQL" />
    <category term="Elastic Search" />
    <category term="搜索" />
    <category term="MachineLearn" />
    <category term="RocketMQ" />
    <category term="消息队列" />
    <category term="线程池" />
    <category term="面经" />
    <category term="String" />
    <category term="JDK" />
    <category term="JDK8" />
    <category term="HashMap" />
    <category term="数据结构与算法" />
    <category term="排序" />
    <category term="冒泡排序" />
    <category term="交换排序" />
    <category term="分治思想排序" />
    <category term="快速排序" />
    <category term="分支思想排序" />
    <category term="桶排序" />
    <category term="线性思想排序" />
    <category term="leetCode" />
    <category term="数组" />
    <category term="面经之算法题" />
    <category term="递归" />
    <category term="链表" />
    <category term="动态规划" />
    <category term="选择排序" />
    <category term="不做也罢的算法题" />
    <category term="有点难的算法题" />
    <category term="HD" />
    <category term="BQ" />
    <category term="AC" />
    <category term="哈希算法" />
    <category term="模型评估" />
    <category term="Java" />
    <category term="dubbo" />
    <category term="KNN" />
    <category term="JDK版本" />
    <category term="JDK11" />
    <category term="OOM" />
    <category term="JVM" />
    <category term="Stream" />
    <entry>
        <id>https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/recursion/%E7%AE%97%E6%B3%9501-%E9%80%92%E5%BD%92/</id>
        <title>递归</title>
        <link rel="alternate" href="https://fangjiaxiaobai.github.io/2021/09/01/dataStructuresAndAlgorithms/recursion/%E7%AE%97%E6%B3%9501-%E9%80%92%E5%BD%92/"/>
        <content type="html">&lt;p&gt;数据结构与算法 这一个模块 有两个最难的知识点，一个就是 递归，另一个就是 动态规划&lt;/p&gt;
&lt;p&gt;我们今天来学习下递归这种实现方式。&lt;/p&gt;
&lt;p&gt;个人认为，递归不是一种算法，就是一种语法。所以我就称它为一类问题的解决方法.&lt;/p&gt;
&lt;h2 id=&#34;何为递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#何为递归&#34;&gt;#&lt;/a&gt; 何为递归？&lt;/h2&gt;
&lt;p&gt;递归，去的过程叫递，回来的过程叫归。凡是递归类的问题，都能总结出一个递归公式.&lt;br&gt;
 比如: &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(n+1) = f(n) + 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, 我们用代码实现就是:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; n==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;?&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:f(n-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;判断是否可用递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断是否可用递归&#34;&gt;#&lt;/a&gt; 判断是否可用递归&lt;/h2&gt;
&lt;p&gt;要想使用递归来解决问题，要满足三个条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个问题的解可以分解为几个问题的解。&lt;/li&gt;
&lt;li&gt;这个问题和分解之后的问题，除了树据规模不一样，求解思路一模一样.&lt;/li&gt;
&lt;li&gt;存在递归终止条件。比如上例子中的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(n)=1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何编写递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何编写递归&#34;&gt;#&lt;/a&gt; 如何编写递归&lt;/h2&gt;
&lt;h3 id=&#34;找出递推公式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#找出递推公式&#34;&gt;#&lt;/a&gt; 找出递推公式！&lt;/h3&gt;
&lt;p&gt;递归写法的话，最重要的就是写出递推公式，其次就是，找到终止条件.&lt;/p&gt;
&lt;p&gt;举个例子:&lt;/p&gt;
&lt;p&gt;人民币的组合方式.&lt;/p&gt;
&lt;p&gt;假设我有人民币 100 元，50 元，20 元，10 元，5 元，1 元的币种若干张，我想用这些花掉 70 元，我可以怎么花？&lt;/p&gt;
&lt;p&gt;这个问题就可以转换成了，70 元有多少中组合方式 (A) -&amp;gt; 69 元有多少中组合方式 (B) + 65 元有几种组合方式 © + 60 元有几种组合方式 (D) + 50 元有几种组合方式 (E) + 20 元有几种组合方式 (F)。&lt;/p&gt;
&lt;p&gt;也就是说，我们把一个问题 A 分解成了若干子问题 B,C,D,E,F. 我们解决了子问题 B,C,D,E,F。 那么对应的 A 问题，也就解决了。而且，在这问题里，我们只要关心 A 与其子问题的关系即可，不用关系其他的子问题与子问题的关系。屏蔽掉递归细节。&lt;/p&gt;
&lt;h2 id=&#34;递归实现方案的注意点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归实现方案的注意点&#34;&gt;#&lt;/a&gt; 递归实现方案的注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果递归深度比较大的话，就会出现堆栈溢出的异常。&lt;/li&gt;
&lt;li&gt;递归的时候，要避免重复计算.&lt;br&gt;
 这个的话，举个例子，就会很清晰了。斐波那契数列的计算.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;斐波那契数列就是 当前项等于前两项之和.&lt;/p&gt;
&lt;p&gt;以 fib (6) 为例，即求第 6 个数的数值。&lt;/p&gt;
&lt;p&gt;如下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib.png&#34; alt=&#34;算法01-动态规划01-fib.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们会发现: fib (4),fib (3),fib (2) 都是重复计算的。&lt;/p&gt;
&lt;p&gt;具体的解决方式呢，在 算法【动态规划】文章里，也有说过。&lt;/p&gt;
&lt;p&gt;加入一个数据，来记录就行了.&lt;br&gt;
&lt;img data-src=&#34;/images/dataStructuresAndAlgorithms/%E7%AE%97%E6%B3%9501-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201-fib02.png&#34; alt=&#34;算法01-动态规划01-fib02.png&#34;&gt; 其中虚线边框的就不用再计算了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定要明确终止条件。不然就是死循环！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，以上就是递归的介绍。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;期望与你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/qrcode.jpg&#34; alt=&#34;期望与你一起遇见更好的自己&#34;&gt;&lt;/p&gt;
</content>
        <category term="算法" />
        <category term="数据结构与算法" />
        <category term="递归" />
        <updated>2021-09-01T04:33:55.000Z</updated>
    </entry>
</feed>
