{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"链表\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "https://fangjiaxiaobai.github.io/2021/08/29/BQ/LeetCode/0002-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "LC:反转链表I",
            "date_published": "2021-08-29T09:25:55.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<blockquote>\n<p>示例一</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase1.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2,3,4,5]<br>\n 输出：[5,4,3,2,1]</p>\n<blockquote>\n<p>示例二</p>\n</blockquote>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/reverseLinkedListCase2.jpeg\" alt=\"\"></p>\n<p>输入：head = [1,2]<br>\n 输出：[2,1]</p>\n<blockquote>\n<p>示例三</p>\n</blockquote>\n<p>输入：head = []<br>\n 输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>\n-5000 &lt;= Node.val &lt;= 5000</p>\n<p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）206.反转链表\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdA==\">力扣（LeetCode）206.反转链表</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一道非常简单的题目。也是很容易出现<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlQkUlRTUlODUlOEIlRTYlOTUlODglRTUlQkElOTQvNTYzOTE3OA==\">达克效应</span>的一道题目。 为什么呢？应为这道题太简单了啊。 <b>思路</b> 太简单了啊。 但是真正去写的话，可不见得真有那么简单。</p>\n<p>简单的题目，我们还是 以图的形式来展示。</p>\n<h3 id=\"思路一-迭代链表-创建新节点重组成新链表\"><a class=\"markdownIt-Anchor\" href=\"#思路一-迭代链表-创建新节点重组成新链表\">#</a> 思路一：迭代链表，创建新节点，重组成新链表</h3>\n<h4 id=\"思路解析\"><a class=\"markdownIt-Anchor\" href=\"#思路解析\">#</a> 思路解析</h4>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution1.png\" alt=\"一图胜千言\"></p>\n<p>核心思路如标题。 首先将遍历的原链表中的节点值复制到新建的节点中 (a 步骤), 节点 next 指针指向是上一个节点，没有则为 null (b 步骤). 遍历链表的所有节点。</p>\n<p>这样其实会生成一个新的链表。也就说会同时存在两条链表。</p>\n<p><span class=\"label success\">✊时间复杂度为 O (n)， 空间复杂度为 O (n)</span></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历旧链表,新建节点，并且拼接成新链表。</span></span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != head) &#123;</span><br><span class=\"line\">            ListNode curr = <span class=\"keyword\">new</span> ListNode(head.val);</span><br><span class=\"line\">            curr.next = pre;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二-迭代变更链表的指针指向\"><a class=\"markdownIt-Anchor\" href=\"#思路二-迭代变更链表的指针指向\">#</a> 思路二：迭代变更链表的指针指向</h3>\n<h4 id=\"思路解析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-2\">#</a> 思路解析</h4>\n<p>这种思路也是比较简单的，但是一定要想好喽之后，再看开始编码，要不然很容易思绪错乱。</p>\n<p>图解:</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution2.png\" alt=\"一图胜千言\"></p>\n<p>这种解法需要两个指针， pre 代表其前一个节点， cur 代表后一个节点。进行遍历，从而实现 指针指向的变更。 当然，还需要一个临时节点去帮忙 pre 和 cur 指针，向后移动。</p>\n<p><span class=\"label success\">✊时间复杂度是 O (n); 空间复杂度是 O (3);</span></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = head, cur = head.next;</span><br><span class=\"line\">        <span class=\"comment\">// !!注意:断开头节点的next指针，避免产生环型链表。</span></span><br><span class=\"line\">        pre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != cur) &#123;</span><br><span class=\"line\">            ListNode tempNode = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tempNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路三-递归方式-变更指针\"><a class=\"markdownIt-Anchor\" href=\"#思路三-递归方式-变更指针\">#</a> 思路三：递归方式， 变更指针</h3>\n<h4 id=\"思路解析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路解析-3\">#</a> 思路解析</h4>\n<p>这思路三，其实是思路二的不同写法。 这种实现方法首先就需要将 链表 “递” 到底，然后在归的时候，把 节点链接到一起。如下图</p>\n<p><img data-src=\"/images/ac-code/reverseLinkedList1/solution3.png\" alt=\"一图胜千言\"></p>\n<p>这样说起来，递归这种方式来解决反转类的问题好像会有一种与生俱来的优势。  <code>首先递进去，然后归出来</code> 。</p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == head || <span class=\"keyword\">null</span> == head.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归入口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(head, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode currNode, ListNode preNode)</span> </span>&#123;</span><br><span class=\"line\">        ListNode headNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == currNode) &#123;</span><br><span class=\"line\">            headNode = preNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            headNode = reverse(currNode.next, currNode);</span><br><span class=\"line\">            currNode.next = preNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> headNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这一道题考的是简单的逻辑问题，实属简单至极的题目。要注意 陷入 “达克效应”。</p>\n<p>勿以题小而不做。</p>\n<p>使用头递归来做反转类似的题目，好像是一种天然支持的特性。但是在实际的开发过程中，不建议过多的使用递归的方式，一方面不具备可读性。另一方面，递归方式对性能不太优化，还有重要的是要考虑栈溢出的风险。</p>\n<h2 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> 相关题目</h2>\n<div class=\"links\"><div class=\"item\" title=\"力扣（LeetCode）189.反转数组\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5\">力扣（LeetCode）189.反转数组</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）92.反转链表II\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1saW5rZWQtbGlzdC1paS8=\">力扣（LeetCode）92.反转链表II</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）7.整数反转\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\">力扣（LeetCode）7.整数反转</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div><div class=\"item\" title=\"力扣（LeetCode）344.反转字符串\" style=\"--block-color:#ffa015;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\" data-background-image=\"https://static.leetcode-cn.com/cn-frontendx-assets/production/_next/static/images/lccn-logo-ce3d56eeedaae618e59e2ec5089e4834.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1zdHJpbmcv\">力扣（LeetCode）344.反转字符串</span>\n          <p class=\"desc\">https://leetcode-cn.com/</p>\n          </div></div></div>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>期望与你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"期望与你一起遇见更好的自己\"></p>\n",
            "tags": [
                "数据结构",
                "leetCode",
                "链表",
                "面经之算法题"
            ]
        }
    ]
}