{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"单元测试\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2024/08/06/unit-test/01-quick-start/",
            "url": "https://fangjiaxiaobai.github.io/2024/08/06/unit-test/01-quick-start/",
            "title": "单元测试",
            "date_published": "2024-08-06T10:18:18.000Z",
            "content_html": "<h1 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>从去年开始，就没静下心来去写点东西了。今天来叨叨一下单元测试。</p>\n<p>这篇文章，算我是心血来潮想重新开始写点什么的开始。虽然不知道下篇会说些什么，那就直接进入正题吧。</p>\n<p>JUnit.</p>\n<p>写 Java 的同学对这个 JUnit 肯定是熟悉的。嗯，大概也就是熟悉 <code>@Test</code> .</p>\n<p>本着务实的态度，作为 JUnit 的第一篇文章，先不说 JUnit 的辉煌历史。兵出奇招，直接看 JUnit 5.</p>\n<h1 id=\"junit-5\"><a class=\"markdownIt-Anchor\" href=\"#junit-5\">#</a> JUnit 5</h1>\n<p>JUnit 5 不是 JUnit 5.x 版本。JUnit 5 其实是 Junit 的一个代号，可以理解为 JUnit 的第 5 代。</p>\n<p>JUnit 5 有三个组件  <code>JUnit Platform</code>  ,  <code>JUnit Jupiter</code>  ,  <code>JUnit vintage</code> .</p>\n<p>本篇重点: JUnit Jupiter.</p>\n<h1 id=\"junit-jupiter\"><a class=\"markdownIt-Anchor\" href=\"#junit-jupiter\">#</a> JUnit Jupiter</h1>\n<p>截止今日 (2024 年 8 月 6 日)， JUnit Jupiter 最新版本 5.10.3. 所以</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.10.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最佳食用姿势\"><a class=\"markdownIt-Anchor\" href=\"#最佳食用姿势\">#</a> 最佳食用姿势</h2>\n<h3 id=\"test\"><a class=\"markdownIt-Anchor\" href=\"#test\">#</a>  <code>@Test</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSumEqual</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 断言</span></span><br><span class=\"line\">    Assertions.assertEquals(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出内容是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.opentest4j.AssertionFailedError: </span><br><span class=\"line\">Expected :<span class=\"number\">1</span></span><br><span class=\"line\">Actual   :<span class=\"number\">2</span></span><br><span class=\"line\">&lt;Click to see difference&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tat org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:<span class=\"number\">151</span>)</span><br><span class=\"line\">\tat org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:<span class=\"number\">132</span>)</span><br><span class=\"line\">\tat org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:<span class=\"number\">197</span>)</span><br><span class=\"line\">\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:<span class=\"number\">150</span>)</span><br><span class=\"line\">\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:<span class=\"number\">145</span>)</span><br><span class=\"line\">\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:<span class=\"number\">531</span>)</span><br><span class=\"line\">\tat com.fxb.ut.JUnitTestCase.testSumEqual(JUnitTestCase.java:<span class=\"number\">10</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">\tat java.util.ArrayList.forEach(ArrayList.java:<span class=\"number\">1259</span>)</span><br><span class=\"line\">\tat java.util.ArrayList.forEach(ArrayList.java:<span class=\"number\">1259</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"beforeall\"><a class=\"markdownIt-Anchor\" href=\"#beforeall\">#</a>  <code>@BeforeAll</code></h3>\n<p>使用 @BeforeAll 可以在单元测试前初始化部分信息。<br>\n@BeforeAll 只能使用在静态方法上，被注解的方法会在测试开始前运行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BeforeAll</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    num1 = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBeforeAllTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Assertions.assertEquals(<span class=\"number\">2</span>, num1); <span class=\"comment\">// 通过</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"beforeeach\"><a class=\"markdownIt-Anchor\" href=\"#beforeeach\">#</a>  <code>@BeforeEach</code></h3>\n<p>在每个用例执行前执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeEachTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;执行case:&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;演示BeforeEach - 1&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBeforeEachTest1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;    =&gt; case1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;演示BeforeEach - 2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBeforeEachTest2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;    =&gt; case2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行case:</span><br><span class=\"line\">    =&gt; case1</span><br><span class=\"line\">执行case:</span><br><span class=\"line\">    =&gt; case2</span><br></pre></td></tr></table></figure>\n<h3 id=\"afterall\"><a class=\"markdownIt-Anchor\" href=\"#afterall\">#</a>  <code>@AfterAll</code></h3>\n<p>@AfterAll 注解只能使用在静态方法上，被注解的方法会在所有单元测试运行完毕后运行一次。</p>\n<h3 id=\"aftereach\"><a class=\"markdownIt-Anchor\" href=\"#aftereach\">#</a>  <code>@AfterEach</code></h3>\n<p>使用 @AfterEach 注解的方法，会在每一个 @Test 注解的方法运行结束前运行一次。</p>\n<h3 id=\"disabled\"><a class=\"markdownIt-Anchor\" href=\"#disabled\">#</a> @Disabled</h3>\n<p>被 @Disabled 注解的方法不在参与测试。</p>\n<h3 id=\"displayname\"><a class=\"markdownIt-Anchor\" href=\"#displayname\">#</a> @DisplayName</h3>\n<p>使用 @DisplayName 注解可以自定义测试方法的显示名称，下面为两个测试方法自定义名称。</p>\n<p><img data-src=\"/images/unit-test/01-01.png\" alt=\"\"></p>\n<h3 id=\"order\"><a class=\"markdownIt-Anchor\" href=\"#order\">#</a> @Order</h3>\n<p>在类上增加注解 @TestMethodOrder ，然后在方法上使用 @Order 指定顺序，数字越小优先级越搞，可以保证测试方法运行顺序。</p>\n<h2 id=\"断言\"><a class=\"markdownIt-Anchor\" href=\"#断言\">#</a> 断言</h2>\n<ul>\n<li><code>Assertions.assertNotNull(xx)</code> : 检测不为空</li>\n<li><code>Assertions.assertEquals(expect, actual)</code> : 判断是否相等</li>\n<li><code>Assertions.assertNotEquals(expect, actual)</code> : 判断是否不相等.</li>\n<li><code>Assertions.assertTrue(boolean)</code> : 判断是否正确</li>\n<li><code>Assertions.assertFalse(boolean)</code> : 判断是否错误.</li>\n</ul>\n<p>好啦，今天就到这里吧。知道这几个注解就能应对你工作中 30% 的问题，超过 90% 的 java 程序员啦。<br>\n因为有 91% 的 java 程序员都不写单元测试。虽然他们都知道如何写，就像写这篇文章的人.</p>\n<p>对了， 那 1% 就是不写单元测试，也不会有 bug 的人。</p>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "单元测试"
            ]
        }
    ]
}