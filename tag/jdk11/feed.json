{
    "version": "https://jsonfeed.org/version/1",
    "title": "方家小白 • All posts by \"jdk11\" tag",
    "description": "和你一起遇见更好的自己",
    "home_page_url": "https://fangjiaxiaobai.github.io",
    "items": [
        {
            "id": "https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/",
            "url": "https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/",
            "title": "不要再在用JDK11写JDK8的代码了!",
            "date_published": "2021-11-11T10:18:18.000Z",
            "content_html": "<p>入职新公司两个月了，用 <code>JDK11</code>  写了两个月 <code>JDK8</code>  的代码，再也憋不住想看看 <code>JDK11</code>  的新特性了。没用过 <code>JDK9,10</code> . 那就说说 <code>JDK8-JDK11</code>  的变化吧。</p>\n<h2 id=\"新\"><a class=\"markdownIt-Anchor\" href=\"#新\">#</a> 新</h2>\n<ul>\n<li>语法增强\n<ul>\n<li>本地变量类型推断</li>\n<li><code>Collection</code>  增强</li>\n<li><code>Stream</code>  增强</li>\n<li><code>Optional</code>  增强</li>\n<li><code>InputStream</code>  增强</li>\n<li><code>String</code>  增强</li>\n</ul>\n</li>\n<li>模块化开发</li>\n<li>新工具\n<ul>\n<li><code>REPL</code>  交互式编程</li>\n<li><code>Low-Overhead Heap Profiling</code></li>\n<li><code>Flight Recorder</code></li>\n</ul>\n</li>\n<li>新功能\n<ul>\n<li>源代码直接执行</li>\n<li>完全支持 <code>Linux</code>  容器</li>\n<li>支持 <code>Unicode 10</code></li>\n<li>新支持的加密算法</li>\n<li><code>HttpClient</code></li>\n</ul>\n</li>\n<li>垃圾回收器\n<ul>\n<li><code>ZGC</code></li>\n<li><code>Epsilon</code></li>\n<li>更好的 <code>G1</code></li>\n</ul>\n</li>\n<li>移除与不再推荐使用的类库或功能\n<ul>\n<li>移除了 <code>Java EE</code>  和 <code>CORBA Moudles</code></li>\n<li>将 <code>Nashorn Javascript</code>  标记为不推荐</li>\n<li>将 <code>Pack200 Tools and API</code>  标记为不推荐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdk8-jdk11的语法新特性\"><a class=\"markdownIt-Anchor\" href=\"#jdk8-jdk11的语法新特性\">#</a> JDK8-JDK11 的语法新特性</h2>\n<h3 id=\"本地变量类型推断\"><a class=\"markdownIt-Anchor\" href=\"#本地变量类型推断\">#</a> 本地变量类型推断</h3>\n<p><code>since JDK10</code></p>\n<p><code>Java10</code>  以后可以用 <code>var</code>  定义一个局部变量，不用显式写出它的类型。但要注意，被 <code>var</code>  定义的变量仍然是静态类型，编译器会试图去推断其类型。所以，我们需要注意  <code>1</code> . 不兼容的类型是不能重新赋值的！ <code>2</code> . 只要编译器无法推断出变量类型，就会编译错误！</p>\n<p>举个栗子:</p>\n<h4 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;local variable type interface&quot;</span>;</span><br><span class=\"line\">    String str2 = <span class=\"string\">&quot;local variable type interface&quot;</span>;</span><br><span class=\"line\">    System.out.println(str1 == str2); <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简化泛型声明\"><a class=\"markdownIt-Anchor\" href=\"#简化泛型声明\">#</a> 简化泛型声明</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简化泛型声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item : lists) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> entries = item.entrySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> entry : entries) &#123;</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> values = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value : values) &#123;</span><br><span class=\"line\">                System.out.println(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>幸好编译器会有类型提示。如下图。</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-1.png\" alt=\"\"></p>\n<h4 id=\"简化lambda参数\"><a class=\"markdownIt-Anchor\" href=\"#简化lambda参数\">#</a> 简化 lambda 参数</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * lambda参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 从Java 11开始，lambda参数也允许使用var关键字：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Predicate&lt;String&gt; predNotNull = (<span class=\"keyword\">var</span> a) -&gt; a != <span class=\"keyword\">null</span> &amp;&amp; !a.isBlank();</span><br><span class=\"line\"></span><br><span class=\"line\">    String strAfterFilter = Stream.of(<span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;love&quot;</span>, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;my&quot;</span>, <span class=\"string\">&quot;wife&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;very&quot;</span>, <span class=\"string\">&quot;much&quot;</span>)</span><br><span class=\"line\">            .filter(predNotNull)</span><br><span class=\"line\">            .collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">    System.out.println(strAfterFilter); <span class=\"comment\">//I love my wife very much</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不兼容的类型赋值\"><a class=\"markdownIt-Anchor\" href=\"#不兼容的类型赋值\">#</a> 不兼容的类型赋值</h4>\n<p>这种直接编译失败，第一行和第二行已经推断出来了  <code>str</code>  是  <code>String</code>  类型。 第三行就不能赋值为 <code>double</code>  类型了。</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-2.png\" alt=\"\"></p>\n<h4 id=\"不能推测的类型\"><a class=\"markdownIt-Anchor\" href=\"#不能推测的类型\">#</a> 不能推测的类型</h4>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-3.png\" alt=\"\"></p>\n<p>但是，对于用习惯了  <code>IDEA</code>  快捷指令的我来说，这个 <code>var</code>  变量，对我来说毫无意义。感觉 <code>jdk</code>  是在炫技，但我毫无兴趣。</p>\n<p>比如，在 <code>idea</code>  中，你输入  <code>new ArrayList().var</code>  , 然后回车， <code>IDEA</code>  就会为你自动生成类型。<br>\n类似的还有  <code>lists.for</code> ,  <code>lists.fori</code>  等等。所以，个人并不推荐大家使用该语法，并非不能用，比如在  <code>lambda</code>  中使用替换类型时还是比较好的。如果你还没有掌握  <code>xx.var</code>  这种异能加持的话，想用就用吧。</p>\n<p>总之，看别人写了个  <code>var</code>  时，不要发出 “哇藕， <code>Java</code>  还可以这么写”。</p>\n<h3 id=\"collection增强\"><a class=\"markdownIt-Anchor\" href=\"#collection增强\">#</a> Collection 增强</h3>\n<p>这个比较简单，就是  <code>List</code>  ,  <code>Set</code> ,  <code>Map</code>  这三种集合多了两个方法  <code>of</code>  和  <code>copyOf</code> .</p>\n<p><code>since jdk9</code></p>\n<p>这里直接用三个栗子分别演示一下</p>\n<h4 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> List</h4>\n<p><code>List.of</code>  内部是创建一个的   <code>immutable collections</code> 。不可变集合。所以不可以增删改元素。</p>\n<p><code>List.of()</code>   和  <code>List.copyOf()</code>  都是创建的不可变集合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 List</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; integers1 = List.copyOf(integers);</span><br><span class=\"line\">    System.out.println(integers == integers1); <span class=\"comment\">// true</span></span><br><span class=\"line\">    integers.add(<span class=\"number\">5</span>); <span class=\"comment\">//  UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h4>\n<p><code>Set</code>  和  <code>List</code>  的用法类似。 同样的，也是不可变集合。需要注意的是， <code>copyOf</code>  方法，如果形参是可变集合，则返回的也是可变集合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 Set</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; integers = Set.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    Set&lt;Integer&gt; integers1 = Set.copyOf(integers);</span><br><span class=\"line\">    System.out.println(integers == integers1); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//        integers.add(5); //  UnsupportedOperationException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Set&lt;Integer&gt; integers2 = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    integers2.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    integers2.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    integers2.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">    Set&lt;Integer&gt; integers3 = Set.copyOf(integers2);</span><br><span class=\"line\">    System.out.println(integers3 == integers2); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 元素不能重复 =&gt;  java.lang.IllegalArgumentException</span></span><br><span class=\"line\">    Set&lt;Integer&gt; integers4 = Set.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用of创建Map</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; map1 = Map.of(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    Map&lt;String, Integer&gt; map2 = Map.copyOf(map1);</span><br><span class=\"line\">    System.out.println(map1 == map2); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// copyOf，取决于传入的map是否为可变集合</span></span><br><span class=\"line\">    HashMap&lt;String, Integer&gt; map3 = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map3.put(<span class=\"string\">&quot;k1&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    map3.put(<span class=\"string\">&quot;k2&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    Map&lt;String, Integer&gt; map4 = Map.copyOf(map3);</span><br><span class=\"line\">    System.out.println(map3 == map4); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// key不能重复 =&gt; java.lang.IllegalArgumentExceptio</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; map5 = Map.of(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;k1&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"stream增强\"><a class=\"markdownIt-Anchor\" href=\"#stream增强\">#</a> Stream 增强</h3>\n<p><code>since JDK9</code></p>\n<p><code>Stream</code>  相关内容，新增了 <code>4</code>  个方法.</p>\n<h4 id=\"增加单个参数构造方法\"><a class=\"markdownIt-Anchor\" href=\"#增加单个参数构造方法\">#</a> 增加单个参数构造方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增单个元素的Stream构造,允许为空</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(Stream.ofNullable(<span class=\"keyword\">null</span>).count()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">    System.out.println(Stream.of(<span class=\"number\">1</span>).count()); <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加takewhile方法\"><a class=\"markdownIt-Anchor\" href=\"#增加takewhile方法\">#</a> 增加 takeWhile 方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示take while方法</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * 从头开始计算，遇到不满足Predicate的元素即停止。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).takeWhile(i -&gt; i &lt;= <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).takeWhile(i -&gt; i &gt; <span class=\"number\">6</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [ ]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加-dropwhile-方法\"><a class=\"markdownIt-Anchor\" href=\"#增加-dropwhile-方法\">#</a> 增加 dropWhile 方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示 dropWhile 方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 从头开始计算，遇到第一个不满足 Predicte的元素时，开始计算。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).dropWhile(i -&gt; i &lt;= <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 3, 4, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>).dropWhile(i -&gt; i &gt; <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [4, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iterate-重载方法\"><a class=\"markdownIt-Anchor\" href=\"#iterate-重载方法\">#</a> iterate 重载方法</h4>\n<p>这个  <code>iterate</code>  方法的新重载方法，可以让你提供一个  <code>Predicate</code>  (判断条件) 来指定什么时候结束迭代。</p>\n<p>需要注意的是：相比 <code>JDK8</code>  的方法， <code>iterator</code>  是第三个参数，第二个参数是 <code>Prediction</code> 。 <code>Prediction</code>  中进行判断的取值是迭代之后的数值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示 iterate 的重载方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Jdk8支持使用这种方式， 生成从1开始的平方数</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect1 = Stream.iterate(<span class=\"number\">1</span>, i -&gt; i * <span class=\"number\">2</span>).limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect1); <span class=\"comment\">// [1, 2, 4, 8, 16]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK9 支持，加入一个 Prediction, 判断如何终止。</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect2 = Stream.iterate(<span class=\"number\">1</span>, i -&gt; i &lt;= <span class=\"number\">16</span>, i -&gt; i * <span class=\"number\">2</span>).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect2); <span class=\"comment\">// [1, 2, 4, 8, 16]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"optional-增强\"><a class=\"markdownIt-Anchor\" href=\"#optional-增强\">#</a> Optional 增强</h3>\n<p><code>Since JDK 9</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 提供一个默认的Optional对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量, 可能为空 or not</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> variable = <span class=\"string\">&quot;jdk 11&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jdk 8 支持of(),ofNullable() 转换为Optional对象。</span></span><br><span class=\"line\">    List&lt;String&gt; collect = Optional.of(variable).stream().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK 8 可以通过 orElse, 当 variable 为空的时候，返回一个默认的字符串值。</span></span><br><span class=\"line\">    Optional.ofNullable(variable).orElse(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jdk 9 提供了提供 or() 返回一个默认Optional对象。</span></span><br><span class=\"line\">    Optional.empty().or(() -&gt; Optional.of(<span class=\"string\">&quot;jdk 11&quot;</span>)).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"inputstream-加强\"><a class=\"markdownIt-Anchor\" href=\"#inputstream-加强\">#</a> InputStream 加强</h3>\n<p><code>InputStream</code>  终于有了一个非常有用的方法： <code>transferTo</code> ，可以用来将数据直接传输到  <code>OutputStream</code> ，这是在处理原始数据流时非常常见的一种用法。</p>\n<p>还是举个栗子吧:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 直接将数据写入输出流</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> classLoader = ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inputStream = classLoader.getResourceAsStream(<span class=\"string\">&quot;readFile.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> javastack = File.createTempFile(<span class=\"string\">&quot;writeFile&quot;</span>, <span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"keyword\">var</span> outputStream = <span class=\"keyword\">new</span> FileOutputStream(javastack)) &#123;</span><br><span class=\"line\">        inputStream.transferTo(outputStream);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"string增强\"><a class=\"markdownIt-Anchor\" href=\"#string增强\">#</a> String 增强</h3>\n<h4 id=\"isblank\"><a class=\"markdownIt-Anchor\" href=\"#isblank\">#</a> isBlank</h4>\n<p>判断目标字符串是否是空白字符。</p>\n<p>使用功能上的问题，感觉还是例子来的舒服。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 判断字符串是否为空</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 半角空格  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; &quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全角空格  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;　&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 半角空格的unicode字符值  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\u0020&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全角空格的unicode字符值  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\u3000&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 制表符  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回车  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\r&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 换行  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\n&quot;</span>.isBlank());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 各种空白字符拼接  ===&gt; true</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; \\t\\r\\n　&quot;</span>.isBlank());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"stripstripleading与striptrailing\"><a class=\"markdownIt-Anchor\" href=\"#stripstripleading与striptrailing\">#</a> strip，stripLeading 与 stripTrailing</h4>\n<p>去除字符串的前后字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全角空格 + 制表符 + 回车 + 换行 + 半角空格 + &lt;内容&gt; + 全角空格 + 制表符 + 回车 + 换行 + 半角空格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strTest = <span class=\"string\">&quot;　\\t\\r\\n 你好 jdk11　\\t\\r\\n &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strip 去除两边空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.strip() + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// stripLeading 去除开头的空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.stripLeading() + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// stripTrailing 去除结尾的空白字符</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;[&quot;</span> + strTest.stripTrailing() + <span class=\"string\">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"repeat\"><a class=\"markdownIt-Anchor\" href=\"#repeat\">#</a> repeat</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strOri = <span class=\"string\">&quot;jdk11&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = strOri.repeat(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = strOri.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(str1);</span><br><span class=\"line\">System.out.println(str2);</span><br><span class=\"line\"><span class=\"comment\">// repeat传入参数为1时，不会创建一个新的String对象，而是直接返回原来的String对象。</span></span><br><span class=\"line\">System.out.println(str1 == strOri);</span><br></pre></td></tr></table></figure>\n<h4 id=\"lines\"><a class=\"markdownIt-Anchor\" href=\"#lines\">#</a> lines</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 按照换行符拆分字符串</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strContent = <span class=\"string\">&quot;hello java\\rhello jdk11\\nhello world\\r\\nhello everyone&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// lines方法用 \\r 或 \\n 或 \\r\\n 对字符串切割并返回stream对象</span></span><br><span class=\"line\">    strContent.lines().forEach(System.out::println);</span><br><span class=\"line\">    System.out.println(strContent.lines().count());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块化开发\"><a class=\"markdownIt-Anchor\" href=\"#模块化开发\">#</a> 模块化开发</h2>\n<p><code>Java9</code>  引入了模块化， <code>Java Platform Module System</code> ， <code>java</code>  平台模块系统，简称 <code>JPMS</code> 。</p>\n<p>这里和大家一起做一下。</p>\n<h3 id=\"新建两个-module\"><a class=\"markdownIt-Anchor\" href=\"#新建两个-module\">#</a> 新建两个 module</h3>\n<p>我们新建两个模块 core 和 business。 如下图</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-5.png\" alt=\"\"></p>\n<h3 id=\"core-模块配置\"><a class=\"markdownIt-Anchor\" href=\"#core-模块配置\">#</a> core 模块配置</h3>\n<ul>\n<li>新建一个类 RestResult ，表示公共调用的类。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResult</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String errMsg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RestResult</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个  <code>module-info.java</code> . 声明  <code>module</code>  信息.   <code>exports</code>  将  <code>com.fxb.learn.module.core</code>  这个包下的类都 export 出去。\n<ul>\n<li>如果是一个 <code>java</code>  的普通应用，则在  <code>src</code>  目录下，新建  <code>module-info.java</code>  文件即可。</li>\n<li>如果是一个 <code>maven</code>  应用，则需要在  <code>src/main/java</code>  目录下，新建  <code>module-info.java </code> 文件。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// core 是module的名称</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> core &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将指定的包下类，export出去</span></span><br><span class=\"line\">    <span class=\"keyword\">exports</span> com.fxb.learn.<span class=\"keyword\">module</span>.core;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"business-模块配置\"><a class=\"markdownIt-Anchor\" href=\"#business-模块配置\">#</a> business 模块配置</h3>\n<ul>\n<li>在 <code>business</code>  模块下，新建一个  <code>module-info.java</code> . 文件位置上 <code>core</code>  模块中的一致。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> business &#123;</span><br><span class=\"line\">    <span class=\"keyword\">requires</span> core;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 <code>Idea</code>  中配置， <code>business</code>  模块引用 <code>core</code>  模块。</li>\n</ul>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-4.png\" alt=\"\"></p>\n<h3 id=\"写个例子看看\"><a class=\"markdownIt-Anchor\" href=\"#写个例子看看\">#</a> 写个例子看看</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 演示模块调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RestResult&lt;User&gt; <span class=\"title\">getUserById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestResult&lt;&gt;(<span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;fangjiaxiaobai&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新工具\"><a class=\"markdownIt-Anchor\" href=\"#新工具\">#</a> 新工具</h2>\n<p><code>JDK</code>  还提供了一些新的工具，  <code>REPL</code>  交互式编程， <code>Low-Overhead Heap Profiling</code>  (免费的低耗能飞行记录仪和堆分析仪), <code>Flight Recorder</code>  (黑盒子)</p>\n<h3 id=\"repl交互式编程\"><a class=\"markdownIt-Anchor\" href=\"#repl交互式编程\">#</a>  <code>REPL</code>  交互式编程</h3>\n<p>你是否使用 j <code>upter</code> ,  <code>java </code> 也有了！</p>\n<p><code>Java</code>  提供了一个新的工具 <code>jshell</code> ， <code>Java</code>  终于可以像 <code>python</code> ， <code>scala</code>  等语言那样，交互式演示语法了</p>\n<p><img data-src=\"/images/java/jdk/versions/jdk8-jdk11-6.png\" alt=\"\"></p>\n<p>具体命令可以使用  <code>/help</code>  命令查看。</p>\n<h3 id=\"low-overhead-heap-profiling\"><a class=\"markdownIt-Anchor\" href=\"#low-overhead-heap-profiling\">#</a> Low-Overhead Heap Profiling</h3>\n<p>免费的低耗能飞行记录仪和堆分析仪。</p>\n<p>通过 <code>JVMTI</code>  的 <code>SampledObjectAlloc</code>  回调提供了一个开销低的 <code>heap</code>  分析方式提供一个低开销的，为了排错 <code>java</code>  应用问题，以及 <code>JVM</code>  问题的数据收集框架。<br>\n具有一下功能:</p>\n<ul>\n<li>提供用于生产和消费数据作为事件的 <code>API</code></li>\n<li>提供缓存机制和二进制数据格式</li>\n<li>允许事件配置和事件过滤</li>\n<li>提供 <code>OS</code> , <code>JVM</code>  和 <code>JDK</code>  库的事件</li>\n</ul>\n<h3 id=\"flight-recorder\"><a class=\"markdownIt-Anchor\" href=\"#flight-recorder\">#</a> Flight Recorder</h3>\n<p><code>Flight Recorder</code>  源自飞机的黑盒子。  <code>Flight Recorder</code>  以前是商业版的特性，在 <code>java11</code>  当中开源出来，它可以导出事件到文件中，之后可以用 <code>Java Mission Control</code>  来分析。</p>\n<p>两种启动方式:</p>\n<p>可以在应用启动时配置 <code>java -XX:StartFlightRecording</code> <br>\n 应用启动之后，使用 <code>jcmd</code>  来录制，如下代码:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd &lt;pid&gt; JFR.start  <span class=\"comment\"># 启动记录仪</span></span><br><span class=\"line\">$ jcmd &lt;pid&gt; JFR.dump.filename=recording.jfr  <span class=\"comment\"># 将记录内容保存到文件里</span></span><br><span class=\"line\">$ jcmd &lt;pid&gt; JFR.stop  <span class=\"comment\"># 停止记录仪</span></span><br></pre></td></tr></table></figure>\n<p>不过在  <code>jdk11</code>  是没办法查看  <code>jfr</code>  的。如果想看，安装  <code>jdk12</code>  吧。 不，可以试试  <code>jdk16</code>  ,   <code>jdk16</code>  也是 <code>LTS</code>  版本！・</p>\n<blockquote>\n<p>JFR 是一套集成进入 JDK、JVM 内部的事件机制框架，通过良好架构和设计的框架，硬件层面的极致优化，生产环境的广泛验证，它可以做到极致的可靠和低开销。在 SPECjbb2015 等基准测试中，JFR 的性能开销最大不超过 1%，所以，工程师可以基本没有心理负担地在大规模分布式的生产系统使用，这意味着，我们既可以随时主动开启 JFR 进行特定诊断，也可以让系统长期运行 JFR, 用以在复杂环境中进行 &quot;After-the-fact&quot; 分析。还需要苦恼重现随机问题吗？JFR 让问题简化了很多<br>\n在保证低开销的基础上，JFR 提供的能力也令人眼前一亮，例如：我们无需 BCI 就可以进行 Object Allocation Profiling， 终于不用担心 BTrace 之类把进程搞挂了。对锁竞争、阻塞、延迟，JVM GC、SafePoint 等领域，进行非常细粒度分析。甚至深入 JIT Compiler 内部，全面把握热点方法、内联、逆优化等等。JFR 提供了标准的 Java,C++ 等扩展 API, 可以与各种层面的应用进行定制、集成，为复杂的企业应用栈或者复杂的分布式应用，提供 All-in-One 解决方案。而这一切都是内建在 JDK 和 JVM 内部的，并不需要额外的依赖，开箱即用。</p>\n</blockquote>\n<h2 id=\"新功能\"><a class=\"markdownIt-Anchor\" href=\"#新功能\">#</a> 新功能</h2>\n<h3 id=\"httpclient\"><a class=\"markdownIt-Anchor\" href=\"#httpclient\">#</a> HttpClient</h3>\n<p><code>JDK 9</code>  开始引入 <code>HttpClient API</code>  来处理 <code>HTTP</code>  请求。 从 <code>JDK 11</code>  开始，这个・正式进入标准库包。<br>\n参考网址：<span class=\"exturl\" data-url=\"aHR0cDovL29wZW5qZGsuamF2YS5uZXQvZ3JvdXBzL25ldC9odHRwY2xpZW50L2ludHJvLmh0bWw=\">http://openjdk.java.net/groups/net/httpclient/intro.html</span></p>\n<p><code>HttpClient</code>  具有以下特性:</p>\n<ul>\n<li>支持  <code>HTTP1.1</code>  和  <code>HTTP2</code> ,  <code>websocket</code>  协议</li>\n<li>支持同步和异步编程模型</li>\n<li>将请求和响应主体作为响应式流 ( <code>reactive-streams</code> ) 处理，并使用构建器模式</li>\n<li>要发送 <code>http</code>  请求，首先要使用其构建器创建一个 <code>HttpClient</code> 。这个构建器能够配置每个客户端的状态：\n<ul>\n<li>首选协议版本 (  <code>HTTP/1.1</code>  或  <code>HTTP/2</code>  )</li>\n<li>是否跟随重定向</li>\n<li>代理</li>\n<li>身份验证</li>\n</ul>\n</li>\n</ul>\n<p>一旦构建完成，就可以使用 <code>HttpClient</code>  发送多个请求。</p>\n<h4 id=\"httprequest\"><a class=\"markdownIt-Anchor\" href=\"#httprequest\">#</a> HttpRequest</h4>\n<p><code>HttpRequest</code>  是由它的构建器创建的。请求的构建器可用于设置:</p>\n<ul>\n<li>请求 <code>URI</code></li>\n<li>请求 <code>Method</code>  (  <code>GET</code> ,  <code>PUT</code> ,  <code>POST</code>  )</li>\n<li>请求主体 (如果有)</li>\n<li>超时时间</li>\n<li>请求头</li>\n</ul>\n<p><code>HttpRequest</code>  构建之后是不可变的，但可以发送多次。</p>\n<h4 id=\"synchronous-or-asynchronous\"><a class=\"markdownIt-Anchor\" href=\"#synchronous-or-asynchronous\">#</a> Synchronous or Asynchronous</h4>\n<p>请求既可以同步发送，也可以异步发送。当然同步的 <code>API</code>  会导致线程阻塞直到 <code>HttpResponse</code>  可用。异步 <code>API</code>  立即返回一个 <code>CompletableFuture</code> ，当 <code>HttpResponse</code>  可用时，它将获取 <code>HttpResponse</code>  并执行后续处理。</p>\n<h4 id=\"data-as-reactive-streams\"><a class=\"markdownIt-Anchor\" href=\"#data-as-reactive-streams\">#</a> Data as reactive-streams</h4>\n<p>请求和响应的主体作为响应式流 (具有非阻塞背压的异步数据流) 供外部使用。 <code>HttpClient</code>  实际上是请求正文的订阅者和响应正文字节的发布者。 <code>BodyHandler</code>  接口允许在接收实际响应体之前检查响应代码和报头，并负责创建响应 <code>BodySubscriber</code> 。</p>\n<p><code>HttpRequest</code>  和 <code>HttpResponse</code>  类型提供了许多便利的工厂方法，用于创建请求发布者和响应订阅者，以处理常见的主体类型，如文件、字符串和字节。这些便利的实现要么累积数据，直到可以创建更高级别的 <code>Java</code>  类型（如 <code>String</code> ），要么就文件流传输数据。 <code>BodySubscriber</code>  和 <code>BodyPublisher</code>  接口可以实现为自定义反应流处理数据。</p>\n<p><code>HttpRequest</code>  和 <code>HttpResponse</code>  还提供了转换器，用于将  <code>java.util.concurrent.Flow</code>  的  <code>Publisher/Subscriber</code>  类型转换为  <code>HTTP Client</code>  的  <code>BodyPublisher/BodySubscriber</code>  类型。</p>\n<h4 id=\"请求协议-http2\"><a class=\"markdownIt-Anchor\" href=\"#请求协议-http2\">#</a> 请求协议 HTTP/2</h4>\n<p><code>Java HTTP Client</code>  支持  <code>HTTP/1.1</code>  和  <code>HTTP/2</code> 。默认情况下，客户端将使用  <code>HTTP/2</code>  发送请求。发送到尚不支持  <code>HTTP/2 </code> 的服务器的请求将自动降级为  <code>HTTP/1.1</code> 。</p>\n<p>以下是 <code>HTTP/2</code>  带来的主要改进:</p>\n<ul>\n<li>标头压缩。 HTTP/2 使用 HPACK 压缩，从而减少了开销。</li>\n<li>与服务器的单一连接减少了建立多个 TCP 连接所需的往返次数。</li>\n<li>多路复用。 在同一连接上，同时允许多个请求。</li>\n<li>服务器推送。 可以将其他将来需要的资源发送给客户端。</li>\n<li>二进制格式。 更紧凑。</li>\n</ul>\n<p>由于 <code>HTTP/2</code>  是默认的首选协议，并且在需要的地方无缝地实现回退到 <code>HTTP/1.1</code> ，那么当 <code>HTTP/2</code>  被更广泛地部署时， <code>Java HTTP</code>  客户端就无需修正它的应用代码。</p>\n<p>具体的 <code>Java Doc</code>  可以参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5uZXQuaHR0cC9qYXZhL25ldC9odHRwL3BhY2thZ2Utc3VtbWFyeS5odG1s\">https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html</span></p>\n<p>看了  <code>Java Doc</code> , 感觉使用起来比较简单。这里就不举例了。感兴趣的朋友，可以自行深入研究一下。</p>\n<h3 id=\"源代码直接执行\"><a class=\"markdownIt-Anchor\" href=\"#源代码直接执行\">#</a> 源代码直接执行</h3>\n<p>一个单文件源代码，也就是说，单独的 <code>java</code>  文件，有 <code>main</code>  方法，且只依赖 <code>jdk</code>  类库以及自己文件内部定义的类，可以直接用 <code>java</code>  执行而无需先编译再执行编译后的 <code>class</code>  文件了。</p>\n<p>你可能问了，有什么用呢？我平时也不关系它是否生成了 <code>class</code>  文件。</p>\n<p>如果你是做数据相关的工作，可能需要写一些脚本的时候，这却是轻松了很多。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  learn git:(master) ✗ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java</span><br><span class=\"line\">➜  learn git:(master) ✗ java SourceCodeExecDemo.java</span><br><span class=\"line\">1.解析数据格式.....</span><br><span class=\"line\">2.处理数据.....</span><br><span class=\"line\">3.重组数据.....</span><br><span class=\"line\">➜  learn git:(master) ✗ ll                          </span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java</span><br></pre></td></tr></table></figure>\n<p>可以看到确实没有  <code>class</code>  文件生成。</p>\n<h3 id=\"完全支持linux容器\"><a class=\"markdownIt-Anchor\" href=\"#完全支持linux容器\">#</a> 完全支持 Linux 容器</h3>\n<p>在 <code>Docker</code>  容器中运行 <code>Java</code>  应用程序一直存在一个问题，那就是在容器中运行的 <code>JVM</code>  程序在设置内存大小和 <code>CPU</code>  使用率后，会导致应用程序的性能下降。这是因为 <code>Java</code>  应用程序没有意识到它正在容器中运行。随着 <code>Java10</code>  的发布，这个问题总算得以解诀， <code>JVM</code>  现在可以识别由容器控制组 ( <code>cgroups</code> ) 设置的约束，可以在容器中使用内存和 <code>CPU</code>  约束来直接管理 <code>Java</code>  应用程序，其中包括:</p>\n<ul>\n<li>遵守容器中设置的内存限制</li>\n<li>在容器中设置可用的 <code>CPU</code></li>\n<li>在容器中设置 <code>CPU</code>  约束</li>\n</ul>\n<h3 id=\"支持unicode-10\"><a class=\"markdownIt-Anchor\" href=\"#支持unicode-10\">#</a> 支持 Unicode 10</h3>\n<p><code>Unicode 10</code>  新增了 <code>8518</code>  个字符，总计达到了 <code>136690</code>  个字符。包括 <code>56</code>  个新的 <code>emoji</code>  表情符号。</p>\n<p><code>JDK11</code>  在 <code>java.lang</code>  下增加了 4 个类来处理:</p>\n<ul>\n<li><code>CharacterData00.class</code></li>\n<li><code>CharacterData01.class</code></li>\n<li><code>CharacterData02.class</code></li>\n<li><code>CharacterData0E.class</code></li>\n</ul>\n<h3 id=\"新支持的加密算法\"><a class=\"markdownIt-Anchor\" href=\"#新支持的加密算法\">#</a> 新支持的加密算法</h3>\n<p><code>Java</code>  实现了 <code>RFC7539</code>  中指定的 <code>ChaCha20</code>  和 <code>Poly1305</code>  两种加密算法，代替 <code>RC4</code> 。<br>\n <code>RFC7748</code>  定义的密钥协商方案更高效，更安全， <code>JDK</code>  增加了两个新的接口 <code>XECPublicKey</code>  和 <code>XECPrivateKey</code> 。</p>\n<h2 id=\"垃圾回收器\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收器\">#</a> 垃圾回收器</h2>\n<h3 id=\"zgc\"><a class=\"markdownIt-Anchor\" href=\"#zgc\">#</a> ZGC</h3>\n<p>启用方法： <code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code></p>\n<p>说明： <code>ZGC</code> , <code> A Scalable Low-Latency Garbage collector</code> (  <code>Experimental</code> ) ，一个可伸缩的低延时的垃圾回收器。 <code>GC</code>  暂停时间不会超过 <code>10ms</code> ，既能处理几百兆的小堆，也能处理几个 <code>T</code>  的大堆。和 <code>G1</code>  相比，应用吞吐能力不会下降超过 <code>15%</code> ，为未来的 <code>GC</code>  功能和利用 <code>colord</code>  指针以及 <code>Load barriers</code>  优化奠定了基础。初始只支持 <code>64</code>  位系统。</p>\n<p><code>ZGC</code>  的设计目标是：支持 <code>TB</code>  级内存容量，暂停时间低 ( <code>&lt;10ms</code> )，对整个程序吞吐量的影响小于 <code>15%</code> 。将来还可以扩 展实现机制，以支持不少令人兴奋的功能，例如多层堆 (即热对象置于 <code>DRAM</code>  和冷对象置于 <code>NVMe</code>  闪存)，或压缩堆。</p>\n<p><code>GC</code>  是 <code>java</code>  主要优势之一。然而，当 <code>GC</code>  停顿太长，就会开始影响应用的响应时间。消除或者减少 <code>GC</code>  停顿时长， <code>java</code>  将有可能在更广泛的应用场景中成长为一个更有吸引力的平台。此外，现代系统中可用内存不断增长，用户和程序员希望 <code>JVM</code>  能够以高效的方式充分利用这些内存，并且无需长时间的 <code>GC</code>  暂停时间。</p>\n<p><code>ZGC</code>  是一个并发，基于 <code>region</code> , 压缩型的垃圾收集器，只有 <code>root</code>  扫描阶段会 <code>STW</code> , 因此 <code>GC</code>  停顿时间不会随着堆的增长和存活对象的增长而变长。</p>\n<h3 id=\"epsilon\"><a class=\"markdownIt-Anchor\" href=\"#epsilon\">#</a> Epsilon</h3>\n<p>实验性质，生产环境不建议使用。</p>\n<p>启用方法： <code>-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC</code></p>\n<p>说明：开发一个处理内存分配但不实现任何实际内存回收机制的 <code>GC</code> , 一旦可用堆内存用完， <code>JVM</code>  就会退出，如果有 <code>System.gc()</code>  调用，实际上什么也不会发生 (这种场景下和 <code>-XX:+DisableExplicitGC</code>  效果一样), 因为没有内存回收，这个实现可能会警告用户尝试强制 <code>GC</code>  是徒劳的。</p>\n<p>主要用途如下:</p>\n<ul>\n<li>性能测试 (它可以帮助过滤掉 <code>GC</code>  引起的性能假象)</li>\n<li>内存压力测试 (例如，知道测试用例应该分配不超过 <code>1GB</code>  的内存，我们可以使用 <code>-Xmx1g -XX:+UseEpsilonGC</code> ，如果程序有问题，则程序会崩溃。</li>\n<li>非常短的 <code>JOB</code>  任务 (对于这种任务， <code>GC</code>  是在浪费资源)</li>\n<li><code>VM</code>  接口测试</li>\n<li><code>Last-drop</code>  延迟 &amp; 吞吐改进</li>\n</ul>\n<h3 id=\"更好的g1\"><a class=\"markdownIt-Anchor\" href=\"#更好的g1\">#</a> 更好的 G1</h3>\n<p>对于 <code>G1 GC</code> , 相比于 <code>JDK8</code> , 升级到 <code>JDK 11</code>  即可免费享受到：并行的 <code>Full GC</code> , 快速的 <code>CardTable</code>  扫描，自适应的堆占用比例调整 ( <code>IHOP</code> ), 在并发标记阶段的类型卸载等等。这些都是针对 <code>G1</code>  的不断增强，其中串行 <code>FullGC</code>  等甚至是曾经被广泛诟病的短板，你会发现 <code>GC</code>  配置和调优在 <code>JDK11</code>  中越来越方便。</p>\n<h2 id=\"移除与不再推荐使用的类库或功能\"><a class=\"markdownIt-Anchor\" href=\"#移除与不再推荐使用的类库或功能\">#</a> 移除与不再推荐使用的类库或功能</h2>\n<p><code>Jdk9</code>  到 <code>Jdk11</code> ，陆续移除了一些类库或功能。</p>\n<h3 id=\"移除了java-ee和corba-moudles\"><a class=\"markdownIt-Anchor\" href=\"#移除了java-ee和corba-moudles\">#</a> 移除了 Java EE 和 CORBA Moudles</h3>\n<p>在 <code>java11</code>  中移除了不太使用的 <code>JavaEE</code>  模块和 <code>CORBA</code>  技术。</p>\n<p><code>CORBA</code>  来自于二十世纪九十年代， <code>Oracle</code>  认为，现在用 <code>CORBA</code>  开发现代 <code>Java</code>  应用程序已经没有意义了，维护 <code>CORBA</code>  的成本已经超过了保留它带来的好处。</p>\n<p>但是删除 <code>CORBA</code>  将使得那些依赖于 <code>JDK</code>  提供部分 <code>CORBAAPI</code>  的 <code>CORBA</code>  实现无法运行。目前还没有第三方 <code>CORBA</code>  版本，也不确定是否会有第三方愿意接手 <code>CORBA API</code>  的维护工作。</p>\n<p>在 <code>java11</code>  中将 <code>java9</code>  标记废弃的 <code>Java EE</code>  及 <code>CORBA</code>  模块移除掉，具体如下:</p>\n<p><code>xml</code>  相关被移除的：</p>\n<ul>\n<li><code>java.xml.ws</code></li>\n<li><code>java.xml.bind</code></li>\n<li><code>java.xml.ws</code></li>\n<li><code>java.xml.ws.annotation</code></li>\n<li><code>jdk.xml.bind</code></li>\n<li><code>jdk.xml.ws</code></li>\n</ul>\n<p>只剩下 <code>java.xml</code> ,  <code>java.xml.crypto.jdk.xml.dom</code>  这几个模块。</p>\n<p>其它被移除的 Java EE 和 CORBA 相关类库:</p>\n<ul>\n<li><code>java.corba</code></li>\n<li><code>java.se.ee</code></li>\n<li><code>java.activation</code></li>\n<li><code>java.transaction</code>  (但是 <code>java11</code>  新增了一个 <code>java.transaction.xa</code>  模块)</li>\n</ul>\n<h3 id=\"其他移除的类库\"><a class=\"markdownIt-Anchor\" href=\"#其他移除的类库\">#</a> 其他移除的类库</h3>\n<ul>\n<li><code>com.sun.awt.AWTUtilities</code></li>\n<li><code>sun.miss.Unsafe.defineClass</code></li>\n<li><code>Thread.destroy()</code>  以及  <code>Thread.stop(Throwable)</code>  方法</li>\n<li><code>sun.nio.ch.disableSystemWideOverlappingFileLockCheck</code>  属性</li>\n<li><code>sun.locale.formatasdefault</code>  属性</li>\n<li><code>jdk snmp</code>  模块</li>\n<li><code>javafx</code></li>\n<li><code>java Mission Control</code></li>\n<li><code>Root Certificates</code> : 一些根证书被移除： <code>Baltimore Cybertrust Code Signing CA, SECOM Root Certificate, AOL and Swisscom Root Certificates</code></li>\n</ul>\n<p>其中，使用 <code>java.lang.invoke.MethodHandles.Lookup.defineClass</code>  来替代移除的 <code>sun.miss.Unsafe.defineClass</code> 。</p>\n<h3 id=\"将nashorn-javascript标记为不推荐\"><a class=\"markdownIt-Anchor\" href=\"#将nashorn-javascript标记为不推荐\">#</a> 将 Nashorn Javascript 标记为不推荐</h3>\n<p>将 <code>Javascript</code>  引擎标记为 <code>Deprecate</code> ，后续版本会移除，有需要的可以考虑使用开源的 <code>GraalVM</code> 。</p>\n<h3 id=\"将pack200-tools-and-api标记为不推荐\"><a class=\"markdownIt-Anchor\" href=\"#将pack200-tools-and-api标记为不推荐\">#</a> 将 Pack200 Tools and API 标记为不推荐</h3>\n<p><code>java11</code>  中将 <code>pack200</code>  以及 <code>unpack200</code>  工具以及 <code>java.tiljar</code>  中的 <code>Pack200 API</code>  标记为 <code>Deprecate</code> 。因为 <code>Pack200</code>  主要是用来压缩 <code>jar</code>  包的工具，由于网络下载速度的提升以及 <code>java9</code>  引入模块化系统之后不再依赖 <code>Pack200</code> ，因此这个版本将其标记为 <code>Deprecate</code> 。</p>\n<h2 id=\"预告\"><a class=\"markdownIt-Anchor\" href=\"#预告\">#</a> 预告</h2>\n<p>继 <code>LTS JDK8</code>  之后，又一 <code>LTS</code> , 你会用吗？ <code>JDK16</code> , 它来了。</p>\n<h2 id=\"对了\"><a class=\"markdownIt-Anchor\" href=\"#对了\">#</a> 对了</h2>\n<p><code>JDK11</code>  写  <code>JDK8</code>  的代码？</p>\n<p>代码始终是代码，写的再多，写不懂你我。</p>\n<p>多看一点，就比其他们多懂一点。所以，你关不关注我，问题不大！</p>\n<p>人情世故。不是世故，就是事故。问题真的不大。</p>\n<p>文中所有代码，在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfamRrMTE=\">https://gitee.com/fangjiaxiaobai/learn_java/tree/master/fxb_jdk11</span></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>希望和你一起遇见更好的自己</p>\n<p><img data-src=\"/images/java/jdk/versions/qrcode.jpg\" alt=\"\"></p>\n",
            "tags": [
                "JDK",
                "JDK版本",
                "JDK11"
            ]
        }
    ]
}