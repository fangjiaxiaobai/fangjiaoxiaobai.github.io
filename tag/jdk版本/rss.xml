<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>方家小白 • Posts by &#34;jdk版本&#34; tag</title>
        <link>https://fangjiaxiaobai.github.io</link>
        <description>和你一起遇见更好的自己</description>
        <language>zh-CN</language>
        <pubDate>Thu, 11 Nov 2021 18:18:18 +0800</pubDate>
        <lastBuildDate>Thu, 11 Nov 2021 18:18:18 +0800</lastBuildDate>
        <category>全站地图</category>
        <category>目录</category>
        <category>MySQL</category>
        <category>源码</category>
        <category>Redis</category>
        <category>数据结构</category>
        <category>日常</category>
        <category>Springboot</category>
        <category>Netty</category>
        <category>雪花算法</category>
        <category>算法</category>
        <category>git</category>
        <category>log</category>
        <category>go-log</category>
        <category>猫影视</category>
        <category>图片</category>
        <category>Elastic Search</category>
        <category>搜索</category>
        <category>线程池</category>
        <category>面经</category>
        <category>MachineLearn</category>
        <category>RocketMQ</category>
        <category>消息队列</category>
        <category>go</category>
        <category>go-error</category>
        <category>HD</category>
        <category>BQ</category>
        <category>AC</category>
        <category>动态规划</category>
        <category>leetCode</category>
        <category>面经之算法题</category>
        <category>数组</category>
        <category>有点难的算法题</category>
        <category>链表</category>
        <category>不做也罢的算法题</category>
        <category>数据结构与算法</category>
        <category>HashMap</category>
        <category>JDK</category>
        <category>JDK8</category>
        <category>哈希算法</category>
        <category>排序</category>
        <category>冒泡排序</category>
        <category>交换排序</category>
        <category>String</category>
        <category>递归</category>
        <category>go-设计模式</category>
        <category>快速排序</category>
        <category>分支思想排序</category>
        <category>分治思想排序</category>
        <category>选择排序</category>
        <category>桶排序</category>
        <category>线性思想排序</category>
        <category>Java</category>
        <category>dubbo</category>
        <category>模型评估</category>
        <category>架构</category>
        <category>笔记</category>
        <category>KNN</category>
        <category>go-runtimes</category>
        <category>JDK版本</category>
        <category>JDK11</category>
        <category>OOM</category>
        <category>JVM</category>
        <category>Stream</category>
        <item>
            <guid isPermalink="true">https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/</guid>
            <title>不要再在用JDK11写JDK8的代码了!</title>
            <link>https://fangjiaxiaobai.github.io/2021/11/11/JDK%E6%BA%90%E7%A0%81/versions/jdk11/</link>
            <category>JDK</category>
            <category>JDK版本</category>
            <category>JDK11</category>
            <pubDate>Thu, 11 Nov 2021 18:18:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;入职新公司两个月了，用 &lt;code&gt;JDK11&lt;/code&gt;  写了两个月 &lt;code&gt;JDK8&lt;/code&gt;  的代码，再也憋不住想看看 &lt;code&gt;JDK11&lt;/code&gt;  的新特性了。没用过 &lt;code&gt;JDK9,10&lt;/code&gt; . 那就说说 &lt;code&gt;JDK8-JDK11&lt;/code&gt;  的变化吧。&lt;/p&gt;
&lt;h2 id=&#34;新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新&#34;&gt;#&lt;/a&gt; 新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语法增强
&lt;ul&gt;
&lt;li&gt;本地变量类型推断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Collection&lt;/code&gt;  增强&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;/code&gt;  增强&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional&lt;/code&gt;  增强&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt;  增强&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;  增强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化开发&lt;/li&gt;
&lt;li&gt;新工具
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;REPL&lt;/code&gt;  交互式编程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Low-Overhead Heap Profiling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flight Recorder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新功能
&lt;ul&gt;
&lt;li&gt;源代码直接执行&lt;/li&gt;
&lt;li&gt;完全支持 &lt;code&gt;Linux&lt;/code&gt;  容器&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;Unicode 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新支持的加密算法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpClient&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;垃圾回收器
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZGC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Epsilon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更好的 &lt;code&gt;G1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移除与不再推荐使用的类库或功能
&lt;ul&gt;
&lt;li&gt;移除了 &lt;code&gt;Java EE&lt;/code&gt;  和 &lt;code&gt;CORBA Moudles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Nashorn Javascript&lt;/code&gt;  标记为不推荐&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Pack200 Tools and API&lt;/code&gt;  标记为不推荐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk8-jdk11的语法新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jdk8-jdk11的语法新特性&#34;&gt;#&lt;/a&gt; JDK8-JDK11 的语法新特性&lt;/h2&gt;
&lt;h3 id=&#34;本地变量类型推断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地变量类型推断&#34;&gt;#&lt;/a&gt; 本地变量类型推断&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;since JDK10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java10&lt;/code&gt;  以后可以用 &lt;code&gt;var&lt;/code&gt;  定义一个局部变量，不用显式写出它的类型。但要注意，被 &lt;code&gt;var&lt;/code&gt;  定义的变量仍然是静态类型，编译器会试图去推断其类型。所以，我们需要注意  &lt;code&gt;1&lt;/code&gt; . 不兼容的类型是不能重新赋值的！ &lt;code&gt;2&lt;/code&gt; . 只要编译器无法推断出变量类型，就会编译错误！&lt;/p&gt;
&lt;p&gt;举个栗子:&lt;/p&gt;
&lt;h4 id=&#34;基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本使用&#34;&gt;#&lt;/a&gt; 基本使用&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;local variable type interface&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String str2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;local variable type interface&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(str1 == str2); &lt;span class=&#34;comment&#34;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;简化泛型声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简化泛型声明&#34;&gt;#&lt;/a&gt; 简化泛型声明&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 简化泛型声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lists = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item : lists) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; entries = item.entrySet();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; entry : entries) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String key = entry.getKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; values = entry.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value : values) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;幸好编译器会有类型提示。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;简化lambda参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简化lambda参数&#34;&gt;#&lt;/a&gt; 简化 lambda 参数&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * lambda参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 从Java 11开始，lambda参数也允许使用var关键字：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Predicate&amp;lt;String&amp;gt; predNotNull = (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a) -&amp;gt; a != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !a.isBlank();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String strAfterFilter = Stream.of(&lt;span class=&#34;string&#34;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;love&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;my&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;very&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;much&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .filter(predNotNull)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .collect(Collectors.joining(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(strAfterFilter); &lt;span class=&#34;comment&#34;&gt;//I love my wife very much&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;不兼容的类型赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不兼容的类型赋值&#34;&gt;#&lt;/a&gt; 不兼容的类型赋值&lt;/h4&gt;
&lt;p&gt;这种直接编译失败，第一行和第二行已经推断出来了  &lt;code&gt;str&lt;/code&gt;  是  &lt;code&gt;String&lt;/code&gt;  类型。 第三行就不能赋值为 &lt;code&gt;double&lt;/code&gt;  类型了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;不能推测的类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不能推测的类型&#34;&gt;#&lt;/a&gt; 不能推测的类型&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是，对于用习惯了  &lt;code&gt;IDEA&lt;/code&gt;  快捷指令的我来说，这个 &lt;code&gt;var&lt;/code&gt;  变量，对我来说毫无意义。感觉 &lt;code&gt;jdk&lt;/code&gt;  是在炫技，但我毫无兴趣。&lt;/p&gt;
&lt;p&gt;比如，在 &lt;code&gt;idea&lt;/code&gt;  中，你输入  &lt;code&gt;new ArrayList().var&lt;/code&gt;  , 然后回车， &lt;code&gt;IDEA&lt;/code&gt;  就会为你自动生成类型。&lt;br&gt;
类似的还有  &lt;code&gt;lists.for&lt;/code&gt; ,  &lt;code&gt;lists.fori&lt;/code&gt;  等等。所以，个人并不推荐大家使用该语法，并非不能用，比如在  &lt;code&gt;lambda&lt;/code&gt;  中使用替换类型时还是比较好的。如果你还没有掌握  &lt;code&gt;xx.var&lt;/code&gt;  这种异能加持的话，想用就用吧。&lt;/p&gt;
&lt;p&gt;总之，看别人写了个  &lt;code&gt;var&lt;/code&gt;  时，不要发出 “哇藕， &lt;code&gt;Java&lt;/code&gt;  还可以这么写”。&lt;/p&gt;
&lt;h3 id=&#34;collection增强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection增强&#34;&gt;#&lt;/a&gt; Collection 增强&lt;/h3&gt;
&lt;p&gt;这个比较简单，就是  &lt;code&gt;List&lt;/code&gt;  ,  &lt;code&gt;Set&lt;/code&gt; ,  &lt;code&gt;Map&lt;/code&gt;  这三种集合多了两个方法  &lt;code&gt;of&lt;/code&gt;  和  &lt;code&gt;copyOf&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;since jdk9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里直接用三个栗子分别演示一下&lt;/p&gt;
&lt;h4 id=&#34;list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt; List&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;List.of&lt;/code&gt;  内部是创建一个的   &lt;code&gt;immutable collections&lt;/code&gt; 。不可变集合。所以不可以增删改元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List.of()&lt;/code&gt;   和  &lt;code&gt;List.copyOf()&lt;/code&gt;  都是创建的不可变集合&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示 List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; integers = List.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; integers1 = List.copyOf(integers);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(integers == integers1); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    integers.add(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//  UnsupportedOperationException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt; Set&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;  和  &lt;code&gt;List&lt;/code&gt;  的用法类似。 同样的，也是不可变集合。需要注意的是， &lt;code&gt;copyOf&lt;/code&gt;  方法，如果形参是可变集合，则返回的也是可变集合。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示 Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Integer&amp;gt; integers = Set.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Integer&amp;gt; integers1 = Set.copyOf(integers);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(integers == integers1); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        integers.add(5); //  UnsupportedOperationException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Integer&amp;gt; integers2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    integers2.add(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    integers2.add(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    integers2.add(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Integer&amp;gt; integers3 = Set.copyOf(integers2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(integers3 == integers2); &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 元素不能重复 =&amp;gt;  java.lang.IllegalArgumentException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Integer&amp;gt; integers4 = Set.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; Map&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 演示Map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用of创建Map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Integer&amp;gt; map1 = Map.of(&lt;span class=&#34;string&#34;&gt;&amp;quot;k1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;k2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Integer&amp;gt; map2 = Map.copyOf(map1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(map1 == map2); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// copyOf，取决于传入的map是否为可变集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HashMap&amp;lt;String, Integer&amp;gt; map3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map3.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;k1&amp;quot;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map3.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;k2&amp;quot;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Integer&amp;gt; map4 = Map.copyOf(map3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(map3 == map4); &lt;span class=&#34;comment&#34;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// key不能重复 =&amp;gt; java.lang.IllegalArgumentExceptio&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Integer&amp;gt; map5 = Map.of(&lt;span class=&#34;string&#34;&gt;&amp;quot;k1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;k2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;k1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;stream增强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream增强&#34;&gt;#&lt;/a&gt; Stream 增强&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;since JDK9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  相关内容，新增了 &lt;code&gt;4&lt;/code&gt;  个方法.&lt;/p&gt;
&lt;h4 id=&#34;增加单个参数构造方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加单个参数构造方法&#34;&gt;#&lt;/a&gt; 增加单个参数构造方法&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 新增单个元素的Stream构造,允许为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(Stream.ofNullable(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;).count()); &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).count()); &lt;span class=&#34;comment&#34;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;增加takewhile方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加takewhile方法&#34;&gt;#&lt;/a&gt; 增加 takeWhile 方法&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 演示take while方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 从头开始计算，遇到不满足Predicate的元素即停止。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect1 = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).takeWhile(i -&amp;gt; i &amp;lt;= &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect1); &lt;span class=&#34;comment&#34;&gt;// [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect2 = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).takeWhile(i -&amp;gt; i &amp;gt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect2); &lt;span class=&#34;comment&#34;&gt;// [ ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;增加-dropwhile-方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加-dropwhile-方法&#34;&gt;#&lt;/a&gt; 增加 dropWhile 方法&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 演示 dropWhile 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 从头开始计算，遇到第一个不满足 Predicte的元素时，开始计算。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect1 = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).dropWhile(i -&amp;gt; i &amp;lt;= &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect1); &lt;span class=&#34;comment&#34;&gt;// [1, 2, 3, 4, 5, 4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect2 = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).dropWhile(i -&amp;gt; i &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect2); &lt;span class=&#34;comment&#34;&gt;// [4, 5, 4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;iterate-重载方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iterate-重载方法&#34;&gt;#&lt;/a&gt; iterate 重载方法&lt;/h4&gt;
&lt;p&gt;这个  &lt;code&gt;iterate&lt;/code&gt;  方法的新重载方法，可以让你提供一个  &lt;code&gt;Predicate&lt;/code&gt;  (判断条件) 来指定什么时候结束迭代。&lt;/p&gt;
&lt;p&gt;需要注意的是：相比 &lt;code&gt;JDK8&lt;/code&gt;  的方法， &lt;code&gt;iterator&lt;/code&gt;  是第三个参数，第二个参数是 &lt;code&gt;Prediction&lt;/code&gt; 。 &lt;code&gt;Prediction&lt;/code&gt;  中进行判断的取值是迭代之后的数值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 演示 iterate 的重载方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo4&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Jdk8支持使用这种方式， 生成从1开始的平方数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect1 = Stream.iterate(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, i -&amp;gt; i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).limit(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect1); &lt;span class=&#34;comment&#34;&gt;// [1, 2, 4, 8, 16]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// JDK9 支持，加入一个 Prediction, 判断如何终止。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Integer&amp;gt; collect2 = Stream.iterate(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, i -&amp;gt; i &amp;lt;= &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, i -&amp;gt; i * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(collect2); &lt;span class=&#34;comment&#34;&gt;// [1, 2, 4, 8, 16]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;optional-增强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#optional-增强&#34;&gt;#&lt;/a&gt; Optional 增强&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Since JDK 9&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 提供一个默认的Optional对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 定义一个变量, 可能为空 or not&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; variable = &lt;span class=&#34;string&#34;&gt;&amp;quot;jdk 11&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// jdk 8 支持of(),ofNullable() 转换为Optional对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;String&amp;gt; collect = Optional.of(variable).stream().collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// JDK 8 可以通过 orElse, 当 variable 为空的时候，返回一个默认的字符串值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Optional.ofNullable(variable).orElse(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// jdk 9 提供了提供 or() 返回一个默认Optional对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Optional.empty().or(() -&amp;gt; Optional.of(&lt;span class=&#34;string&#34;&gt;&amp;quot;jdk 11&amp;quot;&lt;/span&gt;)).get();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;inputstream-加强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#inputstream-加强&#34;&gt;#&lt;/a&gt; InputStream 加强&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InputStream&lt;/code&gt;  终于有了一个非常有用的方法： &lt;code&gt;transferTo&lt;/code&gt; ，可以用来将数据直接传输到  &lt;code&gt;OutputStream&lt;/code&gt; ，这是在处理原始数据流时非常常见的一种用法。&lt;/p&gt;
&lt;p&gt;还是举个栗子吧:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 直接将数据写入输出流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; classLoader = ClassLoader.getSystemClassLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; inputStream = classLoader.getResourceAsStream(&lt;span class=&#34;string&#34;&gt;&amp;quot;readFile.txt&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; javastack = File.createTempFile(&lt;span class=&#34;string&#34;&gt;&amp;quot;writeFile&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;txt&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; outputStream = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FileOutputStream(javastack)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inputStream.transferTo(outputStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;string增强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string增强&#34;&gt;#&lt;/a&gt; String 增强&lt;/h3&gt;
&lt;h4 id=&#34;isblank&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#isblank&#34;&gt;#&lt;/a&gt; isBlank&lt;/h4&gt;
&lt;p&gt;判断目标字符串是否是空白字符。&lt;/p&gt;
&lt;p&gt;使用功能上的问题，感觉还是例子来的舒服。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 判断字符串是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 半角空格  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 全角空格  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;　&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 半角空格的unicode字符值  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\u0020&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 全角空格的unicode字符值  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\u3000&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 制表符  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 回车  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 换行  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 各种空白字符拼接  ===&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot; \t\r\n　&amp;quot;&lt;/span&gt;.isBlank());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;stripstripleading与striptrailing&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stripstripleading与striptrailing&#34;&gt;#&lt;/a&gt; strip，stripLeading 与 stripTrailing&lt;/h4&gt;
&lt;p&gt;去除字符串的前后字符串&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 全角空格 + 制表符 + 回车 + 换行 + 半角空格 + &amp;lt;内容&amp;gt; + 全角空格 + 制表符 + 回车 + 换行 + 半角空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; strTest = &lt;span class=&#34;string&#34;&gt;&amp;quot;　\t\r\n 你好 jdk11　\t\r\n &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// strip 去除两边空白字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; + strTest.strip() + &lt;span class=&#34;string&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stripLeading 去除开头的空白字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; + strTest.stripLeading() + &lt;span class=&#34;string&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stripTrailing 去除结尾的空白字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; + strTest.stripTrailing() + &lt;span class=&#34;string&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;repeat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#repeat&#34;&gt;#&lt;/a&gt; repeat&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; strOri = &lt;span class=&#34;string&#34;&gt;&amp;quot;jdk11&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str1 = strOri.repeat(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str2 = strOri.repeat(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(str1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(str2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// repeat传入参数为1时，不会创建一个新的String对象，而是直接返回原来的String对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(str1 == strOri);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;lines&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lines&#34;&gt;#&lt;/a&gt; lines&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 按照换行符拆分字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;demo3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; strContent = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello java\rhello jdk11\nhello world\r\nhello everyone&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// lines方法用 \r 或 \n 或 \r\n 对字符串切割并返回stream对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strContent.lines().forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(strContent.lines().count());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;模块化开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块化开发&#34;&gt;#&lt;/a&gt; 模块化开发&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Java9&lt;/code&gt;  引入了模块化， &lt;code&gt;Java Platform Module System&lt;/code&gt; ， &lt;code&gt;java&lt;/code&gt;  平台模块系统，简称 &lt;code&gt;JPMS&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这里和大家一起做一下。&lt;/p&gt;
&lt;h3 id=&#34;新建两个-module&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建两个-module&#34;&gt;#&lt;/a&gt; 新建两个 module&lt;/h3&gt;
&lt;p&gt;我们新建两个模块 core 和 business。 如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;core-模块配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#core-模块配置&#34;&gt;#&lt;/a&gt; core 模块配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建一个类 RestResult ，表示公共调用的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RestResult&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; T data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Integer code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String errMsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RestResult&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;新建一个  &lt;code&gt;module-info.java&lt;/code&gt; . 声明  &lt;code&gt;module&lt;/code&gt;  信息.   &lt;code&gt;exports&lt;/code&gt;  将  &lt;code&gt;com.fxb.learn.module.core&lt;/code&gt;  这个包下的类都 export 出去。
&lt;ul&gt;
&lt;li&gt;如果是一个 &lt;code&gt;java&lt;/code&gt;  的普通应用，则在  &lt;code&gt;src&lt;/code&gt;  目录下，新建  &lt;code&gt;module-info.java&lt;/code&gt;  文件即可。&lt;/li&gt;
&lt;li&gt;如果是一个 &lt;code&gt;maven&lt;/code&gt;  应用，则需要在  &lt;code&gt;src/main/java&lt;/code&gt;  目录下，新建  &lt;code&gt;module-info.java &lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// core 是module的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; core &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将指定的包下类，export出去&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;exports&lt;/span&gt; com.fxb.learn.&lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt;.core;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;business-模块配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#business-模块配置&#34;&gt;#&lt;/a&gt; business 模块配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;business&lt;/code&gt;  模块下，新建一个  &lt;code&gt;module-info.java&lt;/code&gt; . 文件位置上 &lt;code&gt;core&lt;/code&gt;  模块中的一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; business &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;requires&lt;/span&gt; core;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;Idea&lt;/code&gt;  中配置， &lt;code&gt;business&lt;/code&gt;  模块引用 &lt;code&gt;core&lt;/code&gt;  模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;写个例子看看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写个例子看看&#34;&gt;#&lt;/a&gt; 写个例子看看&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  * 演示模块调用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; RestResult&amp;lt;User&amp;gt; &lt;span class=&#34;title&#34;&gt;getUserById&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RestResult&amp;lt;&amp;gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;fangjiaxiaobai&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;新工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新工具&#34;&gt;#&lt;/a&gt; 新工具&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  还提供了一些新的工具，  &lt;code&gt;REPL&lt;/code&gt;  交互式编程， &lt;code&gt;Low-Overhead Heap Profiling&lt;/code&gt;  (免费的低耗能飞行记录仪和堆分析仪), &lt;code&gt;Flight Recorder&lt;/code&gt;  (黑盒子)&lt;/p&gt;
&lt;h3 id=&#34;repl交互式编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#repl交互式编程&#34;&gt;#&lt;/a&gt;  &lt;code&gt;REPL&lt;/code&gt;  交互式编程&lt;/h3&gt;
&lt;p&gt;你是否使用 j &lt;code&gt;upter&lt;/code&gt; ,  &lt;code&gt;java &lt;/code&gt; 也有了！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  提供了一个新的工具 &lt;code&gt;jshell&lt;/code&gt; ， &lt;code&gt;Java&lt;/code&gt;  终于可以像 &lt;code&gt;python&lt;/code&gt; ， &lt;code&gt;scala&lt;/code&gt;  等语言那样，交互式演示语法了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/jdk8-jdk11-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体命令可以使用  &lt;code&gt;/help&lt;/code&gt;  命令查看。&lt;/p&gt;
&lt;h3 id=&#34;low-overhead-heap-profiling&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#low-overhead-heap-profiling&#34;&gt;#&lt;/a&gt; Low-Overhead Heap Profiling&lt;/h3&gt;
&lt;p&gt;免费的低耗能飞行记录仪和堆分析仪。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;JVMTI&lt;/code&gt;  的 &lt;code&gt;SampledObjectAlloc&lt;/code&gt;  回调提供了一个开销低的 &lt;code&gt;heap&lt;/code&gt;  分析方式提供一个低开销的，为了排错 &lt;code&gt;java&lt;/code&gt;  应用问题，以及 &lt;code&gt;JVM&lt;/code&gt;  问题的数据收集框架。&lt;br&gt;
具有一下功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供用于生产和消费数据作为事件的 &lt;code&gt;API&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提供缓存机制和二进制数据格式&lt;/li&gt;
&lt;li&gt;允许事件配置和事件过滤&lt;/li&gt;
&lt;li&gt;提供 &lt;code&gt;OS&lt;/code&gt; , &lt;code&gt;JVM&lt;/code&gt;  和 &lt;code&gt;JDK&lt;/code&gt;  库的事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flight-recorder&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#flight-recorder&#34;&gt;#&lt;/a&gt; Flight Recorder&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Flight Recorder&lt;/code&gt;  源自飞机的黑盒子。  &lt;code&gt;Flight Recorder&lt;/code&gt;  以前是商业版的特性，在 &lt;code&gt;java11&lt;/code&gt;  当中开源出来，它可以导出事件到文件中，之后可以用 &lt;code&gt;Java Mission Control&lt;/code&gt;  来分析。&lt;/p&gt;
&lt;p&gt;两种启动方式:&lt;/p&gt;
&lt;p&gt;可以在应用启动时配置 &lt;code&gt;java -XX:StartFlightRecording&lt;/code&gt; &lt;br&gt;
 应用启动之后，使用 &lt;code&gt;jcmd&lt;/code&gt;  来录制，如下代码:&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jcmd &amp;lt;pid&amp;gt; JFR.start  &lt;span class=&#34;comment&#34;&gt;# 启动记录仪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ jcmd &amp;lt;pid&amp;gt; JFR.dump.filename=recording.jfr  &lt;span class=&#34;comment&#34;&gt;# 将记录内容保存到文件里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ jcmd &amp;lt;pid&amp;gt; JFR.stop  &lt;span class=&#34;comment&#34;&gt;# 停止记录仪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过在  &lt;code&gt;jdk11&lt;/code&gt;  是没办法查看  &lt;code&gt;jfr&lt;/code&gt;  的。如果想看，安装  &lt;code&gt;jdk12&lt;/code&gt;  吧。 不，可以试试  &lt;code&gt;jdk16&lt;/code&gt;  ,   &lt;code&gt;jdk16&lt;/code&gt;  也是 &lt;code&gt;LTS&lt;/code&gt;  版本！・&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JFR 是一套集成进入 JDK、JVM 内部的事件机制框架，通过良好架构和设计的框架，硬件层面的极致优化，生产环境的广泛验证，它可以做到极致的可靠和低开销。在 SPECjbb2015 等基准测试中，JFR 的性能开销最大不超过 1%，所以，工程师可以基本没有心理负担地在大规模分布式的生产系统使用，这意味着，我们既可以随时主动开启 JFR 进行特定诊断，也可以让系统长期运行 JFR, 用以在复杂环境中进行 &amp;quot;After-the-fact&amp;quot; 分析。还需要苦恼重现随机问题吗？JFR 让问题简化了很多&lt;br&gt;
在保证低开销的基础上，JFR 提供的能力也令人眼前一亮，例如：我们无需 BCI 就可以进行 Object Allocation Profiling， 终于不用担心 BTrace 之类把进程搞挂了。对锁竞争、阻塞、延迟，JVM GC、SafePoint 等领域，进行非常细粒度分析。甚至深入 JIT Compiler 内部，全面把握热点方法、内联、逆优化等等。JFR 提供了标准的 Java,C++ 等扩展 API, 可以与各种层面的应用进行定制、集成，为复杂的企业应用栈或者复杂的分布式应用，提供 All-in-One 解决方案。而这一切都是内建在 JDK 和 JVM 内部的，并不需要额外的依赖，开箱即用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;新功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新功能&#34;&gt;#&lt;/a&gt; 新功能&lt;/h2&gt;
&lt;h3 id=&#34;httpclient&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#httpclient&#34;&gt;#&lt;/a&gt; HttpClient&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;JDK 9&lt;/code&gt;  开始引入 &lt;code&gt;HttpClient API&lt;/code&gt;  来处理 &lt;code&gt;HTTP&lt;/code&gt;  请求。 从 &lt;code&gt;JDK 11&lt;/code&gt;  开始，这个・正式进入标准库包。&lt;br&gt;
参考网址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29wZW5qZGsuamF2YS5uZXQvZ3JvdXBzL25ldC9odHRwY2xpZW50L2ludHJvLmh0bWw=&#34;&gt;http://openjdk.java.net/groups/net/httpclient/intro.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt;  具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持  &lt;code&gt;HTTP1.1&lt;/code&gt;  和  &lt;code&gt;HTTP2&lt;/code&gt; ,  &lt;code&gt;websocket&lt;/code&gt;  协议&lt;/li&gt;
&lt;li&gt;支持同步和异步编程模型&lt;/li&gt;
&lt;li&gt;将请求和响应主体作为响应式流 ( &lt;code&gt;reactive-streams&lt;/code&gt; ) 处理，并使用构建器模式&lt;/li&gt;
&lt;li&gt;要发送 &lt;code&gt;http&lt;/code&gt;  请求，首先要使用其构建器创建一个 &lt;code&gt;HttpClient&lt;/code&gt; 。这个构建器能够配置每个客户端的状态：
&lt;ul&gt;
&lt;li&gt;首选协议版本 (  &lt;code&gt;HTTP/1.1&lt;/code&gt;  或  &lt;code&gt;HTTP/2&lt;/code&gt;  )&lt;/li&gt;
&lt;li&gt;是否跟随重定向&lt;/li&gt;
&lt;li&gt;代理&lt;/li&gt;
&lt;li&gt;身份验证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦构建完成，就可以使用 &lt;code&gt;HttpClient&lt;/code&gt;  发送多个请求。&lt;/p&gt;
&lt;h4 id=&#34;httprequest&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#httprequest&#34;&gt;#&lt;/a&gt; HttpRequest&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HttpRequest&lt;/code&gt;  是由它的构建器创建的。请求的构建器可用于设置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求 &lt;code&gt;URI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求 &lt;code&gt;Method&lt;/code&gt;  (  &lt;code&gt;GET&lt;/code&gt; ,  &lt;code&gt;PUT&lt;/code&gt; ,  &lt;code&gt;POST&lt;/code&gt;  )&lt;/li&gt;
&lt;li&gt;请求主体 (如果有)&lt;/li&gt;
&lt;li&gt;超时时间&lt;/li&gt;
&lt;li&gt;请求头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;HttpRequest&lt;/code&gt;  构建之后是不可变的，但可以发送多次。&lt;/p&gt;
&lt;h4 id=&#34;synchronous-or-asynchronous&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#synchronous-or-asynchronous&#34;&gt;#&lt;/a&gt; Synchronous or Asynchronous&lt;/h4&gt;
&lt;p&gt;请求既可以同步发送，也可以异步发送。当然同步的 &lt;code&gt;API&lt;/code&gt;  会导致线程阻塞直到 &lt;code&gt;HttpResponse&lt;/code&gt;  可用。异步 &lt;code&gt;API&lt;/code&gt;  立即返回一个 &lt;code&gt;CompletableFuture&lt;/code&gt; ，当 &lt;code&gt;HttpResponse&lt;/code&gt;  可用时，它将获取 &lt;code&gt;HttpResponse&lt;/code&gt;  并执行后续处理。&lt;/p&gt;
&lt;h4 id=&#34;data-as-reactive-streams&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#data-as-reactive-streams&#34;&gt;#&lt;/a&gt; Data as reactive-streams&lt;/h4&gt;
&lt;p&gt;请求和响应的主体作为响应式流 (具有非阻塞背压的异步数据流) 供外部使用。 &lt;code&gt;HttpClient&lt;/code&gt;  实际上是请求正文的订阅者和响应正文字节的发布者。 &lt;code&gt;BodyHandler&lt;/code&gt;  接口允许在接收实际响应体之前检查响应代码和报头，并负责创建响应 &lt;code&gt;BodySubscriber&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpRequest&lt;/code&gt;  和 &lt;code&gt;HttpResponse&lt;/code&gt;  类型提供了许多便利的工厂方法，用于创建请求发布者和响应订阅者，以处理常见的主体类型，如文件、字符串和字节。这些便利的实现要么累积数据，直到可以创建更高级别的 &lt;code&gt;Java&lt;/code&gt;  类型（如 &lt;code&gt;String&lt;/code&gt; ），要么就文件流传输数据。 &lt;code&gt;BodySubscriber&lt;/code&gt;  和 &lt;code&gt;BodyPublisher&lt;/code&gt;  接口可以实现为自定义反应流处理数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpRequest&lt;/code&gt;  和 &lt;code&gt;HttpResponse&lt;/code&gt;  还提供了转换器，用于将  &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt;  的  &lt;code&gt;Publisher/Subscriber&lt;/code&gt;  类型转换为  &lt;code&gt;HTTP Client&lt;/code&gt;  的  &lt;code&gt;BodyPublisher/BodySubscriber&lt;/code&gt;  类型。&lt;/p&gt;
&lt;h4 id=&#34;请求协议-http2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#请求协议-http2&#34;&gt;#&lt;/a&gt; 请求协议 HTTP/2&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Java HTTP Client&lt;/code&gt;  支持  &lt;code&gt;HTTP/1.1&lt;/code&gt;  和  &lt;code&gt;HTTP/2&lt;/code&gt; 。默认情况下，客户端将使用  &lt;code&gt;HTTP/2&lt;/code&gt;  发送请求。发送到尚不支持  &lt;code&gt;HTTP/2 &lt;/code&gt; 的服务器的请求将自动降级为  &lt;code&gt;HTTP/1.1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下是 &lt;code&gt;HTTP/2&lt;/code&gt;  带来的主要改进:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标头压缩。 HTTP/2 使用 HPACK 压缩，从而减少了开销。&lt;/li&gt;
&lt;li&gt;与服务器的单一连接减少了建立多个 TCP 连接所需的往返次数。&lt;/li&gt;
&lt;li&gt;多路复用。 在同一连接上，同时允许多个请求。&lt;/li&gt;
&lt;li&gt;服务器推送。 可以将其他将来需要的资源发送给客户端。&lt;/li&gt;
&lt;li&gt;二进制格式。 更紧凑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 &lt;code&gt;HTTP/2&lt;/code&gt;  是默认的首选协议，并且在需要的地方无缝地实现回退到 &lt;code&gt;HTTP/1.1&lt;/code&gt; ，那么当 &lt;code&gt;HTTP/2&lt;/code&gt;  被更广泛地部署时， &lt;code&gt;Java HTTP&lt;/code&gt;  客户端就无需修正它的应用代码。&lt;/p&gt;
&lt;p&gt;具体的 &lt;code&gt;Java Doc&lt;/code&gt;  可以参考: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5uZXQuaHR0cC9qYXZhL25ldC9odHRwL3BhY2thZ2Utc3VtbWFyeS5odG1s&#34;&gt;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;看了  &lt;code&gt;Java Doc&lt;/code&gt; , 感觉使用起来比较简单。这里就不举例了。感兴趣的朋友，可以自行深入研究一下。&lt;/p&gt;
&lt;h3 id=&#34;源代码直接执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源代码直接执行&#34;&gt;#&lt;/a&gt; 源代码直接执行&lt;/h3&gt;
&lt;p&gt;一个单文件源代码，也就是说，单独的 &lt;code&gt;java&lt;/code&gt;  文件，有 &lt;code&gt;main&lt;/code&gt;  方法，且只依赖 &lt;code&gt;jdk&lt;/code&gt;  类库以及自己文件内部定义的类，可以直接用 &lt;code&gt;java&lt;/code&gt;  执行而无需先编译再执行编译后的 &lt;code&gt;class&lt;/code&gt;  文件了。&lt;/p&gt;
&lt;p&gt;你可能问了，有什么用呢？我平时也不关系它是否生成了 &lt;code&gt;class&lt;/code&gt;  文件。&lt;/p&gt;
&lt;p&gt;如果你是做数据相关的工作，可能需要写一些脚本的时候，这却是轻松了很多。&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;➜  learn git:(master) ✗ ll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;total 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;➜  learn git:(master) ✗ java SourceCodeExecDemo.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.解析数据格式.....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.处理数据.....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.重组数据.....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;➜  learn git:(master) ✗ ll                          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;total 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rw-r--r--  1 wangxiyue  staff   411B Nov  9 22:58 SourceCodeExecDemo.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到确实没有  &lt;code&gt;class&lt;/code&gt;  文件生成。&lt;/p&gt;
&lt;h3 id=&#34;完全支持linux容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完全支持linux容器&#34;&gt;#&lt;/a&gt; 完全支持 Linux 容器&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;Docker&lt;/code&gt;  容器中运行 &lt;code&gt;Java&lt;/code&gt;  应用程序一直存在一个问题，那就是在容器中运行的 &lt;code&gt;JVM&lt;/code&gt;  程序在设置内存大小和 &lt;code&gt;CPU&lt;/code&gt;  使用率后，会导致应用程序的性能下降。这是因为 &lt;code&gt;Java&lt;/code&gt;  应用程序没有意识到它正在容器中运行。随着 &lt;code&gt;Java10&lt;/code&gt;  的发布，这个问题总算得以解诀， &lt;code&gt;JVM&lt;/code&gt;  现在可以识别由容器控制组 ( &lt;code&gt;cgroups&lt;/code&gt; ) 设置的约束，可以在容器中使用内存和 &lt;code&gt;CPU&lt;/code&gt;  约束来直接管理 &lt;code&gt;Java&lt;/code&gt;  应用程序，其中包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遵守容器中设置的内存限制&lt;/li&gt;
&lt;li&gt;在容器中设置可用的 &lt;code&gt;CPU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在容器中设置 &lt;code&gt;CPU&lt;/code&gt;  约束&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持unicode-10&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持unicode-10&#34;&gt;#&lt;/a&gt; 支持 Unicode 10&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Unicode 10&lt;/code&gt;  新增了 &lt;code&gt;8518&lt;/code&gt;  个字符，总计达到了 &lt;code&gt;136690&lt;/code&gt;  个字符。包括 &lt;code&gt;56&lt;/code&gt;  个新的 &lt;code&gt;emoji&lt;/code&gt;  表情符号。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK11&lt;/code&gt;  在 &lt;code&gt;java.lang&lt;/code&gt;  下增加了 4 个类来处理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CharacterData00.class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CharacterData01.class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CharacterData02.class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CharacterData0E.class&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新支持的加密算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新支持的加密算法&#34;&gt;#&lt;/a&gt; 新支持的加密算法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  实现了 &lt;code&gt;RFC7539&lt;/code&gt;  中指定的 &lt;code&gt;ChaCha20&lt;/code&gt;  和 &lt;code&gt;Poly1305&lt;/code&gt;  两种加密算法，代替 &lt;code&gt;RC4&lt;/code&gt; 。&lt;br&gt;
 &lt;code&gt;RFC7748&lt;/code&gt;  定义的密钥协商方案更高效，更安全， &lt;code&gt;JDK&lt;/code&gt;  增加了两个新的接口 &lt;code&gt;XECPublicKey&lt;/code&gt;  和 &lt;code&gt;XECPrivateKey&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;垃圾回收器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#垃圾回收器&#34;&gt;#&lt;/a&gt; 垃圾回收器&lt;/h2&gt;
&lt;h3 id=&#34;zgc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zgc&#34;&gt;#&lt;/a&gt; ZGC&lt;/h3&gt;
&lt;p&gt;启用方法： &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseZGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;说明： &lt;code&gt;ZGC&lt;/code&gt; , &lt;code&gt; A Scalable Low-Latency Garbage collector&lt;/code&gt; (  &lt;code&gt;Experimental&lt;/code&gt; ) ，一个可伸缩的低延时的垃圾回收器。 &lt;code&gt;GC&lt;/code&gt;  暂停时间不会超过 &lt;code&gt;10ms&lt;/code&gt; ，既能处理几百兆的小堆，也能处理几个 &lt;code&gt;T&lt;/code&gt;  的大堆。和 &lt;code&gt;G1&lt;/code&gt;  相比，应用吞吐能力不会下降超过 &lt;code&gt;15%&lt;/code&gt; ，为未来的 &lt;code&gt;GC&lt;/code&gt;  功能和利用 &lt;code&gt;colord&lt;/code&gt;  指针以及 &lt;code&gt;Load barriers&lt;/code&gt;  优化奠定了基础。初始只支持 &lt;code&gt;64&lt;/code&gt;  位系统。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZGC&lt;/code&gt;  的设计目标是：支持 &lt;code&gt;TB&lt;/code&gt;  级内存容量，暂停时间低 ( &lt;code&gt;&amp;lt;10ms&lt;/code&gt; )，对整个程序吞吐量的影响小于 &lt;code&gt;15%&lt;/code&gt; 。将来还可以扩 展实现机制，以支持不少令人兴奋的功能，例如多层堆 (即热对象置于 &lt;code&gt;DRAM&lt;/code&gt;  和冷对象置于 &lt;code&gt;NVMe&lt;/code&gt;  闪存)，或压缩堆。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GC&lt;/code&gt;  是 &lt;code&gt;java&lt;/code&gt;  主要优势之一。然而，当 &lt;code&gt;GC&lt;/code&gt;  停顿太长，就会开始影响应用的响应时间。消除或者减少 &lt;code&gt;GC&lt;/code&gt;  停顿时长， &lt;code&gt;java&lt;/code&gt;  将有可能在更广泛的应用场景中成长为一个更有吸引力的平台。此外，现代系统中可用内存不断增长，用户和程序员希望 &lt;code&gt;JVM&lt;/code&gt;  能够以高效的方式充分利用这些内存，并且无需长时间的 &lt;code&gt;GC&lt;/code&gt;  暂停时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZGC&lt;/code&gt;  是一个并发，基于 &lt;code&gt;region&lt;/code&gt; , 压缩型的垃圾收集器，只有 &lt;code&gt;root&lt;/code&gt;  扫描阶段会 &lt;code&gt;STW&lt;/code&gt; , 因此 &lt;code&gt;GC&lt;/code&gt;  停顿时间不会随着堆的增长和存活对象的增长而变长。&lt;/p&gt;
&lt;h3 id=&#34;epsilon&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#epsilon&#34;&gt;#&lt;/a&gt; Epsilon&lt;/h3&gt;
&lt;p&gt;实验性质，生产环境不建议使用。&lt;/p&gt;
&lt;p&gt;启用方法： &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;说明：开发一个处理内存分配但不实现任何实际内存回收机制的 &lt;code&gt;GC&lt;/code&gt; , 一旦可用堆内存用完， &lt;code&gt;JVM&lt;/code&gt;  就会退出，如果有 &lt;code&gt;System.gc()&lt;/code&gt;  调用，实际上什么也不会发生 (这种场景下和 &lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt;  效果一样), 因为没有内存回收，这个实现可能会警告用户尝试强制 &lt;code&gt;GC&lt;/code&gt;  是徒劳的。&lt;/p&gt;
&lt;p&gt;主要用途如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能测试 (它可以帮助过滤掉 &lt;code&gt;GC&lt;/code&gt;  引起的性能假象)&lt;/li&gt;
&lt;li&gt;内存压力测试 (例如，知道测试用例应该分配不超过 &lt;code&gt;1GB&lt;/code&gt;  的内存，我们可以使用 &lt;code&gt;-Xmx1g -XX:+UseEpsilonGC&lt;/code&gt; ，如果程序有问题，则程序会崩溃。&lt;/li&gt;
&lt;li&gt;非常短的 &lt;code&gt;JOB&lt;/code&gt;  任务 (对于这种任务， &lt;code&gt;GC&lt;/code&gt;  是在浪费资源)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VM&lt;/code&gt;  接口测试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-drop&lt;/code&gt;  延迟 &amp;amp; 吞吐改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更好的g1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更好的g1&#34;&gt;#&lt;/a&gt; 更好的 G1&lt;/h3&gt;
&lt;p&gt;对于 &lt;code&gt;G1 GC&lt;/code&gt; , 相比于 &lt;code&gt;JDK8&lt;/code&gt; , 升级到 &lt;code&gt;JDK 11&lt;/code&gt;  即可免费享受到：并行的 &lt;code&gt;Full GC&lt;/code&gt; , 快速的 &lt;code&gt;CardTable&lt;/code&gt;  扫描，自适应的堆占用比例调整 ( &lt;code&gt;IHOP&lt;/code&gt; ), 在并发标记阶段的类型卸载等等。这些都是针对 &lt;code&gt;G1&lt;/code&gt;  的不断增强，其中串行 &lt;code&gt;FullGC&lt;/code&gt;  等甚至是曾经被广泛诟病的短板，你会发现 &lt;code&gt;GC&lt;/code&gt;  配置和调优在 &lt;code&gt;JDK11&lt;/code&gt;  中越来越方便。&lt;/p&gt;
&lt;h2 id=&#34;移除与不再推荐使用的类库或功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除与不再推荐使用的类库或功能&#34;&gt;#&lt;/a&gt; 移除与不再推荐使用的类库或功能&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Jdk9&lt;/code&gt;  到 &lt;code&gt;Jdk11&lt;/code&gt; ，陆续移除了一些类库或功能。&lt;/p&gt;
&lt;h3 id=&#34;移除了java-ee和corba-moudles&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除了java-ee和corba-moudles&#34;&gt;#&lt;/a&gt; 移除了 Java EE 和 CORBA Moudles&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;java11&lt;/code&gt;  中移除了不太使用的 &lt;code&gt;JavaEE&lt;/code&gt;  模块和 &lt;code&gt;CORBA&lt;/code&gt;  技术。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CORBA&lt;/code&gt;  来自于二十世纪九十年代， &lt;code&gt;Oracle&lt;/code&gt;  认为，现在用 &lt;code&gt;CORBA&lt;/code&gt;  开发现代 &lt;code&gt;Java&lt;/code&gt;  应用程序已经没有意义了，维护 &lt;code&gt;CORBA&lt;/code&gt;  的成本已经超过了保留它带来的好处。&lt;/p&gt;
&lt;p&gt;但是删除 &lt;code&gt;CORBA&lt;/code&gt;  将使得那些依赖于 &lt;code&gt;JDK&lt;/code&gt;  提供部分 &lt;code&gt;CORBAAPI&lt;/code&gt;  的 &lt;code&gt;CORBA&lt;/code&gt;  实现无法运行。目前还没有第三方 &lt;code&gt;CORBA&lt;/code&gt;  版本，也不确定是否会有第三方愿意接手 &lt;code&gt;CORBA API&lt;/code&gt;  的维护工作。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;java11&lt;/code&gt;  中将 &lt;code&gt;java9&lt;/code&gt;  标记废弃的 &lt;code&gt;Java EE&lt;/code&gt;  及 &lt;code&gt;CORBA&lt;/code&gt;  模块移除掉，具体如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xml&lt;/code&gt;  相关被移除的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.xml.ws&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.xml.bind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.xml.ws&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.xml.ws.annotation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jdk.xml.bind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jdk.xml.ws&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只剩下 &lt;code&gt;java.xml&lt;/code&gt; ,  &lt;code&gt;java.xml.crypto.jdk.xml.dom&lt;/code&gt;  这几个模块。&lt;/p&gt;
&lt;p&gt;其它被移除的 Java EE 和 CORBA 相关类库:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.corba&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.se.ee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.activation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.transaction&lt;/code&gt;  (但是 &lt;code&gt;java11&lt;/code&gt;  新增了一个 &lt;code&gt;java.transaction.xa&lt;/code&gt;  模块)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他移除的类库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他移除的类库&#34;&gt;#&lt;/a&gt; 其他移除的类库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.awt.AWTUtilities&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sun.miss.Unsafe.defineClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.destroy()&lt;/code&gt;  以及  &lt;code&gt;Thread.stop(Throwable)&lt;/code&gt;  方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sun.nio.ch.disableSystemWideOverlappingFileLockCheck&lt;/code&gt;  属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sun.locale.formatasdefault&lt;/code&gt;  属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jdk snmp&lt;/code&gt;  模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javafx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java Mission Control&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Root Certificates&lt;/code&gt; : 一些根证书被移除： &lt;code&gt;Baltimore Cybertrust Code Signing CA, SECOM Root Certificate, AOL and Swisscom Root Certificates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，使用 &lt;code&gt;java.lang.invoke.MethodHandles.Lookup.defineClass&lt;/code&gt;  来替代移除的 &lt;code&gt;sun.miss.Unsafe.defineClass&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;将nashorn-javascript标记为不推荐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将nashorn-javascript标记为不推荐&#34;&gt;#&lt;/a&gt; 将 Nashorn Javascript 标记为不推荐&lt;/h3&gt;
&lt;p&gt;将 &lt;code&gt;Javascript&lt;/code&gt;  引擎标记为 &lt;code&gt;Deprecate&lt;/code&gt; ，后续版本会移除，有需要的可以考虑使用开源的 &lt;code&gt;GraalVM&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;将pack200-tools-and-api标记为不推荐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将pack200-tools-and-api标记为不推荐&#34;&gt;#&lt;/a&gt; 将 Pack200 Tools and API 标记为不推荐&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;java11&lt;/code&gt;  中将 &lt;code&gt;pack200&lt;/code&gt;  以及 &lt;code&gt;unpack200&lt;/code&gt;  工具以及 &lt;code&gt;java.tiljar&lt;/code&gt;  中的 &lt;code&gt;Pack200 API&lt;/code&gt;  标记为 &lt;code&gt;Deprecate&lt;/code&gt; 。因为 &lt;code&gt;Pack200&lt;/code&gt;  主要是用来压缩 &lt;code&gt;jar&lt;/code&gt;  包的工具，由于网络下载速度的提升以及 &lt;code&gt;java9&lt;/code&gt;  引入模块化系统之后不再依赖 &lt;code&gt;Pack200&lt;/code&gt; ，因此这个版本将其标记为 &lt;code&gt;Deprecate&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;预告&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#预告&#34;&gt;#&lt;/a&gt; 预告&lt;/h2&gt;
&lt;p&gt;继 &lt;code&gt;LTS JDK8&lt;/code&gt;  之后，又一 &lt;code&gt;LTS&lt;/code&gt; , 你会用吗？ &lt;code&gt;JDK16&lt;/code&gt; , 它来了。&lt;/p&gt;
&lt;h2 id=&#34;对了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对了&#34;&gt;#&lt;/a&gt; 对了&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JDK11&lt;/code&gt;  写  &lt;code&gt;JDK8&lt;/code&gt;  的代码？&lt;/p&gt;
&lt;p&gt;代码始终是代码，写的再多，写不懂你我。&lt;/p&gt;
&lt;p&gt;多看一点，就比其他们多懂一点。所以，你关不关注我，问题不大！&lt;/p&gt;
&lt;p&gt;人情世故。不是世故，就是事故。问题真的不大。&lt;/p&gt;
&lt;p&gt;文中所有代码，在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vZmFuZ2ppYXhpYW9iYWkvbGVhcm5famF2YS90cmVlL21hc3Rlci9meGJfamRrMTE=&#34;&gt;https://gitee.com/fangjiaxiaobai/learn_java/tree/master/fxb_jdk11&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;希望和你一起遇见更好的自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/java/jdk/versions/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
